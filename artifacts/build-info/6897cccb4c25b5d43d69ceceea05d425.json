{"id":"6897cccb4c25b5d43d69ceceea05d425","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"contracts/interface/IPaycrest.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @author Paycrest Team\n * Factory and global config params\n */\ninterface IPaycrest {\n    \n    /* ##################################################################\n                                EVENTS\n    ################################################################## */\n    /// @dev Emitted when deposit is made.\n    event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash);\n    /// @dev Emitted when aggregator settle transaction.\n    event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent);\n    /// @dev Emitted when aggregator refund transaction.\n    event Refunded(uint256 _fee, bytes32 indexed orderId, bytes32 label);\n    /// @dev Emitted when sender get their rewards.\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\n    /// @dev Emitted when primary validator get their rewards.\n    event RewardValidator(address indexed validator, uint256 indexed amount);\n\n\n    /* ##################################################################\n                                STRUCTS\n    ################################################################## */\n    struct TransactionMetadata {\n        bytes8 identifier;                 //                                                                   slot 0\n        bytes8 institution;                //                                                                   slot 0\n        bytes8 name;                       //                                                                   slot 0\n        bytes8 currency;                   //                                                                   slot 0\n        uint256 liquidityProviderID;       //                                                                   slot 1\n    }\n\n    struct Order {\n        address seller;                     //                                                                   slot 0\n        address token;                      //                                                                   slot 1\n        address senderFeeRecipient;\n        uint256 senderFee;\n        uint96 rate;                        //                                                                   slot 1\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\n        uint96 currentBPS;                  //                                                                   slot 2 {}\n        uint256 amount;                     //                                                                   slot 3\n    }\n\n    /* ##################################################################\n                                EXTERNAL CALLS\n    ################################################################## */\n    /// @notice lock sender `_amount` of `token` into Paycrest.\n    /// Requirements:\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\n    /// `amount` must be greater than minimum\n    /// `_refundable` refundable address must not be zero address\n    /// @param _token address of the token.\n    /// @param _amount amount in the decimal of `_token` above.\n    /// @param _institutionCode institution code of the sender.\n    /// @param _label reference of the sender.\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\n    /// @param _senderFeeRecipient address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\n    /// @param _senderFee amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\n    /// @return _orderId the bytes20 which is the orderId\n    function createOrder(\n        address _token, \n        uint256 _amount, \n        bytes32 _institutionCode,\n        bytes32 _label,\n        uint96 _rate, \n        address _senderFeeRecipient,\n        uint256 _senderFee,\n        address _refundAddress, \n        string calldata messageHash)  external returns(bytes32 _orderId);\n\n    /// @notice settle transaction and distribute rewards accordingly.\n    /// Requirements:\n    /// {only aggregators call}.\n    /// `_orderId` it must be less than total ids.\n    /// `_orderId` it must be an open Id.\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\n    /// `amount` must be greater than minimum\n    /// `_refundable` refundable address must not be zero address\n    /// @param _orderId transaction Id.\n    /// @param _label reference of the sender.\n    /// @param _liquidityProvider address of the liquidity provider.\n    /// @param _settlePercent rate at which the transaction is settled.\n    /// @param _isPartner is the liquidity provider a partner.\n    /// @return return the status of transaction {bool}\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address _liquidityProvider, uint64 _settlePercent, bool _isPartner)  external returns(bytes32, address);\n\n    /// @notice refund to the specified refundable address.\n    /// Requirements:\n    /// {only aggregators call}.\n    /// `_orderId` it must be less than total ids.\n    /// `_orderId` it must be an open Id.\n    /// `isFulfilled` must be false.\n    /// @param _fee amount to be deducted from the amount to be refunded\n    /// @param _orderId transaction Id.\n    /// @param _label reference of the sender.\n    /// @return return the status of transaction {bool}\n    function refund(uint256 _fee, bytes32 _orderId, bytes32 _label)  external returns(bool);\n\n    /// @notice get supported token from Paycrest.\n    /// @param _token address of the token to check.\n    /// @return return the status of `_token` {bool}\n    function isTokenSupported(address _token) external view returns(bool);\n\n    /// @notice get order details.\n    /// @param _orderId transaction Id.\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\n\n    /// @notice get every rewards and address on Paycrest.\n    /// @return protocolReward amount that will be taken in percentage on all trade.\n    /// @return max_bps maximum amount in bps \"100% == 100_000\".\n    function getFeeDetails() external view returns(\n        uint64 protocolReward, \n        uint256 max_bps\n    );\n\n    /// @notice get public key of liquidity aggregator.\n    /// @return aggregator public key.\n    function getAggregator() external view returns(bytes memory);\n}\n"},"contracts/Paycrest.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {PaycrestSettingManager} from \"./PaycrestSettingManager.sol\";\nimport {IPaycrest, IERC20} from \"./interface/IPaycrest.sol\";\n\n\ncontract Paycrest is IPaycrest, PaycrestSettingManager, PausableUpgradeable { \n    using SafeERC20Upgradeable for IERC20;\n    using ECDSAUpgradeable for bytes32;\n\n    struct fee {\n        uint256 protocolFee;\n        uint256 liquidityProviderAmount;\n    }\n\n    mapping(bytes32 => Order) private order;\n    mapping(address => uint256) private _nonce;\n    uint256[50] private __gap;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize() external initializer {\n        MAX_BPS = 100_000;\n        __Ownable_init();\n        __Pausable_init();\n    }\n\n    modifier onlyAggregator {\n        require(msg.sender == _aggregatorAddress, \"OnlyAggregator\");\n        _;\n    }\n\n    /* ##################################################################\n                                OWNER FUNCTIONS\n    ################################################################## */\n    /** @dev pause */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /** @dev unpause */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n    \n    /* ##################################################################\n                                USER CALLS\n    ################################################################## */\n    /** @dev See {createOrder-IPaycrest}. */\n    function createOrder(\n        address _token, \n        uint256 _amount, \n        bytes32 _institutionCode,\n        bytes32 _label,\n        uint96 _rate, \n        address _senderFeeRecipient,\n        uint256 _senderFee,\n        address _refundAddress, \n        string calldata messageHash\n    ) external whenNotPaused() returns(bytes32 orderId) {\n        // checks that are required\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _senderFee, _institutionCode);\n\n        // transfer token from msg.sender to contract\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n\n        // increase users nonce to avoid replay attacks\n        _nonce[msg.sender] ++;\n\n        // generate transaction id for the transaction\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\n\n        // update transaction\n        order[orderId] = Order({\n            seller: msg.sender,\n            token: _token,\n            senderFeeRecipient: _senderFeeRecipient,\n            senderFee: _senderFee,\n            rate: _rate,\n            isFulfilled: false,\n            refundAddress: _refundAddress,\n            currentBPS: uint64(MAX_BPS),\n            amount: _amount\n        });\n\n        // emit deposit event\n        emit Deposit(_token, _amount, orderId, _rate, _institutionCode, _label, messageHash);\n    }\n\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, uint256 _senderFee, bytes32 _institutionCode) internal view {\n        require(_isTokenSupported[_token], \"TokenNotSupported\");\n        require(_amount > 0, \"AmountIsZero\");\n        require(_refundAddress != address(0), \"ThrowZeroAddress\");\n        require(supportedInstitutionsByCode[_institutionCode].name != bytes32(0), \"InvalidInstitutionCode\");\n\n        if (_senderFee > 0) {\n            require(_senderFeeRecipient != address(0), \"InvalidSenderFeeRecipient\");\n        }\n        require(_senderFee <= (_amount * 500) / MAX_BPS, \"SenderFeeTooHigh\");\n    }\n\n    /* ##################################################################\n                                AGGREGATOR FUNCTIONS\n    ################################################################## */\n    /** @dev See {settle-IPaycrest}. */\n    function settle(\n        bytes32 _splitOrderId,\n        bytes32 _orderId, \n        bytes32 _label,\n        address _liquidityProvider, \n        uint64 _settlePercent,\n        bool _isPartner\n        )  external onlyAggregator() returns(bytes32, address) {\n        // ensure the transaction has not been fulfilled\n        require(!order[_orderId].isFulfilled, \"OrderFulfilled\");\n\n        // load the token into memory\n        address token = order[_orderId].token;\n\n        // subtract sum of amount based on the input _settlePercent\n        order[_orderId].currentBPS -= _settlePercent;\n\n        // if transaction amount is zero\n        // load the fees and transfer associated protocol fees to the protocol fee recipient\n        ( fee memory _feeParams  ) = _calculateFees(_orderId, _settlePercent, _isPartner);\n        if(order[_orderId].currentBPS == 0) {\n            // update the transaction to be fulfilled\n            order[_orderId].isFulfilled = true;\n            if (order[_orderId].senderFee > 0) {\n                // transfer sender fee\n                transferSenderFee(_orderId);\n            }\n        }\n        \n        if (_feeParams.protocolFee > 0) {\n            // transfer protocol fee\n            IERC20(token).transfer(treasuryAddress, _feeParams.protocolFee);\n        }\n\n        // transfer to liquidity provider \n        IERC20(token).transfer(_liquidityProvider, _feeParams.liquidityProviderAmount);\n\n        // emit event\n        emit Settled(_splitOrderId, _orderId, _label,  _liquidityProvider, _settlePercent);\n        return (_orderId, token);\n    }\n\n    function transferSenderFee(bytes32 _orderId) internal {\n        address recipient = order[_orderId].senderFeeRecipient;\n        uint256 _fee = order[_orderId].senderFee;\n        // transfer sender fee\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\n        // emmit event\n        emit TransferSenderFee(recipient, _fee);\n    }\n\n    /** @dev See {refund-IPaycrest}. */\n    function refund(uint256 _fee, bytes32 _orderId, bytes32 _label) external onlyAggregator() returns(bool) {\n        // ensure the transaction has not been fulfilled\n        require(!order[_orderId].isFulfilled, \"OrderFulfilled\");\n\n        // deduct fee from order amount\n        uint256 refundAmount = order[_orderId].amount - _fee;\n        IERC20(order[_orderId].token).transfer(treasuryAddress, _fee);\n\n        // reset state values\n        order[_orderId].isFulfilled = true;\n        order[_orderId].currentBPS = 0;\n    \n        // transfer to sender and emit event\n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, refundAmount);\n        emit Refunded(_fee, _orderId, _label);\n\n        return true;\n    }\n\n    function _calculateFees(bytes32 _orderId, uint96 _settlePercent, bool _isPartner) private view returns(fee memory _feeParams ) {\n        // get the total amount associated with the orderId\n        uint256 amount = order[_orderId].amount;\n\n        // get sender fee from amount\n        amount = amount - order[_orderId].senderFee;\n\n        // get the settled percent that is scheduled for this amount\n        _feeParams.liquidityProviderAmount = (amount * _settlePercent) / MAX_BPS;\n\n        // deduct protocol fees from the new total amount\n        _feeParams.protocolFee = (_feeParams.liquidityProviderAmount * protocolFeePercent) / MAX_BPS;\n        \n        // substract total fees from the new amount after getting the scheduled amount\n        _feeParams.liquidityProviderAmount = (_feeParams.liquidityProviderAmount - _feeParams.protocolFee);\n\n        // if (_isPartner) protocol fee should be 0, and the whole protocol fee should be added to liquidity provider\n        if (_isPartner) {\n            _feeParams.liquidityProviderAmount += _feeParams.protocolFee;\n            _feeParams.protocolFee = 0;\n        }\n    }\n    \n    /* ##################################################################\n                                VIEW CALLS\n    ################################################################## */\n    /** @dev See {getOrderInfo-IPaycrest}. */\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\n        return order[_orderId];\n    }\n\n    /** @dev See {isTokenSupported-IPaycrest}. */\n    function isTokenSupported(address _token) external view returns(bool) {\n        return _isTokenSupported[_token];\n    }\n\n    /** @dev See {getSupportedInstitutionName-IPaycrest}. */\n    function getSupportedInstitutionName(bytes32 code) external view returns (InstitutionByCode memory) {\n        return supportedInstitutionsByCode[code];\n    }\n\n    function getSupportedInstitutions(bytes32 currency) external view returns (Institution[] memory) {\n        Institution[] memory institutions = supportedInstitutions[currency];\n        uint256 length = institutions.length;\n        Institution[] memory result = new Institution[](length);\n        \n        for (uint256 i = 0; i < length; ) {\n            result[i] = institutions[i];\n            unchecked {\n                i++;\n            }\n        }\n        \n        return result;\n    }\n\n    /** @dev See {getFeeDetails-IPaycrest}. */\n    function getFeeDetails() external view returns(\n        uint64, \n        uint256\n    ) {\n        return(protocolFeePercent, MAX_BPS);\n    }\n\n    /** @dev See {getAggregator-IPaycrest}. */\n    function getAggregator() external view returns(bytes memory) {\n        return _aggregator;\n    } \n}\n"},"contracts/PaycrestSettingManager.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract PaycrestSettingManager is OwnableUpgradeable { \n    struct Institution {\n        bytes32 code;\n        bytes32 name;\n    }\n    struct InstitutionByCode {\n        bytes32 name;\n        bytes32 currency;\n    }\n    uint256 internal MAX_BPS;\n    uint64 internal protocolFeePercent;\n    address internal treasuryAddress;\n    address internal _aggregatorAddress;\n    bytes internal _aggregator;\n    \n    // this should decrease if more slots are needed on this contract to avoid collisions with base contract\n    uint256[50] private __gap;\n\n    mapping(address => bool) internal _isTokenSupported;\n\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\n\n    event SettingManagerBool(bytes32 what, address value, bool status);\n    event ProtocolFeesUpdated(uint64 protocolFee);\n    event ProtocolAddressesUpdated(address treasuryAddress);\n    event SetAggregator(bytes aggregator);\n    event SetFeeRecipient(address treasuryAddress);\n    \n    /* ##################################################################\n                                OWNER FUNCTIONS\n    ################################################################## */\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\n        require(value != address(0), \"Paycrest: zero address\");\n        if (what == \"token\") _isTokenSupported[value] = status;\n\n        emit SettingManagerBool(what, value, status);\n    }\n\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \n        uint256 length = institutions.length;\n        for (uint i = 0; i < length; ) {\n            supportedInstitutions[currency].push(institutions[i]);\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\n                name: institutions[i].name, currency: currency\n            });\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function updateProtocolFees(uint64 _protocolFeePercent) external onlyOwner {\n        protocolFeePercent = _protocolFeePercent;\n        emit ProtocolFeesUpdated(_protocolFeePercent);\n    }\n\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\n        require(value != address(0), \"Paycrest: zero address\");\n        if (what == \"treasury\") treasuryAddress = value;\n        emit ProtocolAddressesUpdated(treasuryAddress);\n    }\n\n    function updateProtocolAggregator(bytes calldata aggregator) external onlyOwner {\n        _aggregator = aggregator;\n        emit SetAggregator(aggregator);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1247],"ContextUpgradeable":[1289],"Initializable":[300],"OwnableUpgradeable":[131]},"id":132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":1290,"src":"127:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":301,"src":"169:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Initializable","nameLocations":["748:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"748:13:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"748:13:0"},{"baseName":{"id":7,"name":"ContextUpgradeable","nameLocations":["763:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":1289,"src":"763:18:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"763:18:0"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"213:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":131,"linearizedBaseContracts":[131,1289,300],"name":"OwnableUpgradeable","nameLocation":"726:18:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":10,"mutability":"mutable","name":"_owner","nameLocation":"804:6:0","nodeType":"VariableDeclaration","scope":131,"src":"788:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":16,"name":"OwnershipTransferred","nameLocation":"823:20:0","nodeType":"EventDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:0","nodeType":"VariableDeclaration","scope":16,"src":"844:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:0","nodeType":"VariableDeclaration","scope":16,"src":"875:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:0"},"src":"817:84:0"},{"body":{"id":25,"nodeType":"Block","src":"1055:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"1065:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"1065:26:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"907:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":26,"implemented":true,"kind":"function","modifiers":[{"id":20,"kind":"modifierInvocation","modifierName":{"id":19,"name":"onlyInitializing","nameLocations":["1038:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1038:16:0"},"nodeType":"ModifierInvocation","src":"1038:16:0"}],"name":"__Ownable_init","nameLocation":"1012:14:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"1026:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"1055:0:0"},"scope":131,"src":"1003:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":36,"nodeType":"Block","src":"1166:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":32,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"1195:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":31,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"1176:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"1176:32:0"}]},"id":37,"implemented":true,"kind":"function","modifiers":[{"id":29,"kind":"modifierInvocation","modifierName":{"id":28,"name":"onlyInitializing","nameLocations":["1149:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1149:16:0"},"nodeType":"ModifierInvocation","src":"1149:16:0"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"1137:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"1166:0:0"},"scope":131,"src":"1104:111:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":44,"nodeType":"Block","src":"1324:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":40,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1334:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"ExpressionStatement","src":"1334:13:0"},{"id":43,"nodeType":"PlaceholderStatement","src":"1357:1:0"}]},"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"1221:77:0","text":" @dev Throws if called by any account other than the owner."},"id":45,"name":"onlyOwner","nameLocation":"1312:9:0","nodeType":"ModifierDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"1321:2:0"},"src":"1303:62:0","virtual":false,"visibility":"internal"},{"body":{"id":53,"nodeType":"Block","src":"1496:30:0","statements":[{"expression":{"id":51,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1513:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":50,"id":52,"nodeType":"Return","src":"1506:13:0"}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1371:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":54,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[],"src":"1455:2:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1487:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:0"},"scope":131,"src":"1441:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":67,"nodeType":"Block","src":"1644:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":59,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1662:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":61,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"1673:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":58,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1654:68:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1532:62:0","text":" @dev Throws if the sender is not the owner."},"id":68,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1619:2:0"},"returnParameters":{"id":57,"nodeType":"ParameterList","parameters":[],"src":"1644:0:0"},"scope":131,"src":"1599:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":81,"nodeType":"Block","src":"2118:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":77,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":76,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2147:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:0","typeDescriptions":{}}},"id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2147:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":74,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2128:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"ExpressionStatement","src":"2128:30:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1735:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":82,"implemented":true,"kind":"function","modifiers":[{"id":72,"kind":"modifierInvocation","modifierName":{"id":71,"name":"onlyOwner","nameLocations":["2108:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2108:9:0"},"nodeType":"ModifierInvocation","src":"2108:9:0"}],"name":"renounceOwnership","nameLocation":"2073:17:0","nodeType":"FunctionDefinition","parameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"2090:2:0"},"returnParameters":{"id":73,"nodeType":"ParameterList","parameters":[],"src":"2118:0:0"},"scope":131,"src":"2064:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":104,"nodeType":"Block","src":"2384:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":91,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2402:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2422:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"2414:7:0","typeDescriptions":{}}},"id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2402:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":97,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":90,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2394:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":99,"nodeType":"ExpressionStatement","src":"2394:73:0"},{"expression":{"arguments":[{"id":101,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2496:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2477:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":103,"nodeType":"ExpressionStatement","src":"2477:28:0"}]},"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"2171:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":105,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2374:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2374:9:0"},"nodeType":"ModifierInvocation","src":"2374:9:0"}],"name":"transferOwnership","nameLocation":"2323:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"newOwner","nameLocation":"2349:8:0","nodeType":"VariableDeclaration","scope":105,"src":"2341:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2340:18:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2384:0:0"},"scope":131,"src":"2314:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":124,"nodeType":"Block","src":"2729:124:0","statements":[{"assignments":[112],"declarations":[{"constant":false,"id":112,"mutability":"mutable","name":"oldOwner","nameLocation":"2747:8:0","nodeType":"VariableDeclaration","scope":124,"src":"2739:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":114,"initialValue":{"id":113,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2758:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2739:25:0"},{"expression":{"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":115,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2774:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":116,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2783:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2774:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":118,"nodeType":"ExpressionStatement","src":"2774:17:0"},{"eventCall":{"arguments":[{"id":120,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"2827:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":121,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2837:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":119,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"2806:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":123,"nodeType":"EmitStatement","src":"2801:45:0"}]},"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2518:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":125,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2675:18:0","nodeType":"FunctionDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"newOwner","nameLocation":"2702:8:0","nodeType":"VariableDeclaration","scope":125,"src":"2694:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:18:0"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[],"src":"2729:0:0"},"scope":131,"src":"2666:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"2859:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":130,"mutability":"mutable","name":"__gap","nameLocation":"3138:5:0","nodeType":"VariableDeclaration","scope":131,"src":"3118:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":129,"length":{"hexValue":"3439","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3126:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3118:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":132,"src":"708:2438:0","usedErrors":[]}],"src":"102:3045:0"},"id":0},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1247],"Initializable":[300]},"id":301,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":133,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":134,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":301,"sourceUnit":1248,"src":"138:44:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"184:2209:1","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":300,"linearizedBaseContracts":[300],"name":"Initializable","nameLocation":"2412:13:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":136,"nodeType":"StructuredDocumentation","src":"2432:109:1","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":138,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:1","nodeType":"VariableDeclaration","scope":300,"src":"2546:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":137,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"2579:91:1","text":" @dev Indicates that the contract is in the process of being initialized."},"id":141,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:1","nodeType":"VariableDeclaration","scope":300,"src":"2675:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":140,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":142,"nodeType":"StructuredDocumentation","src":"2708:90:1","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":146,"name":"Initialized","nameLocation":"2809:11:1","nodeType":"EventDefinition","parameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":144,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:1","nodeType":"VariableDeclaration","scope":146,"src":"2821:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":143,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:1"},"src":"2803:33:1"},{"body":{"id":201,"nodeType":"Block","src":"3269:483:1","statements":[{"assignments":[150],"declarations":[{"constant":false,"id":150,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:1","nodeType":"VariableDeclaration","scope":201,"src":"3279:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":149,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":153,"initialValue":{"id":152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:1","subExpression":{"id":151,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3302:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":155,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3347:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":156,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3365:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":160,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:1","subExpression":{"arguments":[{"arguments":[{"id":165,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$300","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$300","typeString":"contract Initializable"}],"id":164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:1","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":161,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"3388:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1247_$","typeString":"type(library AddressUpgradeable)"}},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:1","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":935,"src":"3388:29:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":169,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3436:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":173,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":154,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":177,"nodeType":"ExpressionStatement","src":"3325:201:1"},{"expression":{"id":180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":178,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3536:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":181,"nodeType":"ExpressionStatement","src":"3536:16:1"},{"condition":{"id":182,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3566:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":188,"nodeType":"IfStatement","src":"3562:65:1","trueBody":{"id":187,"nodeType":"Block","src":"3582:45:1","statements":[{"expression":{"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":183,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3596:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":186,"nodeType":"ExpressionStatement","src":"3596:20:1"}]}},{"id":189,"nodeType":"PlaceholderStatement","src":"3636:1:1"},{"condition":{"id":190,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3651:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":200,"nodeType":"IfStatement","src":"3647:99:1","trueBody":{"id":199,"nodeType":"Block","src":"3667:79:1","statements":[{"expression":{"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":191,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3681:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":194,"nodeType":"ExpressionStatement","src":"3681:21:1"},{"eventCall":{"arguments":[{"hexValue":"31","id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":195,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"3721:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":198,"nodeType":"EmitStatement","src":"3716:19:1"}]}}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"2842:399:1","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":202,"name":"initializer","nameLocation":"3255:11:1","nodeType":"ModifierDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[],"src":"3266:2:1"},"src":"3246:506:1","virtual":false,"visibility":"internal"},{"body":{"id":234,"nodeType":"Block","src":"4863:255:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:1","subExpression":{"id":208,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"4882:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":210,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"4899:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":211,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"4914:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":207,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":216,"nodeType":"ExpressionStatement","src":"4873:99:1"},{"expression":{"id":219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":217,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"4982:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":218,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"4997:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":220,"nodeType":"ExpressionStatement","src":"4982:22:1"},{"expression":{"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":221,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5014:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":224,"nodeType":"ExpressionStatement","src":"5014:20:1"},{"id":225,"nodeType":"PlaceholderStatement","src":"5044:1:1"},{"expression":{"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":226,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5055:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":229,"nodeType":"ExpressionStatement","src":"5055:21:1"},{"eventCall":{"arguments":[{"id":231,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"5103:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":230,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"5091:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":233,"nodeType":"EmitStatement","src":"5086:25:1"}]},"documentation":{"id":203,"nodeType":"StructuredDocumentation","src":"3758:1062:1","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":235,"name":"reinitializer","nameLocation":"4834:13:1","nodeType":"ModifierDefinition","parameters":{"id":206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"version","nameLocation":"4854:7:1","nodeType":"VariableDeclaration","scope":235,"src":"4848:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":204,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:1"},"src":"4825:293:1","virtual":false,"visibility":"internal"},{"body":{"id":244,"nodeType":"Block","src":"5356:97:1","statements":[{"expression":{"arguments":[{"id":239,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5374:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":238,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":242,"nodeType":"ExpressionStatement","src":"5366:69:1"},{"id":243,"nodeType":"PlaceholderStatement","src":"5445:1:1"}]},"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"5124:199:1","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":245,"name":"onlyInitializing","nameLocation":"5337:16:1","nodeType":"ModifierDefinition","parameters":{"id":237,"nodeType":"ParameterList","parameters":[],"src":"5353:2:1"},"src":"5328:125:1","virtual":false,"visibility":"internal"},{"body":{"id":280,"nodeType":"Block","src":"5988:231:1","statements":[{"expression":{"arguments":[{"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:1","subExpression":{"id":250,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"6007:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":249,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"ExpressionStatement","src":"5998:66:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":255,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6078:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":257,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":256,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:1","memberName":"max","nodeType":"MemberAccess","src":"6094:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":279,"nodeType":"IfStatement","src":"6074:139:1","trueBody":{"id":278,"nodeType":"Block","src":"6111:102:1","statements":[{"expression":{"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":262,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6125:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":264,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":263,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:1","memberName":"max","nodeType":"MemberAccess","src":"6140:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":269,"nodeType":"ExpressionStatement","src":"6125:30:1"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":272,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":271,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:1","memberName":"max","nodeType":"MemberAccess","src":"6186:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":270,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"6174:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":277,"nodeType":"EmitStatement","src":"6169:33:1"}]}}]},"documentation":{"id":246,"nodeType":"StructuredDocumentation","src":"5459:475:1","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":281,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:1","nodeType":"FunctionDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[],"src":"5968:2:1"},"returnParameters":{"id":248,"nodeType":"ParameterList","parameters":[],"src":"5988:0:1"},"scope":300,"src":"5939:280:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":289,"nodeType":"Block","src":"6393:36:1","statements":[{"expression":{"id":287,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6410:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":286,"id":288,"nodeType":"Return","src":"6403:19:1"}]},"documentation":{"id":282,"nodeType":"StructuredDocumentation","src":"6225:99:1","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":290,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:1","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[],"src":"6360:2:1"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":290,"src":"6386:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":284,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:1"},"scope":300,"src":"6329:100:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":298,"nodeType":"Block","src":"6601:37:1","statements":[{"expression":{"id":296,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"6618:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":295,"id":297,"nodeType":"Return","src":"6611:20:1"}]},"documentation":{"id":291,"nodeType":"StructuredDocumentation","src":"6435:105:1","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":299,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:1","nodeType":"FunctionDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[],"src":"6569:2:1"},"returnParameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":299,"src":"6595:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":293,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:1"},"scope":300,"src":"6545:93:1","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":301,"src":"2394:4246:1","usedErrors":[]}],"src":"113:6528:1"},"id":1},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1247],"ContextUpgradeable":[1289],"Initializable":[300],"PausableUpgradeable":[427]},"id":428,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":302,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":303,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":428,"sourceUnit":1290,"src":"130:41:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":304,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":428,"sourceUnit":301,"src":"172:42:2","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":306,"name":"Initializable","nameLocations":["697:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"697:13:2"},"id":307,"nodeType":"InheritanceSpecifier","src":"697:13:2"},{"baseName":{"id":308,"name":"ContextUpgradeable","nameLocations":["712:18:2"],"nodeType":"IdentifierPath","referencedDeclaration":1289,"src":"712:18:2"},"id":309,"nodeType":"InheritanceSpecifier","src":"712:18:2"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":305,"nodeType":"StructuredDocumentation","src":"216:439:2","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":427,"linearizedBaseContracts":[427,1289,300],"name":"PausableUpgradeable","nameLocation":"674:19:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":310,"nodeType":"StructuredDocumentation","src":"737:73:2","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":314,"name":"Paused","nameLocation":"821:6:2","nodeType":"EventDefinition","parameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"836:7:2","nodeType":"VariableDeclaration","scope":314,"src":"828:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":311,"name":"address","nodeType":"ElementaryTypeName","src":"828:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"827:17:2"},"src":"815:30:2"},{"anonymous":false,"documentation":{"id":315,"nodeType":"StructuredDocumentation","src":"851:70:2","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":319,"name":"Unpaused","nameLocation":"932:8:2","nodeType":"EventDefinition","parameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"949:7:2","nodeType":"VariableDeclaration","scope":319,"src":"941:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":316,"name":"address","nodeType":"ElementaryTypeName","src":"941:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"940:17:2"},"src":"926:32:2"},{"constant":false,"id":321,"mutability":"mutable","name":"_paused","nameLocation":"977:7:2","nodeType":"VariableDeclaration","scope":427,"src":"964:20:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":320,"name":"bool","nodeType":"ElementaryTypeName","src":"964:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":330,"nodeType":"Block","src":"1116:44:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":327,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"1126:25:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1126:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":329,"nodeType":"ExpressionStatement","src":"1126:27:2"}]},"documentation":{"id":322,"nodeType":"StructuredDocumentation","src":"991:67:2","text":" @dev Initializes the contract in unpaused state."},"id":331,"implemented":true,"kind":"function","modifiers":[{"id":325,"kind":"modifierInvocation","modifierName":{"id":324,"name":"onlyInitializing","nameLocations":["1099:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1099:16:2"},"nodeType":"ModifierInvocation","src":"1099:16:2"}],"name":"__Pausable_init","nameLocation":"1072:15:2","nodeType":"FunctionDefinition","parameters":{"id":323,"nodeType":"ParameterList","parameters":[],"src":"1087:2:2"},"returnParameters":{"id":326,"nodeType":"ParameterList","parameters":[],"src":"1116:0:2"},"scope":427,"src":"1063:97:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":340,"nodeType":"Block","src":"1229:32:2","statements":[{"expression":{"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":336,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"1239:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1249:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1239:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":339,"nodeType":"ExpressionStatement","src":"1239:15:2"}]},"id":341,"implemented":true,"kind":"function","modifiers":[{"id":334,"kind":"modifierInvocation","modifierName":{"id":333,"name":"onlyInitializing","nameLocations":["1212:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1212:16:2"},"nodeType":"ModifierInvocation","src":"1212:16:2"}],"name":"__Pausable_init_unchained","nameLocation":"1175:25:2","nodeType":"FunctionDefinition","parameters":{"id":332,"nodeType":"ParameterList","parameters":[],"src":"1200:2:2"},"returnParameters":{"id":335,"nodeType":"ParameterList","parameters":[],"src":"1229:0:2"},"scope":427,"src":"1166:95:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":348,"nodeType":"Block","src":"1472:47:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":344,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"1482:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":346,"nodeType":"ExpressionStatement","src":"1482:19:2"},{"id":347,"nodeType":"PlaceholderStatement","src":"1511:1:2"}]},"documentation":{"id":342,"nodeType":"StructuredDocumentation","src":"1267:175:2","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":349,"name":"whenNotPaused","nameLocation":"1456:13:2","nodeType":"ModifierDefinition","parameters":{"id":343,"nodeType":"ParameterList","parameters":[],"src":"1469:2:2"},"src":"1447:72:2","virtual":false,"visibility":"internal"},{"body":{"id":356,"nodeType":"Block","src":"1719:44:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":352,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"1729:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1729:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":354,"nodeType":"ExpressionStatement","src":"1729:16:2"},{"id":355,"nodeType":"PlaceholderStatement","src":"1755:1:2"}]},"documentation":{"id":350,"nodeType":"StructuredDocumentation","src":"1525:167:2","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":357,"name":"whenPaused","nameLocation":"1706:10:2","nodeType":"ModifierDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[],"src":"1716:2:2"},"src":"1697:66:2","virtual":false,"visibility":"internal"},{"body":{"id":365,"nodeType":"Block","src":"1911:31:2","statements":[{"expression":{"id":363,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"1928:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":362,"id":364,"nodeType":"Return","src":"1921:14:2"}]},"documentation":{"id":358,"nodeType":"StructuredDocumentation","src":"1769:84:2","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":366,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1867:6:2","nodeType":"FunctionDefinition","parameters":{"id":359,"nodeType":"ParameterList","parameters":[],"src":"1873:2:2"},"returnParameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":366,"src":"1905:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":360,"name":"bool","nodeType":"ElementaryTypeName","src":"1905:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1904:6:2"},"scope":427,"src":"1858:84:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":377,"nodeType":"Block","src":"2061:55:2","statements":[{"expression":{"arguments":[{"id":373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2079:9:2","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":371,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"2080:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2080:8:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2090:18:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":370,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2071:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2071:38:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":376,"nodeType":"ExpressionStatement","src":"2071:38:2"}]},"documentation":{"id":367,"nodeType":"StructuredDocumentation","src":"1948:57:2","text":" @dev Throws if the contract is paused."},"id":378,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2019:17:2","nodeType":"FunctionDefinition","parameters":{"id":368,"nodeType":"ParameterList","parameters":[],"src":"2036:2:2"},"returnParameters":{"id":369,"nodeType":"ParameterList","parameters":[],"src":"2061:0:2"},"scope":427,"src":"2010:106:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":388,"nodeType":"Block","src":"2236:58:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":383,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"2254:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2254:8:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2264:22:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":382,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2246:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2246:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":387,"nodeType":"ExpressionStatement","src":"2246:41:2"}]},"documentation":{"id":379,"nodeType":"StructuredDocumentation","src":"2122:61:2","text":" @dev Throws if the contract is not paused."},"id":389,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2197:14:2","nodeType":"FunctionDefinition","parameters":{"id":380,"nodeType":"ParameterList","parameters":[],"src":"2211:2:2"},"returnParameters":{"id":381,"nodeType":"ParameterList","parameters":[],"src":"2236:0:2"},"scope":427,"src":"2188:106:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":404,"nodeType":"Block","src":"2478:66:2","statements":[{"expression":{"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":395,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"2488:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2498:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2488:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":398,"nodeType":"ExpressionStatement","src":"2488:14:2"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":400,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"2524:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2524:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":399,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2517:6:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":403,"nodeType":"EmitStatement","src":"2512:25:2"}]},"documentation":{"id":390,"nodeType":"StructuredDocumentation","src":"2300:124:2","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":405,"implemented":true,"kind":"function","modifiers":[{"id":393,"kind":"modifierInvocation","modifierName":{"id":392,"name":"whenNotPaused","nameLocations":["2464:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":349,"src":"2464:13:2"},"nodeType":"ModifierInvocation","src":"2464:13:2"}],"name":"_pause","nameLocation":"2438:6:2","nodeType":"FunctionDefinition","parameters":{"id":391,"nodeType":"ParameterList","parameters":[],"src":"2444:2:2"},"returnParameters":{"id":394,"nodeType":"ParameterList","parameters":[],"src":"2478:0:2"},"scope":427,"src":"2429:115:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":420,"nodeType":"Block","src":"2724:69:2","statements":[{"expression":{"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":411,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"2734:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2744:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2734:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":414,"nodeType":"ExpressionStatement","src":"2734:15:2"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":416,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"2773:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2773:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":415,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"2764:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2764:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":419,"nodeType":"EmitStatement","src":"2759:27:2"}]},"documentation":{"id":406,"nodeType":"StructuredDocumentation","src":"2550:121:2","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":421,"implemented":true,"kind":"function","modifiers":[{"id":409,"kind":"modifierInvocation","modifierName":{"id":408,"name":"whenPaused","nameLocations":["2713:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"2713:10:2"},"nodeType":"ModifierInvocation","src":"2713:10:2"}],"name":"_unpause","nameLocation":"2685:8:2","nodeType":"FunctionDefinition","parameters":{"id":407,"nodeType":"ParameterList","parameters":[],"src":"2693:2:2"},"returnParameters":{"id":410,"nodeType":"ParameterList","parameters":[],"src":"2724:0:2"},"scope":427,"src":"2676:117:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"2799:254:2","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":426,"mutability":"mutable","name":"__gap","nameLocation":"3078:5:2","nodeType":"VariableDeclaration","scope":427,"src":"3058:25:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":423,"name":"uint256","nodeType":"ElementaryTypeName","src":"3058:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":425,"length":{"hexValue":"3439","id":424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3066:2:2","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3058:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":428,"src":"656:2430:2","usedErrors":[]}],"src":"105:2982:2"},"id":2},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[505]},"id":506,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":429,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":430,"nodeType":"StructuredDocumentation","src":"131:70:3","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":505,"linearizedBaseContracts":[505],"name":"IERC20Upgradeable","nameLocation":"212:17:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":431,"nodeType":"StructuredDocumentation","src":"236:158:3","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":439,"name":"Transfer","nameLocation":"405:8:3","nodeType":"EventDefinition","parameters":{"id":438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":433,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:3","nodeType":"VariableDeclaration","scope":439,"src":"414:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":432,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":435,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:3","nodeType":"VariableDeclaration","scope":439,"src":"436:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":434,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":437,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:3","nodeType":"VariableDeclaration","scope":439,"src":"456:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":436,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:3"},"src":"399:72:3"},{"anonymous":false,"documentation":{"id":440,"nodeType":"StructuredDocumentation","src":"477:148:3","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":448,"name":"Approval","nameLocation":"636:8:3","nodeType":"EventDefinition","parameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:3","nodeType":"VariableDeclaration","scope":448,"src":"645:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":441,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":444,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:3","nodeType":"VariableDeclaration","scope":448,"src":"668:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":443,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":446,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:3","nodeType":"VariableDeclaration","scope":448,"src":"693:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:3"},"src":"630:78:3"},{"documentation":{"id":449,"nodeType":"StructuredDocumentation","src":"714:66:3","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":454,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:3","nodeType":"FunctionDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[],"src":"805:2:3"},"returnParameters":{"id":453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":454,"src":"831:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":451,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:3"},"scope":505,"src":"785:55:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":455,"nodeType":"StructuredDocumentation","src":"846:72:3","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":462,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:3","nodeType":"FunctionDefinition","parameters":{"id":458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":457,"mutability":"mutable","name":"account","nameLocation":"950:7:3","nodeType":"VariableDeclaration","scope":462,"src":"942:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":456,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:3"},"returnParameters":{"id":461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":462,"src":"982:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":459,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:3"},"scope":505,"src":"923:68:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":463,"nodeType":"StructuredDocumentation","src":"997:202:3","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":472,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:3","nodeType":"FunctionDefinition","parameters":{"id":468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":465,"mutability":"mutable","name":"to","nameLocation":"1230:2:3","nodeType":"VariableDeclaration","scope":472,"src":"1222:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":464,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":467,"mutability":"mutable","name":"amount","nameLocation":"1242:6:3","nodeType":"VariableDeclaration","scope":472,"src":"1234:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":466,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:3"},"returnParameters":{"id":471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":472,"src":"1268:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":469,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:3"},"scope":505,"src":"1204:70:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":473,"nodeType":"StructuredDocumentation","src":"1280:264:3","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":482,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:3","nodeType":"FunctionDefinition","parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":475,"mutability":"mutable","name":"owner","nameLocation":"1576:5:3","nodeType":"VariableDeclaration","scope":482,"src":"1568:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":474,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":477,"mutability":"mutable","name":"spender","nameLocation":"1591:7:3","nodeType":"VariableDeclaration","scope":482,"src":"1583:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":476,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:3"},"returnParameters":{"id":481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":482,"src":"1623:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":479,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:3"},"scope":505,"src":"1549:83:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"1638:642:3","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":492,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:3","nodeType":"FunctionDefinition","parameters":{"id":488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"spender","nameLocation":"2310:7:3","nodeType":"VariableDeclaration","scope":492,"src":"2302:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":484,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":487,"mutability":"mutable","name":"amount","nameLocation":"2327:6:3","nodeType":"VariableDeclaration","scope":492,"src":"2319:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":486,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:3"},"returnParameters":{"id":491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":490,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":492,"src":"2353:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":489,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:3"},"scope":505,"src":"2285:74:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":493,"nodeType":"StructuredDocumentation","src":"2365:287:3","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":504,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:3","nodeType":"FunctionDefinition","parameters":{"id":500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":495,"mutability":"mutable","name":"from","nameLocation":"2687:4:3","nodeType":"VariableDeclaration","scope":504,"src":"2679:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":494,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":497,"mutability":"mutable","name":"to","nameLocation":"2701:2:3","nodeType":"VariableDeclaration","scope":504,"src":"2693:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":496,"name":"address","nodeType":"ElementaryTypeName","src":"2693:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":499,"mutability":"mutable","name":"amount","nameLocation":"2713:6:3","nodeType":"VariableDeclaration","scope":504,"src":"2705:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":498,"name":"uint256","nodeType":"ElementaryTypeName","src":"2705:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:42:3"},"returnParameters":{"id":503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":504,"src":"2739:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":501,"name":"bool","nodeType":"ElementaryTypeName","src":"2739:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2738:6:3"},"scope":505,"src":"2657:88:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":506,"src":"202:2545:3","usedErrors":[]}],"src":"106:2642:3"},"id":3},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[541]},"id":542,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":507,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":508,"nodeType":"StructuredDocumentation","src":"148:480:4","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":541,"linearizedBaseContracts":[541],"name":"IERC20PermitUpgradeable","nameLocation":"639:23:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"669:792:4","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":526,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1475:6:4","nodeType":"FunctionDefinition","parameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"owner","nameLocation":"1499:5:4","nodeType":"VariableDeclaration","scope":526,"src":"1491:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":510,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":513,"mutability":"mutable","name":"spender","nameLocation":"1522:7:4","nodeType":"VariableDeclaration","scope":526,"src":"1514:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":512,"name":"address","nodeType":"ElementaryTypeName","src":"1514:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":515,"mutability":"mutable","name":"value","nameLocation":"1547:5:4","nodeType":"VariableDeclaration","scope":526,"src":"1539:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":514,"name":"uint256","nodeType":"ElementaryTypeName","src":"1539:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":517,"mutability":"mutable","name":"deadline","nameLocation":"1570:8:4","nodeType":"VariableDeclaration","scope":526,"src":"1562:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":516,"name":"uint256","nodeType":"ElementaryTypeName","src":"1562:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":519,"mutability":"mutable","name":"v","nameLocation":"1594:1:4","nodeType":"VariableDeclaration","scope":526,"src":"1588:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":518,"name":"uint8","nodeType":"ElementaryTypeName","src":"1588:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"r","nameLocation":"1613:1:4","nodeType":"VariableDeclaration","scope":526,"src":"1605:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":520,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1605:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":523,"mutability":"mutable","name":"s","nameLocation":"1632:1:4","nodeType":"VariableDeclaration","scope":526,"src":"1624:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":522,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1624:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1481:158:4"},"returnParameters":{"id":525,"nodeType":"ParameterList","parameters":[],"src":"1648:0:4"},"scope":541,"src":"1466:183:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":527,"nodeType":"StructuredDocumentation","src":"1655:294:4","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":534,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1963:6:4","nodeType":"FunctionDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"mutability":"mutable","name":"owner","nameLocation":"1978:5:4","nodeType":"VariableDeclaration","scope":534,"src":"1970:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"1970:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1969:15:4"},"returnParameters":{"id":533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":532,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":534,"src":"2008:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":531,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2007:9:4"},"scope":541,"src":"1954:63:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":535,"nodeType":"StructuredDocumentation","src":"2023:128:4","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":540,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2218:16:4","nodeType":"FunctionDefinition","parameters":{"id":536,"nodeType":"ParameterList","parameters":[],"src":"2234:2:4"},"returnParameters":{"id":539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":538,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":540,"src":"2260:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":537,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2260:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2259:9:4"},"scope":541,"src":"2209:60:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":542,"src":"629:1642:4","usedErrors":[]}],"src":"123:2149:4"},"id":4},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1247],"IERC20PermitUpgradeable":[541],"IERC20Upgradeable":[505],"SafeERC20Upgradeable":[917]},"id":918,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":543,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":544,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":918,"sourceUnit":506,"src":"140:34:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","file":"../extensions/IERC20PermitUpgradeable.sol","id":545,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":918,"sourceUnit":542,"src":"175:51:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../../utils/AddressUpgradeable.sol","id":546,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":918,"sourceUnit":1248,"src":"227:47:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20Upgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":547,"nodeType":"StructuredDocumentation","src":"276:457:5","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":917,"linearizedBaseContracts":[917],"name":"SafeERC20Upgradeable","nameLocation":"742:20:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":550,"libraryName":{"id":548,"name":"AddressUpgradeable","nameLocations":["775:18:5"],"nodeType":"IdentifierPath","referencedDeclaration":1247,"src":"775:18:5"},"nodeType":"UsingForDirective","src":"769:37:5","typeName":{"id":549,"name":"address","nodeType":"ElementaryTypeName","src":"798:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":573,"nodeType":"Block","src":"1079:103:5","statements":[{"expression":{"arguments":[{"id":562,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"1109:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":565,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"1139:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1145:8:5","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":472,"src":"1139:14:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1154:8:5","memberName":"selector","nodeType":"MemberAccess","src":"1139:23:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":568,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"1164:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":569,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"1168:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":563,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1116:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1120:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1116:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1116:58:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":561,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"1089:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$505_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:86:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":572,"nodeType":"ExpressionStatement","src":"1089:86:5"}]},"documentation":{"id":551,"nodeType":"StructuredDocumentation","src":"812:179:5","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":574,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1005:12:5","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"mutability":"mutable","name":"token","nameLocation":"1036:5:5","nodeType":"VariableDeclaration","scope":574,"src":"1018:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},"typeName":{"id":553,"nodeType":"UserDefinedTypeName","pathNode":{"id":552,"name":"IERC20Upgradeable","nameLocations":["1018:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"1018:17:5"},"referencedDeclaration":505,"src":"1018:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"to","nameLocation":"1051:2:5","nodeType":"VariableDeclaration","scope":574,"src":"1043:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":555,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"value","nameLocation":"1063:5:5","nodeType":"VariableDeclaration","scope":574,"src":"1055:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":557,"name":"uint256","nodeType":"ElementaryTypeName","src":"1055:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:52:5"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[],"src":"1079:0:5"},"scope":917,"src":"996:186:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":600,"nodeType":"Block","src":"1522:113:5","statements":[{"expression":{"arguments":[{"id":588,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"1552:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":591,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"1582:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1588:12:5","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":504,"src":"1582:18:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1601:8:5","memberName":"selector","nodeType":"MemberAccess","src":"1582:27:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":594,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"1611:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":595,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"1617:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":596,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"1621:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":589,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1559:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1563:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1559:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1559:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":587,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"1532:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$505_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:96:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":599,"nodeType":"ExpressionStatement","src":"1532:96:5"}]},"documentation":{"id":575,"nodeType":"StructuredDocumentation","src":"1188:228:5","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":601,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1430:16:5","nodeType":"FunctionDefinition","parameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":578,"mutability":"mutable","name":"token","nameLocation":"1465:5:5","nodeType":"VariableDeclaration","scope":601,"src":"1447:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},"typeName":{"id":577,"nodeType":"UserDefinedTypeName","pathNode":{"id":576,"name":"IERC20Upgradeable","nameLocations":["1447:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"1447:17:5"},"referencedDeclaration":505,"src":"1447:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":580,"mutability":"mutable","name":"from","nameLocation":"1480:4:5","nodeType":"VariableDeclaration","scope":601,"src":"1472:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":579,"name":"address","nodeType":"ElementaryTypeName","src":"1472:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":582,"mutability":"mutable","name":"to","nameLocation":"1494:2:5","nodeType":"VariableDeclaration","scope":601,"src":"1486:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":581,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":584,"mutability":"mutable","name":"value","nameLocation":"1506:5:5","nodeType":"VariableDeclaration","scope":601,"src":"1498:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"1498:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1446:66:5"},"returnParameters":{"id":586,"nodeType":"ParameterList","parameters":[],"src":"1522:0:5"},"scope":917,"src":"1421:214:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":644,"nodeType":"Block","src":"1982:497:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":613,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"2231:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2240:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2231:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":616,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2230:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":621,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2271:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$917","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$917","typeString":"library SafeERC20Upgradeable"}],"id":620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2263:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":619,"name":"address","nodeType":"ElementaryTypeName","src":"2263:7:5","typeDescriptions":{}}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":623,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"2278:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":617,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"2247:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2253:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":482,"src":"2247:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2290:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2247:44:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":627,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2246:46:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2230:62:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2306:56:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":612,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2209:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2209:163:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":631,"nodeType":"ExpressionStatement","src":"2209:163:5"},{"expression":{"arguments":[{"id":633,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"2402:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":636,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"2432:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2438:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":492,"src":"2432:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2446:8:5","memberName":"selector","nodeType":"MemberAccess","src":"2432:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":639,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"2456:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"2465:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":634,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2409:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2413:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2409:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2409:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":632,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"2382:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$505_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:90:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":643,"nodeType":"ExpressionStatement","src":"2382:90:5"}]},"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"1641:249:5","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":645,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1904:11:5","nodeType":"FunctionDefinition","parameters":{"id":610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":605,"mutability":"mutable","name":"token","nameLocation":"1934:5:5","nodeType":"VariableDeclaration","scope":645,"src":"1916:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},"typeName":{"id":604,"nodeType":"UserDefinedTypeName","pathNode":{"id":603,"name":"IERC20Upgradeable","nameLocations":["1916:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"1916:17:5"},"referencedDeclaration":505,"src":"1916:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":607,"mutability":"mutable","name":"spender","nameLocation":"1949:7:5","nodeType":"VariableDeclaration","scope":645,"src":"1941:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":606,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":609,"mutability":"mutable","name":"value","nameLocation":"1966:5:5","nodeType":"VariableDeclaration","scope":645,"src":"1958:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":608,"name":"uint256","nodeType":"ElementaryTypeName","src":"1958:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1915:57:5"},"returnParameters":{"id":611,"nodeType":"ParameterList","parameters":[],"src":"1982:0:5"},"scope":917,"src":"1895:584:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":681,"nodeType":"Block","src":"2767:194:5","statements":[{"assignments":[657],"declarations":[{"constant":false,"id":657,"mutability":"mutable","name":"oldAllowance","nameLocation":"2785:12:5","nodeType":"VariableDeclaration","scope":681,"src":"2777:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":656,"name":"uint256","nodeType":"ElementaryTypeName","src":"2777:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":666,"initialValue":{"arguments":[{"arguments":[{"id":662,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2824:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$917","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$917","typeString":"library SafeERC20Upgradeable"}],"id":661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2816:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":660,"name":"address","nodeType":"ElementaryTypeName","src":"2816:7:5","typeDescriptions":{}}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2816:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":664,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2831:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":658,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"2800:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":482,"src":"2800:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2800:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2777:62:5"},{"expression":{"arguments":[{"id":668,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"2869:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":671,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"2899:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2905:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":492,"src":"2899:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2913:8:5","memberName":"selector","nodeType":"MemberAccess","src":"2899:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":674,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2923:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":675,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"2932:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":676,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"2947:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2932:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":669,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2876:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2880:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2876:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2876:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":667,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"2849:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$505_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2849:105:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":680,"nodeType":"ExpressionStatement","src":"2849:105:5"}]},"documentation":{"id":646,"nodeType":"StructuredDocumentation","src":"2485:180:5","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":682,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2679:21:5","nodeType":"FunctionDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":649,"mutability":"mutable","name":"token","nameLocation":"2719:5:5","nodeType":"VariableDeclaration","scope":682,"src":"2701:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},"typeName":{"id":648,"nodeType":"UserDefinedTypeName","pathNode":{"id":647,"name":"IERC20Upgradeable","nameLocations":["2701:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"2701:17:5"},"referencedDeclaration":505,"src":"2701:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":651,"mutability":"mutable","name":"spender","nameLocation":"2734:7:5","nodeType":"VariableDeclaration","scope":682,"src":"2726:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":650,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"value","nameLocation":"2751:5:5","nodeType":"VariableDeclaration","scope":682,"src":"2743:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":652,"name":"uint256","nodeType":"ElementaryTypeName","src":"2743:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2700:57:5"},"returnParameters":{"id":655,"nodeType":"ParameterList","parameters":[],"src":"2767:0:5"},"scope":917,"src":"2670:291:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":726,"nodeType":"Block","src":"3249:321:5","statements":[{"id":725,"nodeType":"UncheckedBlock","src":"3259:305:5","statements":[{"assignments":[694],"declarations":[{"constant":false,"id":694,"mutability":"mutable","name":"oldAllowance","nameLocation":"3291:12:5","nodeType":"VariableDeclaration","scope":725,"src":"3283:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":693,"name":"uint256","nodeType":"ElementaryTypeName","src":"3283:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":703,"initialValue":{"arguments":[{"arguments":[{"id":699,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3330:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$917","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$917","typeString":"library SafeERC20Upgradeable"}],"id":698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3322:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":697,"name":"address","nodeType":"ElementaryTypeName","src":"3322:7:5","typeDescriptions":{}}},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3322:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":701,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"3337:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":695,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"3306:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3312:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":482,"src":"3306:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3306:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3283:62:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":705,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"3367:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":706,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"3383:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3367:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3390:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":704,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3359:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":710,"nodeType":"ExpressionStatement","src":"3359:75:5"},{"expression":{"arguments":[{"id":712,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"3468:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":715,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"3498:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3504:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":492,"src":"3498:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3512:8:5","memberName":"selector","nodeType":"MemberAccess","src":"3498:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":718,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"3522:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":719,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"3531:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":720,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"3546:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3531:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":713,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3475:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3479:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3475:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3475:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":711,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"3448:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$505_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3448:105:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":724,"nodeType":"ExpressionStatement","src":"3448:105:5"}]}]},"documentation":{"id":683,"nodeType":"StructuredDocumentation","src":"2967:180:5","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":727,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3161:21:5","nodeType":"FunctionDefinition","parameters":{"id":691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":686,"mutability":"mutable","name":"token","nameLocation":"3201:5:5","nodeType":"VariableDeclaration","scope":727,"src":"3183:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},"typeName":{"id":685,"nodeType":"UserDefinedTypeName","pathNode":{"id":684,"name":"IERC20Upgradeable","nameLocations":["3183:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"3183:17:5"},"referencedDeclaration":505,"src":"3183:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":688,"mutability":"mutable","name":"spender","nameLocation":"3216:7:5","nodeType":"VariableDeclaration","scope":727,"src":"3208:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":687,"name":"address","nodeType":"ElementaryTypeName","src":"3208:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":690,"mutability":"mutable","name":"value","nameLocation":"3233:5:5","nodeType":"VariableDeclaration","scope":727,"src":"3225:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":689,"name":"uint256","nodeType":"ElementaryTypeName","src":"3225:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3182:57:5"},"returnParameters":{"id":692,"nodeType":"ParameterList","parameters":[],"src":"3249:0:5"},"scope":917,"src":"3152:418:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":773,"nodeType":"Block","src":"3977:333:5","statements":[{"assignments":[739],"declarations":[{"constant":false,"id":739,"mutability":"mutable","name":"approvalCall","nameLocation":"4000:12:5","nodeType":"VariableDeclaration","scope":773,"src":"3987:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":738,"name":"bytes","nodeType":"ElementaryTypeName","src":"3987:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":748,"initialValue":{"arguments":[{"expression":{"expression":{"id":742,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"4038:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4044:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":492,"src":"4038:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4052:8:5","memberName":"selector","nodeType":"MemberAccess","src":"4038:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":745,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"4062:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":746,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"4071:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":740,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4015:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4019:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4015:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4015:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3987:90:5"},{"condition":{"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4092:45:5","subExpression":{"arguments":[{"id":750,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"4117:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},{"id":751,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"4124:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":749,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"4093:23:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$505_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20Upgradeable,bytes memory) returns (bool)"}},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4093:44:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":772,"nodeType":"IfStatement","src":"4088:216:5","trueBody":{"id":771,"nodeType":"Block","src":"4139:165:5","statements":[{"expression":{"arguments":[{"id":755,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"4173:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":758,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"4203:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4209:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":492,"src":"4203:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4217:8:5","memberName":"selector","nodeType":"MemberAccess","src":"4203:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":761,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"4227:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4236:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":756,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4180:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4184:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4180:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4180:58:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":754,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"4153:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$505_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4153:86:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":765,"nodeType":"ExpressionStatement","src":"4153:86:5"},{"expression":{"arguments":[{"id":767,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"4273:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},{"id":768,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"4280:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":766,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"4253:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$505_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4253:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":770,"nodeType":"ExpressionStatement","src":"4253:40:5"}]}}]},"documentation":{"id":728,"nodeType":"StructuredDocumentation","src":"3576:308:5","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":774,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3898:12:5","nodeType":"FunctionDefinition","parameters":{"id":736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":731,"mutability":"mutable","name":"token","nameLocation":"3929:5:5","nodeType":"VariableDeclaration","scope":774,"src":"3911:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},"typeName":{"id":730,"nodeType":"UserDefinedTypeName","pathNode":{"id":729,"name":"IERC20Upgradeable","nameLocations":["3911:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"3911:17:5"},"referencedDeclaration":505,"src":"3911:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":733,"mutability":"mutable","name":"spender","nameLocation":"3944:7:5","nodeType":"VariableDeclaration","scope":774,"src":"3936:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":732,"name":"address","nodeType":"ElementaryTypeName","src":"3936:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":735,"mutability":"mutable","name":"value","nameLocation":"3961:5:5","nodeType":"VariableDeclaration","scope":774,"src":"3953:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":734,"name":"uint256","nodeType":"ElementaryTypeName","src":"3953:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3910:57:5"},"returnParameters":{"id":737,"nodeType":"ParameterList","parameters":[],"src":"3977:0:5"},"scope":917,"src":"3889:421:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":830,"nodeType":"Block","src":"4688:257:5","statements":[{"assignments":[796],"declarations":[{"constant":false,"id":796,"mutability":"mutable","name":"nonceBefore","nameLocation":"4706:11:5","nodeType":"VariableDeclaration","scope":830,"src":"4698:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":795,"name":"uint256","nodeType":"ElementaryTypeName","src":"4698:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":801,"initialValue":{"arguments":[{"id":799,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"4733:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":797,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"4720:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$541","typeString":"contract IERC20PermitUpgradeable"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4726:6:5","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":534,"src":"4720:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4720:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4698:41:5"},{"expression":{"arguments":[{"id":805,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"4762:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":806,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"4769:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":807,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"4778:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":808,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"4785:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":809,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"4795:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":810,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"4798:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":811,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"4801:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":802,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"4749:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$541","typeString":"contract IERC20PermitUpgradeable"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4755:6:5","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":526,"src":"4749:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4749:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":813,"nodeType":"ExpressionStatement","src":"4749:54:5"},{"assignments":[815],"declarations":[{"constant":false,"id":815,"mutability":"mutable","name":"nonceAfter","nameLocation":"4821:10:5","nodeType":"VariableDeclaration","scope":830,"src":"4813:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":814,"name":"uint256","nodeType":"ElementaryTypeName","src":"4813:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":820,"initialValue":{"arguments":[{"id":818,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"4847:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":816,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"4834:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$541","typeString":"contract IERC20PermitUpgradeable"}},"id":817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4840:6:5","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":534,"src":"4834:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4813:40:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":822,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"4871:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":823,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"4885:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4899:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4885:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4871:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4902:35:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":821,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4863:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4863:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":829,"nodeType":"ExpressionStatement","src":"4863:75:5"}]},"documentation":{"id":775,"nodeType":"StructuredDocumentation","src":"4316:141:5","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":831,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4471:10:5","nodeType":"FunctionDefinition","parameters":{"id":793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"token","nameLocation":"4515:5:5","nodeType":"VariableDeclaration","scope":831,"src":"4491:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$541","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":777,"nodeType":"UserDefinedTypeName","pathNode":{"id":776,"name":"IERC20PermitUpgradeable","nameLocations":["4491:23:5"],"nodeType":"IdentifierPath","referencedDeclaration":541,"src":"4491:23:5"},"referencedDeclaration":541,"src":"4491:23:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$541","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"internal"},{"constant":false,"id":780,"mutability":"mutable","name":"owner","nameLocation":"4538:5:5","nodeType":"VariableDeclaration","scope":831,"src":"4530:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":779,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":782,"mutability":"mutable","name":"spender","nameLocation":"4561:7:5","nodeType":"VariableDeclaration","scope":831,"src":"4553:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":781,"name":"address","nodeType":"ElementaryTypeName","src":"4553:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":784,"mutability":"mutable","name":"value","nameLocation":"4586:5:5","nodeType":"VariableDeclaration","scope":831,"src":"4578:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":783,"name":"uint256","nodeType":"ElementaryTypeName","src":"4578:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":786,"mutability":"mutable","name":"deadline","nameLocation":"4609:8:5","nodeType":"VariableDeclaration","scope":831,"src":"4601:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"4601:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":788,"mutability":"mutable","name":"v","nameLocation":"4633:1:5","nodeType":"VariableDeclaration","scope":831,"src":"4627:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":787,"name":"uint8","nodeType":"ElementaryTypeName","src":"4627:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":790,"mutability":"mutable","name":"r","nameLocation":"4652:1:5","nodeType":"VariableDeclaration","scope":831,"src":"4644:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":792,"mutability":"mutable","name":"s","nameLocation":"4671:1:5","nodeType":"VariableDeclaration","scope":831,"src":"4663:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":791,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4663:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4481:197:5"},"returnParameters":{"id":794,"nodeType":"ParameterList","parameters":[],"src":"4688:0:5"},"scope":917,"src":"4462:483:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":867,"nodeType":"Block","src":"5409:572:5","statements":[{"assignments":[841],"declarations":[{"constant":false,"id":841,"mutability":"mutable","name":"returndata","nameLocation":"5771:10:5","nodeType":"VariableDeclaration","scope":867,"src":"5758:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":840,"name":"bytes","nodeType":"ElementaryTypeName","src":"5758:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":850,"initialValue":{"arguments":[{"id":847,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"5812:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5818:34:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":844,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"5792:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}],"id":843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5784:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":842,"name":"address","nodeType":"ElementaryTypeName","src":"5784:7:5","typeDescriptions":{}}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5799:12:5","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1007,"src":"5784:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5758:95:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":852,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"5871:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5882:6:5","memberName":"length","nodeType":"MemberAccess","src":"5871:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5892:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5871:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":858,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"5908:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":860,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5921:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":859,"name":"bool","nodeType":"ElementaryTypeName","src":"5921:4:5","typeDescriptions":{}}}],"id":861,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5920:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":856,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5897:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5901:6:5","memberName":"decode","nodeType":"MemberAccess","src":"5897:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5897:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5871:56:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5929:44:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":851,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5863:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5863:111:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":866,"nodeType":"ExpressionStatement","src":"5863:111:5"}]},"documentation":{"id":832,"nodeType":"StructuredDocumentation","src":"4951:372:5","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":868,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5337:19:5","nodeType":"FunctionDefinition","parameters":{"id":838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":835,"mutability":"mutable","name":"token","nameLocation":"5375:5:5","nodeType":"VariableDeclaration","scope":868,"src":"5357:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},"typeName":{"id":834,"nodeType":"UserDefinedTypeName","pathNode":{"id":833,"name":"IERC20Upgradeable","nameLocations":["5357:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"5357:17:5"},"referencedDeclaration":505,"src":"5357:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":837,"mutability":"mutable","name":"data","nameLocation":"5395:4:5","nodeType":"VariableDeclaration","scope":868,"src":"5382:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":836,"name":"bytes","nodeType":"ElementaryTypeName","src":"5382:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5356:44:5"},"returnParameters":{"id":839,"nodeType":"ParameterList","parameters":[],"src":"5409:0:5"},"scope":917,"src":"5328:653:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":915,"nodeType":"Block","src":"6582:516:5","statements":[{"assignments":[880,882],"declarations":[{"constant":false,"id":880,"mutability":"mutable","name":"success","nameLocation":"6883:7:5","nodeType":"VariableDeclaration","scope":915,"src":"6878:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":879,"name":"bool","nodeType":"ElementaryTypeName","src":"6878:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":882,"mutability":"mutable","name":"returndata","nameLocation":"6905:10:5","nodeType":"VariableDeclaration","scope":915,"src":"6892:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":881,"name":"bytes","nodeType":"ElementaryTypeName","src":"6892:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":890,"initialValue":{"arguments":[{"id":888,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"6939:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":885,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"6927:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}],"id":884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6919:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":883,"name":"address","nodeType":"ElementaryTypeName","src":"6919:7:5","typeDescriptions":{}}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6934:4:5","memberName":"call","nodeType":"MemberAccess","src":"6919:19:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6877:67:5"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":891,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"6973:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":892,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"6985:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6996:6:5","memberName":"length","nodeType":"MemberAccess","src":"6985:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7006:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6985:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":898,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"7022:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7035:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":899,"name":"bool","nodeType":"ElementaryTypeName","src":"7035:4:5","typeDescriptions":{}}}],"id":901,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7034:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":896,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7011:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7015:6:5","memberName":"decode","nodeType":"MemberAccess","src":"7011:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7011:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6985:56:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":904,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6984:58:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:69:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":910,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"7084:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}],"id":909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7076:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":908,"name":"address","nodeType":"ElementaryTypeName","src":"7076:7:5","typeDescriptions":{}}},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7076:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":906,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"7046:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1247_$","typeString":"type(library AddressUpgradeable)"}},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7065:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":935,"src":"7046:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7046:45:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:118:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":878,"id":914,"nodeType":"Return","src":"6954:137:5"}]},"documentation":{"id":869,"nodeType":"StructuredDocumentation","src":"5987:490:5","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":916,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6491:23:5","nodeType":"FunctionDefinition","parameters":{"id":875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":872,"mutability":"mutable","name":"token","nameLocation":"6533:5:5","nodeType":"VariableDeclaration","scope":916,"src":"6515:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"},"typeName":{"id":871,"nodeType":"UserDefinedTypeName","pathNode":{"id":870,"name":"IERC20Upgradeable","nameLocations":["6515:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"6515:17:5"},"referencedDeclaration":505,"src":"6515:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$505","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":874,"mutability":"mutable","name":"data","nameLocation":"6553:4:5","nodeType":"VariableDeclaration","scope":916,"src":"6540:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":873,"name":"bytes","nodeType":"ElementaryTypeName","src":"6540:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6514:44:5"},"returnParameters":{"id":878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":877,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":916,"src":"6576:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":876,"name":"bool","nodeType":"ElementaryTypeName","src":"6576:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6575:6:5"},"scope":917,"src":"6482:616:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":918,"src":"734:6366:5","usedErrors":[]}],"src":"115:6986:5"},"id":5},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1247]},"id":1248,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":919,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":920,"nodeType":"StructuredDocumentation","src":"126:67:6","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1247,"linearizedBaseContracts":[1247],"name":"AddressUpgradeable","nameLocation":"202:18:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":934,"nodeType":"Block","src":"1489:254:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":928,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"1713:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:6","memberName":"code","nodeType":"MemberAccess","src":"1713:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:6","memberName":"length","nodeType":"MemberAccess","src":"1713:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":927,"id":933,"nodeType":"Return","src":"1706:30:6"}]},"documentation":{"id":921,"nodeType":"StructuredDocumentation","src":"227:1191:6","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":935,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:6","nodeType":"FunctionDefinition","parameters":{"id":924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":923,"mutability":"mutable","name":"account","nameLocation":"1451:7:6","nodeType":"VariableDeclaration","scope":935,"src":"1443:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":922,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:6"},"returnParameters":{"id":927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":926,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":935,"src":"1483:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":925,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:6"},"scope":1247,"src":"1423:320:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":968,"nodeType":"Block","src":"2729:241:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":946,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1247","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1247","typeString":"library AddressUpgradeable"}],"id":945,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":944,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:6","typeDescriptions":{}}},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:6","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":949,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"2772:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":943,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":953,"nodeType":"ExpressionStatement","src":"2739:73:6"},{"assignments":[955,null],"declarations":[{"constant":false,"id":955,"mutability":"mutable","name":"success","nameLocation":"2829:7:6","nodeType":"VariableDeclaration","scope":968,"src":"2824:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":954,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":962,"initialValue":{"arguments":[{"hexValue":"","id":960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":956,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"2842:9:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:6","memberName":"call","nodeType":"MemberAccess","src":"2842:14:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":958,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"2864:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:6"},{"expression":{"arguments":[{"id":964,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"2893:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":963,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":967,"nodeType":"ExpressionStatement","src":"2885:78:6"}]},"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"1749:904:6","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":969,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:6","nodeType":"FunctionDefinition","parameters":{"id":941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:6","nodeType":"VariableDeclaration","scope":969,"src":"2677:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:6","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":940,"mutability":"mutable","name":"amount","nameLocation":"2712:6:6","nodeType":"VariableDeclaration","scope":969,"src":"2704:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":939,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:6"},"returnParameters":{"id":942,"nodeType":"ParameterList","parameters":[],"src":"2729:0:6"},"scope":1247,"src":"2658:312:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":986,"nodeType":"Block","src":"3801:96:6","statements":[{"expression":{"arguments":[{"id":980,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"3840:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":981,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"3848:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":979,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1027,1071],"referencedDeclaration":1071,"src":"3818:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":978,"id":985,"nodeType":"Return","src":"3811:79:6"}]},"documentation":{"id":970,"nodeType":"StructuredDocumentation","src":"2976:731:6","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":987,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:6","nodeType":"FunctionDefinition","parameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":972,"mutability":"mutable","name":"target","nameLocation":"3742:6:6","nodeType":"VariableDeclaration","scope":987,"src":"3734:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":971,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":974,"mutability":"mutable","name":"data","nameLocation":"3763:4:6","nodeType":"VariableDeclaration","scope":987,"src":"3750:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":973,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:6"},"returnParameters":{"id":978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":977,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":987,"src":"3787:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":976,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:6"},"scope":1247,"src":"3712:185:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1006,"nodeType":"Block","src":"4266:76:6","statements":[{"expression":{"arguments":[{"id":1000,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"4305:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1001,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"4313:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1003,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"4322:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":999,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1027,1071],"referencedDeclaration":1071,"src":"4283:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":998,"id":1005,"nodeType":"Return","src":"4276:59:6"}]},"documentation":{"id":988,"nodeType":"StructuredDocumentation","src":"3903:211:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1007,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:6","nodeType":"FunctionDefinition","parameters":{"id":995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":990,"mutability":"mutable","name":"target","nameLocation":"4158:6:6","nodeType":"VariableDeclaration","scope":1007,"src":"4150:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":989,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":992,"mutability":"mutable","name":"data","nameLocation":"4187:4:6","nodeType":"VariableDeclaration","scope":1007,"src":"4174:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":991,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":994,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:6","nodeType":"VariableDeclaration","scope":1007,"src":"4201:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":993,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:6"},"returnParameters":{"id":998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1007,"src":"4252:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":996,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:6"},"scope":1247,"src":"4119:223:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1026,"nodeType":"Block","src":"4817:111:6","statements":[{"expression":{"arguments":[{"id":1020,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"4856:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1021,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"4864:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1022,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"4870:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1019,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1027,1071],"referencedDeclaration":1071,"src":"4834:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1018,"id":1025,"nodeType":"Return","src":"4827:94:6"}]},"documentation":{"id":1008,"nodeType":"StructuredDocumentation","src":"4348:351:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1027,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:6","nodeType":"FunctionDefinition","parameters":{"id":1015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1010,"mutability":"mutable","name":"target","nameLocation":"4743:6:6","nodeType":"VariableDeclaration","scope":1027,"src":"4735:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1009,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1012,"mutability":"mutable","name":"data","nameLocation":"4764:4:6","nodeType":"VariableDeclaration","scope":1027,"src":"4751:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1011,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1014,"mutability":"mutable","name":"value","nameLocation":"4778:5:6","nodeType":"VariableDeclaration","scope":1027,"src":"4770:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1013,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:6"},"returnParameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1027,"src":"4803:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1016,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:6"},"scope":1247,"src":"4704:224:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1070,"nodeType":"Block","src":"5355:267:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1044,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1247","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1247","typeString":"library AddressUpgradeable"}],"id":1043,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1042,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:6","typeDescriptions":{}}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:6","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1047,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"5398:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1041,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1051,"nodeType":"ExpressionStatement","src":"5365:81:6"},{"assignments":[1053,1055],"declarations":[{"constant":false,"id":1053,"mutability":"mutable","name":"success","nameLocation":"5462:7:6","nodeType":"VariableDeclaration","scope":1070,"src":"5457:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1052,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1055,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:6","nodeType":"VariableDeclaration","scope":1070,"src":"5471:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1054,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1062,"initialValue":{"arguments":[{"id":1060,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"5524:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1056,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"5498:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:6","memberName":"call","nodeType":"MemberAccess","src":"5498:11:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1058,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"5517:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:6"},{"expression":{"arguments":[{"id":1064,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"5573:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1065,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"5581:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1066,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"5590:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1067,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"5602:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1063,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"5546:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1040,"id":1069,"nodeType":"Return","src":"5539:76:6"}]},"documentation":{"id":1028,"nodeType":"StructuredDocumentation","src":"4934:237:6","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1071,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:6","nodeType":"FunctionDefinition","parameters":{"id":1037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1030,"mutability":"mutable","name":"target","nameLocation":"5224:6:6","nodeType":"VariableDeclaration","scope":1071,"src":"5216:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1029,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1032,"mutability":"mutable","name":"data","nameLocation":"5253:4:6","nodeType":"VariableDeclaration","scope":1071,"src":"5240:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1031,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1034,"mutability":"mutable","name":"value","nameLocation":"5275:5:6","nodeType":"VariableDeclaration","scope":1071,"src":"5267:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1033,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1036,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:6","nodeType":"VariableDeclaration","scope":1071,"src":"5290:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1035,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:6"},"returnParameters":{"id":1040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1039,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1071,"src":"5341:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1038,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:6"},"scope":1247,"src":"5176:446:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1087,"nodeType":"Block","src":"5899:97:6","statements":[{"expression":{"arguments":[{"id":1082,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"5935:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1083,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"5943:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1081,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1088,1117],"referencedDeclaration":1117,"src":"5916:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1080,"id":1086,"nodeType":"Return","src":"5909:80:6"}]},"documentation":{"id":1072,"nodeType":"StructuredDocumentation","src":"5628:166:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1088,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:6","nodeType":"FunctionDefinition","parameters":{"id":1077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1074,"mutability":"mutable","name":"target","nameLocation":"5835:6:6","nodeType":"VariableDeclaration","scope":1088,"src":"5827:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1073,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1076,"mutability":"mutable","name":"data","nameLocation":"5856:4:6","nodeType":"VariableDeclaration","scope":1088,"src":"5843:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1075,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:6"},"returnParameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1088,"src":"5885:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1078,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:6"},"scope":1247,"src":"5799:197:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1116,"nodeType":"Block","src":"6338:168:6","statements":[{"assignments":[1101,1103],"declarations":[{"constant":false,"id":1101,"mutability":"mutable","name":"success","nameLocation":"6354:7:6","nodeType":"VariableDeclaration","scope":1116,"src":"6349:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1100,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1103,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:6","nodeType":"VariableDeclaration","scope":1116,"src":"6363:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1102,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1108,"initialValue":{"arguments":[{"id":1106,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"6408:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1104,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"6390:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:6","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:6","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:6"},{"expression":{"arguments":[{"id":1110,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"6457:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1111,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"6465:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1112,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"6474:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1113,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"6486:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1109,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"6430:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1099,"id":1115,"nodeType":"Return","src":"6423:76:6"}]},"documentation":{"id":1089,"nodeType":"StructuredDocumentation","src":"6002:173:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1117,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:6","nodeType":"FunctionDefinition","parameters":{"id":1096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1091,"mutability":"mutable","name":"target","nameLocation":"6225:6:6","nodeType":"VariableDeclaration","scope":1117,"src":"6217:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1090,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"data","nameLocation":"6254:4:6","nodeType":"VariableDeclaration","scope":1117,"src":"6241:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1092,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1095,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:6","nodeType":"VariableDeclaration","scope":1117,"src":"6268:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1094,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:6"},"returnParameters":{"id":1099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1098,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1117,"src":"6324:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1097,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:6"},"scope":1247,"src":"6180:326:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1133,"nodeType":"Block","src":"6782:101:6","statements":[{"expression":{"arguments":[{"id":1128,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"6820:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1129,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"6828:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1127,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1134,1163],"referencedDeclaration":1163,"src":"6799:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1126,"id":1132,"nodeType":"Return","src":"6792:84:6"}]},"documentation":{"id":1118,"nodeType":"StructuredDocumentation","src":"6512:168:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1134,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:6","nodeType":"FunctionDefinition","parameters":{"id":1123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1120,"mutability":"mutable","name":"target","nameLocation":"6723:6:6","nodeType":"VariableDeclaration","scope":1134,"src":"6715:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1119,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1122,"mutability":"mutable","name":"data","nameLocation":"6744:4:6","nodeType":"VariableDeclaration","scope":1134,"src":"6731:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1121,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:6"},"returnParameters":{"id":1126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1134,"src":"6768:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1124,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:6"},"scope":1247,"src":"6685:198:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1162,"nodeType":"Block","src":"7224:170:6","statements":[{"assignments":[1147,1149],"declarations":[{"constant":false,"id":1147,"mutability":"mutable","name":"success","nameLocation":"7240:7:6","nodeType":"VariableDeclaration","scope":1162,"src":"7235:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1146,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1149,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:6","nodeType":"VariableDeclaration","scope":1162,"src":"7249:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1148,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1154,"initialValue":{"arguments":[{"id":1152,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"7296:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1150,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"7276:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:6","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:6","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:6"},{"expression":{"arguments":[{"id":1156,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"7345:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1157,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"7353:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1158,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"7362:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1159,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"7374:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1155,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"7318:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1145,"id":1161,"nodeType":"Return","src":"7311:76:6"}]},"documentation":{"id":1135,"nodeType":"StructuredDocumentation","src":"6889:175:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1163,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:6","nodeType":"FunctionDefinition","parameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1137,"mutability":"mutable","name":"target","nameLocation":"7116:6:6","nodeType":"VariableDeclaration","scope":1163,"src":"7108:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1136,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1139,"mutability":"mutable","name":"data","nameLocation":"7145:4:6","nodeType":"VariableDeclaration","scope":1163,"src":"7132:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1138,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:6","nodeType":"VariableDeclaration","scope":1163,"src":"7159:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1140,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:6"},"returnParameters":{"id":1145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1163,"src":"7210:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1143,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:6"},"scope":1247,"src":"7069:325:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1201,"nodeType":"Block","src":"7876:434:6","statements":[{"condition":{"id":1177,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"7890:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1199,"nodeType":"Block","src":"8246:58:6","statements":[{"expression":{"arguments":[{"id":1195,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"8268:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1196,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"8280:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1194,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"8260:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1198,"nodeType":"ExpressionStatement","src":"8260:33:6"}]},"id":1200,"nodeType":"IfStatement","src":"7886:418:6","trueBody":{"id":1193,"nodeType":"Block","src":"7899:341:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1178,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"7917:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:6","memberName":"length","nodeType":"MemberAccess","src":"7917:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1190,"nodeType":"IfStatement","src":"7913:286:6","trueBody":{"id":1189,"nodeType":"Block","src":"7941:258:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1184,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"8143:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1183,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"8132:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1182,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1188,"nodeType":"ExpressionStatement","src":"8124:60:6"}]}},{"expression":{"id":1191,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"8219:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1176,"id":1192,"nodeType":"Return","src":"8212:17:6"}]}}]},"documentation":{"id":1164,"nodeType":"StructuredDocumentation","src":"7400:277:6","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1202,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:6","nodeType":"FunctionDefinition","parameters":{"id":1173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1166,"mutability":"mutable","name":"target","nameLocation":"7735:6:6","nodeType":"VariableDeclaration","scope":1202,"src":"7727:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1165,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"success","nameLocation":"7756:7:6","nodeType":"VariableDeclaration","scope":1202,"src":"7751:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1167,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1170,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:6","nodeType":"VariableDeclaration","scope":1202,"src":"7773:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1169,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1172,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:6","nodeType":"VariableDeclaration","scope":1202,"src":"7806:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1171,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:6"},"returnParameters":{"id":1176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1202,"src":"7862:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1174,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:6"},"scope":1247,"src":"7682:628:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1225,"nodeType":"Block","src":"8691:135:6","statements":[{"condition":{"id":1214,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"8705:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1223,"nodeType":"Block","src":"8762:58:6","statements":[{"expression":{"arguments":[{"id":1219,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"8784:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1220,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"8796:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1218,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"8776:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1222,"nodeType":"ExpressionStatement","src":"8776:33:6"}]},"id":1224,"nodeType":"IfStatement","src":"8701:119:6","trueBody":{"id":1217,"nodeType":"Block","src":"8714:42:6","statements":[{"expression":{"id":1215,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"8735:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1213,"id":1216,"nodeType":"Return","src":"8728:17:6"}]}}]},"documentation":{"id":1203,"nodeType":"StructuredDocumentation","src":"8316:210:6","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1226,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:6","nodeType":"FunctionDefinition","parameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1205,"mutability":"mutable","name":"success","nameLocation":"8571:7:6","nodeType":"VariableDeclaration","scope":1226,"src":"8566:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1204,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1207,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:6","nodeType":"VariableDeclaration","scope":1226,"src":"8588:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1206,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1209,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:6","nodeType":"VariableDeclaration","scope":1226,"src":"8621:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1208,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:6"},"returnParameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1226,"src":"8677:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1211,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:6"},"scope":1247,"src":"8531:295:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1245,"nodeType":"Block","src":"8915:457:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1233,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"8991:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:6","memberName":"length","nodeType":"MemberAccess","src":"8991:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1243,"nodeType":"Block","src":"9321:45:6","statements":[{"expression":{"arguments":[{"id":1240,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"9342:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1239,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1242,"nodeType":"ExpressionStatement","src":"9335:20:6"}]},"id":1244,"nodeType":"IfStatement","src":"8987:379:6","trueBody":{"id":1238,"nodeType":"Block","src":"9014:301:6","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:6","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:6","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:6"},"nodeType":"YulFunctionCall","src":"9213:17:6"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:6","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:6"},"nodeType":"YulFunctionCall","src":"9254:19:6"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:6"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:6"},"nodeType":"YulFunctionCall","src":"9247:44:6"},"nodeType":"YulExpressionStatement","src":"9247:44:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1228,"isOffset":false,"isSlot":false,"src":"9219:10:6","valueSize":1},{"declaration":1228,"isOffset":false,"isSlot":false,"src":"9262:10:6","valueSize":1}],"id":1237,"nodeType":"InlineAssembly","src":"9163:142:6"}]}}]},"id":1246,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:6","nodeType":"FunctionDefinition","parameters":{"id":1231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1228,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:6","nodeType":"VariableDeclaration","scope":1246,"src":"8849:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1227,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1230,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:6","nodeType":"VariableDeclaration","scope":1246,"src":"8874:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1229,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:6"},"returnParameters":{"id":1232,"nodeType":"ParameterList","parameters":[],"src":"8915:0:6"},"scope":1247,"src":"8832:540:6","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1248,"src":"194:9180:6","usedErrors":[]}],"src":"101:9274:6"},"id":6},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1247],"ContextUpgradeable":[1289],"Initializable":[300]},"id":1290,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1249,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1250,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1290,"sourceUnit":301,"src":"110:42:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1252,"name":"Initializable","nameLocations":["691:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"691:13:7"},"id":1253,"nodeType":"InheritanceSpecifier","src":"691:13:7"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1251,"nodeType":"StructuredDocumentation","src":"154:496:7","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1289,"linearizedBaseContracts":[1289,300],"name":"ContextUpgradeable","nameLocation":"669:18:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1258,"nodeType":"Block","src":"763:7:7","statements":[]},"id":1259,"implemented":true,"kind":"function","modifiers":[{"id":1256,"kind":"modifierInvocation","modifierName":{"id":1255,"name":"onlyInitializing","nameLocations":["746:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"746:16:7"},"nodeType":"ModifierInvocation","src":"746:16:7"}],"name":"__Context_init","nameLocation":"720:14:7","nodeType":"FunctionDefinition","parameters":{"id":1254,"nodeType":"ParameterList","parameters":[],"src":"734:2:7"},"returnParameters":{"id":1257,"nodeType":"ParameterList","parameters":[],"src":"763:0:7"},"scope":1289,"src":"711:59:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1264,"nodeType":"Block","src":"838:7:7","statements":[]},"id":1265,"implemented":true,"kind":"function","modifiers":[{"id":1262,"kind":"modifierInvocation","modifierName":{"id":1261,"name":"onlyInitializing","nameLocations":["821:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"821:16:7"},"nodeType":"ModifierInvocation","src":"821:16:7"}],"name":"__Context_init_unchained","nameLocation":"785:24:7","nodeType":"FunctionDefinition","parameters":{"id":1260,"nodeType":"ParameterList","parameters":[],"src":"809:2:7"},"returnParameters":{"id":1263,"nodeType":"ParameterList","parameters":[],"src":"838:0:7"},"scope":1289,"src":"776:69:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1273,"nodeType":"Block","src":"912:34:7","statements":[{"expression":{"expression":{"id":1270,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:7","memberName":"sender","nodeType":"MemberAccess","src":"929:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1269,"id":1272,"nodeType":"Return","src":"922:17:7"}]},"id":1274,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:7","nodeType":"FunctionDefinition","parameters":{"id":1266,"nodeType":"ParameterList","parameters":[],"src":"869:2:7"},"returnParameters":{"id":1269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1268,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1274,"src":"903:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1267,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:7"},"scope":1289,"src":"850:96:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1282,"nodeType":"Block","src":"1019:32:7","statements":[{"expression":{"expression":{"id":1279,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:7","memberName":"data","nodeType":"MemberAccess","src":"1036:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1278,"id":1281,"nodeType":"Return","src":"1029:15:7"}]},"id":1283,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:7","nodeType":"FunctionDefinition","parameters":{"id":1275,"nodeType":"ParameterList","parameters":[],"src":"969:2:7"},"returnParameters":{"id":1278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1283,"src":"1003:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1276,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:7"},"scope":1289,"src":"952:99:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1284,"nodeType":"StructuredDocumentation","src":"1057:254:7","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1288,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:7","nodeType":"VariableDeclaration","scope":1289,"src":"1316:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1285,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1287,"length":{"hexValue":"3530","id":1286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:7","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1290,"src":"651:693:7","usedErrors":[]}],"src":"86:1259:7"},"id":7},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2750],"SignedMathUpgradeable":[2855],"StringsUpgradeable":[1518]},"id":1519,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1291,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1292,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1519,"sourceUnit":2751,"src":"126:36:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":1293,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1519,"sourceUnit":2856,"src":"163:42:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1294,"nodeType":"StructuredDocumentation","src":"207:34:8","text":" @dev String operations."},"fullyImplemented":true,"id":1518,"linearizedBaseContracts":[1518],"name":"StringsUpgradeable","nameLocation":"250:18:8","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1297,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:8","nodeType":"VariableDeclaration","scope":1518,"src":"275:54:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1295,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1300,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:8","nodeType":"VariableDeclaration","scope":1518,"src":"335:43:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1298,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:8","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1347,"nodeType":"Block","src":"551:636:8","statements":[{"id":1346,"nodeType":"UncheckedBlock","src":"561:620:8","statements":[{"assignments":[1309],"declarations":[{"constant":false,"id":1309,"mutability":"mutable","name":"length","nameLocation":"593:6:8","nodeType":"VariableDeclaration","scope":1346,"src":"585:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1308,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1316,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1312,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"624:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1310,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"602:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2750_$","typeString":"type(library MathUpgradeable)"}},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"618:5:8","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2587,"src":"602:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:8"},{"assignments":[1318],"declarations":[{"constant":false,"id":1318,"mutability":"mutable","name":"buffer","nameLocation":"662:6:8","nodeType":"VariableDeclaration","scope":1346,"src":"648:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1317,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1323,"initialValue":{"arguments":[{"id":1321,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"682:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1319,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"671:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:8"},{"assignments":[1325],"declarations":[{"constant":false,"id":1325,"mutability":"mutable","name":"ptr","nameLocation":"711:3:8","nodeType":"VariableDeclaration","scope":1346,"src":"703:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1324,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1326,"nodeType":"VariableDeclarationStatement","src":"703:11:8"},{"AST":{"nodeType":"YulBlock","src":"784:67:8","statements":[{"nodeType":"YulAssignment","src":"802:35:8","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"813:6:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:2:8","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"829:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"821:3:8"},"nodeType":"YulFunctionCall","src":"821:15:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"809:3:8"},"nodeType":"YulFunctionCall","src":"809:28:8"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"802:3:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1318,"isOffset":false,"isSlot":false,"src":"813:6:8","valueSize":1},{"declaration":1309,"isOffset":false,"isSlot":false,"src":"829:6:8","valueSize":1},{"declaration":1325,"isOffset":false,"isSlot":false,"src":"802:3:8","valueSize":1}],"id":1327,"nodeType":"InlineAssembly","src":"775:76:8"},{"body":{"id":1342,"nodeType":"Block","src":"877:267:8","statements":[{"expression":{"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:8","subExpression":{"id":1329,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"895:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1331,"nodeType":"ExpressionStatement","src":"895:5:8"},{"AST":{"nodeType":"YulBlock","src":"978:84:8","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1008:3:8"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1022:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"1029:2:8","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1018:3:8"},"nodeType":"YulFunctionCall","src":"1018:14:8"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"1034:8:8"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1013:4:8"},"nodeType":"YulFunctionCall","src":"1013:30:8"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1000:7:8"},"nodeType":"YulFunctionCall","src":"1000:44:8"},"nodeType":"YulExpressionStatement","src":"1000:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1297,"isOffset":false,"isSlot":false,"src":"1034:8:8","valueSize":1},{"declaration":1325,"isOffset":false,"isSlot":false,"src":"1008:3:8","valueSize":1},{"declaration":1303,"isOffset":false,"isSlot":false,"src":"1022:5:8","valueSize":1}],"id":1332,"nodeType":"InlineAssembly","src":"969:93:8"},{"expression":{"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1333,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"1079:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1336,"nodeType":"ExpressionStatement","src":"1079:11:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"1112:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1341,"nodeType":"IfStatement","src":"1108:21:8","trueBody":{"id":1340,"nodeType":"Break","src":"1124:5:8"}}]},"condition":{"hexValue":"74727565","id":1328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1343,"nodeType":"WhileStatement","src":"864:280:8"},{"expression":{"id":1344,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"1164:6:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1307,"id":1345,"nodeType":"Return","src":"1157:13:8"}]}]},"documentation":{"id":1301,"nodeType":"StructuredDocumentation","src":"385:90:8","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1348,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:8","nodeType":"FunctionDefinition","parameters":{"id":1304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1303,"mutability":"mutable","name":"value","nameLocation":"506:5:8","nodeType":"VariableDeclaration","scope":1348,"src":"498:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1302,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:8"},"returnParameters":{"id":1307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1306,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1348,"src":"536:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1305,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:8"},"scope":1518,"src":"480:707:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1375,"nodeType":"Block","src":"1357:114:8","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"1398:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:8","trueExpression":{"hexValue":"2d","id":1363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1369,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"1455:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1367,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"1429:21:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$2855_$","typeString":"type(library SignedMathUpgradeable)"}},"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:3:8","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2854,"src":"1429:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1366,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1348,1376],"referencedDeclaration":1348,"src":"1420:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1420:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1358,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1385:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1381:82:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1356,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:8","typeDescriptions":{}}},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:90:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1355,"id":1374,"nodeType":"Return","src":"1367:97:8"}]},"documentation":{"id":1349,"nodeType":"StructuredDocumentation","src":"1193:89:8","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1376,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:8","nodeType":"FunctionDefinition","parameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"value","nameLocation":"1312:5:8","nodeType":"VariableDeclaration","scope":1376,"src":"1305:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1350,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:8"},"returnParameters":{"id":1355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1354,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1376,"src":"1342:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1353,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:8"},"scope":1518,"src":"1287:184:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1395,"nodeType":"Block","src":"1650:111:8","statements":[{"id":1394,"nodeType":"UncheckedBlock","src":"1660:95:8","statements":[{"expression":{"arguments":[{"id":1385,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"1703:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1388,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"1733:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1386,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"1710:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2750_$","typeString":"type(library MathUpgradeable)"}},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:8","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2710,"src":"1710:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1384,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1396,1472,1492],"referencedDeclaration":1472,"src":"1691:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1383,"id":1393,"nodeType":"Return","src":"1684:60:8"}]}]},"documentation":{"id":1377,"nodeType":"StructuredDocumentation","src":"1477:94:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1396,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:8","nodeType":"FunctionDefinition","parameters":{"id":1380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1379,"mutability":"mutable","name":"value","nameLocation":"1605:5:8","nodeType":"VariableDeclaration","scope":1396,"src":"1597:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1378,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:8"},"returnParameters":{"id":1383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1396,"src":"1635:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1381,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:8"},"scope":1518,"src":"1576:185:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1471,"nodeType":"Block","src":"1974:347:8","statements":[{"assignments":[1407],"declarations":[{"constant":false,"id":1407,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:8","nodeType":"VariableDeclaration","scope":1471,"src":"1984:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1406,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1416,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1411,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"2020:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1408,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2006:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:8"},{"expression":{"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1417,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"2041:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1419,"indexExpression":{"hexValue":"30","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1422,"nodeType":"ExpressionStatement","src":"2041:15:8"},{"expression":{"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1423,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"2066:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1425,"indexExpression":{"hexValue":"31","id":1424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1428,"nodeType":"ExpressionStatement","src":"2066:15:8"},{"body":{"id":1457,"nodeType":"Block","src":"2136:83:8","statements":[{"expression":{"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1443,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"2150:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1445,"indexExpression":{"id":1444,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"2157:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1446,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1297,"src":"2162:8:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1450,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"2171:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:8","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1452,"nodeType":"ExpressionStatement","src":"2150:33:8"},{"expression":{"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1453,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"2197:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1456,"nodeType":"ExpressionStatement","src":"2197:11:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1437,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"2124:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1458,"initializationExpression":{"assignments":[1430],"declarations":[{"constant":false,"id":1430,"mutability":"mutable","name":"i","nameLocation":"2104:1:8","nodeType":"VariableDeclaration","scope":1458,"src":"2096:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1429,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1436,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1432,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"2112:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:8"},"loopExpression":{"expression":{"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:8","subExpression":{"id":1440,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"2133:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1442,"nodeType":"ExpressionStatement","src":"2131:3:8"},"nodeType":"ForStatement","src":"2091:128:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1460,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"2236:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1459,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1465,"nodeType":"ExpressionStatement","src":"2228:55:8"},{"expression":{"arguments":[{"id":1468,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"2307:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1466,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:8","typeDescriptions":{}}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1405,"id":1470,"nodeType":"Return","src":"2293:21:8"}]},"documentation":{"id":1397,"nodeType":"StructuredDocumentation","src":"1767:112:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1472,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:8","nodeType":"FunctionDefinition","parameters":{"id":1402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1399,"mutability":"mutable","name":"value","nameLocation":"1913:5:8","nodeType":"VariableDeclaration","scope":1472,"src":"1905:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1398,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1401,"mutability":"mutable","name":"length","nameLocation":"1928:6:8","nodeType":"VariableDeclaration","scope":1472,"src":"1920:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1400,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:8"},"returnParameters":{"id":1405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1472,"src":"1959:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1403,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:8"},"scope":1518,"src":"1884:437:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1491,"nodeType":"Block","src":"2546:76:8","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1485,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"2591:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1483,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:8","typeDescriptions":{}}},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1482,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1481,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:8","typeDescriptions":{}}},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1488,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"2599:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1480,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1396,1472,1492],"referencedDeclaration":1472,"src":"2563:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1479,"id":1490,"nodeType":"Return","src":"2556:59:8"}]},"documentation":{"id":1473,"nodeType":"StructuredDocumentation","src":"2327:141:8","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1492,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:8","nodeType":"FunctionDefinition","parameters":{"id":1476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1475,"mutability":"mutable","name":"addr","nameLocation":"2502:4:8","nodeType":"VariableDeclaration","scope":1492,"src":"2494:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1474,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:8"},"returnParameters":{"id":1479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1478,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1492,"src":"2531:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1477,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:8"},"scope":1518,"src":"2473:149:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1516,"nodeType":"Block","src":"2777:66:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1505,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2810:1:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1503,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:8","typeDescriptions":{}}},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1502,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1511,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"2833:1:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1509,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:8","typeDescriptions":{}}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1508,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1501,"id":1515,"nodeType":"Return","src":"2787:49:8"}]},"documentation":{"id":1493,"nodeType":"StructuredDocumentation","src":"2628:66:8","text":" @dev Returns true if the two strings are equal."},"id":1517,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:8","nodeType":"FunctionDefinition","parameters":{"id":1498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1495,"mutability":"mutable","name":"a","nameLocation":"2728:1:8","nodeType":"VariableDeclaration","scope":1517,"src":"2714:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1494,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1497,"mutability":"mutable","name":"b","nameLocation":"2745:1:8","nodeType":"VariableDeclaration","scope":1517,"src":"2731:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1496,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:8"},"returnParameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1517,"src":"2771:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1499,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:8"},"scope":1518,"src":"2699:144:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1519,"src":"242:2603:8","usedErrors":[]}],"src":"101:2745:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[1884],"MathUpgradeable":[2750],"SignedMathUpgradeable":[2855],"StringsUpgradeable":[1518]},"id":1885,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1520,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":1521,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1885,"sourceUnit":1519,"src":"137:35:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1522,"nodeType":"StructuredDocumentation","src":"174:205:9","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":1884,"linearizedBaseContracts":[1884],"name":"ECDSAUpgradeable","nameLocation":"388:16:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":1528,"members":[{"id":1523,"name":"NoError","nameLocation":"439:7:9","nodeType":"EnumValue","src":"439:7:9"},{"id":1524,"name":"InvalidSignature","nameLocation":"456:16:9","nodeType":"EnumValue","src":"456:16:9"},{"id":1525,"name":"InvalidSignatureLength","nameLocation":"482:22:9","nodeType":"EnumValue","src":"482:22:9"},{"id":1526,"name":"InvalidSignatureS","nameLocation":"514:17:9","nodeType":"EnumValue","src":"514:17:9"},{"id":1527,"name":"InvalidSignatureV","nameLocation":"541:17:9","nodeType":"EnumValue","src":"541:17:9"}],"name":"RecoverError","nameLocation":"416:12:9","nodeType":"EnumDefinition","src":"411:175:9"},{"body":{"id":1571,"nodeType":"Block","src":"646:457:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1534,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"660:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1535,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"669:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1528_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"682:7:9","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1523,"src":"669:20:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1540,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"756:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1541,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"765:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1528_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"778:16:9","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1524,"src":"765:29:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1549,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"865:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1550,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"874:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1528_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"887:22:9","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1525,"src":"874:35:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1558,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"987:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1559,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"996:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1528_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:17:9","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1526,"src":"996:30:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1567,"nodeType":"IfStatement","src":"983:114:9","trueBody":{"id":1566,"nodeType":"Block","src":"1028:69:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":1563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":1562,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1565,"nodeType":"ExpressionStatement","src":"1042:44:9"}]}},"id":1568,"nodeType":"IfStatement","src":"861:236:9","trueBody":{"id":1557,"nodeType":"Block","src":"911:66:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":1554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":1553,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:41:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1556,"nodeType":"ExpressionStatement","src":"925:41:9"}]}},"id":1569,"nodeType":"IfStatement","src":"752:345:9","trueBody":{"id":1548,"nodeType":"Block","src":"796:59:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":1545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":1544,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1547,"nodeType":"ExpressionStatement","src":"810:34:9"}]}},"id":1570,"nodeType":"IfStatement","src":"656:441:9","trueBody":{"id":1539,"nodeType":"Block","src":"691:55:9","statements":[{"functionReturnParameters":1533,"id":1538,"nodeType":"Return","src":"705:7:9"}]}}]},"id":1572,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:9","nodeType":"FunctionDefinition","parameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1531,"mutability":"mutable","name":"error","nameLocation":"626:5:9","nodeType":"VariableDeclaration","scope":1572,"src":"613:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1530,"nodeType":"UserDefinedTypeName","pathNode":{"id":1529,"name":"RecoverError","nameLocations":["613:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1528,"src":"613:12:9"},"referencedDeclaration":1528,"src":"613:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:9"},"returnParameters":{"id":1533,"nodeType":"ParameterList","parameters":[],"src":"646:0:9"},"scope":1884,"src":"592:511:9","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1617,"nodeType":"Block","src":"2271:626:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1585,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"2285:9:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:9","memberName":"length","nodeType":"MemberAccess","src":"2285:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:9","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1615,"nodeType":"Block","src":"2810:81:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1607,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:9","typeDescriptions":{}}},"id":1610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1611,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"2844:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1528_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2857:22:9","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1525,"src":"2844:35:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1613,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1584,"id":1614,"nodeType":"Return","src":"2824:56:9"}]},"id":1616,"nodeType":"IfStatement","src":"2281:610:9","trueBody":{"id":1606,"nodeType":"Block","src":"2309:495:9","statements":[{"assignments":[1590],"declarations":[{"constant":false,"id":1590,"mutability":"mutable","name":"r","nameLocation":"2331:1:9","nodeType":"VariableDeclaration","scope":1606,"src":"2323:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1589,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1591,"nodeType":"VariableDeclarationStatement","src":"2323:9:9"},{"assignments":[1593],"declarations":[{"constant":false,"id":1593,"mutability":"mutable","name":"s","nameLocation":"2354:1:9","nodeType":"VariableDeclaration","scope":1606,"src":"2346:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1592,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1594,"nodeType":"VariableDeclarationStatement","src":"2346:9:9"},{"assignments":[1596],"declarations":[{"constant":false,"id":1596,"mutability":"mutable","name":"v","nameLocation":"2375:1:9","nodeType":"VariableDeclaration","scope":1606,"src":"2369:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1595,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1597,"nodeType":"VariableDeclarationStatement","src":"2369:7:9"},{"AST":{"nodeType":"YulBlock","src":"2577:171:9","statements":[{"nodeType":"YulAssignment","src":"2595:32:9","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2610:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2621:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:9"},"nodeType":"YulFunctionCall","src":"2606:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:9"},"nodeType":"YulFunctionCall","src":"2600:27:9"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2595:1:9"}]},{"nodeType":"YulAssignment","src":"2644:32:9","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2659:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2670:4:9","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2655:3:9"},"nodeType":"YulFunctionCall","src":"2655:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2649:5:9"},"nodeType":"YulFunctionCall","src":"2649:27:9"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2644:1:9"}]},{"nodeType":"YulAssignment","src":"2693:41:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:9","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2716:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2727:4:9","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:9"},"nodeType":"YulFunctionCall","src":"2712:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2706:5:9"},"nodeType":"YulFunctionCall","src":"2706:27:9"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2698:4:9"},"nodeType":"YulFunctionCall","src":"2698:36:9"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2693:1:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1590,"isOffset":false,"isSlot":false,"src":"2595:1:9","valueSize":1},{"declaration":1593,"isOffset":false,"isSlot":false,"src":"2644:1:9","valueSize":1},{"declaration":1577,"isOffset":false,"isSlot":false,"src":"2610:9:9","valueSize":1},{"declaration":1577,"isOffset":false,"isSlot":false,"src":"2659:9:9","valueSize":1},{"declaration":1577,"isOffset":false,"isSlot":false,"src":"2716:9:9","valueSize":1},{"declaration":1596,"isOffset":false,"isSlot":false,"src":"2693:1:9","valueSize":1}],"id":1598,"nodeType":"InlineAssembly","src":"2568:180:9"},{"expression":{"arguments":[{"id":1600,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"2779:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1601,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"2785:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1602,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"2788:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1603,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"2791:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1599,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1618,1692,1786],"referencedDeclaration":1786,"src":"2768:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1584,"id":1605,"nodeType":"Return","src":"2761:32:9"}]}}]},"documentation":{"id":1573,"nodeType":"StructuredDocumentation","src":"1109:1053:9","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":1618,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:9","nodeType":"FunctionDefinition","parameters":{"id":1578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1575,"mutability":"mutable","name":"hash","nameLocation":"2195:4:9","nodeType":"VariableDeclaration","scope":1618,"src":"2187:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1574,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1577,"mutability":"mutable","name":"signature","nameLocation":"2214:9:9","nodeType":"VariableDeclaration","scope":1618,"src":"2201:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1576,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:9"},"returnParameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1580,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1618,"src":"2248:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1579,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1618,"src":"2257:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1582,"nodeType":"UserDefinedTypeName","pathNode":{"id":1581,"name":"RecoverError","nameLocations":["2257:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1528,"src":"2257:12:9"},"referencedDeclaration":1528,"src":"2257:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:9"},"scope":1884,"src":"2167:730:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1644,"nodeType":"Block","src":"3770:140:9","statements":[{"assignments":[1629,1632],"declarations":[{"constant":false,"id":1629,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:9","nodeType":"VariableDeclaration","scope":1644,"src":"3781:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1628,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1632,"mutability":"mutable","name":"error","nameLocation":"3813:5:9","nodeType":"VariableDeclaration","scope":1644,"src":"3800:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1631,"nodeType":"UserDefinedTypeName","pathNode":{"id":1630,"name":"RecoverError","nameLocations":["3800:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1528,"src":"3800:12:9"},"referencedDeclaration":1528,"src":"3800:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1637,"initialValue":{"arguments":[{"id":1634,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"3833:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1635,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"3839:9:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1633,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1618,1692,1786],"referencedDeclaration":1618,"src":"3822:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:9"},{"expression":{"arguments":[{"id":1639,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"3871:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1638,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"3859:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1528_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1641,"nodeType":"ExpressionStatement","src":"3859:18:9"},{"expression":{"id":1642,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"3894:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1627,"id":1643,"nodeType":"Return","src":"3887:16:9"}]},"documentation":{"id":1619,"nodeType":"StructuredDocumentation","src":"2903:775:9","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":1645,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:9","nodeType":"FunctionDefinition","parameters":{"id":1624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1621,"mutability":"mutable","name":"hash","nameLocation":"3708:4:9","nodeType":"VariableDeclaration","scope":1645,"src":"3700:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1620,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1623,"mutability":"mutable","name":"signature","nameLocation":"3727:9:9","nodeType":"VariableDeclaration","scope":1645,"src":"3714:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1622,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:9"},"returnParameters":{"id":1627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1626,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1645,"src":"3761:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1625,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:9"},"scope":1884,"src":"3683:227:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1691,"nodeType":"Block","src":"4267:203:9","statements":[{"assignments":[1661],"declarations":[{"constant":false,"id":1661,"mutability":"mutable","name":"s","nameLocation":"4285:1:9","nodeType":"VariableDeclaration","scope":1691,"src":"4277:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1660,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4277:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1668,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1662,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"4289:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4302:66:9","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4294:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1663,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4294:7:9","typeDescriptions":{}}},"id":1666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4294:75:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4289:80:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4277:92:9"},{"assignments":[1670],"declarations":[{"constant":false,"id":1670,"mutability":"mutable","name":"v","nameLocation":"4385:1:9","nodeType":"VariableDeclaration","scope":1691,"src":"4379:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1669,"name":"uint8","nodeType":"ElementaryTypeName","src":"4379:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1683,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1675,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"4404:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4396:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1673,"name":"uint256","nodeType":"ElementaryTypeName","src":"4396:7:9","typeDescriptions":{}}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4396:11:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4411:3:9","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4396:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1679,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4395:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4418:2:9","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4395:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4389:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1671,"name":"uint8","nodeType":"ElementaryTypeName","src":"4389:5:9","typeDescriptions":{}}},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4389:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4379:42:9"},{"expression":{"arguments":[{"id":1685,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"4449:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1686,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"4455:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1687,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"4458:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1688,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"4461:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1684,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1618,1692,1786],"referencedDeclaration":1786,"src":"4438:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1659,"id":1690,"nodeType":"Return","src":"4431:32:9"}]},"documentation":{"id":1646,"nodeType":"StructuredDocumentation","src":"3916:243:9","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":1692,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:9","nodeType":"FunctionDefinition","parameters":{"id":1653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1648,"mutability":"mutable","name":"hash","nameLocation":"4192:4:9","nodeType":"VariableDeclaration","scope":1692,"src":"4184:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4184:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1650,"mutability":"mutable","name":"r","nameLocation":"4206:1:9","nodeType":"VariableDeclaration","scope":1692,"src":"4198:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1649,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4198:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1652,"mutability":"mutable","name":"vs","nameLocation":"4217:2:9","nodeType":"VariableDeclaration","scope":1692,"src":"4209:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4209:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:37:9"},"returnParameters":{"id":1659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1655,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1692,"src":"4244:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1654,"name":"address","nodeType":"ElementaryTypeName","src":"4244:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1658,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1692,"src":"4253:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1657,"nodeType":"UserDefinedTypeName","pathNode":{"id":1656,"name":"RecoverError","nameLocations":["4253:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1528,"src":"4253:12:9"},"referencedDeclaration":1528,"src":"4253:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4243:23:9"},"scope":1884,"src":"4164:306:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1721,"nodeType":"Block","src":"4721:136:9","statements":[{"assignments":[1705,1708],"declarations":[{"constant":false,"id":1705,"mutability":"mutable","name":"recovered","nameLocation":"4740:9:9","nodeType":"VariableDeclaration","scope":1721,"src":"4732:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1704,"name":"address","nodeType":"ElementaryTypeName","src":"4732:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1708,"mutability":"mutable","name":"error","nameLocation":"4764:5:9","nodeType":"VariableDeclaration","scope":1721,"src":"4751:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1707,"nodeType":"UserDefinedTypeName","pathNode":{"id":1706,"name":"RecoverError","nameLocations":["4751:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1528,"src":"4751:12:9"},"referencedDeclaration":1528,"src":"4751:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1714,"initialValue":{"arguments":[{"id":1710,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"4784:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1711,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"4790:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1712,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"4793:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1709,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1618,1692,1786],"referencedDeclaration":1692,"src":"4773:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4773:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4731:65:9"},{"expression":{"arguments":[{"id":1716,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"4818:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1715,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"4806:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1528_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1718,"nodeType":"ExpressionStatement","src":"4806:18:9"},{"expression":{"id":1719,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"4841:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1703,"id":1720,"nodeType":"Return","src":"4834:16:9"}]},"documentation":{"id":1693,"nodeType":"StructuredDocumentation","src":"4476:154:9","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":1722,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4644:7:9","nodeType":"FunctionDefinition","parameters":{"id":1700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1695,"mutability":"mutable","name":"hash","nameLocation":"4660:4:9","nodeType":"VariableDeclaration","scope":1722,"src":"4652:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4652:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1697,"mutability":"mutable","name":"r","nameLocation":"4674:1:9","nodeType":"VariableDeclaration","scope":1722,"src":"4666:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1696,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4666:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1699,"mutability":"mutable","name":"vs","nameLocation":"4685:2:9","nodeType":"VariableDeclaration","scope":1722,"src":"4677:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1698,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4677:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4651:37:9"},"returnParameters":{"id":1703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1722,"src":"4712:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1701,"name":"address","nodeType":"ElementaryTypeName","src":"4712:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4711:9:9"},"scope":1884,"src":"4635:222:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1785,"nodeType":"Block","src":"5142:1345:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1741,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"6038:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6030:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1739,"name":"uint256","nodeType":"ElementaryTypeName","src":"6030:7:9","typeDescriptions":{}}},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6030:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6043:66:9","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6030:79:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1754,"nodeType":"IfStatement","src":"6026:161:9","trueBody":{"id":1753,"nodeType":"Block","src":"6111:76:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1745,"name":"address","nodeType":"ElementaryTypeName","src":"6133:7:9","typeDescriptions":{}}},"id":1748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6133:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1749,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"6145:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1528_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1750,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6158:17:9","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1526,"src":"6145:30:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1751,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6132:44:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1738,"id":1752,"nodeType":"Return","src":"6125:51:9"}]}},{"assignments":[1756],"declarations":[{"constant":false,"id":1756,"mutability":"mutable","name":"signer","nameLocation":"6289:6:9","nodeType":"VariableDeclaration","scope":1785,"src":"6281:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1755,"name":"address","nodeType":"ElementaryTypeName","src":"6281:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1763,"initialValue":{"arguments":[{"id":1758,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"6308:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1759,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"6314:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1760,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"6317:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1761,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"6320:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1757,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6298:9:9","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6281:41:9"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1764,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"6336:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6354:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6346:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1765,"name":"address","nodeType":"ElementaryTypeName","src":"6346:7:9","typeDescriptions":{}}},"id":1768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6336:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1779,"nodeType":"IfStatement","src":"6332:101:9","trueBody":{"id":1778,"nodeType":"Block","src":"6358:75:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6388:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1771,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6380:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1770,"name":"address","nodeType":"ElementaryTypeName","src":"6380:7:9","typeDescriptions":{}}},"id":1773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6380:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1774,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"6392:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1528_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6405:16:9","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1524,"src":"6392:29:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1776,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6379:43:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1738,"id":1777,"nodeType":"Return","src":"6372:50:9"}]}},{"expression":{"components":[{"id":1780,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"6451:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1781,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"6459:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1528_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6472:7:9","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1523,"src":"6459:20:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1783,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6450:30:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1738,"id":1784,"nodeType":"Return","src":"6443:37:9"}]},"documentation":{"id":1723,"nodeType":"StructuredDocumentation","src":"4863:163:9","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":1786,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5040:10:9","nodeType":"FunctionDefinition","parameters":{"id":1732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1725,"mutability":"mutable","name":"hash","nameLocation":"5059:4:9","nodeType":"VariableDeclaration","scope":1786,"src":"5051:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1724,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5051:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1727,"mutability":"mutable","name":"v","nameLocation":"5071:1:9","nodeType":"VariableDeclaration","scope":1786,"src":"5065:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1726,"name":"uint8","nodeType":"ElementaryTypeName","src":"5065:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1729,"mutability":"mutable","name":"r","nameLocation":"5082:1:9","nodeType":"VariableDeclaration","scope":1786,"src":"5074:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1728,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5074:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1731,"mutability":"mutable","name":"s","nameLocation":"5093:1:9","nodeType":"VariableDeclaration","scope":1786,"src":"5085:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1730,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5085:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5050:45:9"},"returnParameters":{"id":1738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1734,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1786,"src":"5119:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1733,"name":"address","nodeType":"ElementaryTypeName","src":"5119:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1737,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1786,"src":"5128:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1736,"nodeType":"UserDefinedTypeName","pathNode":{"id":1735,"name":"RecoverError","nameLocations":["5128:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1528,"src":"5128:12:9"},"referencedDeclaration":1528,"src":"5128:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5118:23:9"},"scope":1884,"src":"5031:1456:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1818,"nodeType":"Block","src":"6714:138:9","statements":[{"assignments":[1801,1804],"declarations":[{"constant":false,"id":1801,"mutability":"mutable","name":"recovered","nameLocation":"6733:9:9","nodeType":"VariableDeclaration","scope":1818,"src":"6725:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1800,"name":"address","nodeType":"ElementaryTypeName","src":"6725:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1804,"mutability":"mutable","name":"error","nameLocation":"6757:5:9","nodeType":"VariableDeclaration","scope":1818,"src":"6744:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1803,"nodeType":"UserDefinedTypeName","pathNode":{"id":1802,"name":"RecoverError","nameLocations":["6744:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1528,"src":"6744:12:9"},"referencedDeclaration":1528,"src":"6744:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1811,"initialValue":{"arguments":[{"id":1806,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"6777:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1807,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"6783:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1808,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"6786:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1809,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1795,"src":"6789:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1805,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1618,1692,1786],"referencedDeclaration":1786,"src":"6766:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1528_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6724:67:9"},{"expression":{"arguments":[{"id":1813,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"6813:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1528","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1812,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"6801:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1528_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1815,"nodeType":"ExpressionStatement","src":"6801:18:9"},{"expression":{"id":1816,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"6836:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1799,"id":1817,"nodeType":"Return","src":"6829:16:9"}]},"documentation":{"id":1787,"nodeType":"StructuredDocumentation","src":"6493:122:9","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1819,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6629:7:9","nodeType":"FunctionDefinition","parameters":{"id":1796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1789,"mutability":"mutable","name":"hash","nameLocation":"6645:4:9","nodeType":"VariableDeclaration","scope":1819,"src":"6637:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1788,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6637:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1791,"mutability":"mutable","name":"v","nameLocation":"6657:1:9","nodeType":"VariableDeclaration","scope":1819,"src":"6651:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1790,"name":"uint8","nodeType":"ElementaryTypeName","src":"6651:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1793,"mutability":"mutable","name":"r","nameLocation":"6668:1:9","nodeType":"VariableDeclaration","scope":1819,"src":"6660:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1792,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6660:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1795,"mutability":"mutable","name":"s","nameLocation":"6679:1:9","nodeType":"VariableDeclaration","scope":1819,"src":"6671:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1794,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6671:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6636:45:9"},"returnParameters":{"id":1799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1819,"src":"6705:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1797,"name":"address","nodeType":"ElementaryTypeName","src":"6705:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6704:9:9"},"scope":1884,"src":"6620:232:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1828,"nodeType":"Block","src":"7228:310:9","statements":[{"AST":{"nodeType":"YulBlock","src":"7384:148:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7405:4:9","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7411:34:9","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7398:6:9"},"nodeType":"YulFunctionCall","src":"7398:48:9"},"nodeType":"YulExpressionStatement","src":"7398:48:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7466:4:9","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7472:4:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7459:6:9"},"nodeType":"YulFunctionCall","src":"7459:18:9"},"nodeType":"YulExpressionStatement","src":"7459:18:9"},{"nodeType":"YulAssignment","src":"7490:32:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7511:4:9","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7517:4:9","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7501:9:9"},"nodeType":"YulFunctionCall","src":"7501:21:9"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7490:7:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1822,"isOffset":false,"isSlot":false,"src":"7472:4:9","valueSize":1},{"declaration":1825,"isOffset":false,"isSlot":false,"src":"7490:7:9","valueSize":1}],"id":1827,"nodeType":"InlineAssembly","src":"7375:157:9"}]},"documentation":{"id":1820,"nodeType":"StructuredDocumentation","src":"6858:279:9","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1829,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7151:22:9","nodeType":"FunctionDefinition","parameters":{"id":1823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1822,"mutability":"mutable","name":"hash","nameLocation":"7182:4:9","nodeType":"VariableDeclaration","scope":1829,"src":"7174:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1821,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7174:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7173:14:9"},"returnParameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1825,"mutability":"mutable","name":"message","nameLocation":"7219:7:9","nodeType":"VariableDeclaration","scope":1829,"src":"7211:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1824,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7211:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7210:17:9"},"scope":1884,"src":"7142:396:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1850,"nodeType":"Block","src":"7903:127:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7947:32:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":1843,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"8009:1:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8011:6:9","memberName":"length","nodeType":"MemberAccess","src":"8009:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1841,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"7981:18:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1518_$","typeString":"type(library StringsUpgradeable)"}},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8000:8:9","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1348,"src":"7981:27:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7981:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1846,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"8020:1:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1838,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7930:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1839,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7934:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"7930:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7930:92:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1837,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7920:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7920:103:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1836,"id":1849,"nodeType":"Return","src":"7913:110:9"}]},"documentation":{"id":1830,"nodeType":"StructuredDocumentation","src":"7544:274:9","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1851,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7832:22:9","nodeType":"FunctionDefinition","parameters":{"id":1833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1832,"mutability":"mutable","name":"s","nameLocation":"7868:1:9","nodeType":"VariableDeclaration","scope":1851,"src":"7855:14:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1831,"name":"bytes","nodeType":"ElementaryTypeName","src":"7855:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7854:16:9"},"returnParameters":{"id":1836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1851,"src":"7894:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1834,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7894:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7893:9:9"},"scope":1884,"src":"7823:207:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1862,"nodeType":"Block","src":"8476:290:9","statements":[{"AST":{"nodeType":"YulBlock","src":"8538:222:9","statements":[{"nodeType":"YulVariableDeclaration","src":"8552:22:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8569:4:9","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8563:5:9"},"nodeType":"YulFunctionCall","src":"8563:11:9"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8556:3:9","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8594:3:9"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8599:10:9","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8587:6:9"},"nodeType":"YulFunctionCall","src":"8587:23:9"},"nodeType":"YulExpressionStatement","src":"8587:23:9"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8634:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8639:4:9","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8630:3:9"},"nodeType":"YulFunctionCall","src":"8630:14:9"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8646:15:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8623:6:9"},"nodeType":"YulFunctionCall","src":"8623:39:9"},"nodeType":"YulExpressionStatement","src":"8623:39:9"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8686:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8691:4:9","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8682:3:9"},"nodeType":"YulFunctionCall","src":"8682:14:9"},{"name":"structHash","nodeType":"YulIdentifier","src":"8698:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8675:6:9"},"nodeType":"YulFunctionCall","src":"8675:34:9"},"nodeType":"YulExpressionStatement","src":"8675:34:9"},{"nodeType":"YulAssignment","src":"8722:28:9","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8740:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8745:4:9","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8730:9:9"},"nodeType":"YulFunctionCall","src":"8730:20:9"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8722:4:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1859,"isOffset":false,"isSlot":false,"src":"8722:4:9","valueSize":1},{"declaration":1854,"isOffset":false,"isSlot":false,"src":"8646:15:9","valueSize":1},{"declaration":1856,"isOffset":false,"isSlot":false,"src":"8698:10:9","valueSize":1}],"id":1861,"nodeType":"InlineAssembly","src":"8529:231:9"}]},"documentation":{"id":1852,"nodeType":"StructuredDocumentation","src":"8036:328:9","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":1863,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8378:15:9","nodeType":"FunctionDefinition","parameters":{"id":1857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1854,"mutability":"mutable","name":"domainSeparator","nameLocation":"8402:15:9","nodeType":"VariableDeclaration","scope":1863,"src":"8394:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1853,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8394:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1856,"mutability":"mutable","name":"structHash","nameLocation":"8427:10:9","nodeType":"VariableDeclaration","scope":1863,"src":"8419:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1855,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8419:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8393:45:9"},"returnParameters":{"id":1860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1859,"mutability":"mutable","name":"data","nameLocation":"8470:4:9","nodeType":"VariableDeclaration","scope":1863,"src":"8462:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1858,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8462:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8461:14:9"},"scope":1884,"src":"8369:397:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1882,"nodeType":"Block","src":"9081:80:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":1876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9125:10:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":1877,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"9137:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1878,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"9148:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1874,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9108:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9112:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"9108:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9108:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1873,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9098:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9098:56:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1872,"id":1881,"nodeType":"Return","src":"9091:63:9"}]},"documentation":{"id":1864,"nodeType":"StructuredDocumentation","src":"8772:193:9","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":1883,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8979:31:9","nodeType":"FunctionDefinition","parameters":{"id":1869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1866,"mutability":"mutable","name":"validator","nameLocation":"9019:9:9","nodeType":"VariableDeclaration","scope":1883,"src":"9011:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1865,"name":"address","nodeType":"ElementaryTypeName","src":"9011:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1868,"mutability":"mutable","name":"data","nameLocation":"9043:4:9","nodeType":"VariableDeclaration","scope":1883,"src":"9030:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1867,"name":"bytes","nodeType":"ElementaryTypeName","src":"9030:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9010:38:9"},"returnParameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1883,"src":"9072:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1870,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9072:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9071:9:9"},"scope":1884,"src":"8970:191:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1885,"src":"380:8783:9","usedErrors":[]}],"src":"112:9052:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2750]},"id":2751,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1886,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1887,"nodeType":"StructuredDocumentation","src":"128:73:10","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2750,"linearizedBaseContracts":[2750],"name":"MathUpgradeable","nameLocation":"210:15:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":1891,"members":[{"id":1888,"name":"Down","nameLocation":"256:4:10","nodeType":"EnumValue","src":"256:4:10"},{"id":1889,"name":"Up","nameLocation":"298:2:10","nodeType":"EnumValue","src":"298:2:10"},{"id":1890,"name":"Zero","nameLocation":"329:4:10","nodeType":"EnumValue","src":"329:4:10"}],"name":"Rounding","nameLocation":"237:8:10","nodeType":"EnumDefinition","src":"232:122:10"},{"body":{"id":1908,"nodeType":"Block","src":"491:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1901,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"508:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1902,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"512:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1905,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"520:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:10","trueExpression":{"id":1904,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"516:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1900,"id":1907,"nodeType":"Return","src":"501:20:10"}]},"documentation":{"id":1892,"nodeType":"StructuredDocumentation","src":"360:59:10","text":" @dev Returns the largest of two numbers."},"id":1909,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:10","nodeType":"FunctionDefinition","parameters":{"id":1897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1894,"mutability":"mutable","name":"a","nameLocation":"445:1:10","nodeType":"VariableDeclaration","scope":1909,"src":"437:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1893,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1896,"mutability":"mutable","name":"b","nameLocation":"456:1:10","nodeType":"VariableDeclaration","scope":1909,"src":"448:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1895,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:10"},"returnParameters":{"id":1900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1909,"src":"482:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1898,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:10"},"scope":2750,"src":"424:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1926,"nodeType":"Block","src":"666:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1919,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"683:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1920,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"687:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1923,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"695:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:10","trueExpression":{"id":1922,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"691:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1918,"id":1925,"nodeType":"Return","src":"676:20:10"}]},"documentation":{"id":1910,"nodeType":"StructuredDocumentation","src":"534:60:10","text":" @dev Returns the smallest of two numbers."},"id":1927,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:10","nodeType":"FunctionDefinition","parameters":{"id":1915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1912,"mutability":"mutable","name":"a","nameLocation":"620:1:10","nodeType":"VariableDeclaration","scope":1927,"src":"612:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1911,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1914,"mutability":"mutable","name":"b","nameLocation":"631:1:10","nodeType":"VariableDeclaration","scope":1927,"src":"623:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1913,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:10"},"returnParameters":{"id":1918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1917,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1927,"src":"657:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1916,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:10"},"scope":2750,"src":"599:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1949,"nodeType":"Block","src":"887:82:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1937,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"942:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1938,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"946:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1940,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1941,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"952:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1942,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"956:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1944,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1936,"id":1948,"nodeType":"Return","src":"934:28:10"}]},"documentation":{"id":1928,"nodeType":"StructuredDocumentation","src":"709:102:10","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1950,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:10","nodeType":"FunctionDefinition","parameters":{"id":1933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1930,"mutability":"mutable","name":"a","nameLocation":"841:1:10","nodeType":"VariableDeclaration","scope":1950,"src":"833:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1929,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1932,"mutability":"mutable","name":"b","nameLocation":"852:1:10","nodeType":"VariableDeclaration","scope":1950,"src":"844:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1931,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:10"},"returnParameters":{"id":1936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1935,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1950,"src":"878:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1934,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:10"},"scope":2750,"src":"816:153:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1974,"nodeType":"Block","src":"1239:123:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1960,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"1327:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1964,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"1341:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1967,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1968,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"1350:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:10","trueExpression":{"hexValue":"30","id":1963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1959,"id":1973,"nodeType":"Return","src":"1320:35:10"}]},"documentation":{"id":1951,"nodeType":"StructuredDocumentation","src":"975:188:10","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1975,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:10","nodeType":"FunctionDefinition","parameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1953,"mutability":"mutable","name":"a","nameLocation":"1193:1:10","nodeType":"VariableDeclaration","scope":1975,"src":"1185:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1952,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1955,"mutability":"mutable","name":"b","nameLocation":"1204:1:10","nodeType":"VariableDeclaration","scope":1975,"src":"1196:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1954,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:10"},"returnParameters":{"id":1959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1975,"src":"1230:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1957,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:10"},"scope":2750,"src":"1168:194:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2097,"nodeType":"Block","src":"1776:4115:10","statements":[{"id":2096,"nodeType":"UncheckedBlock","src":"1786:4099:10","statements":[{"assignments":[1988],"declarations":[{"constant":false,"id":1988,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:10","nodeType":"VariableDeclaration","scope":2096,"src":"2107:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1987,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1989,"nodeType":"VariableDeclarationStatement","src":"2107:13:10"},{"assignments":[1991],"declarations":[{"constant":false,"id":1991,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:10","nodeType":"VariableDeclaration","scope":2096,"src":"2179:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1990,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1992,"nodeType":"VariableDeclarationStatement","src":"2179:13:10"},{"AST":{"nodeType":"YulBlock","src":"2259:157:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2277:30:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2294:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2297:1:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2304:1:10","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2300:3:10"},"nodeType":"YulFunctionCall","src":"2300:6:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2287:6:10"},"nodeType":"YulFunctionCall","src":"2287:20:10"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2281:2:10","type":""}]},{"nodeType":"YulAssignment","src":"2324:18:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2337:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2340:1:10"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2333:3:10"},"nodeType":"YulFunctionCall","src":"2333:9:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2324:5:10"}]},{"nodeType":"YulAssignment","src":"2359:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2376:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2380:5:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2372:3:10"},"nodeType":"YulFunctionCall","src":"2372:14:10"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2391:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2395:5:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2388:2:10"},"nodeType":"YulFunctionCall","src":"2388:13:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2368:3:10"},"nodeType":"YulFunctionCall","src":"2368:34:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2359:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1988,"isOffset":false,"isSlot":false,"src":"2324:5:10","valueSize":1},{"declaration":1988,"isOffset":false,"isSlot":false,"src":"2380:5:10","valueSize":1},{"declaration":1988,"isOffset":false,"isSlot":false,"src":"2395:5:10","valueSize":1},{"declaration":1991,"isOffset":false,"isSlot":false,"src":"2359:5:10","valueSize":1},{"declaration":1978,"isOffset":false,"isSlot":false,"src":"2294:1:10","valueSize":1},{"declaration":1978,"isOffset":false,"isSlot":false,"src":"2337:1:10","valueSize":1},{"declaration":1980,"isOffset":false,"isSlot":false,"src":"2297:1:10","valueSize":1},{"declaration":1980,"isOffset":false,"isSlot":false,"src":"2340:1:10","valueSize":1}],"id":1993,"nodeType":"InlineAssembly","src":"2250:166:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1994,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"2497:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2002,"nodeType":"IfStatement","src":"2493:368:10","trueBody":{"id":2001,"nodeType":"Block","src":"2509:352:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1997,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"2827:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1998,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"2835:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1986,"id":2000,"nodeType":"Return","src":"2820:26:10"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2004,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"2971:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2005,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"2985:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":2007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":2003,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:53:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2009,"nodeType":"ExpressionStatement","src":"2963:53:10"},{"assignments":[2011],"declarations":[{"constant":false,"id":2011,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:10","nodeType":"VariableDeclaration","scope":2096,"src":"3272:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2010,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2012,"nodeType":"VariableDeclarationStatement","src":"3272:17:10"},{"AST":{"nodeType":"YulBlock","src":"3312:291:10","statements":[{"nodeType":"YulAssignment","src":"3381:38:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3401:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"3404:1:10"},{"name":"denominator","nodeType":"YulIdentifier","src":"3407:11:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3394:6:10"},"nodeType":"YulFunctionCall","src":"3394:25:10"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3381:9:10"}]},{"nodeType":"YulAssignment","src":"3501:41:10","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3514:5:10"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3524:9:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"3535:5:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3521:2:10"},"nodeType":"YulFunctionCall","src":"3521:20:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:10"},"nodeType":"YulFunctionCall","src":"3510:32:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3501:5:10"}]},{"nodeType":"YulAssignment","src":"3559:30:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3572:5:10"},{"name":"remainder","nodeType":"YulIdentifier","src":"3579:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3568:3:10"},"nodeType":"YulFunctionCall","src":"3568:21:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3559:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1982,"isOffset":false,"isSlot":false,"src":"3407:11:10","valueSize":1},{"declaration":1988,"isOffset":false,"isSlot":false,"src":"3535:5:10","valueSize":1},{"declaration":1988,"isOffset":false,"isSlot":false,"src":"3559:5:10","valueSize":1},{"declaration":1988,"isOffset":false,"isSlot":false,"src":"3572:5:10","valueSize":1},{"declaration":1991,"isOffset":false,"isSlot":false,"src":"3501:5:10","valueSize":1},{"declaration":1991,"isOffset":false,"isSlot":false,"src":"3514:5:10","valueSize":1},{"declaration":2011,"isOffset":false,"isSlot":false,"src":"3381:9:10","valueSize":1},{"declaration":2011,"isOffset":false,"isSlot":false,"src":"3524:9:10","valueSize":1},{"declaration":2011,"isOffset":false,"isSlot":false,"src":"3579:9:10","valueSize":1},{"declaration":1978,"isOffset":false,"isSlot":false,"src":"3401:1:10","valueSize":1},{"declaration":1980,"isOffset":false,"isSlot":false,"src":"3404:1:10","valueSize":1}],"id":2013,"nodeType":"InlineAssembly","src":"3303:300:10"},{"assignments":[2015],"declarations":[{"constant":false,"id":2015,"mutability":"mutable","name":"twos","nameLocation":"3918:4:10","nodeType":"VariableDeclaration","scope":2096,"src":"3910:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2014,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2023,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2016,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"3925:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:10","subExpression":{"id":2017,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"3941:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2021,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:10"},{"AST":{"nodeType":"YulBlock","src":"3980:362:10","statements":[{"nodeType":"YulAssignment","src":"4045:37:10","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4064:11:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4077:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4060:3:10"},"nodeType":"YulFunctionCall","src":"4060:22:10"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4045:11:10"}]},{"nodeType":"YulAssignment","src":"4149:25:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4162:5:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4169:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4158:3:10"},"nodeType":"YulFunctionCall","src":"4158:16:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4149:5:10"}]},{"nodeType":"YulAssignment","src":"4289:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4309:1:10","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4312:4:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4305:3:10"},"nodeType":"YulFunctionCall","src":"4305:12:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4319:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4301:3:10"},"nodeType":"YulFunctionCall","src":"4301:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4326:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:10"},"nodeType":"YulFunctionCall","src":"4297:31:10"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4289:4:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1982,"isOffset":false,"isSlot":false,"src":"4045:11:10","valueSize":1},{"declaration":1982,"isOffset":false,"isSlot":false,"src":"4064:11:10","valueSize":1},{"declaration":1988,"isOffset":false,"isSlot":false,"src":"4149:5:10","valueSize":1},{"declaration":1988,"isOffset":false,"isSlot":false,"src":"4162:5:10","valueSize":1},{"declaration":2015,"isOffset":false,"isSlot":false,"src":"4077:4:10","valueSize":1},{"declaration":2015,"isOffset":false,"isSlot":false,"src":"4169:4:10","valueSize":1},{"declaration":2015,"isOffset":false,"isSlot":false,"src":"4289:4:10","valueSize":1},{"declaration":2015,"isOffset":false,"isSlot":false,"src":"4312:4:10","valueSize":1},{"declaration":2015,"isOffset":false,"isSlot":false,"src":"4319:4:10","valueSize":1}],"id":2024,"nodeType":"InlineAssembly","src":"3971:371:10"},{"expression":{"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2025,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"4408:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2026,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"4417:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2027,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"4425:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2030,"nodeType":"ExpressionStatement","src":"4408:21:10"},{"assignments":[2032],"declarations":[{"constant":false,"id":2032,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:10","nodeType":"VariableDeclaration","scope":2096,"src":"4747:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2031,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2039,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2034,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"4770:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2036,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:10"},{"expression":{"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2040,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5003:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2042,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"5018:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2043,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5032:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2047,"nodeType":"ExpressionStatement","src":"5003:36:10"},{"expression":{"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2048,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5072:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2050,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"5087:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2051,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5101:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2055,"nodeType":"ExpressionStatement","src":"5072:36:10"},{"expression":{"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2056,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5142:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2058,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"5157:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2059,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5171:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2063,"nodeType":"ExpressionStatement","src":"5142:36:10"},{"expression":{"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2064,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5212:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2066,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"5227:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2067,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5241:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2071,"nodeType":"ExpressionStatement","src":"5212:36:10"},{"expression":{"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2072,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5282:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2074,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"5297:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2075,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5311:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2079,"nodeType":"ExpressionStatement","src":"5282:36:10"},{"expression":{"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2080,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5353:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2082,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"5368:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2083,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5382:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2087,"nodeType":"ExpressionStatement","src":"5353:36:10"},{"expression":{"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2088,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"5823:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2089,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"5832:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2090,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5840:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2093,"nodeType":"ExpressionStatement","src":"5823:24:10"},{"expression":{"id":2094,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"5868:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1986,"id":2095,"nodeType":"Return","src":"5861:13:10"}]}]},"documentation":{"id":1976,"nodeType":"StructuredDocumentation","src":"1368:305:10","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2098,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:10","nodeType":"FunctionDefinition","parameters":{"id":1983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1978,"mutability":"mutable","name":"x","nameLocation":"1702:1:10","nodeType":"VariableDeclaration","scope":2098,"src":"1694:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1977,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1980,"mutability":"mutable","name":"y","nameLocation":"1713:1:10","nodeType":"VariableDeclaration","scope":2098,"src":"1705:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1979,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1982,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:10","nodeType":"VariableDeclaration","scope":2098,"src":"1716:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1981,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:10"},"returnParameters":{"id":1986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1985,"mutability":"mutable","name":"result","nameLocation":"1768:6:10","nodeType":"VariableDeclaration","scope":2098,"src":"1760:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1984,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:10"},"scope":2750,"src":"1678:4213:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2141,"nodeType":"Block","src":"6133:189:10","statements":[{"assignments":[2114],"declarations":[{"constant":false,"id":2114,"mutability":"mutable","name":"result","nameLocation":"6151:6:10","nodeType":"VariableDeclaration","scope":2141,"src":"6143:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2113,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2120,"initialValue":{"arguments":[{"id":2116,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"6167:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2117,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"6170:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2118,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"6173:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2115,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2098,2142],"referencedDeclaration":2098,"src":"6160:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6160:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"},"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2121,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"6199:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2122,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"6211:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1891_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2123,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6220:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1889,"src":"6211:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2126,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"6233:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2127,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"6236:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2128,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"6239:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2125,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6226:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2138,"nodeType":"IfStatement","src":"6195:98:10","trueBody":{"id":2137,"nodeType":"Block","src":"6257:36:10","statements":[{"expression":{"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2133,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"6271:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2136,"nodeType":"ExpressionStatement","src":"6271:11:10"}]}},{"expression":{"id":2139,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"6309:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2112,"id":2140,"nodeType":"Return","src":"6302:13:10"}]},"documentation":{"id":2099,"nodeType":"StructuredDocumentation","src":"5897:121:10","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2142,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:10","nodeType":"FunctionDefinition","parameters":{"id":2109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"mutability":"mutable","name":"x","nameLocation":"6047:1:10","nodeType":"VariableDeclaration","scope":2142,"src":"6039:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2100,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2103,"mutability":"mutable","name":"y","nameLocation":"6058:1:10","nodeType":"VariableDeclaration","scope":2142,"src":"6050:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2102,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2105,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:10","nodeType":"VariableDeclaration","scope":2142,"src":"6061:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2104,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2108,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:10","nodeType":"VariableDeclaration","scope":2142,"src":"6082:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2107,"nodeType":"UserDefinedTypeName","pathNode":{"id":2106,"name":"Rounding","nameLocations":["6082:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1891,"src":"6082:8:10"},"referencedDeclaration":1891,"src":"6082:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:10"},"returnParameters":{"id":2112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2111,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2142,"src":"6124:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2110,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:10"},"scope":2750,"src":"6023:299:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2253,"nodeType":"Block","src":"6598:1585:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2150,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"6612:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2156,"nodeType":"IfStatement","src":"6608:45:10","trueBody":{"id":2155,"nodeType":"Block","src":"6620:33:10","statements":[{"expression":{"hexValue":"30","id":2153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2149,"id":2154,"nodeType":"Return","src":"6634:8:10"}]}},{"assignments":[2158],"declarations":[{"constant":false,"id":2158,"mutability":"mutable","name":"result","nameLocation":"7340:6:10","nodeType":"VariableDeclaration","scope":2253,"src":"7332:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2157,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2167,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2161,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"7360:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2160,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2422,2458],"referencedDeclaration":2422,"src":"7355:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2165,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:10"},{"id":2252,"nodeType":"UncheckedBlock","src":"7769:408:10","statements":[{"expression":{"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2168,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7793:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2169,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7803:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2170,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"7812:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7816:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2174,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2178,"nodeType":"ExpressionStatement","src":"7793:35:10"},{"expression":{"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2179,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7842:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2180,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7852:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2181,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"7861:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2182,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7865:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2185,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2189,"nodeType":"ExpressionStatement","src":"7842:35:10"},{"expression":{"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2190,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7891:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2191,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7901:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2192,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"7910:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2193,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7914:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2196,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2200,"nodeType":"ExpressionStatement","src":"7891:35:10"},{"expression":{"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2201,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7940:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2202,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7950:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2203,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"7959:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2204,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7963:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2207,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2211,"nodeType":"ExpressionStatement","src":"7940:35:10"},{"expression":{"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2212,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7989:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2213,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7999:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2214,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"8008:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2215,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"8012:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2218,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2222,"nodeType":"ExpressionStatement","src":"7989:35:10"},{"expression":{"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2223,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"8038:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2224,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"8048:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2225,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"8057:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2226,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"8061:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2229,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2233,"nodeType":"ExpressionStatement","src":"8038:35:10"},{"expression":{"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2234,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"8087:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2235,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"8097:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2236,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"8106:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2237,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"8110:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2240,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2244,"nodeType":"ExpressionStatement","src":"8087:35:10"},{"expression":{"arguments":[{"id":2246,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"8147:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2247,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"8155:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2248,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"8159:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2245,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"8143:3:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2149,"id":2251,"nodeType":"Return","src":"8136:30:10"}]}]},"documentation":{"id":2143,"nodeType":"StructuredDocumentation","src":"6328:208:10","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2254,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:10","nodeType":"FunctionDefinition","parameters":{"id":2146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2145,"mutability":"mutable","name":"a","nameLocation":"6563:1:10","nodeType":"VariableDeclaration","scope":2254,"src":"6555:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2144,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:10"},"returnParameters":{"id":2149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2254,"src":"6589:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2147,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:10"},"scope":2750,"src":"6541:1642:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2289,"nodeType":"Block","src":"8359:161:10","statements":[{"id":2288,"nodeType":"UncheckedBlock","src":"8369:145:10","statements":[{"assignments":[2266],"declarations":[{"constant":false,"id":2266,"mutability":"mutable","name":"result","nameLocation":"8401:6:10","nodeType":"VariableDeclaration","scope":2288,"src":"8393:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2265,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2270,"initialValue":{"arguments":[{"id":2268,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2257,"src":"8415:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2267,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2254,2290],"referencedDeclaration":2254,"src":"8410:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8410:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2271,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"8438:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2272,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"8448:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2273,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"8460:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1891_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2274,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8469:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1889,"src":"8460:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2276,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"8475:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2277,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"8484:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2279,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2257,"src":"8493:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:10","trueExpression":{"hexValue":"31","id":2282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2285,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2264,"id":2287,"nodeType":"Return","src":"8431:72:10"}]}]},"documentation":{"id":2255,"nodeType":"StructuredDocumentation","src":"8189:89:10","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2290,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:10","nodeType":"FunctionDefinition","parameters":{"id":2261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2257,"mutability":"mutable","name":"a","nameLocation":"8305:1:10","nodeType":"VariableDeclaration","scope":2290,"src":"8297:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2256,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2260,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:10","nodeType":"VariableDeclaration","scope":2290,"src":"8308:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2259,"nodeType":"UserDefinedTypeName","pathNode":{"id":2258,"name":"Rounding","nameLocations":["8308:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1891,"src":"8308:8:10"},"referencedDeclaration":1891,"src":"8308:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:10"},"returnParameters":{"id":2264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2290,"src":"8350:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2262,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:10"},"scope":2750,"src":"8283:237:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2421,"nodeType":"Block","src":"8705:922:10","statements":[{"assignments":[2299],"declarations":[{"constant":false,"id":2299,"mutability":"mutable","name":"result","nameLocation":"8723:6:10","nodeType":"VariableDeclaration","scope":2421,"src":"8715:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2298,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2301,"initialValue":{"hexValue":"30","id":2300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:10"},{"id":2418,"nodeType":"UncheckedBlock","src":"8743:855:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2302,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"8771:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2316,"nodeType":"IfStatement","src":"8767:99:10","trueBody":{"id":2315,"nodeType":"Block","src":"8789:77:10","statements":[{"expression":{"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"8807:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2310,"nodeType":"ExpressionStatement","src":"8807:13:10"},{"expression":{"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2311,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"8838:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2314,"nodeType":"ExpressionStatement","src":"8838:13:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2317,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"8883:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2331,"nodeType":"IfStatement","src":"8879:96:10","trueBody":{"id":2330,"nodeType":"Block","src":"8900:75:10","statements":[{"expression":{"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"8918:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2325,"nodeType":"ExpressionStatement","src":"8918:12:10"},{"expression":{"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2326,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"8948:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2329,"nodeType":"ExpressionStatement","src":"8948:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2332,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"8992:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2346,"nodeType":"IfStatement","src":"8988:96:10","trueBody":{"id":2345,"nodeType":"Block","src":"9009:75:10","statements":[{"expression":{"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"9027:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2340,"nodeType":"ExpressionStatement","src":"9027:12:10"},{"expression":{"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2341,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"9057:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2344,"nodeType":"ExpressionStatement","src":"9057:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2347,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"9101:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2361,"nodeType":"IfStatement","src":"9097:96:10","trueBody":{"id":2360,"nodeType":"Block","src":"9118:75:10","statements":[{"expression":{"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"9136:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2355,"nodeType":"ExpressionStatement","src":"9136:12:10"},{"expression":{"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2356,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"9166:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2359,"nodeType":"ExpressionStatement","src":"9166:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"9210:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2376,"nodeType":"IfStatement","src":"9206:93:10","trueBody":{"id":2375,"nodeType":"Block","src":"9226:73:10","statements":[{"expression":{"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2367,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"9244:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2370,"nodeType":"ExpressionStatement","src":"9244:11:10"},{"expression":{"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"9273:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2374,"nodeType":"ExpressionStatement","src":"9273:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2377,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"9316:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2391,"nodeType":"IfStatement","src":"9312:93:10","trueBody":{"id":2390,"nodeType":"Block","src":"9332:73:10","statements":[{"expression":{"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"9350:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2385,"nodeType":"ExpressionStatement","src":"9350:11:10"},{"expression":{"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2386,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"9379:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2389,"nodeType":"ExpressionStatement","src":"9379:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2392,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"9422:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2406,"nodeType":"IfStatement","src":"9418:93:10","trueBody":{"id":2405,"nodeType":"Block","src":"9438:73:10","statements":[{"expression":{"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2397,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"9456:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2400,"nodeType":"ExpressionStatement","src":"9456:11:10"},{"expression":{"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2401,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"9485:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2404,"nodeType":"ExpressionStatement","src":"9485:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"9528:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2417,"nodeType":"IfStatement","src":"9524:64:10","trueBody":{"id":2416,"nodeType":"Block","src":"9544:44:10","statements":[{"expression":{"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2412,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"9562:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2415,"nodeType":"ExpressionStatement","src":"9562:11:10"}]}}]},{"expression":{"id":2419,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"9614:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2297,"id":2420,"nodeType":"Return","src":"9607:13:10"}]},"documentation":{"id":2291,"nodeType":"StructuredDocumentation","src":"8526:113:10","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2422,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:10","nodeType":"FunctionDefinition","parameters":{"id":2294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2293,"mutability":"mutable","name":"value","nameLocation":"8666:5:10","nodeType":"VariableDeclaration","scope":2422,"src":"8658:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2292,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:10"},"returnParameters":{"id":2297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2422,"src":"8696:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2295,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:10"},"scope":2750,"src":"8644:983:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2457,"nodeType":"Block","src":"9860:165:10","statements":[{"id":2456,"nodeType":"UncheckedBlock","src":"9870:149:10","statements":[{"assignments":[2434],"declarations":[{"constant":false,"id":2434,"mutability":"mutable","name":"result","nameLocation":"9902:6:10","nodeType":"VariableDeclaration","scope":2456,"src":"9894:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2433,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2438,"initialValue":{"arguments":[{"id":2436,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9916:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2435,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2422,2458],"referencedDeclaration":2422,"src":"9911:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2439,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2434,"src":"9943:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2440,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9953:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2441,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"9965:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1891_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2442,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9974:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1889,"src":"9965:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2445,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2434,"src":"9985:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9994:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:10","trueExpression":{"hexValue":"31","id":2450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2453,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2432,"id":2455,"nodeType":"Return","src":"9936:72:10"}]}]},"documentation":{"id":2423,"nodeType":"StructuredDocumentation","src":"9633:142:10","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2458,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:10","nodeType":"FunctionDefinition","parameters":{"id":2429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2425,"mutability":"mutable","name":"value","nameLocation":"9802:5:10","nodeType":"VariableDeclaration","scope":2458,"src":"9794:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2424,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2428,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:10","nodeType":"VariableDeclaration","scope":2458,"src":"9809:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2427,"nodeType":"UserDefinedTypeName","pathNode":{"id":2426,"name":"Rounding","nameLocations":["9809:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1891,"src":"9809:8:10"},"referencedDeclaration":1891,"src":"9809:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:10"},"returnParameters":{"id":2432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2431,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2458,"src":"9851:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2430,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:10"},"scope":2750,"src":"9780:245:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2586,"nodeType":"Block","src":"10212:854:10","statements":[{"assignments":[2467],"declarations":[{"constant":false,"id":2467,"mutability":"mutable","name":"result","nameLocation":"10230:6:10","nodeType":"VariableDeclaration","scope":2586,"src":"10222:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2466,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2469,"initialValue":{"hexValue":"30","id":2468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:10"},{"id":2583,"nodeType":"UncheckedBlock","src":"10250:787:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2470,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10278:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2486,"nodeType":"IfStatement","src":"10274:103:10","trueBody":{"id":2485,"nodeType":"Block","src":"10297:80:10","statements":[{"expression":{"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10315:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2480,"nodeType":"ExpressionStatement","src":"10315:17:10"},{"expression":{"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2481,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"10350:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2484,"nodeType":"ExpressionStatement","src":"10350:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2487,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10394:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2503,"nodeType":"IfStatement","src":"10390:103:10","trueBody":{"id":2502,"nodeType":"Block","src":"10413:80:10","statements":[{"expression":{"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2492,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10431:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2497,"nodeType":"ExpressionStatement","src":"10431:17:10"},{"expression":{"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2498,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"10466:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2501,"nodeType":"ExpressionStatement","src":"10466:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2504,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10510:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2520,"nodeType":"IfStatement","src":"10506:103:10","trueBody":{"id":2519,"nodeType":"Block","src":"10529:80:10","statements":[{"expression":{"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2509,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10547:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2514,"nodeType":"ExpressionStatement","src":"10547:17:10"},{"expression":{"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2515,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"10582:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2518,"nodeType":"ExpressionStatement","src":"10582:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2521,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10626:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2537,"nodeType":"IfStatement","src":"10622:100:10","trueBody":{"id":2536,"nodeType":"Block","src":"10644:78:10","statements":[{"expression":{"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2526,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10662:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2529,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2531,"nodeType":"ExpressionStatement","src":"10662:16:10"},{"expression":{"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2532,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"10696:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2535,"nodeType":"ExpressionStatement","src":"10696:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10739:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2554,"nodeType":"IfStatement","src":"10735:100:10","trueBody":{"id":2553,"nodeType":"Block","src":"10757:78:10","statements":[{"expression":{"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2543,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10775:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2546,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2548,"nodeType":"ExpressionStatement","src":"10775:16:10"},{"expression":{"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2549,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"10809:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2552,"nodeType":"ExpressionStatement","src":"10809:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2555,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10852:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2571,"nodeType":"IfStatement","src":"10848:100:10","trueBody":{"id":2570,"nodeType":"Block","src":"10870:78:10","statements":[{"expression":{"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2560,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10888:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2565,"nodeType":"ExpressionStatement","src":"10888:16:10"},{"expression":{"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2566,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"10922:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2569,"nodeType":"ExpressionStatement","src":"10922:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2572,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10965:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2582,"nodeType":"IfStatement","src":"10961:66:10","trueBody":{"id":2581,"nodeType":"Block","src":"10983:44:10","statements":[{"expression":{"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2577,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"11001:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2580,"nodeType":"ExpressionStatement","src":"11001:11:10"}]}}]},{"expression":{"id":2584,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"11053:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2465,"id":2585,"nodeType":"Return","src":"11046:13:10"}]},"documentation":{"id":2459,"nodeType":"StructuredDocumentation","src":"10031:114:10","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2587,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:10","nodeType":"FunctionDefinition","parameters":{"id":2462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2461,"mutability":"mutable","name":"value","nameLocation":"10173:5:10","nodeType":"VariableDeclaration","scope":2587,"src":"10165:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2460,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:10"},"returnParameters":{"id":2465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2587,"src":"10203:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2463,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:10"},"scope":2750,"src":"10150:916:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2622,"nodeType":"Block","src":"11301:167:10","statements":[{"id":2621,"nodeType":"UncheckedBlock","src":"11311:151:10","statements":[{"assignments":[2599],"declarations":[{"constant":false,"id":2599,"mutability":"mutable","name":"result","nameLocation":"11343:6:10","nodeType":"VariableDeclaration","scope":2621,"src":"11335:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2598,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2603,"initialValue":{"arguments":[{"id":2601,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"11358:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2600,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2587,2623],"referencedDeclaration":2587,"src":"11352:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11352:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2604,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"11385:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2605,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"11395:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2606,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"11407:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1891_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2607,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11416:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1889,"src":"11407:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2610,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"11428:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"11437:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:10","trueExpression":{"hexValue":"31","id":2615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2618,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2597,"id":2620,"nodeType":"Return","src":"11378:73:10"}]}]},"documentation":{"id":2588,"nodeType":"StructuredDocumentation","src":"11072:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2623,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:10","nodeType":"FunctionDefinition","parameters":{"id":2594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2590,"mutability":"mutable","name":"value","nameLocation":"11243:5:10","nodeType":"VariableDeclaration","scope":2623,"src":"11235:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2589,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2593,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:10","nodeType":"VariableDeclaration","scope":2623,"src":"11250:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2592,"nodeType":"UserDefinedTypeName","pathNode":{"id":2591,"name":"Rounding","nameLocations":["11250:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1891,"src":"11250:8:10"},"referencedDeclaration":1891,"src":"11250:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:10"},"returnParameters":{"id":2597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2596,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2623,"src":"11292:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2595,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:10"},"scope":2750,"src":"11220:248:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2709,"nodeType":"Block","src":"11782:600:10","statements":[{"assignments":[2632],"declarations":[{"constant":false,"id":2632,"mutability":"mutable","name":"result","nameLocation":"11800:6:10","nodeType":"VariableDeclaration","scope":2709,"src":"11792:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2631,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2634,"initialValue":{"hexValue":"30","id":2633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:10"},{"id":2706,"nodeType":"UncheckedBlock","src":"11820:533:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2635,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"11848:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2649,"nodeType":"IfStatement","src":"11844:98:10","trueBody":{"id":2648,"nodeType":"Block","src":"11866:76:10","statements":[{"expression":{"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"11884:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2643,"nodeType":"ExpressionStatement","src":"11884:13:10"},{"expression":{"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2644,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"11915:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2647,"nodeType":"ExpressionStatement","src":"11915:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2650,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"11959:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2664,"nodeType":"IfStatement","src":"11955:95:10","trueBody":{"id":2663,"nodeType":"Block","src":"11976:74:10","statements":[{"expression":{"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2655,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"11994:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2658,"nodeType":"ExpressionStatement","src":"11994:12:10"},{"expression":{"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2659,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"12024:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2662,"nodeType":"ExpressionStatement","src":"12024:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2665,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"12067:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2679,"nodeType":"IfStatement","src":"12063:95:10","trueBody":{"id":2678,"nodeType":"Block","src":"12084:74:10","statements":[{"expression":{"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2670,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"12102:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2673,"nodeType":"ExpressionStatement","src":"12102:12:10"},{"expression":{"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2674,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"12132:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2677,"nodeType":"ExpressionStatement","src":"12132:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2680,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"12175:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2694,"nodeType":"IfStatement","src":"12171:95:10","trueBody":{"id":2693,"nodeType":"Block","src":"12192:74:10","statements":[{"expression":{"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2685,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"12210:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2688,"nodeType":"ExpressionStatement","src":"12210:12:10"},{"expression":{"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2689,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"12240:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2692,"nodeType":"ExpressionStatement","src":"12240:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2695,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"12283:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2705,"nodeType":"IfStatement","src":"12279:64:10","trueBody":{"id":2704,"nodeType":"Block","src":"12299:44:10","statements":[{"expression":{"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2700,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"12317:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2703,"nodeType":"ExpressionStatement","src":"12317:11:10"}]}}]},{"expression":{"id":2707,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"12369:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2630,"id":2708,"nodeType":"Return","src":"12362:13:10"}]},"documentation":{"id":2624,"nodeType":"StructuredDocumentation","src":"11474:240:10","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2710,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:10","nodeType":"FunctionDefinition","parameters":{"id":2627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2626,"mutability":"mutable","name":"value","nameLocation":"11743:5:10","nodeType":"VariableDeclaration","scope":2710,"src":"11735:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2625,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:10"},"returnParameters":{"id":2630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2710,"src":"11773:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2628,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:10"},"scope":2750,"src":"11719:663:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2748,"nodeType":"Block","src":"12619:174:10","statements":[{"id":2747,"nodeType":"UncheckedBlock","src":"12629:158:10","statements":[{"assignments":[2722],"declarations":[{"constant":false,"id":2722,"mutability":"mutable","name":"result","nameLocation":"12661:6:10","nodeType":"VariableDeclaration","scope":2747,"src":"12653:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2721,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2726,"initialValue":{"arguments":[{"id":2724,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"12677:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2723,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2710,2749],"referencedDeclaration":2710,"src":"12670:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12670:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2727,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2722,"src":"12704:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"},"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2728,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"12714:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2729,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"12726:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1891_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12735:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1889,"src":"12726:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2733,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2722,"src":"12747:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2736,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2738,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"12762:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:10","trueExpression":{"hexValue":"31","id":2741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2744,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2720,"id":2746,"nodeType":"Return","src":"12697:79:10"}]}]},"documentation":{"id":2711,"nodeType":"StructuredDocumentation","src":"12388:144:10","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2749,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:10","nodeType":"FunctionDefinition","parameters":{"id":2717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2713,"mutability":"mutable","name":"value","nameLocation":"12561:5:10","nodeType":"VariableDeclaration","scope":2749,"src":"12553:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2712,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2716,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:10","nodeType":"VariableDeclaration","scope":2749,"src":"12568:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2715,"nodeType":"UserDefinedTypeName","pathNode":{"id":2714,"name":"Rounding","nameLocations":["12568:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1891,"src":"12568:8:10"},"referencedDeclaration":1891,"src":"12568:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1891","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:10"},"returnParameters":{"id":2720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2749,"src":"12610:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2718,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:10"},"scope":2750,"src":"12537:256:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2751,"src":"202:12593:10","usedErrors":[]}],"src":"103:12693:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[2855]},"id":2856,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2752,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2753,"nodeType":"StructuredDocumentation","src":"134:80:11","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2855,"linearizedBaseContracts":[2855],"name":"SignedMathUpgradeable","nameLocation":"223:21:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2770,"nodeType":"Block","src":"386:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2763,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"403:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2764,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"407:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2767,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"415:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:11","trueExpression":{"id":2766,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"411:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2762,"id":2769,"nodeType":"Return","src":"396:20:11"}]},"documentation":{"id":2754,"nodeType":"StructuredDocumentation","src":"251:66:11","text":" @dev Returns the largest of two signed numbers."},"id":2771,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:11","nodeType":"FunctionDefinition","parameters":{"id":2759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2756,"mutability":"mutable","name":"a","nameLocation":"342:1:11","nodeType":"VariableDeclaration","scope":2771,"src":"335:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2755,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2758,"mutability":"mutable","name":"b","nameLocation":"352:1:11","nodeType":"VariableDeclaration","scope":2771,"src":"345:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2757,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:11"},"returnParameters":{"id":2762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2771,"src":"378:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2760,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:11"},"scope":2855,"src":"322:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2788,"nodeType":"Block","src":"565:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2781,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"582:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2782,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"586:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2785,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"594:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:11","trueExpression":{"id":2784,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"590:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2780,"id":2787,"nodeType":"Return","src":"575:20:11"}]},"documentation":{"id":2772,"nodeType":"StructuredDocumentation","src":"429:67:11","text":" @dev Returns the smallest of two signed numbers."},"id":2789,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:11","nodeType":"FunctionDefinition","parameters":{"id":2777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2774,"mutability":"mutable","name":"a","nameLocation":"521:1:11","nodeType":"VariableDeclaration","scope":2789,"src":"514:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2773,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2776,"mutability":"mutable","name":"b","nameLocation":"531:1:11","nodeType":"VariableDeclaration","scope":2789,"src":"524:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2775,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:11"},"returnParameters":{"id":2780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2789,"src":"557:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2778,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:11"},"scope":2855,"src":"501:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2832,"nodeType":"Block","src":"807:162:11","statements":[{"assignments":[2800],"declarations":[{"constant":false,"id":2800,"mutability":"mutable","name":"x","nameLocation":"876:1:11","nodeType":"VariableDeclaration","scope":2832,"src":"869:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2799,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2813,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2801,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"881:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2802,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"885:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2804,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2805,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"892:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2806,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"896:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2808,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2811,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:11"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2814,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2800,"src":"921:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2819,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2800,"src":"941:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2818,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2817,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:11","typeDescriptions":{}}},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:11","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2816,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2815,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:11","typeDescriptions":{}}},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2824,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"955:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2825,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"959:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2827,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2829,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2798,"id":2831,"nodeType":"Return","src":"914:48:11"}]},"documentation":{"id":2790,"nodeType":"StructuredDocumentation","src":"608:126:11","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2833,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:11","nodeType":"FunctionDefinition","parameters":{"id":2795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2792,"mutability":"mutable","name":"a","nameLocation":"763:1:11","nodeType":"VariableDeclaration","scope":2833,"src":"756:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2791,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2794,"mutability":"mutable","name":"b","nameLocation":"773:1:11","nodeType":"VariableDeclaration","scope":2833,"src":"766:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2793,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:11"},"returnParameters":{"id":2798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2797,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2833,"src":"799:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2796,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:11"},"scope":2855,"src":"739:230:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2853,"nodeType":"Block","src":"1113:158:11","statements":[{"id":2852,"nodeType":"UncheckedBlock","src":"1123:142:11","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2843,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"1238:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:11","subExpression":{"id":2847,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"1252:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:11","trueExpression":{"id":2846,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"1247:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2842,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2841,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:11","typeDescriptions":{}}},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2840,"id":2851,"nodeType":"Return","src":"1223:31:11"}]}]},"documentation":{"id":2834,"nodeType":"StructuredDocumentation","src":"975:78:11","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2854,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:11","nodeType":"FunctionDefinition","parameters":{"id":2837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2836,"mutability":"mutable","name":"n","nameLocation":"1078:1:11","nodeType":"VariableDeclaration","scope":2854,"src":"1071:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2835,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:11"},"returnParameters":{"id":2840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2854,"src":"1104:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2838,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:11"},"scope":2855,"src":"1058:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2856,"src":"215:1058:11","usedErrors":[]}],"src":"109:1165:11"},"id":11},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[3068],"Ownable":[2968]},"id":2969,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2857,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:12"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2858,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2969,"sourceUnit":3069,"src":"127:30:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2860,"name":"Context","nameLocations":["683:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3068,"src":"683:7:12"},"id":2861,"nodeType":"InheritanceSpecifier","src":"683:7:12"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2859,"nodeType":"StructuredDocumentation","src":"159:494:12","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":2968,"linearizedBaseContracts":[2968,3068],"name":"Ownable","nameLocation":"672:7:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2863,"mutability":"mutable","name":"_owner","nameLocation":"713:6:12","nodeType":"VariableDeclaration","scope":2968,"src":"697:22:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2862,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":2869,"name":"OwnershipTransferred","nameLocation":"732:20:12","nodeType":"EventDefinition","parameters":{"id":2868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2865,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:12","nodeType":"VariableDeclaration","scope":2869,"src":"753:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2864,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2867,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:12","nodeType":"VariableDeclaration","scope":2869,"src":"784:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2866,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:12"},"src":"726:84:12"},{"body":{"id":2878,"nodeType":"Block","src":"926:49:12","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2874,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"955:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2873,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2967,"src":"936:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2877,"nodeType":"ExpressionStatement","src":"936:32:12"}]},"documentation":{"id":2870,"nodeType":"StructuredDocumentation","src":"816:91:12","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":2879,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2871,"nodeType":"ParameterList","parameters":[],"src":"923:2:12"},"returnParameters":{"id":2872,"nodeType":"ParameterList","parameters":[],"src":"926:0:12"},"scope":2968,"src":"912:63:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2886,"nodeType":"Block","src":"1084:41:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2882,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"1094:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2884,"nodeType":"ExpressionStatement","src":"1094:13:12"},{"id":2885,"nodeType":"PlaceholderStatement","src":"1117:1:12"}]},"documentation":{"id":2880,"nodeType":"StructuredDocumentation","src":"981:77:12","text":" @dev Throws if called by any account other than the owner."},"id":2887,"name":"onlyOwner","nameLocation":"1072:9:12","nodeType":"ModifierDefinition","parameters":{"id":2881,"nodeType":"ParameterList","parameters":[],"src":"1081:2:12"},"src":"1063:62:12","virtual":false,"visibility":"internal"},{"body":{"id":2895,"nodeType":"Block","src":"1256:30:12","statements":[{"expression":{"id":2893,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"1273:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2892,"id":2894,"nodeType":"Return","src":"1266:13:12"}]},"documentation":{"id":2888,"nodeType":"StructuredDocumentation","src":"1131:65:12","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":2896,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:12","nodeType":"FunctionDefinition","parameters":{"id":2889,"nodeType":"ParameterList","parameters":[],"src":"1215:2:12"},"returnParameters":{"id":2892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2896,"src":"1247:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2890,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:12"},"scope":2968,"src":"1201:85:12","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2909,"nodeType":"Block","src":"1404:85:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2901,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"1422:5:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2903,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"1433:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":2906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":2900,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2908,"nodeType":"ExpressionStatement","src":"1414:68:12"}]},"documentation":{"id":2897,"nodeType":"StructuredDocumentation","src":"1292:62:12","text":" @dev Throws if the sender is not the owner."},"id":2910,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:12","nodeType":"FunctionDefinition","parameters":{"id":2898,"nodeType":"ParameterList","parameters":[],"src":"1379:2:12"},"returnParameters":{"id":2899,"nodeType":"ParameterList","parameters":[],"src":"1404:0:12"},"scope":2968,"src":"1359:130:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2923,"nodeType":"Block","src":"1885:47:12","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2917,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:12","typeDescriptions":{}}},"id":2920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2916,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2967,"src":"1895:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1895:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2922,"nodeType":"ExpressionStatement","src":"1895:30:12"}]},"documentation":{"id":2911,"nodeType":"StructuredDocumentation","src":"1495:331:12","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":2924,"implemented":true,"kind":"function","modifiers":[{"id":2914,"kind":"modifierInvocation","modifierName":{"id":2913,"name":"onlyOwner","nameLocations":["1875:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":2887,"src":"1875:9:12"},"nodeType":"ModifierInvocation","src":"1875:9:12"}],"name":"renounceOwnership","nameLocation":"1840:17:12","nodeType":"FunctionDefinition","parameters":{"id":2912,"nodeType":"ParameterList","parameters":[],"src":"1857:2:12"},"returnParameters":{"id":2915,"nodeType":"ParameterList","parameters":[],"src":"1885:0:12"},"scope":2968,"src":"1831:101:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2946,"nodeType":"Block","src":"2151:128:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2933,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2927,"src":"2169:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2935,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2934,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:12","typeDescriptions":{}}},"id":2937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":2932,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2161:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2161:73:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2941,"nodeType":"ExpressionStatement","src":"2161:73:12"},{"expression":{"arguments":[{"id":2943,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2927,"src":"2263:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2942,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2967,"src":"2244:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2244:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2945,"nodeType":"ExpressionStatement","src":"2244:28:12"}]},"documentation":{"id":2925,"nodeType":"StructuredDocumentation","src":"1938:138:12","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":2947,"implemented":true,"kind":"function","modifiers":[{"id":2930,"kind":"modifierInvocation","modifierName":{"id":2929,"name":"onlyOwner","nameLocations":["2141:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":2887,"src":"2141:9:12"},"nodeType":"ModifierInvocation","src":"2141:9:12"}],"name":"transferOwnership","nameLocation":"2090:17:12","nodeType":"FunctionDefinition","parameters":{"id":2928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2927,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:12","nodeType":"VariableDeclaration","scope":2947,"src":"2108:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2926,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:12"},"returnParameters":{"id":2931,"nodeType":"ParameterList","parameters":[],"src":"2151:0:12"},"scope":2968,"src":"2081:198:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2966,"nodeType":"Block","src":"2496:124:12","statements":[{"assignments":[2954],"declarations":[{"constant":false,"id":2954,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:12","nodeType":"VariableDeclaration","scope":2966,"src":"2506:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2953,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2956,"initialValue":{"id":2955,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"2525:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:12"},{"expression":{"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2957,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"2541:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2958,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"2550:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2960,"nodeType":"ExpressionStatement","src":"2541:17:12"},{"eventCall":{"arguments":[{"id":2962,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"2594:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2963,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"2604:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2961,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"2573:20:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2965,"nodeType":"EmitStatement","src":"2568:45:12"}]},"documentation":{"id":2948,"nodeType":"StructuredDocumentation","src":"2285:143:12","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":2967,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:12","nodeType":"FunctionDefinition","parameters":{"id":2951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2950,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:12","nodeType":"VariableDeclaration","scope":2967,"src":"2461:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2949,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:12"},"returnParameters":{"id":2952,"nodeType":"ParameterList","parameters":[],"src":"2496:0:12"},"scope":2968,"src":"2433:187:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2969,"src":"654:1968:12","usedErrors":[]}],"src":"102:2521:12"},"id":12},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[3046]},"id":3047,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2970,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2971,"nodeType":"StructuredDocumentation","src":"131:70:13","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":3046,"linearizedBaseContracts":[3046],"name":"IERC20","nameLocation":"212:6:13","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2972,"nodeType":"StructuredDocumentation","src":"225:158:13","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2980,"name":"Transfer","nameLocation":"394:8:13","nodeType":"EventDefinition","parameters":{"id":2979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2974,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:13","nodeType":"VariableDeclaration","scope":2980,"src":"403:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2973,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2976,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:13","nodeType":"VariableDeclaration","scope":2980,"src":"425:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2975,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2978,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:13","nodeType":"VariableDeclaration","scope":2980,"src":"445:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2977,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:13"},"src":"388:72:13"},{"anonymous":false,"documentation":{"id":2981,"nodeType":"StructuredDocumentation","src":"466:148:13","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2989,"name":"Approval","nameLocation":"625:8:13","nodeType":"EventDefinition","parameters":{"id":2988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2983,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:13","nodeType":"VariableDeclaration","scope":2989,"src":"634:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2982,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2985,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:13","nodeType":"VariableDeclaration","scope":2989,"src":"657:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2984,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2987,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:13","nodeType":"VariableDeclaration","scope":2989,"src":"682:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2986,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:13"},"src":"619:78:13"},{"documentation":{"id":2990,"nodeType":"StructuredDocumentation","src":"703:66:13","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":2995,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:13","nodeType":"FunctionDefinition","parameters":{"id":2991,"nodeType":"ParameterList","parameters":[],"src":"794:2:13"},"returnParameters":{"id":2994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2993,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2995,"src":"820:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2992,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:13"},"scope":3046,"src":"774:55:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2996,"nodeType":"StructuredDocumentation","src":"835:72:13","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":3003,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:13","nodeType":"FunctionDefinition","parameters":{"id":2999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2998,"mutability":"mutable","name":"account","nameLocation":"939:7:13","nodeType":"VariableDeclaration","scope":3003,"src":"931:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2997,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:13"},"returnParameters":{"id":3002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3001,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3003,"src":"971:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3000,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:13"},"scope":3046,"src":"912:68:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3004,"nodeType":"StructuredDocumentation","src":"986:202:13","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":3013,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:13","nodeType":"FunctionDefinition","parameters":{"id":3009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3006,"mutability":"mutable","name":"to","nameLocation":"1219:2:13","nodeType":"VariableDeclaration","scope":3013,"src":"1211:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3005,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3008,"mutability":"mutable","name":"amount","nameLocation":"1231:6:13","nodeType":"VariableDeclaration","scope":3013,"src":"1223:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3007,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:13"},"returnParameters":{"id":3012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3013,"src":"1257:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3010,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:13"},"scope":3046,"src":"1193:70:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3014,"nodeType":"StructuredDocumentation","src":"1269:264:13","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":3023,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:13","nodeType":"FunctionDefinition","parameters":{"id":3019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3016,"mutability":"mutable","name":"owner","nameLocation":"1565:5:13","nodeType":"VariableDeclaration","scope":3023,"src":"1557:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3015,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3018,"mutability":"mutable","name":"spender","nameLocation":"1580:7:13","nodeType":"VariableDeclaration","scope":3023,"src":"1572:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3017,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:13"},"returnParameters":{"id":3022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3021,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3023,"src":"1612:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3020,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:13"},"scope":3046,"src":"1538:83:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3024,"nodeType":"StructuredDocumentation","src":"1627:642:13","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3033,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:13","nodeType":"FunctionDefinition","parameters":{"id":3029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3026,"mutability":"mutable","name":"spender","nameLocation":"2299:7:13","nodeType":"VariableDeclaration","scope":3033,"src":"2291:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3025,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3028,"mutability":"mutable","name":"amount","nameLocation":"2316:6:13","nodeType":"VariableDeclaration","scope":3033,"src":"2308:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3027,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:13"},"returnParameters":{"id":3032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3033,"src":"2342:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3030,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:13"},"scope":3046,"src":"2274:74:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3034,"nodeType":"StructuredDocumentation","src":"2354:287:13","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3045,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:13","nodeType":"FunctionDefinition","parameters":{"id":3041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3036,"mutability":"mutable","name":"from","nameLocation":"2685:4:13","nodeType":"VariableDeclaration","scope":3045,"src":"2677:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3035,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3038,"mutability":"mutable","name":"to","nameLocation":"2707:2:13","nodeType":"VariableDeclaration","scope":3045,"src":"2699:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3037,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3040,"mutability":"mutable","name":"amount","nameLocation":"2727:6:13","nodeType":"VariableDeclaration","scope":3045,"src":"2719:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3039,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:13"},"returnParameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3045,"src":"2758:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3042,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:13"},"scope":3046,"src":"2646:118:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3047,"src":"202:2564:13","usedErrors":[]}],"src":"106:2661:13"},"id":13},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3068]},"id":3069,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3048,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:14"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":3049,"nodeType":"StructuredDocumentation","src":"111:496:14","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3068,"linearizedBaseContracts":[3068],"name":"Context","nameLocation":"626:7:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":3057,"nodeType":"Block","src":"702:34:14","statements":[{"expression":{"expression":{"id":3054,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:14","memberName":"sender","nodeType":"MemberAccess","src":"719:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3053,"id":3056,"nodeType":"Return","src":"712:17:14"}]},"id":3058,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:14","nodeType":"FunctionDefinition","parameters":{"id":3050,"nodeType":"ParameterList","parameters":[],"src":"659:2:14"},"returnParameters":{"id":3053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3052,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3058,"src":"693:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3051,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:14"},"scope":3068,"src":"640:96:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3066,"nodeType":"Block","src":"809:32:14","statements":[{"expression":{"expression":{"id":3063,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:14","memberName":"data","nodeType":"MemberAccess","src":"826:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3062,"id":3065,"nodeType":"Return","src":"819:15:14"}]},"id":3067,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:14","nodeType":"FunctionDefinition","parameters":{"id":3059,"nodeType":"ParameterList","parameters":[],"src":"759:2:14"},"returnParameters":{"id":3062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3061,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3067,"src":"793:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3060,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:14"},"scope":3068,"src":"742:99:14","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3069,"src":"608:235:14","usedErrors":[]}],"src":"86:758:14"},"id":14},"contracts/Paycrest.sol":{"ast":{"absolutePath":"contracts/Paycrest.sol","exportedSymbols":{"AddressUpgradeable":[1247],"Context":[3068],"ContextUpgradeable":[1289],"ECDSAUpgradeable":[1884],"IERC20":[3046],"IERC20PermitUpgradeable":[541],"IERC20Upgradeable":[505],"IPaycrest":[4182],"Initializable":[300],"MathUpgradeable":[2750],"Ownable":[2968],"PausableUpgradeable":[427],"Paycrest":[3781],"PaycrestSettingManager":[4006],"SafeERC20Upgradeable":[917],"SignedMathUpgradeable":[2855],"StringsUpgradeable":[1518]},"id":3782,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3070,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"39:24:15"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","id":3071,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3782,"sourceUnit":1885,"src":"65:85:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":3072,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3782,"sourceUnit":428,"src":"151:78:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":3073,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3782,"sourceUnit":918,"src":"230:88:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3074,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3782,"sourceUnit":2969,"src":"319:52:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/PaycrestSettingManager.sol","file":"./PaycrestSettingManager.sol","id":3076,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3782,"sourceUnit":4007,"src":"373:68:15","symbolAliases":[{"foreign":{"id":3075,"name":"PaycrestSettingManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4006,"src":"381:22:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interface/IPaycrest.sol","file":"./interface/IPaycrest.sol","id":3079,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3782,"sourceUnit":4183,"src":"442:60:15","symbolAliases":[{"foreign":{"id":3077,"name":"IPaycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"450:9:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3078,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"461:6:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3080,"name":"IPaycrest","nameLocations":["526:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":4182,"src":"526:9:15"},"id":3081,"nodeType":"InheritanceSpecifier","src":"526:9:15"},{"baseName":{"id":3082,"name":"PaycrestSettingManager","nameLocations":["537:22:15"],"nodeType":"IdentifierPath","referencedDeclaration":4006,"src":"537:22:15"},"id":3083,"nodeType":"InheritanceSpecifier","src":"537:22:15"},{"baseName":{"id":3084,"name":"PausableUpgradeable","nameLocations":["561:19:15"],"nodeType":"IdentifierPath","referencedDeclaration":427,"src":"561:19:15"},"id":3085,"nodeType":"InheritanceSpecifier","src":"561:19:15"}],"canonicalName":"Paycrest","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3781,"linearizedBaseContracts":[3781,427,4006,131,1289,300,4182],"name":"Paycrest","nameLocation":"514:8:15","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3089,"libraryName":{"id":3086,"name":"SafeERC20Upgradeable","nameLocations":["594:20:15"],"nodeType":"IdentifierPath","referencedDeclaration":917,"src":"594:20:15"},"nodeType":"UsingForDirective","src":"588:38:15","typeName":{"id":3088,"nodeType":"UserDefinedTypeName","pathNode":{"id":3087,"name":"IERC20","nameLocations":["619:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":3046,"src":"619:6:15"},"referencedDeclaration":3046,"src":"619:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3046","typeString":"contract IERC20"}}},{"global":false,"id":3092,"libraryName":{"id":3090,"name":"ECDSAUpgradeable","nameLocations":["637:16:15"],"nodeType":"IdentifierPath","referencedDeclaration":1884,"src":"637:16:15"},"nodeType":"UsingForDirective","src":"631:35:15","typeName":{"id":3091,"name":"bytes32","nodeType":"ElementaryTypeName","src":"658:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"canonicalName":"Paycrest.fee","id":3097,"members":[{"constant":false,"id":3094,"mutability":"mutable","name":"protocolFee","nameLocation":"701:11:15","nodeType":"VariableDeclaration","scope":3097,"src":"693:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3093,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3096,"mutability":"mutable","name":"liquidityProviderAmount","nameLocation":"730:23:15","nodeType":"VariableDeclaration","scope":3097,"src":"722:31:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3095,"name":"uint256","nodeType":"ElementaryTypeName","src":"722:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"fee","nameLocation":"679:3:15","nodeType":"StructDefinition","scope":3781,"src":"672:88:15","visibility":"public"},{"constant":false,"id":3102,"mutability":"mutable","name":"order","nameLocation":"800:5:15","nodeType":"VariableDeclaration","scope":3781,"src":"766:39:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order)"},"typeName":{"id":3101,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3098,"name":"bytes32","nodeType":"ElementaryTypeName","src":"774:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"766:25:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3100,"nodeType":"UserDefinedTypeName","pathNode":{"id":3099,"name":"Order","nameLocations":["785:5:15"],"nodeType":"IdentifierPath","referencedDeclaration":4094,"src":"785:5:15"},"referencedDeclaration":4094,"src":"785:5:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage_ptr","typeString":"struct IPaycrest.Order"}}},"visibility":"private"},{"constant":false,"id":3106,"mutability":"mutable","name":"_nonce","nameLocation":"847:6:15","nodeType":"VariableDeclaration","scope":3781,"src":"811:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3105,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3103,"name":"address","nodeType":"ElementaryTypeName","src":"819:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"811:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3104,"name":"uint256","nodeType":"ElementaryTypeName","src":"830:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":3110,"mutability":"mutable","name":"__gap","nameLocation":"879:5:15","nodeType":"VariableDeclaration","scope":3781,"src":"859:25:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3107,"name":"uint256","nodeType":"ElementaryTypeName","src":"859:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3109,"length":{"hexValue":"3530","id":3108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"867:2:15","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"859:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"},{"body":{"id":3117,"nodeType":"Block","src":"958:39:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3114,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"968:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"968:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3116,"nodeType":"ExpressionStatement","src":"968:22:15"}]},"documentation":{"id":3111,"nodeType":"StructuredDocumentation","src":"891:48:15","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":3118,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3112,"nodeType":"ParameterList","parameters":[],"src":"955:2:15"},"returnParameters":{"id":3113,"nodeType":"ParameterList","parameters":[],"src":"958:0:15"},"scope":3781,"src":"944:53:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3133,"nodeType":"Block","src":"1046:87:15","statements":[{"expression":{"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3123,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"1056:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3130305f303030","id":3124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1066:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100_000"},"src":"1056:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3126,"nodeType":"ExpressionStatement","src":"1056:17:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3127,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"1083:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1083:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3129,"nodeType":"ExpressionStatement","src":"1083:16:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3130,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"1109:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1109:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3132,"nodeType":"ExpressionStatement","src":"1109:17:15"}]},"functionSelector":"8129fc1c","id":3134,"implemented":true,"kind":"function","modifiers":[{"id":3121,"kind":"modifierInvocation","modifierName":{"id":3120,"name":"initializer","nameLocations":["1034:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":202,"src":"1034:11:15"},"nodeType":"ModifierInvocation","src":"1034:11:15"}],"name":"initialize","nameLocation":"1012:10:15","nodeType":"FunctionDefinition","parameters":{"id":3119,"nodeType":"ParameterList","parameters":[],"src":"1022:2:15"},"returnParameters":{"id":3122,"nodeType":"ParameterList","parameters":[],"src":"1046:0:15"},"scope":3781,"src":"1003:130:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3145,"nodeType":"Block","src":"1163:87:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3137,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1181:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1185:6:15","memberName":"sender","nodeType":"MemberAccess","src":"1181:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3139,"name":"_aggregatorAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"1195:18:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1181:32:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c7941676772656761746f72","id":3141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1215:16:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","typeString":"literal_string \"OnlyAggregator\""},"value":"OnlyAggregator"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","typeString":"literal_string \"OnlyAggregator\""}],"id":3136,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1173:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1173:59:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3143,"nodeType":"ExpressionStatement","src":"1173:59:15"},{"id":3144,"nodeType":"PlaceholderStatement","src":"1242:1:15"}]},"id":3146,"name":"onlyAggregator","nameLocation":"1148:14:15","nodeType":"ModifierDefinition","parameters":{"id":3135,"nodeType":"ParameterList","parameters":[],"src":"1163:0:15"},"src":"1139:111:15","virtual":false,"visibility":"internal"},{"body":{"id":3155,"nodeType":"Block","src":"1510:25:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3152,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"1520:6:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1520:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3154,"nodeType":"ExpressionStatement","src":"1520:8:15"}]},"documentation":{"id":3147,"nodeType":"StructuredDocumentation","src":"1452:17:15","text":"@dev pause "},"functionSelector":"8456cb59","id":3156,"implemented":true,"kind":"function","modifiers":[{"id":3150,"kind":"modifierInvocation","modifierName":{"id":3149,"name":"onlyOwner","nameLocations":["1500:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1500:9:15"},"nodeType":"ModifierInvocation","src":"1500:9:15"}],"name":"pause","nameLocation":"1483:5:15","nodeType":"FunctionDefinition","parameters":{"id":3148,"nodeType":"ParameterList","parameters":[],"src":"1488:2:15"},"returnParameters":{"id":3151,"nodeType":"ParameterList","parameters":[],"src":"1510:0:15"},"scope":3781,"src":"1474:61:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3165,"nodeType":"Block","src":"1603:27:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3162,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"1613:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1613:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3164,"nodeType":"ExpressionStatement","src":"1613:10:15"}]},"documentation":{"id":3157,"nodeType":"StructuredDocumentation","src":"1541:19:15","text":"@dev unpause "},"functionSelector":"3f4ba83a","id":3166,"implemented":true,"kind":"function","modifiers":[{"id":3160,"kind":"modifierInvocation","modifierName":{"id":3159,"name":"onlyOwner","nameLocations":["1593:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1593:9:15"},"nodeType":"ModifierInvocation","src":"1593:9:15"}],"name":"unpause","nameLocation":"1574:7:15","nodeType":"FunctionDefinition","parameters":{"id":3158,"nodeType":"ParameterList","parameters":[],"src":"1581:2:15"},"returnParameters":{"id":3161,"nodeType":"ParameterList","parameters":[],"src":"1603:0:15"},"scope":3781,"src":"1565:65:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[4118],"body":{"id":3264,"nodeType":"Block","src":"2220:1007:15","statements":[{"expression":{"arguments":[{"id":3193,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"2275:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3194,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3171,"src":"2283:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3195,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"2292:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3196,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"2308:19:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3197,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"2329:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3198,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"2341:16:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3192,"name":"_handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"2266:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (address,uint256,address,address,uint256,bytes32) view"}},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2266:92:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3200,"nodeType":"ExpressionStatement","src":"2266:92:15"},{"expression":{"arguments":[{"expression":{"id":3205,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2451:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2455:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2451:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3209,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2471:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_Paycrest_$3781","typeString":"contract Paycrest"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Paycrest_$3781","typeString":"contract Paycrest"}],"id":3208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2463:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3207,"name":"address","nodeType":"ElementaryTypeName","src":"2463:7:15","typeDescriptions":{}}},"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2463:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3211,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3171,"src":"2478:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3202,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"2430:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3201,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"2423:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3046_$","typeString":"type(contract IERC20)"}},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2423:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3046","typeString":"contract IERC20"}},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2438:12:15","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3045,"src":"2423:27:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2423:63:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3213,"nodeType":"ExpressionStatement","src":"2423:63:15"},{"expression":{"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2553:21:15","subExpression":{"baseExpression":{"id":3214,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"2553:6:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3217,"indexExpression":{"expression":{"id":3215,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2560:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2564:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2560:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2553:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3219,"nodeType":"ExpressionStatement","src":"2553:21:15"},{"expression":{"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3220,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"2640:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"id":3224,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2671:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2675:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2671:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3226,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"2683:6:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3229,"indexExpression":{"expression":{"id":3227,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2690:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2694:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2690:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2683:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3222,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2660:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3223,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2664:6:15","memberName":"encode","nodeType":"MemberAccess","src":"2660:10:15","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2660:42:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3221,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2650:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:53:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2640:63:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3233,"nodeType":"ExpressionStatement","src":"2640:63:15"},{"expression":{"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3234,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"2744:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3236,"indexExpression":{"id":3235,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"2750:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2744:14:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3238,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2789:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2793:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2789:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3240,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"2820:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3241,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"2860:19:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3242,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"2904:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3243,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"2934:5:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"hexValue":"66616c7365","id":3244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2966:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":3245,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"3000:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3248,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"3047:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3040:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":3246,"name":"uint64","nodeType":"ElementaryTypeName","src":"3040:6:15","typeDescriptions":{}}},"id":3249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3040:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":3250,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3171,"src":"3077:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3237,"name":"Order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4094,"src":"2761:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Order_$4094_storage_ptr_$","typeString":"type(struct IPaycrest.Order storage pointer)"}},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2781:6:15","2813:5:15","2840:18:15","2893:9:15","2928:4:15","2953:11:15","2985:13:15","3028:10:15","3069:6:15"],"names":["seller","token","senderFeeRecipient","senderFee","rate","isFulfilled","refundAddress","currentBPS","amount"],"nodeType":"FunctionCall","src":"2761:334:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_memory_ptr","typeString":"struct IPaycrest.Order memory"}},"src":"2744:351:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3253,"nodeType":"ExpressionStatement","src":"2744:351:15"},{"eventCall":{"arguments":[{"id":3255,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"3149:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3256,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3171,"src":"3157:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3257,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"3166:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3258,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"3175:5:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":3259,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"3182:16:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3260,"name":"_label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"3200:6:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3261,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"3208:11:15","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":3254,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"3141:7:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$_t_uint256_$_t_bytes32_$_t_bytes32_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes32,uint256,bytes32,bytes32,string memory)"}},"id":3262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3141:79:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3263,"nodeType":"EmitStatement","src":"3136:84:15"}]},"documentation":{"id":3167,"nodeType":"StructuredDocumentation","src":"1831:40:15","text":"@dev See {createOrder-IPaycrest}. "},"functionSelector":"2654ec7e","id":3265,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3188,"kind":"modifierInvocation","modifierName":{"id":3187,"name":"whenNotPaused","nameLocations":["2179:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":349,"src":"2179:13:15"},"nodeType":"ModifierInvocation","src":"2179:15:15"}],"name":"createOrder","nameLocation":"1885:11:15","nodeType":"FunctionDefinition","parameters":{"id":3186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3169,"mutability":"mutable","name":"_token","nameLocation":"1914:6:15","nodeType":"VariableDeclaration","scope":3265,"src":"1906:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3168,"name":"address","nodeType":"ElementaryTypeName","src":"1906:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3171,"mutability":"mutable","name":"_amount","nameLocation":"1939:7:15","nodeType":"VariableDeclaration","scope":3265,"src":"1931:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3170,"name":"uint256","nodeType":"ElementaryTypeName","src":"1931:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3173,"mutability":"mutable","name":"_institutionCode","nameLocation":"1965:16:15","nodeType":"VariableDeclaration","scope":3265,"src":"1957:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1957:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3175,"mutability":"mutable","name":"_label","nameLocation":"1999:6:15","nodeType":"VariableDeclaration","scope":3265,"src":"1991:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3174,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1991:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3177,"mutability":"mutable","name":"_rate","nameLocation":"2022:5:15","nodeType":"VariableDeclaration","scope":3265,"src":"2015:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3176,"name":"uint96","nodeType":"ElementaryTypeName","src":"2015:6:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3179,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"2046:19:15","nodeType":"VariableDeclaration","scope":3265,"src":"2038:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3178,"name":"address","nodeType":"ElementaryTypeName","src":"2038:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3181,"mutability":"mutable","name":"_senderFee","nameLocation":"2083:10:15","nodeType":"VariableDeclaration","scope":3265,"src":"2075:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3180,"name":"uint256","nodeType":"ElementaryTypeName","src":"2075:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3183,"mutability":"mutable","name":"_refundAddress","nameLocation":"2111:14:15","nodeType":"VariableDeclaration","scope":3265,"src":"2103:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3182,"name":"address","nodeType":"ElementaryTypeName","src":"2103:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3185,"mutability":"mutable","name":"messageHash","nameLocation":"2152:11:15","nodeType":"VariableDeclaration","scope":3265,"src":"2136:27:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3184,"name":"string","nodeType":"ElementaryTypeName","src":"2136:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1896:273:15"},"returnParameters":{"id":3191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3190,"mutability":"mutable","name":"orderId","nameLocation":"2211:7:15","nodeType":"VariableDeclaration","scope":3265,"src":"2203:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3189,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2203:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2202:17:15"},"scope":3781,"src":"1876:1351:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3344,"nodeType":"Block","src":"3397:498:15","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3281,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"3415:17:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3283,"indexExpression":{"id":3282,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"3433:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3415:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e4e6f74537570706f72746564","id":3284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3442:19:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","typeString":"literal_string \"TokenNotSupported\""},"value":"TokenNotSupported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","typeString":"literal_string \"TokenNotSupported\""}],"id":3280,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3407:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3407:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3286,"nodeType":"ExpressionStatement","src":"3407:55:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3288,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3269,"src":"3480:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3490:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3480:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e7449735a65726f","id":3291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3493:14:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","typeString":"literal_string \"AmountIsZero\""},"value":"AmountIsZero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","typeString":"literal_string \"AmountIsZero\""}],"id":3287,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3472:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3472:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3293,"nodeType":"ExpressionStatement","src":"3472:36:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3295,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"3526:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3552:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3544:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3296,"name":"address","nodeType":"ElementaryTypeName","src":"3544:7:15","typeDescriptions":{}}},"id":3299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3544:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3526:28:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468726f775a65726f41646472657373","id":3301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3556:18:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""},"value":"ThrowZeroAddress"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""}],"id":3294,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3518:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3518:57:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3303,"nodeType":"ExpressionStatement","src":"3518:57:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3305,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"3593:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3796_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":3307,"indexExpression":{"id":3306,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"3621:16:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3593:45:15","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3796_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"id":3308,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3639:4:15","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":3793,"src":"3593:50:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3655:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3310,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3647:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3309,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3647:7:15","typeDescriptions":{}}},"id":3312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3647:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3593:64:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964496e737469747574696f6e436f6465","id":3314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3659:24:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","typeString":"literal_string \"InvalidInstitutionCode\""},"value":"InvalidInstitutionCode"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","typeString":"literal_string \"InvalidInstitutionCode\""}],"id":3304,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3585:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3585:99:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3316,"nodeType":"ExpressionStatement","src":"3585:99:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3317,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"3699:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3712:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3699:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3331,"nodeType":"IfStatement","src":"3695:116:15","trueBody":{"id":3330,"nodeType":"Block","src":"3715:96:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3321,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3273,"src":"3737:19:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3768:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3323,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3760:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3322,"name":"address","nodeType":"ElementaryTypeName","src":"3760:7:15","typeDescriptions":{}}},"id":3325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3760:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3737:33:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696453656e646572466565526563697069656e74","id":3327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3772:27:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8","typeString":"literal_string \"InvalidSenderFeeRecipient\""},"value":"InvalidSenderFeeRecipient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8","typeString":"literal_string \"InvalidSenderFeeRecipient\""}],"id":3320,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3729:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3729:71:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3329,"nodeType":"ExpressionStatement","src":"3729:71:15"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3333,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"3828:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3334,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3269,"src":"3843:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"353030","id":3335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3853:3:15","typeDescriptions":{"typeIdentifier":"t_rational_500_by_1","typeString":"int_const 500"},"value":"500"},"src":"3843:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3337,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3842:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3338,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"3860:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3842:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3828:39:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53656e646572466565546f6f48696768","id":3341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3869:18:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4","typeString":"literal_string \"SenderFeeTooHigh\""},"value":"SenderFeeTooHigh"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4","typeString":"literal_string \"SenderFeeTooHigh\""}],"id":3332,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3820:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3820:68:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3343,"nodeType":"ExpressionStatement","src":"3820:68:15"}]},"id":3345,"implemented":true,"kind":"function","modifiers":[],"name":"_handler","nameLocation":"3242:8:15","nodeType":"FunctionDefinition","parameters":{"id":3278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3267,"mutability":"mutable","name":"_token","nameLocation":"3259:6:15","nodeType":"VariableDeclaration","scope":3345,"src":"3251:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3266,"name":"address","nodeType":"ElementaryTypeName","src":"3251:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3269,"mutability":"mutable","name":"_amount","nameLocation":"3275:7:15","nodeType":"VariableDeclaration","scope":3345,"src":"3267:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3268,"name":"uint256","nodeType":"ElementaryTypeName","src":"3267:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3271,"mutability":"mutable","name":"_refundAddress","nameLocation":"3292:14:15","nodeType":"VariableDeclaration","scope":3345,"src":"3284:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3270,"name":"address","nodeType":"ElementaryTypeName","src":"3284:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3273,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"3316:19:15","nodeType":"VariableDeclaration","scope":3345,"src":"3308:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3272,"name":"address","nodeType":"ElementaryTypeName","src":"3308:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3275,"mutability":"mutable","name":"_senderFee","nameLocation":"3345:10:15","nodeType":"VariableDeclaration","scope":3345,"src":"3337:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3274,"name":"uint256","nodeType":"ElementaryTypeName","src":"3337:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3277,"mutability":"mutable","name":"_institutionCode","nameLocation":"3365:16:15","nodeType":"VariableDeclaration","scope":3345,"src":"3357:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3276,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3357:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3250:132:15"},"returnParameters":{"id":3279,"nodeType":"ParameterList","parameters":[],"src":"3397:0:15"},"scope":3781,"src":"3233:662:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[4138],"body":{"id":3462,"nodeType":"Block","src":"4396:1325:15","statements":[{"expression":{"arguments":[{"id":3372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4471:28:15","subExpression":{"expression":{"baseExpression":{"id":3368,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"4472:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3370,"indexExpression":{"id":3369,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"4478:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4472:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3371,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4488:11:15","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":4087,"src":"4472:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7264657246756c66696c6c6564","id":3373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4501:16:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""},"value":"OrderFulfilled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""}],"id":3367,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4463:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4463:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3375,"nodeType":"ExpressionStatement","src":"4463:55:15"},{"assignments":[3377],"declarations":[{"constant":false,"id":3377,"mutability":"mutable","name":"token","nameLocation":"4575:5:15","nodeType":"VariableDeclaration","scope":3462,"src":"4567:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3376,"name":"address","nodeType":"ElementaryTypeName","src":"4567:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3382,"initialValue":{"expression":{"baseExpression":{"id":3378,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"4583:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3380,"indexExpression":{"id":3379,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"4589:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4583:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3381,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4599:5:15","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4079,"src":"4583:21:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4567:37:15"},{"expression":{"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3383,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"4683:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3385,"indexExpression":{"id":3384,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"4689:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4683:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3386,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4699:10:15","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":4091,"src":"4683:26:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3387,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"4713:14:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"4683:44:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3389,"nodeType":"ExpressionStatement","src":"4683:44:15"},{"assignments":[3392],"declarations":[{"constant":false,"id":3392,"mutability":"mutable","name":"_feeParams","nameLocation":"4885:10:15","nodeType":"VariableDeclaration","scope":3462,"src":"4874:21:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee"},"typeName":{"id":3391,"nodeType":"UserDefinedTypeName","pathNode":{"id":3390,"name":"fee","nameLocations":["4874:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":3097,"src":"4874:3:15"},"referencedDeclaration":3097,"src":"4874:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_storage_ptr","typeString":"struct Paycrest.fee"}},"visibility":"internal"}],"id":3398,"initialValue":{"arguments":[{"id":3394,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"4916:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3395,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"4926:14:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":3396,"name":"_isPartner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"4942:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3393,"name":"_calculateFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3658,"src":"4901:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_uint96_$_t_bool_$returns$_t_struct$_fee_$3097_memory_ptr_$","typeString":"function (bytes32,uint96,bool) view returns (struct Paycrest.fee memory)"}},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4901:52:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"nodeType":"VariableDeclarationStatement","src":"4872:81:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3399,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"4966:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3401,"indexExpression":{"id":3400,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"4972:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4966:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3402,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4982:10:15","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":4091,"src":"4966:26:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4996:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4966:31:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3425,"nodeType":"IfStatement","src":"4963:296:15","trueBody":{"id":3424,"nodeType":"Block","src":"4999:260:15","statements":[{"expression":{"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3405,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"5067:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3407,"indexExpression":{"id":3406,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"5073:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5067:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5083:11:15","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":4087,"src":"5067:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5097:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5067:34:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3411,"nodeType":"ExpressionStatement","src":"5067:34:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3412,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"5119:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3414,"indexExpression":{"id":3413,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"5125:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5119:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3415,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5135:9:15","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":4083,"src":"5119:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5147:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5119:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3423,"nodeType":"IfStatement","src":"5115:134:15","trueBody":{"id":3422,"nodeType":"Block","src":"5150:99:15","statements":[{"expression":{"arguments":[{"id":3419,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"5225:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3418,"name":"transferSenderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"5207:17:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5207:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3421,"nodeType":"ExpressionStatement","src":"5207:27:15"}]}}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3426,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"5281:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3427,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5292:11:15","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3094,"src":"5281:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5306:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5281:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3440,"nodeType":"IfStatement","src":"5277:157:15","trueBody":{"id":3439,"nodeType":"Block","src":"5309:125:15","statements":[{"expression":{"arguments":[{"id":3434,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"5383:15:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3435,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"5400:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3436,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5411:11:15","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3094,"src":"5400:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3431,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"5367:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3430,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"5360:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3046_$","typeString":"type(contract IERC20)"}},"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5360:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3046","typeString":"contract IERC20"}},"id":3433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5374:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3013,"src":"5360:22:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5360:63:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3438,"nodeType":"ExpressionStatement","src":"5360:63:15"}]}},{"expression":{"arguments":[{"id":3445,"name":"_liquidityProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"5510:18:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3446,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"5530:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3447,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5541:23:15","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3096,"src":"5530:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3442,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"5494:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3441,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"5487:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3046_$","typeString":"type(contract IERC20)"}},"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3046","typeString":"contract IERC20"}},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5501:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3013,"src":"5487:22:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:78:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3449,"nodeType":"ExpressionStatement","src":"5487:78:15"},{"eventCall":{"arguments":[{"id":3451,"name":"_splitOrderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3348,"src":"5611:13:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3452,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"5626:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3453,"name":"_label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3352,"src":"5636:6:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3454,"name":"_liquidityProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"5645:18:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3455,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"5665:14:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":3450,"name":"Settled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4041,"src":"5603:7:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_address_$_t_uint96_$returns$__$","typeString":"function (bytes32,bytes32,bytes32,address,uint96)"}},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5603:77:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3457,"nodeType":"EmitStatement","src":"5598:82:15"},{"expression":{"components":[{"id":3458,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"5698:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3459,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"5708:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3460,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5697:17:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_address_$","typeString":"tuple(bytes32,address)"}},"functionReturnParameters":3366,"id":3461,"nodeType":"Return","src":"5690:24:15"}]},"documentation":{"id":3346,"nodeType":"StructuredDocumentation","src":"4102:35:15","text":"@dev See {settle-IPaycrest}. "},"functionSelector":"5fe44cac","id":3463,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3361,"kind":"modifierInvocation","modifierName":{"id":3360,"name":"onlyAggregator","nameLocations":["4353:14:15"],"nodeType":"IdentifierPath","referencedDeclaration":3146,"src":"4353:14:15"},"nodeType":"ModifierInvocation","src":"4353:16:15"}],"name":"settle","nameLocation":"4151:6:15","nodeType":"FunctionDefinition","parameters":{"id":3359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3348,"mutability":"mutable","name":"_splitOrderId","nameLocation":"4175:13:15","nodeType":"VariableDeclaration","scope":3463,"src":"4167:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4167:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3350,"mutability":"mutable","name":"_orderId","nameLocation":"4206:8:15","nodeType":"VariableDeclaration","scope":3463,"src":"4198:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4198:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3352,"mutability":"mutable","name":"_label","nameLocation":"4233:6:15","nodeType":"VariableDeclaration","scope":3463,"src":"4225:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3351,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4225:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3354,"mutability":"mutable","name":"_liquidityProvider","nameLocation":"4257:18:15","nodeType":"VariableDeclaration","scope":3463,"src":"4249:26:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3353,"name":"address","nodeType":"ElementaryTypeName","src":"4249:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3356,"mutability":"mutable","name":"_settlePercent","nameLocation":"4293:14:15","nodeType":"VariableDeclaration","scope":3463,"src":"4286:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3355,"name":"uint64","nodeType":"ElementaryTypeName","src":"4286:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3358,"mutability":"mutable","name":"_isPartner","nameLocation":"4322:10:15","nodeType":"VariableDeclaration","scope":3463,"src":"4317:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3357,"name":"bool","nodeType":"ElementaryTypeName","src":"4317:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4157:185:15"},"returnParameters":{"id":3366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3363,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3463,"src":"4378:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3362,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4378:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3463,"src":"4387:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3364,"name":"address","nodeType":"ElementaryTypeName","src":"4387:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4377:18:15"},"scope":3781,"src":"4142:1579:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3498,"nodeType":"Block","src":"5781:289:15","statements":[{"assignments":[3469],"declarations":[{"constant":false,"id":3469,"mutability":"mutable","name":"recipient","nameLocation":"5799:9:15","nodeType":"VariableDeclaration","scope":3498,"src":"5791:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3468,"name":"address","nodeType":"ElementaryTypeName","src":"5791:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3474,"initialValue":{"expression":{"baseExpression":{"id":3470,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"5811:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3472,"indexExpression":{"id":3471,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"5817:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5811:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3473,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5827:18:15","memberName":"senderFeeRecipient","nodeType":"MemberAccess","referencedDeclaration":4081,"src":"5811:34:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5791:54:15"},{"assignments":[3476],"declarations":[{"constant":false,"id":3476,"mutability":"mutable","name":"_fee","nameLocation":"5863:4:15","nodeType":"VariableDeclaration","scope":3498,"src":"5855:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3475,"name":"uint256","nodeType":"ElementaryTypeName","src":"5855:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3481,"initialValue":{"expression":{"baseExpression":{"id":3477,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"5870:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3479,"indexExpression":{"id":3478,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"5876:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5870:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3480,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5886:9:15","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":4083,"src":"5870:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5855:40:15"},{"expression":{"arguments":[{"id":3489,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"5975:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3490,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"5986:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3483,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"5943:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3485,"indexExpression":{"id":3484,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"5949:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5943:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3486,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5959:5:15","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4079,"src":"5943:21:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3482,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"5936:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3046_$","typeString":"type(contract IERC20)"}},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5936:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3046","typeString":"contract IERC20"}},"id":3488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5966:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3013,"src":"5936:38:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5936:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3492,"nodeType":"ExpressionStatement","src":"5936:55:15"},{"eventCall":{"arguments":[{"id":3494,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"6047:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3495,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"6058:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3493,"name":"TransferSenderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"6029:17:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6029:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3497,"nodeType":"EmitStatement","src":"6024:39:15"}]},"id":3499,"implemented":true,"kind":"function","modifiers":[],"name":"transferSenderFee","nameLocation":"5736:17:15","nodeType":"FunctionDefinition","parameters":{"id":3466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3465,"mutability":"mutable","name":"_orderId","nameLocation":"5762:8:15","nodeType":"VariableDeclaration","scope":3499,"src":"5754:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3464,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5754:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5753:18:15"},"returnParameters":{"id":3467,"nodeType":"ParameterList","parameters":[],"src":"5781:0:15"},"scope":3781,"src":"5727:343:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[4150],"body":{"id":3578,"nodeType":"Block","src":"6220:630:15","statements":[{"expression":{"arguments":[{"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6295:28:15","subExpression":{"expression":{"baseExpression":{"id":3514,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"6296:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3516,"indexExpression":{"id":3515,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"6302:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6296:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3517,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6312:11:15","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":4087,"src":"6296:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7264657246756c66696c6c6564","id":3519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6325:16:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""},"value":"OrderFulfilled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""}],"id":3513,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6287:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6287:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3521,"nodeType":"ExpressionStatement","src":"6287:55:15"},{"assignments":[3523],"declarations":[{"constant":false,"id":3523,"mutability":"mutable","name":"refundAmount","nameLocation":"6401:12:15","nodeType":"VariableDeclaration","scope":3578,"src":"6393:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3522,"name":"uint256","nodeType":"ElementaryTypeName","src":"6393:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3530,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3524,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"6416:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3526,"indexExpression":{"id":3525,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"6422:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6416:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3527,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6432:6:15","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4093,"src":"6416:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3528,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"6441:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6416:29:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6393:52:15"},{"expression":{"arguments":[{"id":3538,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"6494:15:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3539,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"6511:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3532,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"6462:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3534,"indexExpression":{"id":3533,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"6468:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6462:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3535,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6478:5:15","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4079,"src":"6462:21:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3531,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"6455:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3046_$","typeString":"type(contract IERC20)"}},"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6455:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3046","typeString":"contract IERC20"}},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6485:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3013,"src":"6455:38:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6455:61:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3541,"nodeType":"ExpressionStatement","src":"6455:61:15"},{"expression":{"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3542,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"6557:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3544,"indexExpression":{"id":3543,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"6563:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6557:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3545,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6573:11:15","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":4087,"src":"6557:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6587:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6557:34:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3548,"nodeType":"ExpressionStatement","src":"6557:34:15"},{"expression":{"id":3554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3549,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"6601:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3551,"indexExpression":{"id":3550,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"6607:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6601:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3552,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6617:10:15","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":4091,"src":"6601:26:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:30:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3555,"nodeType":"ExpressionStatement","src":"6601:30:15"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3563,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"6730:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3565,"indexExpression":{"id":3564,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"6736:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6730:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3566,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6746:13:15","memberName":"refundAddress","nodeType":"MemberAccess","referencedDeclaration":4089,"src":"6730:29:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3567,"name":"refundAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"6761:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3557,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"6698:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3559,"indexExpression":{"id":3558,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"6704:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6698:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3560,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6714:5:15","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4079,"src":"6698:21:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3556,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"6691:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3046_$","typeString":"type(contract IERC20)"}},"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6691:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3046","typeString":"contract IERC20"}},"id":3562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6721:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3013,"src":"6691:38:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6691:83:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3569,"nodeType":"ExpressionStatement","src":"6691:83:15"},{"eventCall":{"arguments":[{"id":3571,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"6798:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3572,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"6804:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3573,"name":"_label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"6814:6:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3570,"name":"Refunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"6789:8:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (uint256,bytes32,bytes32)"}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6789:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3575,"nodeType":"EmitStatement","src":"6784:37:15"},{"expression":{"hexValue":"74727565","id":3576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6839:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3512,"id":3577,"nodeType":"Return","src":"6832:11:15"}]},"documentation":{"id":3500,"nodeType":"StructuredDocumentation","src":"6076:35:15","text":"@dev See {refund-IPaycrest}. "},"functionSelector":"d28a8d32","id":3579,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3509,"kind":"modifierInvocation","modifierName":{"id":3508,"name":"onlyAggregator","nameLocations":["6189:14:15"],"nodeType":"IdentifierPath","referencedDeclaration":3146,"src":"6189:14:15"},"nodeType":"ModifierInvocation","src":"6189:16:15"}],"name":"refund","nameLocation":"6125:6:15","nodeType":"FunctionDefinition","parameters":{"id":3507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3502,"mutability":"mutable","name":"_fee","nameLocation":"6140:4:15","nodeType":"VariableDeclaration","scope":3579,"src":"6132:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3501,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3504,"mutability":"mutable","name":"_orderId","nameLocation":"6154:8:15","nodeType":"VariableDeclaration","scope":3579,"src":"6146:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3503,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6146:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3506,"mutability":"mutable","name":"_label","nameLocation":"6172:6:15","nodeType":"VariableDeclaration","scope":3579,"src":"6164:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3505,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6164:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6131:48:15"},"returnParameters":{"id":3512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3579,"src":"6214:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3510,"name":"bool","nodeType":"ElementaryTypeName","src":"6214:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6213:6:15"},"scope":3781,"src":"6116:734:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3657,"nodeType":"Block","src":"6983:994:15","statements":[{"assignments":[3592],"declarations":[{"constant":false,"id":3592,"mutability":"mutable","name":"amount","nameLocation":"7061:6:15","nodeType":"VariableDeclaration","scope":3657,"src":"7053:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3591,"name":"uint256","nodeType":"ElementaryTypeName","src":"7053:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3597,"initialValue":{"expression":{"baseExpression":{"id":3593,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"7070:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3595,"indexExpression":{"id":3594,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"7076:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7070:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3596,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7086:6:15","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4093,"src":"7070:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7053:39:15"},{"expression":{"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3598,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"7141:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3599,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"7150:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"baseExpression":{"id":3600,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"7159:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3602,"indexExpression":{"id":3601,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"7165:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7159:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3603,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7175:9:15","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":4083,"src":"7159:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7150:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7141:43:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3606,"nodeType":"ExpressionStatement","src":"7141:43:15"},{"expression":{"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3607,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"7264:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3609,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7275:23:15","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3096,"src":"7264:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3610,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"7302:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3611,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"7311:14:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"7302:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3613,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7301:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3614,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"7329:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7301:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7264:72:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3617,"nodeType":"ExpressionStatement","src":"7264:72:15"},{"expression":{"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3618,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"7405:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3620,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7416:11:15","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3094,"src":"7405:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3621,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"7431:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3622,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7442:23:15","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3096,"src":"7431:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3623,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"7468:18:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"7431:55:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3625,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7430:57:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3626,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"7490:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7430:67:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7405:92:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3629,"nodeType":"ExpressionStatement","src":"7405:92:15"},{"expression":{"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3630,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"7603:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3632,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7614:23:15","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3096,"src":"7603:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3633,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"7641:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3634,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7652:23:15","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3096,"src":"7641:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":3635,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"7678:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3636,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7689:11:15","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3094,"src":"7678:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7641:59:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3638,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7640:61:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7603:98:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3640,"nodeType":"ExpressionStatement","src":"7603:98:15"},{"condition":{"id":3641,"name":"_isPartner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"7834:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3656,"nodeType":"IfStatement","src":"7830:141:15","trueBody":{"id":3655,"nodeType":"Block","src":"7846:125:15","statements":[{"expression":{"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3642,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"7860:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7871:23:15","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3096,"src":"7860:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":3645,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"7898:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3646,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7909:11:15","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3094,"src":"7898:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:60:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3648,"nodeType":"ExpressionStatement","src":"7860:60:15"},{"expression":{"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3649,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"7934:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3651,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7945:11:15","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3094,"src":"7934:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7959:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7934:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3654,"nodeType":"ExpressionStatement","src":"7934:26:15"}]}}]},"id":3658,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateFees","nameLocation":"6865:14:15","nodeType":"FunctionDefinition","parameters":{"id":3586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3581,"mutability":"mutable","name":"_orderId","nameLocation":"6888:8:15","nodeType":"VariableDeclaration","scope":3658,"src":"6880:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3580,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6880:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3583,"mutability":"mutable","name":"_settlePercent","nameLocation":"6905:14:15","nodeType":"VariableDeclaration","scope":3658,"src":"6898:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3582,"name":"uint96","nodeType":"ElementaryTypeName","src":"6898:6:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3585,"mutability":"mutable","name":"_isPartner","nameLocation":"6926:10:15","nodeType":"VariableDeclaration","scope":3658,"src":"6921:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3584,"name":"bool","nodeType":"ElementaryTypeName","src":"6921:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6879:58:15"},"returnParameters":{"id":3590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3589,"mutability":"mutable","name":"_feeParams","nameLocation":"6970:10:15","nodeType":"VariableDeclaration","scope":3658,"src":"6959:21:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_memory_ptr","typeString":"struct Paycrest.fee"},"typeName":{"id":3588,"nodeType":"UserDefinedTypeName","pathNode":{"id":3587,"name":"fee","nameLocations":["6959:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":3097,"src":"6959:3:15"},"referencedDeclaration":3097,"src":"6959:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3097_storage_ptr","typeString":"struct Paycrest.fee"}},"visibility":"internal"}],"src":"6958:24:15"},"scope":3781,"src":"6856:1121:15","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[4167],"body":{"id":3671,"nodeType":"Block","src":"8300:39:15","statements":[{"expression":{"baseExpression":{"id":3667,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"8317:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4094_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3669,"indexExpression":{"id":3668,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3661,"src":"8323:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8317:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage","typeString":"struct IPaycrest.Order storage ref"}},"functionReturnParameters":3666,"id":3670,"nodeType":"Return","src":"8310:22:15"}]},"documentation":{"id":3659,"nodeType":"StructuredDocumentation","src":"8178:41:15","text":"@dev See {getOrderInfo-IPaycrest}. "},"functionSelector":"768c6ec0","id":3672,"implemented":true,"kind":"function","modifiers":[],"name":"getOrderInfo","nameLocation":"8233:12:15","nodeType":"FunctionDefinition","parameters":{"id":3662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3661,"mutability":"mutable","name":"_orderId","nameLocation":"8254:8:15","nodeType":"VariableDeclaration","scope":3672,"src":"8246:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3660,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8246:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8245:18:15"},"returnParameters":{"id":3666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3672,"src":"8286:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_memory_ptr","typeString":"struct IPaycrest.Order"},"typeName":{"id":3664,"nodeType":"UserDefinedTypeName","pathNode":{"id":3663,"name":"Order","nameLocations":["8286:5:15"],"nodeType":"IdentifierPath","referencedDeclaration":4094,"src":"8286:5:15"},"referencedDeclaration":4094,"src":"8286:5:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage_ptr","typeString":"struct IPaycrest.Order"}},"visibility":"internal"}],"src":"8285:14:15"},"scope":3781,"src":"8224:115:15","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4158],"body":{"id":3684,"nodeType":"Block","src":"8465:49:15","statements":[{"expression":{"baseExpression":{"id":3680,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"8482:17:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3682,"indexExpression":{"id":3681,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"8500:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8482:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3679,"id":3683,"nodeType":"Return","src":"8475:32:15"}]},"documentation":{"id":3673,"nodeType":"StructuredDocumentation","src":"8345:45:15","text":"@dev See {isTokenSupported-IPaycrest}. "},"functionSelector":"75151b63","id":3685,"implemented":true,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"8404:16:15","nodeType":"FunctionDefinition","parameters":{"id":3676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3675,"mutability":"mutable","name":"_token","nameLocation":"8429:6:15","nodeType":"VariableDeclaration","scope":3685,"src":"8421:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3674,"name":"address","nodeType":"ElementaryTypeName","src":"8421:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8420:16:15"},"returnParameters":{"id":3679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3678,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3685,"src":"8459:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3677,"name":"bool","nodeType":"ElementaryTypeName","src":"8459:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8458:6:15"},"scope":3781,"src":"8395:119:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3698,"nodeType":"Block","src":"8681:57:15","statements":[{"expression":{"baseExpression":{"id":3694,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"8698:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3796_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":3696,"indexExpression":{"id":3695,"name":"code","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"8726:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8698:33:15","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3796_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"functionReturnParameters":3693,"id":3697,"nodeType":"Return","src":"8691:40:15"}]},"documentation":{"id":3686,"nodeType":"StructuredDocumentation","src":"8520:56:15","text":"@dev See {getSupportedInstitutionName-IPaycrest}. "},"functionSelector":"87490d86","id":3699,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInstitutionName","nameLocation":"8590:27:15","nodeType":"FunctionDefinition","parameters":{"id":3689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3688,"mutability":"mutable","name":"code","nameLocation":"8626:4:15","nodeType":"VariableDeclaration","scope":3699,"src":"8618:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3687,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8618:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8617:14:15"},"returnParameters":{"id":3693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3699,"src":"8655:24:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3796_memory_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"},"typeName":{"id":3691,"nodeType":"UserDefinedTypeName","pathNode":{"id":3690,"name":"InstitutionByCode","nameLocations":["8655:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":3796,"src":"8655:17:15"},"referencedDeclaration":3796,"src":"8655:17:15","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3796_storage_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"}},"visibility":"internal"}],"src":"8654:26:15"},"scope":3781,"src":"8581:157:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3757,"nodeType":"Block","src":"8841:390:15","statements":[{"assignments":[3712],"declarations":[{"constant":false,"id":3712,"mutability":"mutable","name":"institutions","nameLocation":"8872:12:15","nodeType":"VariableDeclaration","scope":3757,"src":"8851:33:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":3710,"nodeType":"UserDefinedTypeName","pathNode":{"id":3709,"name":"Institution","nameLocations":["8851:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":3791,"src":"8851:11:15"},"referencedDeclaration":3791,"src":"8851:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3791_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3711,"nodeType":"ArrayTypeName","src":"8851:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"id":3716,"initialValue":{"baseExpression":{"id":3713,"name":"supportedInstitutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"8887:21:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$3791_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution storage ref[] storage ref)"}},"id":3715,"indexExpression":{"id":3714,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"8909:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8887:31:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_storage_$dyn_storage","typeString":"struct PaycrestSettingManager.Institution storage ref[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8851:67:15"},{"assignments":[3718],"declarations":[{"constant":false,"id":3718,"mutability":"mutable","name":"length","nameLocation":"8936:6:15","nodeType":"VariableDeclaration","scope":3757,"src":"8928:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3717,"name":"uint256","nodeType":"ElementaryTypeName","src":"8928:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3721,"initialValue":{"expression":{"id":3719,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"8945:12:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8958:6:15","memberName":"length","nodeType":"MemberAccess","src":"8945:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8928:36:15"},{"assignments":[3726],"declarations":[{"constant":false,"id":3726,"mutability":"mutable","name":"result","nameLocation":"8995:6:15","nodeType":"VariableDeclaration","scope":3757,"src":"8974:27:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":3724,"nodeType":"UserDefinedTypeName","pathNode":{"id":3723,"name":"Institution","nameLocations":["8974:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":3791,"src":"8974:11:15"},"referencedDeclaration":3791,"src":"8974:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3791_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3725,"nodeType":"ArrayTypeName","src":"8974:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"id":3733,"initialValue":{"arguments":[{"id":3731,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"9022:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"9004:17:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct PaycrestSettingManager.Institution memory[] memory)"},"typeName":{"baseType":{"id":3728,"nodeType":"UserDefinedTypeName","pathNode":{"id":3727,"name":"Institution","nameLocations":["9008:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":3791,"src":"9008:11:15"},"referencedDeclaration":3791,"src":"9008:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3791_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3729,"nodeType":"ArrayTypeName","src":"9008:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}}},"id":3732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9004:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8974:55:15"},{"body":{"id":3753,"nodeType":"Block","src":"9082:111:15","statements":[{"expression":{"id":3747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3741,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"9096:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3743,"indexExpression":{"id":3742,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"9103:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9096:9:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3791_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3744,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"9108:12:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3746,"indexExpression":{"id":3745,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"9121:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9108:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3791_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"src":"9096:27:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3791_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":3748,"nodeType":"ExpressionStatement","src":"9096:27:15"},{"id":3752,"nodeType":"UncheckedBlock","src":"9137:46:15","statements":[{"expression":{"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9165:3:15","subExpression":{"id":3749,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"9165:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3751,"nodeType":"ExpressionStatement","src":"9165:3:15"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3738,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"9068:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3739,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"9072:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9068:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3754,"initializationExpression":{"assignments":[3735],"declarations":[{"constant":false,"id":3735,"mutability":"mutable","name":"i","nameLocation":"9061:1:15","nodeType":"VariableDeclaration","scope":3754,"src":"9053:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3734,"name":"uint256","nodeType":"ElementaryTypeName","src":"9053:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3737,"initialValue":{"hexValue":"30","id":3736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9065:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9053:13:15"},"nodeType":"ForStatement","src":"9048:145:15"},{"expression":{"id":3755,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"9218:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"functionReturnParameters":3707,"id":3756,"nodeType":"Return","src":"9211:13:15"}]},"functionSelector":"02621338","id":3758,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInstitutions","nameLocation":"8753:24:15","nodeType":"FunctionDefinition","parameters":{"id":3702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3701,"mutability":"mutable","name":"currency","nameLocation":"8786:8:15","nodeType":"VariableDeclaration","scope":3758,"src":"8778:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3700,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8778:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8777:18:15"},"returnParameters":{"id":3707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3758,"src":"8819:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":3704,"nodeType":"UserDefinedTypeName","pathNode":{"id":3703,"name":"Institution","nameLocations":["8819:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":3791,"src":"8819:11:15"},"referencedDeclaration":3791,"src":"8819:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3791_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3705,"nodeType":"ArrayTypeName","src":"8819:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"src":"8818:22:15"},"scope":3781,"src":"8744:487:15","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4175],"body":{"id":3770,"nodeType":"Block","src":"9371:52:15","statements":[{"expression":{"components":[{"id":3766,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"9388:18:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":3767,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"9408:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3768,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9387:29:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_uint256_$","typeString":"tuple(uint64,uint256)"}},"functionReturnParameters":3765,"id":3769,"nodeType":"Return","src":"9381:35:15"}]},"documentation":{"id":3759,"nodeType":"StructuredDocumentation","src":"9237:42:15","text":"@dev See {getFeeDetails-IPaycrest}. "},"functionSelector":"b810c636","id":3771,"implemented":true,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"9293:13:15","nodeType":"FunctionDefinition","parameters":{"id":3760,"nodeType":"ParameterList","parameters":[],"src":"9306:2:15"},"returnParameters":{"id":3765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3771,"src":"9340:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3761,"name":"uint64","nodeType":"ElementaryTypeName","src":"9340:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3764,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3771,"src":"9357:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3763,"name":"uint256","nodeType":"ElementaryTypeName","src":"9357:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9330:40:15"},"scope":3781,"src":"9284:139:15","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4181],"body":{"id":3779,"nodeType":"Block","src":"9537:35:15","statements":[{"expression":{"id":3777,"name":"_aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3806,"src":"9554:11:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":3776,"id":3778,"nodeType":"Return","src":"9547:18:15"}]},"documentation":{"id":3772,"nodeType":"StructuredDocumentation","src":"9429:42:15","text":"@dev See {getAggregator-IPaycrest}. "},"functionSelector":"3ad59dbc","id":3780,"implemented":true,"kind":"function","modifiers":[],"name":"getAggregator","nameLocation":"9485:13:15","nodeType":"FunctionDefinition","parameters":{"id":3773,"nodeType":"ParameterList","parameters":[],"src":"9498:2:15"},"returnParameters":{"id":3776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3775,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3780,"src":"9523:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3774,"name":"bytes","nodeType":"ElementaryTypeName","src":"9523:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9522:14:15"},"scope":3781,"src":"9476:96:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3782,"src":"505:9070:15","usedErrors":[]}],"src":"39:9537:15"},"id":15},"contracts/PaycrestSettingManager.sol":{"ast":{"absolutePath":"contracts/PaycrestSettingManager.sol","exportedSymbols":{"AddressUpgradeable":[1247],"ContextUpgradeable":[1289],"Initializable":[300],"OwnableUpgradeable":[131],"PaycrestSettingManager":[4006]},"id":4007,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3783,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"39:24:16"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":3784,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4007,"sourceUnit":132,"src":"64:75:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3785,"name":"OwnableUpgradeable","nameLocations":["176:18:16"],"nodeType":"IdentifierPath","referencedDeclaration":131,"src":"176:18:16"},"id":3786,"nodeType":"InheritanceSpecifier","src":"176:18:16"}],"canonicalName":"PaycrestSettingManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4006,"linearizedBaseContracts":[4006,131,1289,300],"name":"PaycrestSettingManager","nameLocation":"150:22:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"PaycrestSettingManager.Institution","id":3791,"members":[{"constant":false,"id":3788,"mutability":"mutable","name":"code","nameLocation":"239:4:16","nodeType":"VariableDeclaration","scope":3791,"src":"231:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3787,"name":"bytes32","nodeType":"ElementaryTypeName","src":"231:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3790,"mutability":"mutable","name":"name","nameLocation":"261:4:16","nodeType":"VariableDeclaration","scope":3791,"src":"253:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"253:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Institution","nameLocation":"209:11:16","nodeType":"StructDefinition","scope":4006,"src":"202:70:16","visibility":"public"},{"canonicalName":"PaycrestSettingManager.InstitutionByCode","id":3796,"members":[{"constant":false,"id":3793,"mutability":"mutable","name":"name","nameLocation":"320:4:16","nodeType":"VariableDeclaration","scope":3796,"src":"312:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3792,"name":"bytes32","nodeType":"ElementaryTypeName","src":"312:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3795,"mutability":"mutable","name":"currency","nameLocation":"342:8:16","nodeType":"VariableDeclaration","scope":3796,"src":"334:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3794,"name":"bytes32","nodeType":"ElementaryTypeName","src":"334:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"InstitutionByCode","nameLocation":"284:17:16","nodeType":"StructDefinition","scope":4006,"src":"277:80:16","visibility":"public"},{"constant":false,"id":3798,"mutability":"mutable","name":"MAX_BPS","nameLocation":"379:7:16","nodeType":"VariableDeclaration","scope":4006,"src":"362:24:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3797,"name":"uint256","nodeType":"ElementaryTypeName","src":"362:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3800,"mutability":"mutable","name":"protocolFeePercent","nameLocation":"408:18:16","nodeType":"VariableDeclaration","scope":4006,"src":"392:34:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3799,"name":"uint64","nodeType":"ElementaryTypeName","src":"392:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3802,"mutability":"mutable","name":"treasuryAddress","nameLocation":"449:15:16","nodeType":"VariableDeclaration","scope":4006,"src":"432:32:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3801,"name":"address","nodeType":"ElementaryTypeName","src":"432:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3804,"mutability":"mutable","name":"_aggregatorAddress","nameLocation":"487:18:16","nodeType":"VariableDeclaration","scope":4006,"src":"470:35:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3803,"name":"address","nodeType":"ElementaryTypeName","src":"470:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3806,"mutability":"mutable","name":"_aggregator","nameLocation":"526:11:16","nodeType":"VariableDeclaration","scope":4006,"src":"511:26:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes"},"typeName":{"id":3805,"name":"bytes","nodeType":"ElementaryTypeName","src":"511:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3810,"mutability":"mutable","name":"__gap","nameLocation":"677:5:16","nodeType":"VariableDeclaration","scope":4006,"src":"657:25:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3807,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3809,"length":{"hexValue":"3530","id":3808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"665:2:16","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"657:11:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"},{"constant":false,"id":3814,"mutability":"mutable","name":"_isTokenSupported","nameLocation":"723:17:16","nodeType":"VariableDeclaration","scope":4006,"src":"689:51:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3813,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3811,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"689:24:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3812,"name":"bool","nodeType":"ElementaryTypeName","src":"708:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":3820,"mutability":"mutable","name":"supportedInstitutions","nameLocation":"790:21:16","nodeType":"VariableDeclaration","scope":4006,"src":"747:64:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$3791_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])"},"typeName":{"id":3819,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3815,"name":"bytes32","nodeType":"ElementaryTypeName","src":"755:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"747:33:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$3791_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":3817,"nodeType":"UserDefinedTypeName","pathNode":{"id":3816,"name":"Institution","nameLocations":["766:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":3791,"src":"766:11:16"},"referencedDeclaration":3791,"src":"766:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3791_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3818,"nodeType":"ArrayTypeName","src":"766:13:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}}},"visibility":"internal"},{"constant":false,"id":3825,"mutability":"mutable","name":"supportedInstitutionsByCode","nameLocation":"864:27:16","nodeType":"VariableDeclaration","scope":4006,"src":"817:74:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3796_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)"},"typeName":{"id":3824,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3821,"name":"bytes32","nodeType":"ElementaryTypeName","src":"825:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"817:37:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3796_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3823,"nodeType":"UserDefinedTypeName","pathNode":{"id":3822,"name":"InstitutionByCode","nameLocations":["836:17:16"],"nodeType":"IdentifierPath","referencedDeclaration":3796,"src":"836:17:16"},"referencedDeclaration":3796,"src":"836:17:16","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3796_storage_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"}}},"visibility":"internal"},{"anonymous":false,"eventSelector":"e22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930","id":3833,"name":"SettingManagerBool","nameLocation":"904:18:16","nodeType":"EventDefinition","parameters":{"id":3832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3827,"indexed":false,"mutability":"mutable","name":"what","nameLocation":"931:4:16","nodeType":"VariableDeclaration","scope":3833,"src":"923:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3826,"name":"bytes32","nodeType":"ElementaryTypeName","src":"923:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3829,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"945:5:16","nodeType":"VariableDeclaration","scope":3833,"src":"937:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3828,"name":"address","nodeType":"ElementaryTypeName","src":"937:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3831,"indexed":false,"mutability":"mutable","name":"status","nameLocation":"957:6:16","nodeType":"VariableDeclaration","scope":3833,"src":"952:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3830,"name":"bool","nodeType":"ElementaryTypeName","src":"952:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"922:42:16"},"src":"898:67:16"},{"anonymous":false,"eventSelector":"b94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e26446","id":3837,"name":"ProtocolFeesUpdated","nameLocation":"976:19:16","nodeType":"EventDefinition","parameters":{"id":3836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3835,"indexed":false,"mutability":"mutable","name":"protocolFee","nameLocation":"1003:11:16","nodeType":"VariableDeclaration","scope":3837,"src":"996:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3834,"name":"uint64","nodeType":"ElementaryTypeName","src":"996:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"995:20:16"},"src":"970:46:16"},{"anonymous":false,"eventSelector":"d8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb","id":3841,"name":"ProtocolAddressesUpdated","nameLocation":"1027:24:16","nodeType":"EventDefinition","parameters":{"id":3840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3839,"indexed":false,"mutability":"mutable","name":"treasuryAddress","nameLocation":"1060:15:16","nodeType":"VariableDeclaration","scope":3841,"src":"1052:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3838,"name":"address","nodeType":"ElementaryTypeName","src":"1052:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1051:25:16"},"src":"1021:56:16"},{"anonymous":false,"eventSelector":"6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef","id":3845,"name":"SetAggregator","nameLocation":"1088:13:16","nodeType":"EventDefinition","parameters":{"id":3844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3843,"indexed":false,"mutability":"mutable","name":"aggregator","nameLocation":"1108:10:16","nodeType":"VariableDeclaration","scope":3845,"src":"1102:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3842,"name":"bytes","nodeType":"ElementaryTypeName","src":"1102:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1101:18:16"},"src":"1082:38:16"},{"anonymous":false,"eventSelector":"2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73","id":3849,"name":"SetFeeRecipient","nameLocation":"1131:15:16","nodeType":"EventDefinition","parameters":{"id":3848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3847,"indexed":false,"mutability":"mutable","name":"treasuryAddress","nameLocation":"1155:15:16","nodeType":"VariableDeclaration","scope":3849,"src":"1147:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3846,"name":"address","nodeType":"ElementaryTypeName","src":"1147:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1146:25:16"},"src":"1125:47:16"},{"body":{"id":3886,"nodeType":"Block","src":"1467:190:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3861,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3853,"src":"1485:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1502:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3863,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1494:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3862,"name":"address","nodeType":"ElementaryTypeName","src":"1494:7:16","typeDescriptions":{}}},"id":3865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1494:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1485:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50617963726573743a207a65726f2061646472657373","id":3867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1506:24:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""},"value":"Paycrest: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""}],"id":3860,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1477:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1477:54:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3869,"nodeType":"ExpressionStatement","src":"1477:54:16"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3870,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"1545:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"746f6b656e","id":3871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1553:7:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_9b9b0454cadcb5884dd3faa6ba975da4d2459aa3f11d31291a25a8358f84946d","typeString":"literal_string \"token\""},"value":"token"},"src":"1545:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3879,"nodeType":"IfStatement","src":"1541:54:16","trueBody":{"expression":{"id":3877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3873,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"1562:17:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3875,"indexExpression":{"id":3874,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3853,"src":"1580:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1562:24:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3876,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"1589:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1562:33:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3878,"nodeType":"ExpressionStatement","src":"1562:33:16"}},{"eventCall":{"arguments":[{"id":3881,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"1630:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3882,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3853,"src":"1636:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3883,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"1643:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3880,"name":"SettingManagerBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"1611:18:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_bool_$returns$__$","typeString":"function (bytes32,address,bool)"}},"id":3884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1611:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3885,"nodeType":"EmitStatement","src":"1606:44:16"}]},"functionSelector":"99e3c0b4","id":3887,"implemented":true,"kind":"function","modifiers":[{"id":3858,"kind":"modifierInvocation","modifierName":{"id":3857,"name":"onlyOwner","nameLocations":["1457:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1457:9:16"},"nodeType":"ModifierInvocation","src":"1457:9:16"}],"name":"settingManagerBool","nameLocation":"1387:18:16","nodeType":"FunctionDefinition","parameters":{"id":3856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3851,"mutability":"mutable","name":"what","nameLocation":"1414:4:16","nodeType":"VariableDeclaration","scope":3887,"src":"1406:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3850,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1406:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3853,"mutability":"mutable","name":"value","nameLocation":"1428:5:16","nodeType":"VariableDeclaration","scope":3887,"src":"1420:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3852,"name":"address","nodeType":"ElementaryTypeName","src":"1420:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3855,"mutability":"mutable","name":"status","nameLocation":"1440:6:16","nodeType":"VariableDeclaration","scope":3887,"src":"1435:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3854,"name":"bool","nodeType":"ElementaryTypeName","src":"1435:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1405:42:16"},"returnParameters":{"id":3859,"nodeType":"ParameterList","parameters":[],"src":"1467:0:16"},"scope":4006,"src":"1378:279:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3940,"nodeType":"Block","src":"1769:394:16","statements":[{"assignments":[3899],"declarations":[{"constant":false,"id":3899,"mutability":"mutable","name":"length","nameLocation":"1788:6:16","nodeType":"VariableDeclaration","scope":3940,"src":"1780:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3898,"name":"uint256","nodeType":"ElementaryTypeName","src":"1780:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3902,"initialValue":{"expression":{"id":3900,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"1797:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1810:6:16","memberName":"length","nodeType":"MemberAccess","src":"1797:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1780:36:16"},{"body":{"id":3938,"nodeType":"Block","src":"1857:300:16","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3914,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"1908:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3916,"indexExpression":{"id":3915,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"1921:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1908:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3791_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Institution_$3791_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}],"expression":{"baseExpression":{"id":3910,"name":"supportedInstitutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"1871:21:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$3791_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution storage ref[] storage ref)"}},"id":3912,"indexExpression":{"id":3911,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"1893:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1871:31:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_storage_$dyn_storage","typeString":"struct PaycrestSettingManager.Institution storage ref[] storage ref"}},"id":3913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1903:4:16","memberName":"push","nodeType":"MemberAccess","src":"1871:36:16","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Institution_$3791_storage_$dyn_storage_ptr_$_t_struct$_Institution_$3791_storage_$returns$__$attached_to$_t_array$_t_struct$_Institution_$3791_storage_$dyn_storage_ptr_$","typeString":"function (struct PaycrestSettingManager.Institution storage ref[] storage pointer,struct PaycrestSettingManager.Institution storage ref)"}},"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1871:53:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3918,"nodeType":"ExpressionStatement","src":"1871:53:16"},{"expression":{"id":3932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3919,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"1938:27:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3796_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":3924,"indexExpression":{"expression":{"baseExpression":{"id":3920,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"1966:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3922,"indexExpression":{"id":3921,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"1979:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1966:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3791_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":3923,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1982:4:16","memberName":"code","nodeType":"MemberAccess","referencedDeclaration":3788,"src":"1966:20:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1938:49:16","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3796_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":3926,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"2032:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3928,"indexExpression":{"id":3927,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"2045:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2032:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3791_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":3929,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2048:4:16","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":3790,"src":"2032:20:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3930,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"2064:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3925,"name":"InstitutionByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"1990:17:16","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_InstitutionByCode_$3796_storage_ptr_$","typeString":"type(struct PaycrestSettingManager.InstitutionByCode storage pointer)"}},"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2026:4:16","2054:8:16"],"names":["name","currency"],"nodeType":"FunctionCall","src":"1990:97:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3796_memory_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode memory"}},"src":"1938:149:16","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3796_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"id":3933,"nodeType":"ExpressionStatement","src":"1938:149:16"},{"id":3937,"nodeType":"UncheckedBlock","src":"2101:46:16","statements":[{"expression":{"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2129:3:16","subExpression":{"id":3934,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"2129:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3936,"nodeType":"ExpressionStatement","src":"2129:3:16"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3907,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"1843:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3908,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"1847:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1843:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3939,"initializationExpression":{"assignments":[3904],"declarations":[{"constant":false,"id":3904,"mutability":"mutable","name":"i","nameLocation":"1836:1:16","nodeType":"VariableDeclaration","scope":3939,"src":"1831:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3903,"name":"uint","nodeType":"ElementaryTypeName","src":"1831:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3906,"initialValue":{"hexValue":"30","id":3905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1840:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1831:10:16"},"nodeType":"ForStatement","src":"1826:331:16"}]},"functionSelector":"32200882","id":3941,"implemented":true,"kind":"function","modifiers":[{"id":3896,"kind":"modifierInvocation","modifierName":{"id":3895,"name":"onlyOwner","nameLocations":["1759:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1759:9:16"},"nodeType":"ModifierInvocation","src":"1759:9:16"}],"name":"setSupportedInstitutions","nameLocation":"1672:24:16","nodeType":"FunctionDefinition","parameters":{"id":3894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3889,"mutability":"mutable","name":"currency","nameLocation":"1705:8:16","nodeType":"VariableDeclaration","scope":3941,"src":"1697:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3888,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1697:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3893,"mutability":"mutable","name":"institutions","nameLocation":"1736:12:16","nodeType":"VariableDeclaration","scope":3941,"src":"1715:33:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":3891,"nodeType":"UserDefinedTypeName","pathNode":{"id":3890,"name":"Institution","nameLocations":["1715:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":3791,"src":"1715:11:16"},"referencedDeclaration":3791,"src":"1715:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3791_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3892,"nodeType":"ArrayTypeName","src":"1715:13:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3791_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"src":"1696:53:16"},"returnParameters":{"id":3897,"nodeType":"ParameterList","parameters":[],"src":"1769:0:16"},"scope":4006,"src":"1663:500:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3956,"nodeType":"Block","src":"2244:112:16","statements":[{"expression":{"id":3950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3948,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"2254:18:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3949,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"2275:19:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2254:40:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":3951,"nodeType":"ExpressionStatement","src":"2254:40:16"},{"eventCall":{"arguments":[{"id":3953,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"2329:19:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":3952,"name":"ProtocolFeesUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"2309:19:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":3954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2309:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3955,"nodeType":"EmitStatement","src":"2304:45:16"}]},"functionSelector":"84630736","id":3957,"implemented":true,"kind":"function","modifiers":[{"id":3946,"kind":"modifierInvocation","modifierName":{"id":3945,"name":"onlyOwner","nameLocations":["2234:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2234:9:16"},"nodeType":"ModifierInvocation","src":"2234:9:16"}],"name":"updateProtocolFees","nameLocation":"2178:18:16","nodeType":"FunctionDefinition","parameters":{"id":3944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3943,"mutability":"mutable","name":"_protocolFeePercent","nameLocation":"2204:19:16","nodeType":"VariableDeclaration","scope":3957,"src":"2197:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3942,"name":"uint64","nodeType":"ElementaryTypeName","src":"2197:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2196:28:16"},"returnParameters":{"id":3947,"nodeType":"ParameterList","parameters":[],"src":"2244:0:16"},"scope":4006,"src":"2169:187:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3988,"nodeType":"Block","src":"2443:184:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3967,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"2461:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2478:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2470:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3968,"name":"address","nodeType":"ElementaryTypeName","src":"2470:7:16","typeDescriptions":{}}},"id":3971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2470:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2461:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50617963726573743a207a65726f2061646472657373","id":3973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2482:24:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""},"value":"Paycrest: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""}],"id":3966,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2453:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2453:54:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3975,"nodeType":"ExpressionStatement","src":"2453:54:16"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3976,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3959,"src":"2521:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"7472656173757279","id":3977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2529:10:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_cbd818ad4dd6f1ff9338c2bb62480241424dd9a65f9f3284101a01cd099ad8ac","typeString":"literal_string \"treasury\""},"value":"treasury"},"src":"2521:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3983,"nodeType":"IfStatement","src":"2517:47:16","trueBody":{"expression":{"id":3981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3979,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"2541:15:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3980,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"2559:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:23:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3982,"nodeType":"ExpressionStatement","src":"2541:23:16"}},{"eventCall":{"arguments":[{"id":3985,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"2604:15:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3984,"name":"ProtocolAddressesUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"2579:24:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2579:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3987,"nodeType":"EmitStatement","src":"2574:46:16"}]},"functionSelector":"79a0effb","id":3989,"implemented":true,"kind":"function","modifiers":[{"id":3964,"kind":"modifierInvocation","modifierName":{"id":3963,"name":"onlyOwner","nameLocations":["2433:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2433:9:16"},"nodeType":"ModifierInvocation","src":"2433:9:16"}],"name":"updateProtocolAddresses","nameLocation":"2371:23:16","nodeType":"FunctionDefinition","parameters":{"id":3962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3959,"mutability":"mutable","name":"what","nameLocation":"2403:4:16","nodeType":"VariableDeclaration","scope":3989,"src":"2395:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3958,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2395:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3961,"mutability":"mutable","name":"value","nameLocation":"2417:5:16","nodeType":"VariableDeclaration","scope":3989,"src":"2409:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3960,"name":"address","nodeType":"ElementaryTypeName","src":"2409:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2394:29:16"},"returnParameters":{"id":3965,"nodeType":"ParameterList","parameters":[],"src":"2443:0:16"},"scope":4006,"src":"2362:265:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4004,"nodeType":"Block","src":"2713:81:16","statements":[{"expression":{"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3996,"name":"_aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3806,"src":"2723:11:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3997,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3991,"src":"2737:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"src":"2723:24:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3999,"nodeType":"ExpressionStatement","src":"2723:24:16"},{"eventCall":{"arguments":[{"id":4001,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3991,"src":"2776:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4000,"name":"SetAggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3845,"src":"2762:13:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":4002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2762:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4003,"nodeType":"EmitStatement","src":"2757:30:16"}]},"functionSelector":"cb79455b","id":4005,"implemented":true,"kind":"function","modifiers":[{"id":3994,"kind":"modifierInvocation","modifierName":{"id":3993,"name":"onlyOwner","nameLocations":["2703:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2703:9:16"},"nodeType":"ModifierInvocation","src":"2703:9:16"}],"name":"updateProtocolAggregator","nameLocation":"2642:24:16","nodeType":"FunctionDefinition","parameters":{"id":3992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3991,"mutability":"mutable","name":"aggregator","nameLocation":"2682:10:16","nodeType":"VariableDeclaration","scope":4005,"src":"2667:25:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3990,"name":"bytes","nodeType":"ElementaryTypeName","src":"2667:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2666:27:16"},"returnParameters":{"id":3995,"nodeType":"ParameterList","parameters":[],"src":"2713:0:16"},"scope":4006,"src":"2633:161:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4007,"src":"141:2655:16","usedErrors":[]}],"src":"39:2758:16"},"id":16},"contracts/interface/IPaycrest.sol":{"ast":{"absolutePath":"contracts/interface/IPaycrest.sol","exportedSymbols":{"IERC20":[3046],"IPaycrest":[4182]},"id":4183,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4008,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"39:24:17"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":4010,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4183,"sourceUnit":3047,"src":"65:70:17","symbolAliases":[{"foreign":{"id":4009,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"73:6:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IPaycrest","contractDependencies":[],"contractKind":"interface","documentation":{"id":4011,"nodeType":"StructuredDocumentation","src":"137:68:17","text":" @author Paycrest Team\n Factory and global config params"},"fullyImplemented":false,"id":4182,"linearizedBaseContracts":[4182],"name":"IPaycrest","nameLocation":"216:9:17","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":4012,"nodeType":"StructuredDocumentation","src":"424:38:17","text":"@dev Emitted when deposit is made."},"eventSelector":"2c205f90c01160d42994a0eb521810056d94bb82a1fcb038d7179c4158a1f15b","id":4028,"name":"Deposit","nameLocation":"473:7:17","nodeType":"EventDefinition","parameters":{"id":4027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4014,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"497:5:17","nodeType":"VariableDeclaration","scope":4028,"src":"481:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4013,"name":"address","nodeType":"ElementaryTypeName","src":"481:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4016,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"520:6:17","nodeType":"VariableDeclaration","scope":4028,"src":"504:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4015,"name":"uint256","nodeType":"ElementaryTypeName","src":"504:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4018,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"544:7:17","nodeType":"VariableDeclaration","scope":4028,"src":"528:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4017,"name":"bytes32","nodeType":"ElementaryTypeName","src":"528:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4020,"indexed":false,"mutability":"mutable","name":"rate","nameLocation":"561:4:17","nodeType":"VariableDeclaration","scope":4028,"src":"553:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4019,"name":"uint256","nodeType":"ElementaryTypeName","src":"553:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4022,"indexed":false,"mutability":"mutable","name":"institutionCode","nameLocation":"575:15:17","nodeType":"VariableDeclaration","scope":4028,"src":"567:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4021,"name":"bytes32","nodeType":"ElementaryTypeName","src":"567:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4024,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"600:5:17","nodeType":"VariableDeclaration","scope":4028,"src":"592:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4023,"name":"bytes32","nodeType":"ElementaryTypeName","src":"592:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4026,"indexed":false,"mutability":"mutable","name":"messageHash","nameLocation":"614:11:17","nodeType":"VariableDeclaration","scope":4028,"src":"607:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4025,"name":"string","nodeType":"ElementaryTypeName","src":"607:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"480:146:17"},"src":"467:160:17"},{"anonymous":false,"documentation":{"id":4029,"nodeType":"StructuredDocumentation","src":"632:52:17","text":"@dev Emitted when aggregator settle transaction."},"eventSelector":"f26de978cbaea68ea699627155a10ad53df3321b0f95a08264c0cfd6d4c05326","id":4041,"name":"Settled","nameLocation":"695:7:17","nodeType":"EventDefinition","parameters":{"id":4040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4031,"indexed":false,"mutability":"mutable","name":"_splitOrderId","nameLocation":"711:13:17","nodeType":"VariableDeclaration","scope":4041,"src":"703:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4030,"name":"bytes32","nodeType":"ElementaryTypeName","src":"703:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4033,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"742:7:17","nodeType":"VariableDeclaration","scope":4041,"src":"726:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4032,"name":"bytes32","nodeType":"ElementaryTypeName","src":"726:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4035,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"759:5:17","nodeType":"VariableDeclaration","scope":4041,"src":"751:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4034,"name":"bytes32","nodeType":"ElementaryTypeName","src":"751:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4037,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"782:17:17","nodeType":"VariableDeclaration","scope":4041,"src":"766:33:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4036,"name":"address","nodeType":"ElementaryTypeName","src":"766:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4039,"indexed":false,"mutability":"mutable","name":"settlePercent","nameLocation":"808:13:17","nodeType":"VariableDeclaration","scope":4041,"src":"801:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4038,"name":"uint96","nodeType":"ElementaryTypeName","src":"801:6:17","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"702:120:17"},"src":"689:134:17"},{"anonymous":false,"documentation":{"id":4042,"nodeType":"StructuredDocumentation","src":"828:52:17","text":"@dev Emitted when aggregator refund transaction."},"eventSelector":"a8e0e11a759cccce708ff767acde5348e3e96706e2cce8301462510ce02fa1a6","id":4050,"name":"Refunded","nameLocation":"891:8:17","nodeType":"EventDefinition","parameters":{"id":4049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4044,"indexed":false,"mutability":"mutable","name":"_fee","nameLocation":"908:4:17","nodeType":"VariableDeclaration","scope":4050,"src":"900:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4043,"name":"uint256","nodeType":"ElementaryTypeName","src":"900:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4046,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"930:7:17","nodeType":"VariableDeclaration","scope":4050,"src":"914:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4045,"name":"bytes32","nodeType":"ElementaryTypeName","src":"914:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4048,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"947:5:17","nodeType":"VariableDeclaration","scope":4050,"src":"939:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4047,"name":"bytes32","nodeType":"ElementaryTypeName","src":"939:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"899:54:17"},"src":"885:69:17"},{"anonymous":false,"documentation":{"id":4051,"nodeType":"StructuredDocumentation","src":"959:47:17","text":"@dev Emitted when sender get their rewards."},"eventSelector":"96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2","id":4057,"name":"TransferSenderFee","nameLocation":"1017:17:17","nodeType":"EventDefinition","parameters":{"id":4056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4053,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1051:6:17","nodeType":"VariableDeclaration","scope":4057,"src":"1035:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4052,"name":"address","nodeType":"ElementaryTypeName","src":"1035:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4055,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1075:6:17","nodeType":"VariableDeclaration","scope":4057,"src":"1059:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4054,"name":"uint256","nodeType":"ElementaryTypeName","src":"1059:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1034:48:17"},"src":"1011:72:17"},{"anonymous":false,"documentation":{"id":4058,"nodeType":"StructuredDocumentation","src":"1088:58:17","text":"@dev Emitted when primary validator get their rewards."},"eventSelector":"61dceb70b8f97239c33a3f9c0d0efc6c8759c7e9a808f75dd42b3a0f213186c2","id":4064,"name":"RewardValidator","nameLocation":"1157:15:17","nodeType":"EventDefinition","parameters":{"id":4063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4060,"indexed":true,"mutability":"mutable","name":"validator","nameLocation":"1189:9:17","nodeType":"VariableDeclaration","scope":4064,"src":"1173:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4059,"name":"address","nodeType":"ElementaryTypeName","src":"1173:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4062,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1216:6:17","nodeType":"VariableDeclaration","scope":4064,"src":"1200:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4061,"name":"uint256","nodeType":"ElementaryTypeName","src":"1200:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1172:51:17"},"src":"1151:73:17"},{"canonicalName":"IPaycrest.TransactionMetadata","id":4075,"members":[{"constant":false,"id":4066,"mutability":"mutable","name":"identifier","nameLocation":"1463:10:17","nodeType":"VariableDeclaration","scope":4075,"src":"1456:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4065,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1456:6:17","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4068,"mutability":"mutable","name":"institution","nameLocation":"1582:11:17","nodeType":"VariableDeclaration","scope":4075,"src":"1575:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4067,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1575:6:17","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4070,"mutability":"mutable","name":"name","nameLocation":"1701:4:17","nodeType":"VariableDeclaration","scope":4075,"src":"1694:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4069,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1694:6:17","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4072,"mutability":"mutable","name":"currency","nameLocation":"1820:8:17","nodeType":"VariableDeclaration","scope":4075,"src":"1813:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4071,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1813:6:17","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4074,"mutability":"mutable","name":"liquidityProviderID","nameLocation":"1940:19:17","nodeType":"VariableDeclaration","scope":4075,"src":"1932:27:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4073,"name":"uint256","nodeType":"ElementaryTypeName","src":"1932:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"TransactionMetadata","nameLocation":"1426:19:17","nodeType":"StructDefinition","scope":4182,"src":"1419:629:17","visibility":"public"},{"canonicalName":"IPaycrest.Order","id":4094,"members":[{"constant":false,"id":4077,"mutability":"mutable","name":"seller","nameLocation":"2085:6:17","nodeType":"VariableDeclaration","scope":4094,"src":"2077:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4076,"name":"address","nodeType":"ElementaryTypeName","src":"2077:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4079,"mutability":"mutable","name":"token","nameLocation":"2205:5:17","nodeType":"VariableDeclaration","scope":4094,"src":"2197:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4078,"name":"address","nodeType":"ElementaryTypeName","src":"2197:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4081,"mutability":"mutable","name":"senderFeeRecipient","nameLocation":"2325:18:17","nodeType":"VariableDeclaration","scope":4094,"src":"2317:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4080,"name":"address","nodeType":"ElementaryTypeName","src":"2317:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4083,"mutability":"mutable","name":"senderFee","nameLocation":"2361:9:17","nodeType":"VariableDeclaration","scope":4094,"src":"2353:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4082,"name":"uint256","nodeType":"ElementaryTypeName","src":"2353:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4085,"mutability":"mutable","name":"rate","nameLocation":"2387:4:17","nodeType":"VariableDeclaration","scope":4094,"src":"2380:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4084,"name":"uint96","nodeType":"ElementaryTypeName","src":"2380:6:17","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":4087,"mutability":"mutable","name":"isFulfilled","nameLocation":"2505:11:17","nodeType":"VariableDeclaration","scope":4094,"src":"2500:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4086,"name":"bool","nodeType":"ElementaryTypeName","src":"2500:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4089,"mutability":"mutable","name":"refundAddress","nameLocation":"2649:13:17","nodeType":"VariableDeclaration","scope":4094,"src":"2641:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4088,"name":"address","nodeType":"ElementaryTypeName","src":"2641:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4091,"mutability":"mutable","name":"currentBPS","nameLocation":"2789:10:17","nodeType":"VariableDeclaration","scope":4094,"src":"2782:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4090,"name":"uint96","nodeType":"ElementaryTypeName","src":"2782:6:17","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":4093,"mutability":"mutable","name":"amount","nameLocation":"2913:6:17","nodeType":"VariableDeclaration","scope":4094,"src":"2905:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4092,"name":"uint256","nodeType":"ElementaryTypeName","src":"2905:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Order","nameLocation":"2061:5:17","nodeType":"StructDefinition","scope":4182,"src":"2054:968:17","visibility":"public"},{"documentation":{"id":4095,"nodeType":"StructuredDocumentation","src":"3223:1232:17","text":"@notice lock sender `_amount` of `token` into Paycrest.\n Requirements:\n `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\n `_token` must be an acceptable token. @dev See {isTokenSupported}.\n `amount` must be greater than minimum\n `_refundable` refundable address must not be zero address\n @param _token address of the token.\n @param _amount amount in the decimal of `_token` above.\n @param _institutionCode institution code of the sender.\n @param _label reference of the sender.\n @param _rate rate at which sender intended to sell `_amount` of `_token`.\n @param _senderFeeRecipient address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\n @param _senderFee amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\n @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\n @param messageHash hash must be the result of a hash operation for the verification to be secure. message\n @return _orderId the bytes20 which is the orderId"},"functionSelector":"2654ec7e","id":4118,"implemented":false,"kind":"function","modifiers":[],"name":"createOrder","nameLocation":"4469:11:17","nodeType":"FunctionDefinition","parameters":{"id":4114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4097,"mutability":"mutable","name":"_token","nameLocation":"4498:6:17","nodeType":"VariableDeclaration","scope":4118,"src":"4490:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4096,"name":"address","nodeType":"ElementaryTypeName","src":"4490:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4099,"mutability":"mutable","name":"_amount","nameLocation":"4523:7:17","nodeType":"VariableDeclaration","scope":4118,"src":"4515:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4098,"name":"uint256","nodeType":"ElementaryTypeName","src":"4515:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4101,"mutability":"mutable","name":"_institutionCode","nameLocation":"4549:16:17","nodeType":"VariableDeclaration","scope":4118,"src":"4541:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4541:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4103,"mutability":"mutable","name":"_label","nameLocation":"4583:6:17","nodeType":"VariableDeclaration","scope":4118,"src":"4575:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4102,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4575:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4105,"mutability":"mutable","name":"_rate","nameLocation":"4606:5:17","nodeType":"VariableDeclaration","scope":4118,"src":"4599:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4104,"name":"uint96","nodeType":"ElementaryTypeName","src":"4599:6:17","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":4107,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"4630:19:17","nodeType":"VariableDeclaration","scope":4118,"src":"4622:27:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4106,"name":"address","nodeType":"ElementaryTypeName","src":"4622:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4109,"mutability":"mutable","name":"_senderFee","nameLocation":"4667:10:17","nodeType":"VariableDeclaration","scope":4118,"src":"4659:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4108,"name":"uint256","nodeType":"ElementaryTypeName","src":"4659:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4111,"mutability":"mutable","name":"_refundAddress","nameLocation":"4695:14:17","nodeType":"VariableDeclaration","scope":4118,"src":"4687:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4110,"name":"address","nodeType":"ElementaryTypeName","src":"4687:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4113,"mutability":"mutable","name":"messageHash","nameLocation":"4736:11:17","nodeType":"VariableDeclaration","scope":4118,"src":"4720:27:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4112,"name":"string","nodeType":"ElementaryTypeName","src":"4720:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4480:268:17"},"returnParameters":{"id":4117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4116,"mutability":"mutable","name":"_orderId","nameLocation":"4775:8:17","nodeType":"VariableDeclaration","scope":4118,"src":"4767:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4115,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4767:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4766:18:17"},"scope":4182,"src":"4460:325:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4119,"nodeType":"StructuredDocumentation","src":"4791:832:17","text":"@notice settle transaction and distribute rewards accordingly.\n Requirements:\n {only aggregators call}.\n `_orderId` it must be less than total ids.\n `_orderId` it must be an open Id.\n `_primaryValidator` must have stake on the Paycrest staking platform.\n `_secondaryValidators` must have stake on the Paycrest staking platform.\n `amount` must be greater than minimum\n `_refundable` refundable address must not be zero address\n @param _orderId transaction Id.\n @param _label reference of the sender.\n @param _liquidityProvider address of the liquidity provider.\n @param _settlePercent rate at which the transaction is settled.\n @param _isPartner is the liquidity provider a partner.\n @return return the status of transaction {bool}"},"functionSelector":"5fe44cac","id":4138,"implemented":false,"kind":"function","modifiers":[],"name":"settle","nameLocation":"5637:6:17","nodeType":"FunctionDefinition","parameters":{"id":4132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4121,"mutability":"mutable","name":"_splitOrderId","nameLocation":"5652:13:17","nodeType":"VariableDeclaration","scope":4138,"src":"5644:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5644:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4123,"mutability":"mutable","name":"_orderId","nameLocation":"5675:8:17","nodeType":"VariableDeclaration","scope":4138,"src":"5667:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4122,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5667:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4125,"mutability":"mutable","name":"_label","nameLocation":"5693:6:17","nodeType":"VariableDeclaration","scope":4138,"src":"5685:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5685:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4127,"mutability":"mutable","name":"_liquidityProvider","nameLocation":"5709:18:17","nodeType":"VariableDeclaration","scope":4138,"src":"5701:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4126,"name":"address","nodeType":"ElementaryTypeName","src":"5701:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4129,"mutability":"mutable","name":"_settlePercent","nameLocation":"5736:14:17","nodeType":"VariableDeclaration","scope":4138,"src":"5729:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4128,"name":"uint64","nodeType":"ElementaryTypeName","src":"5729:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4131,"mutability":"mutable","name":"_isPartner","nameLocation":"5757:10:17","nodeType":"VariableDeclaration","scope":4138,"src":"5752:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4130,"name":"bool","nodeType":"ElementaryTypeName","src":"5752:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5643:125:17"},"returnParameters":{"id":4137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4138,"src":"5787:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5787:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4138,"src":"5796:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4135,"name":"address","nodeType":"ElementaryTypeName","src":"5796:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5786:18:17"},"scope":4182,"src":"5628:177:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4139,"nodeType":"StructuredDocumentation","src":"5811:456:17","text":"@notice refund to the specified refundable address.\n Requirements:\n {only aggregators call}.\n `_orderId` it must be less than total ids.\n `_orderId` it must be an open Id.\n `isFulfilled` must be false.\n @param _fee amount to be deducted from the amount to be refunded\n @param _orderId transaction Id.\n @param _label reference of the sender.\n @return return the status of transaction {bool}"},"functionSelector":"d28a8d32","id":4150,"implemented":false,"kind":"function","modifiers":[],"name":"refund","nameLocation":"6281:6:17","nodeType":"FunctionDefinition","parameters":{"id":4146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4141,"mutability":"mutable","name":"_fee","nameLocation":"6296:4:17","nodeType":"VariableDeclaration","scope":4150,"src":"6288:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4140,"name":"uint256","nodeType":"ElementaryTypeName","src":"6288:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4143,"mutability":"mutable","name":"_orderId","nameLocation":"6310:8:17","nodeType":"VariableDeclaration","scope":4150,"src":"6302:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4142,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6302:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4145,"mutability":"mutable","name":"_label","nameLocation":"6328:6:17","nodeType":"VariableDeclaration","scope":4150,"src":"6320:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6320:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6287:48:17"},"returnParameters":{"id":4149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4150,"src":"6354:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4147,"name":"bool","nodeType":"ElementaryTypeName","src":"6354:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6353:6:17"},"scope":4182,"src":"6272:88:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4151,"nodeType":"StructuredDocumentation","src":"6366:152:17","text":"@notice get supported token from Paycrest.\n @param _token address of the token to check.\n @return return the status of `_token` {bool}"},"functionSelector":"75151b63","id":4158,"implemented":false,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"6532:16:17","nodeType":"FunctionDefinition","parameters":{"id":4154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4153,"mutability":"mutable","name":"_token","nameLocation":"6557:6:17","nodeType":"VariableDeclaration","scope":4158,"src":"6549:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4152,"name":"address","nodeType":"ElementaryTypeName","src":"6549:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6548:16:17"},"returnParameters":{"id":4157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4156,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4158,"src":"6587:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4155,"name":"bool","nodeType":"ElementaryTypeName","src":"6587:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6586:6:17"},"scope":4182,"src":"6523:70:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4159,"nodeType":"StructuredDocumentation","src":"6599:70:17","text":"@notice get order details.\n @param _orderId transaction Id."},"functionSelector":"768c6ec0","id":4167,"implemented":false,"kind":"function","modifiers":[],"name":"getOrderInfo","nameLocation":"6683:12:17","nodeType":"FunctionDefinition","parameters":{"id":4162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4161,"mutability":"mutable","name":"_orderId","nameLocation":"6704:8:17","nodeType":"VariableDeclaration","scope":4167,"src":"6696:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4160,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6696:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6695:18:17"},"returnParameters":{"id":4166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4165,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4167,"src":"6736:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_memory_ptr","typeString":"struct IPaycrest.Order"},"typeName":{"id":4164,"nodeType":"UserDefinedTypeName","pathNode":{"id":4163,"name":"Order","nameLocations":["6736:5:17"],"nodeType":"IdentifierPath","referencedDeclaration":4094,"src":"6736:5:17"},"referencedDeclaration":4094,"src":"6736:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4094_storage_ptr","typeString":"struct IPaycrest.Order"}},"visibility":"internal"}],"src":"6735:14:17"},"scope":4182,"src":"6674:76:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4168,"nodeType":"StructuredDocumentation","src":"6756:204:17","text":"@notice get every rewards and address on Paycrest.\n @return protocolReward amount that will be taken in percentage on all trade.\n @return max_bps maximum amount in bps \"100% == 100_000\"."},"functionSelector":"b810c636","id":4175,"implemented":false,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"6974:13:17","nodeType":"FunctionDefinition","parameters":{"id":4169,"nodeType":"ParameterList","parameters":[],"src":"6987:2:17"},"returnParameters":{"id":4174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4171,"mutability":"mutable","name":"protocolReward","nameLocation":"7028:14:17","nodeType":"VariableDeclaration","scope":4175,"src":"7021:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4170,"name":"uint64","nodeType":"ElementaryTypeName","src":"7021:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4173,"mutability":"mutable","name":"max_bps","nameLocation":"7061:7:17","nodeType":"VariableDeclaration","scope":4175,"src":"7053:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4172,"name":"uint256","nodeType":"ElementaryTypeName","src":"7053:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7011:63:17"},"scope":4182,"src":"6965:110:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4176,"nodeType":"StructuredDocumentation","src":"7081:90:17","text":"@notice get public key of liquidity aggregator.\n @return aggregator public key."},"functionSelector":"3ad59dbc","id":4181,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregator","nameLocation":"7185:13:17","nodeType":"FunctionDefinition","parameters":{"id":4177,"nodeType":"ParameterList","parameters":[],"src":"7198:2:17"},"returnParameters":{"id":4180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4181,"src":"7223:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4178,"name":"bytes","nodeType":"ElementaryTypeName","src":"7223:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7222:14:17"},"scope":4182,"src":"7176:61:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4183,"src":"206:7033:17","usedErrors":[]}],"src":"39:7201:17"},"id":17}},"contracts":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1288,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1288,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":321,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":426,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"SafeERC20Upgradeable":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220127eb4d243173cf9ac6ea39f737ccd926bf8210c3a138b2e7d70f40b43f8204564736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT PUSH31 0xB4D243173CF9AC6EA39F737CCD926BF8210C3A138B2E7D70F40B43F8204564 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"734:6366:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220127eb4d243173cf9ac6ea39f737ccd926bf8210c3a138b2e7d70f40b43f8204564736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT PUSH31 0xB4D243173CF9AC6EA39F737CCD926BF8210C3A138B2E7D70F40B43F8204564 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"734:6366:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20Upgradeable,bytes memory)":"infinite","forceApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20Upgradeable,address,uint256)":"infinite","safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df70283ff728a1a88debad8b56cd6b31b858a143aff601e8f42a16699317e70d64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF PUSH17 0x283FF728A1A88DEBAD8B56CD6B31B858A1 NUMBER 0xAF 0xF6 ADD 0xE8 DELEGATECALL 0x2A AND PUSH10 0x9317E70D64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df70283ff728a1a88debad8b56cd6b31b858a143aff601e8f42a16699317e70d64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF PUSH17 0x283FF728A1A88DEBAD8B56CD6B31B858A1 NUMBER 0xAF 0xF6 ADD 0xE8 DELEGATECALL 0x2A AND PUSH10 0x9317E70D64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1288,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fb710f8a96e0067535a9f765fa3f89f59b6e06ba7186e35593d35f029926fa64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xFB PUSH18 0xF8A96E0067535A9F765FA3F89F59B6E06BA PUSH18 0x86E35593D35F029926FA64736F6C63430008 SLT STOP CALLER ","sourceMap":"242:2603:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fb710f8a96e0067535a9f765fa3f89f59b6e06ba7186e35593d35f029926fa64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xFB PUSH18 0xF8A96E0067535A9F765FA3F89F59B6E06BA PUSH18 0x86E35593D35F029926FA64736F6C63430008 SLT STOP CALLER ","sourceMap":"242:2603:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220717bce4509ab3c6d09fb52c5b26660a25a99945b32e0484c654da9bebac1986064736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x7BCE4509AB3C6D09FB52C5B26660A25A9994 JUMPDEST ORIGIN 0xE0 BASEFEE 0x4C PUSH6 0x4DA9BEBAC198 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"380:8783:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220717bce4509ab3c6d09fb52c5b26660a25a99945b32e0484c654da9bebac1986064736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x7BCE4509AB3C6D09FB52C5B26660A25A9994 JUMPDEST ORIGIN 0xE0 BASEFEE 0x4C PUSH6 0x4DA9BEBAC198 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"380:8783:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b19238f22d888be15246afd45704547bf692f3a8d19f34db13095fb48eddd5264736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x19238F22D888BE15246AFD45 PUSH17 0x4547BF692F3A8D19F34DB13095FB48EDDD MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12593:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b19238f22d888be15246afd45704547bf692f3a8d19f34db13095fb48eddd5264736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x19238F22D888BE15246AFD45 PUSH17 0x4547BF692F3A8D19F34DB13095FB48EDDD MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12593:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e70ce3cff074bb9f2b399f4851e008094b94d7fe429bd3afbf9c6f170d3375ce64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC 0xE3 0xCF CREATE PUSH21 0xBB9F2B399F4851E008094B94D7FE429BD3AFBF9C6F OR 0xD CALLER PUSH22 0xCE64736F6C6343000812003300000000000000000000 ","sourceMap":"215:1058:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e70ce3cff074bb9f2b399f4851e008094b94d7fe429bd3afbf9c6f170d3375ce64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC 0xE3 0xCF CREATE PUSH21 0xBB9F2B399F4851E008094B94D7FE429BD3AFBF9C6F OR 0xD CALLER PUSH22 0xCE64736F6C6343000812003300000000000000000000 ","sourceMap":"215:1058:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2863,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Paycrest.sol":{"Paycrest":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"institutionCode","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"treasuryAddress","type":"address"}],"name":"ProtocolAddressesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"protocolFee","type":"uint64"}],"name":"ProtocolFeesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fee","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"}],"name":"Refunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"validator","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardValidator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"SetAggregator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"treasuryAddress","type":"address"}],"name":"SetFeeRecipient","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"SettingManagerBool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"Settled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferSenderFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_institutionCode","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAggregator","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint64","name":"","type":"uint64"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPaycrest.Order","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"code","type":"bytes32"}],"name":"getSupportedInstitutionName","outputs":[{"components":[{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"bytes32","name":"currency","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.InstitutionByCode","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"}],"name":"getSupportedInstitutions","outputs":[{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"}],"name":"refund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"institutions","type":"tuple[]"}],"name":"setSupportedInstitutions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"address","name":"_liquidityProvider","type":"address"},{"internalType":"uint64","name":"_settlePercent","type":"uint64"},{"internalType":"bool","name":"_isPartner","type":"bool"}],"name":"settle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateProtocolAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"updateProtocolAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_protocolFeePercent","type":"uint64"}],"name":"updateProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Deposit(address,uint256,bytes32,uint256,bytes32,bytes32,string)":{"details":"Emitted when deposit is made."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Refunded(uint256,bytes32,bytes32)":{"details":"Emitted when aggregator refund transaction."},"RewardValidator(address,uint256)":{"details":"Emitted when primary validator get their rewards."},"Settled(bytes32,bytes32,bytes32,address,uint96)":{"details":"Emitted when aggregator settle transaction."},"TransferSenderFee(address,uint256)":{"details":"Emitted when sender get their rewards."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":{"details":"See {createOrder-IPaycrest}. "},"getAggregator()":{"details":"See {getAggregator-IPaycrest}. "},"getFeeDetails()":{"details":"See {getFeeDetails-IPaycrest}. "},"getOrderInfo(bytes32)":{"details":"See {getOrderInfo-IPaycrest}. "},"getSupportedInstitutionName(bytes32)":{"details":"See {getSupportedInstitutionName-IPaycrest}. "},"isTokenSupported(address)":{"details":"See {isTokenSupported-IPaycrest}. "},"owner()":{"details":"Returns the address of the current owner."},"pause()":{"details":"pause "},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"refund(uint256,bytes32,bytes32)":{"details":"See {refund-IPaycrest}. "},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"settle(bytes32,bytes32,bytes32,address,uint64,bool)":{"details":"See {settle-IPaycrest}. "},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unpause()":{"details":"unpause "}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3118":{"entryPoint":null,"id":3118,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_281":{"entryPoint":40,"id":281,"parameterSlots":0,"returnSlots":0},"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack":{"entryPoint":334,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":420,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":373,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":437,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":238,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":407,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a":{"entryPoint":255,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1638:18","statements":[{"body":{"nodeType":"YulBlock","src":"103:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"120:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"125:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"113:6:18"},"nodeType":"YulFunctionCall","src":"113:19:18"},"nodeType":"YulExpressionStatement","src":"113:19:18"},{"nodeType":"YulAssignment","src":"141:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"160:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"165:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"156:3:18"},"nodeType":"YulFunctionCall","src":"156:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"141:11:18"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"75:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"91:11:18","type":""}],"src":"7:169:18"},{"body":{"nodeType":"YulBlock","src":"288:120:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"310:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"318:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"306:3:18"},"nodeType":"YulFunctionCall","src":"306:14:18"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"322:34:18","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"299:6:18"},"nodeType":"YulFunctionCall","src":"299:58:18"},"nodeType":"YulExpressionStatement","src":"299:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"378:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"386:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"374:3:18"},"nodeType":"YulFunctionCall","src":"374:15:18"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"391:9:18","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"367:6:18"},"nodeType":"YulFunctionCall","src":"367:34:18"},"nodeType":"YulExpressionStatement","src":"367:34:18"}]},"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"280:6:18","type":""}],"src":"182:226:18"},{"body":{"nodeType":"YulBlock","src":"560:220:18","statements":[{"nodeType":"YulAssignment","src":"570:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"636:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"641:2:18","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"577:58:18"},"nodeType":"YulFunctionCall","src":"577:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"570:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"742:3:18"}],"functionName":{"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulIdentifier","src":"653:88:18"},"nodeType":"YulFunctionCall","src":"653:93:18"},"nodeType":"YulExpressionStatement","src":"653:93:18"},{"nodeType":"YulAssignment","src":"755:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"766:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"771:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:18"},"nodeType":"YulFunctionCall","src":"762:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"755:3:18"}]}]},"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"548:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"556:3:18","type":""}],"src":"414:366:18"},{"body":{"nodeType":"YulBlock","src":"957:248:18","statements":[{"nodeType":"YulAssignment","src":"967:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"979:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"990:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"975:3:18"},"nodeType":"YulFunctionCall","src":"975:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"967:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1014:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1025:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1010:3:18"},"nodeType":"YulFunctionCall","src":"1010:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1033:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"1039:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1029:3:18"},"nodeType":"YulFunctionCall","src":"1029:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1003:6:18"},"nodeType":"YulFunctionCall","src":"1003:47:18"},"nodeType":"YulExpressionStatement","src":"1003:47:18"},{"nodeType":"YulAssignment","src":"1059:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1193:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1067:124:18"},"nodeType":"YulFunctionCall","src":"1067:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1059:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"937:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"952:4:18","type":""}],"src":"786:419:18"},{"body":{"nodeType":"YulBlock","src":"1254:43:18","statements":[{"nodeType":"YulAssignment","src":"1264:27:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1279:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"1286:4:18","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1275:3:18"},"nodeType":"YulFunctionCall","src":"1275:16:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1264:7:18"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1236:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1246:7:18","type":""}],"src":"1211:86:18"},{"body":{"nodeType":"YulBlock","src":"1364:51:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1381:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1402:5:18"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"1386:15:18"},"nodeType":"YulFunctionCall","src":"1386:22:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1374:6:18"},"nodeType":"YulFunctionCall","src":"1374:35:18"},"nodeType":"YulExpressionStatement","src":"1374:35:18"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1352:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1359:3:18","type":""}],"src":"1303:112:18"},{"body":{"nodeType":"YulBlock","src":"1515:120:18","statements":[{"nodeType":"YulAssignment","src":"1525:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1537:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1548:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:18"},"nodeType":"YulFunctionCall","src":"1533:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1525:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1601:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1614:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1625:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1610:3:18"},"nodeType":"YulFunctionCall","src":"1610:17:18"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"1561:39:18"},"nodeType":"YulFunctionCall","src":"1561:67:18"},"nodeType":"YulExpressionStatement","src":"1561:67:18"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1487:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1499:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1510:4:18","type":""}],"src":"1421:214:18"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is initi\")\n\n        mstore(add(memPtr, 32), \"alizing\")\n\n    }\n\n    function abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":18,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b613fa580620001e26000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806379a0effb116100b85780638da5cb5b1161007c5780638da5cb5b1461031557806399e3c0b414610333578063b810c6361461034f578063cb79455b1461036e578063d28a8d321461038a578063f2fde38b146103ba57610137565b806379a0effb146102995780638129fc1c146102b55780638456cb59146102bf57806384630736146102c957806387490d86146102e557610137565b80635c975abb116100ff5780635c975abb146101e05780635fe44cac146101fe578063715018a61461022f57806375151b6314610239578063768c6ec01461026957610137565b8063026213381461013c5780632654ec7e1461016c578063322008821461019c5780633ad59dbc146101b85780633f4ba83a146101d6575b600080fd5b61015660048036038101906101519190612599565b6103d6565b60405161016391906126b3565b60405180910390f35b61018660048036038101906101819190612812565b610514565b604051610193919061290c565b60405180910390f35b6101b660048036038101906101b19190612acb565b61096a565b005b6101c0610a7e565b6040516101cd9190612ba6565b60405180910390f35b6101de610b10565b005b6101e8610b22565b6040516101f59190612be3565b60405180910390f35b61021860048036038101906102139190612c6a565b610b39565b604051610226929190612d06565b60405180910390f35b610237610f32565b005b610253600480360381019061024e9190612d2f565b610f46565b6040516102609190612be3565b60405180910390f35b610283600480360381019061027e9190612599565b610f9c565b6040516102909190612e4f565b60405180910390f35b6102b360048036038101906102ae9190612e6b565b6111cd565b005b6102bd61130a565b005b6102c761145a565b005b6102e360048036038101906102de9190612eab565b61146c565b005b6102ff60048036038101906102fa9190612599565b6114d7565b60405161030c9190612f07565b60405180910390f35b61031d611518565b60405161032a9190612f22565b60405180910390f35b61034d60048036038101906103489190612f3d565b611542565b005b610357611678565b604051610365929190612fae565b60405180910390f35b6103886004803603810190610383919061302d565b61169d565b005b6103a4600480360381019061039f919061307a565b6116f4565b6040516103b19190612be3565b60405180910390f35b6103d460048036038101906103cf9190612d2f565b611a8d565b005b60606000609c6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156104535783829060005260206000209060020201604051806040016040529081600082015481526020016001820154815250508152602001906001019061040d565b50505050905060008151905060008167ffffffffffffffff81111561047b5761047a612938565b5b6040519080825280602002602001820160405280156104b457816020015b6104a1612433565b8152602001906001900390816104995790505b50905060005b82811015610508578381815181106104d5576104d46130cd565b5b60200260200101518282815181106104f0576104ef6130cd565b5b602002602001018190525080806001019150506104ba565b50809350505050919050565b600061051e611b10565b61052c8b8b8689898e611b5a565b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd33308d6040518463ffffffff1660e01b8152600401610569939291906130fc565b6020604051808303816000875af1158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac9190613148565b5060d160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906105fd906131a4565b91905055503360d160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516020016106549291906131ec565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001886bffffffffffffffffffffffff1681526020016000151581526020018573ffffffffffffffffffffffffffffffffffffffff16815260200160655467ffffffffffffffff166bffffffffffffffffffffffff1681526020018b81525060d0600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506101008201518160060155905050808a8c73ffffffffffffffffffffffffffffffffffffffff167f2c205f90c01160d42994a0eb521810056d94bb82a1fcb038d7179c4158a1f15b8a8d8d898960405161095495949392919061329d565b60405180910390a49a9950505050505050505050565b610972611dd1565b60008151905060005b81811015610a7857609c60008581526020019081526020016000208382815181106109a9576109a86130cd565b5b60200260200101519080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506040518060400160405280848381518110610a0e57610a0d6130cd565b5b602002602001015160200151815260200185815250609d6000858481518110610a3a57610a396130cd565b5b60200260200101516000015181526020019081526020016000206000820151816000015560208201518160010155905050808060010191505061097b565b50505050565b606060688054610a8d9061331a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab99061331a565b8015610b065780601f10610adb57610100808354040283529160200191610b06565b820191906000526020600020905b815481529060010190602001808311610ae957829003601f168201915b5050505050905090565b610b18611dd1565b610b20611e4f565b565b6000609e60009054906101000a900460ff16905090565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc390613397565b60405180910390fd5b60d06000888152602001908152602001600020600401600c9054906101000a900460ff1615610c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2790613403565b60405180910390fd5b600060d0600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508467ffffffffffffffff1660d060008a815260200190815260200160002060050160148282829054906101000a90046bffffffffffffffffffffffff16610cb29190613423565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506000610cf7898767ffffffffffffffff1687611eb2565b9050600060d060008b815260200190815260200160002060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1603610d9657600160d060008b8152602001908152602001600020600401600c6101000a81548160ff021916908315150217905550600060d060008b8152602001908152602001600020600301541115610d9557610d9489611fc3565b5b5b600081600001511115610e49578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600001516040518363ffffffff1660e01b8152600401610e049291906131ec565b6020604051808303816000875af1158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e479190613148565b505b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8883602001516040518363ffffffff1660e01b8152600401610e889291906131ec565b6020604051808303816000875af1158015610ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecb9190613148565b508673ffffffffffffffffffffffffffffffffffffffff16897ff26de978cbaea68ea699627155a10ad53df3321b0f95a08264c0cfd6d4c053268c8b8a604051610f1793929190613494565b60405180910390a38882935093505050965096945050505050565b610f3a611dd1565b610f446000612117565b565b6000609b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610fa4612453565b60d06000838152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff161515151581526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b6111d5611dd1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b90613517565b60405180910390fd5b7f747265617375727900000000000000000000000000000000000000000000000082036112ad5780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7fd8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516112fe9190612f22565b60405180910390a15050565b60008060019054906101000a900460ff1615905080801561133b5750600160008054906101000a900460ff1660ff16105b80611368575061134a306121dd565b1580156113675750600160008054906101000a900460ff1660ff16145b5b6113a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139e906135a9565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156113e4576001600060016101000a81548160ff0219169083151502179055505b620186a06065819055506113f6612200565b6113fe612259565b80156114575760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161144e9190613611565b60405180910390a15b50565b611462611dd1565b61146a6122b2565b565b611474611dd1565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fb94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e26446816040516114cc919061362c565b60405180910390a150565b6114df612515565b609d6000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61154a611dd1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b090613517565b60405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036116385780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161166b93929190613647565b60405180910390a1505050565b600080606660009054906101000a900467ffffffffffffffff16606554915091509091565b6116a5611dd1565b8181606891826116b692919061382b565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef82826040516116e8929190613928565b60405180910390a15050565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177d90613397565b60405180910390fd5b60d06000848152602001908152602001600020600401600c9054906101000a900460ff16156117ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e190613403565b60405180910390fd5b60008460d060008681526020019081526020016000206006015461180e919061394c565b905060d0600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518363ffffffff1660e01b81526004016118a39291906131ec565b6020604051808303816000875af11580156118c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e69190613148565b50600160d06000868152602001908152602001600020600401600c6101000a81548160ff021916908315150217905550600060d0600086815260200190815260200160002060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060d0600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60d0600087815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611a039291906131ec565b6020604051808303816000875af1158015611a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a469190613148565b50837fa8e0e11a759cccce708ff767acde5348e3e96706e2cce8301462510ce02fa1a68685604051611a79929190613980565b60405180910390a260019150509392505050565b611a95611dd1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afb90613a1b565b60405180910390fd5b611b0d81612117565b50565b611b18610b22565b15611b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4f90613a87565b60405180910390fd5b565b609b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdd90613af3565b60405180910390fd5b60008511611c29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2090613b5f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8f90613bcb565b60405180910390fd5b6000801b609d60008381526020019081526020016000206000015403611cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cea90613c37565b60405180910390fd5b6000821115611d6c57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6290613ca3565b60405180910390fd5b5b6065546101f486611d7d9190613cc3565b611d879190613d34565b821115611dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc090613db1565b60405180910390fd5b505050505050565b611dd9612315565b73ffffffffffffffffffffffffffffffffffffffff16611df7611518565b73ffffffffffffffffffffffffffffffffffffffff1614611e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4490613e1d565b60405180910390fd5b565b611e5761231d565b6000609e60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e9b612315565b604051611ea89190612f22565b60405180910390a1565b611eba612535565b600060d0600086815260200190815260200160002060060154905060d060008681526020019081526020016000206003015481611ef7919061394c565b9050606554846bffffffffffffffffffffffff1682611f169190613cc3565b611f209190613d34565b826020018181525050606554606660009054906101000a900467ffffffffffffffff1667ffffffffffffffff168360200151611f5c9190613cc3565b611f669190613d34565b82600001818152505081600001518260200151611f83919061394c565b8260200181815250508215611fbb57816000015182602001818151611fa89190613e3d565b9150818152505060008260000181815250505b509392505050565b600060d0600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060d0600084815260200190815260200160002060030154905060d0600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161208a9291906131ec565b6020604051808303816000875af11580156120a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cd9190613148565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661224f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224690613ee3565b60405180910390fd5b612257612366565b565b600060019054906101000a900460ff166122a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229f90613ee3565b60405180910390fd5b6122b06123c7565b565b6122ba611b10565b6001609e60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122fe612315565b60405161230b9190612f22565b60405180910390a1565b600033905090565b612325610b22565b612364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235b90613f4f565b60405180910390fd5b565b600060019054906101000a900460ff166123b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ac90613ee3565b60405180910390fd5b6123c56123c0612315565b612117565b565b600060019054906101000a900460ff16612416576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240d90613ee3565b60405180910390fd5b6000609e60006101000a81548160ff021916908315150217905550565b604051806040016040528060008019168152602001600080191681525090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006bffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008019168152602001600080191681525090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61257681612563565b811461258157600080fd5b50565b6000813590506125938161256d565b92915050565b6000602082840312156125af576125ae612559565b5b60006125bd84828501612584565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125fb81612563565b82525050565b60408201600082015161261760008501826125f2565b50602082015161262a60208501826125f2565b50505050565b600061263c8383612601565b60408301905092915050565b6000602082019050919050565b6000612660826125c6565b61266a81856125d1565b9350612675836125e2565b8060005b838110156126a657815161268d8882612630565b975061269883612648565b925050600181019050612679565b5085935050505092915050565b600060208201905081810360008301526126cd8184612655565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612700826126d5565b9050919050565b612710816126f5565b811461271b57600080fd5b50565b60008135905061272d81612707565b92915050565b6000819050919050565b61274681612733565b811461275157600080fd5b50565b6000813590506127638161273d565b92915050565b60006bffffffffffffffffffffffff82169050919050565b61278a81612769565b811461279557600080fd5b50565b6000813590506127a781612781565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126127d2576127d16127ad565b5b8235905067ffffffffffffffff8111156127ef576127ee6127b2565b5b60208301915083600182028301111561280b5761280a6127b7565b5b9250929050565b6000806000806000806000806000806101208b8d03121561283657612835612559565b5b60006128448d828e0161271e565b9a505060206128558d828e01612754565b99505060406128668d828e01612584565b98505060606128778d828e01612584565b97505060806128888d828e01612798565b96505060a06128998d828e0161271e565b95505060c06128aa8d828e01612754565b94505060e06128bb8d828e0161271e565b9350506101008b013567ffffffffffffffff8111156128dd576128dc61255e565b5b6128e98d828e016127bc565b92509250509295989b9194979a5092959850565b61290681612563565b82525050565b600060208201905061292160008301846128fd565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61297082612927565b810181811067ffffffffffffffff8211171561298f5761298e612938565b5b80604052505050565b60006129a261254f565b90506129ae8282612967565b919050565b600067ffffffffffffffff8211156129ce576129cd612938565b5b602082029050602081019050919050565b600080fd5b6000604082840312156129fa576129f96129df565b5b612a046040612998565b90506000612a1484828501612584565b6000830152506020612a2884828501612584565b60208301525092915050565b6000612a47612a42846129b3565b612998565b90508083825260208201905060408402830185811115612a6a57612a696127b7565b5b835b81811015612a935780612a7f88826129e4565b845260208401935050604081019050612a6c565b5050509392505050565b600082601f830112612ab257612ab16127ad565b5b8135612ac2848260208601612a34565b91505092915050565b60008060408385031215612ae257612ae1612559565b5b6000612af085828601612584565b925050602083013567ffffffffffffffff811115612b1157612b1061255e565b5b612b1d85828601612a9d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b61578082015181840152602081019050612b46565b60008484015250505050565b6000612b7882612b27565b612b828185612b32565b9350612b92818560208601612b43565b612b9b81612927565b840191505092915050565b60006020820190508181036000830152612bc08184612b6d565b905092915050565b60008115159050919050565b612bdd81612bc8565b82525050565b6000602082019050612bf86000830184612bd4565b92915050565b600067ffffffffffffffff82169050919050565b612c1b81612bfe565b8114612c2657600080fd5b50565b600081359050612c3881612c12565b92915050565b612c4781612bc8565b8114612c5257600080fd5b50565b600081359050612c6481612c3e565b92915050565b60008060008060008060c08789031215612c8757612c86612559565b5b6000612c9589828a01612584565b9650506020612ca689828a01612584565b9550506040612cb789828a01612584565b9450506060612cc889828a0161271e565b9350506080612cd989828a01612c29565b92505060a0612cea89828a01612c55565b9150509295509295509295565b612d00816126f5565b82525050565b6000604082019050612d1b60008301856128fd565b612d286020830184612cf7565b9392505050565b600060208284031215612d4557612d44612559565b5b6000612d538482850161271e565b91505092915050565b612d65816126f5565b82525050565b612d7481612733565b82525050565b612d8381612769565b82525050565b612d9281612bc8565b82525050565b61012082016000820151612daf6000850182612d5c565b506020820151612dc26020850182612d5c565b506040820151612dd56040850182612d5c565b506060820151612de86060850182612d6b565b506080820151612dfb6080850182612d7a565b5060a0820151612e0e60a0850182612d89565b5060c0820151612e2160c0850182612d5c565b5060e0820151612e3460e0850182612d7a565b50610100820151612e49610100850182612d6b565b50505050565b600061012082019050612e656000830184612d98565b92915050565b60008060408385031215612e8257612e81612559565b5b6000612e9085828601612584565b9250506020612ea18582860161271e565b9150509250929050565b600060208284031215612ec157612ec0612559565b5b6000612ecf84828501612c29565b91505092915050565b604082016000820151612eee60008501826125f2565b506020820151612f0160208501826125f2565b50505050565b6000604082019050612f1c6000830184612ed8565b92915050565b6000602082019050612f376000830184612cf7565b92915050565b600080600060608486031215612f5657612f55612559565b5b6000612f6486828701612584565b9350506020612f758682870161271e565b9250506040612f8686828701612c55565b9150509250925092565b612f9981612bfe565b82525050565b612fa881612733565b82525050565b6000604082019050612fc36000830185612f90565b612fd06020830184612f9f565b9392505050565b60008083601f840112612fed57612fec6127ad565b5b8235905067ffffffffffffffff81111561300a576130096127b2565b5b602083019150836001820283011115613026576130256127b7565b5b9250929050565b6000806020838503121561304457613043612559565b5b600083013567ffffffffffffffff8111156130625761306161255e565b5b61306e85828601612fd7565b92509250509250929050565b60008060006060848603121561309357613092612559565b5b60006130a186828701612754565b93505060206130b286828701612584565b92505060406130c386828701612584565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006060820190506131116000830186612cf7565b61311e6020830185612cf7565b61312b6040830184612f9f565b949350505050565b60008151905061314281612c3e565b92915050565b60006020828403121561315e5761315d612559565b5b600061316c84828501613133565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131af82612733565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131e1576131e0613175565b5b600182019050919050565b60006040820190506132016000830185612cf7565b61320e6020830184612f9f565b9392505050565b6000819050919050565b600061323a61323561323084612769565b613215565b612733565b9050919050565b61324a8161321f565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b600061327c8385613250565b9350613289838584613261565b61329283612927565b840190509392505050565b60006080820190506132b26000830188613241565b6132bf60208301876128fd565b6132cc60408301866128fd565b81810360608301526132df818486613270565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061333257607f821691505b602082108103613345576133446132eb565b5b50919050565b7f4f6e6c7941676772656761746f72000000000000000000000000000000000000600082015250565b6000613381600e83613250565b915061338c8261334b565b602082019050919050565b600060208201905081810360008301526133b081613374565b9050919050565b7f4f7264657246756c66696c6c6564000000000000000000000000000000000000600082015250565b60006133ed600e83613250565b91506133f8826133b7565b602082019050919050565b6000602082019050818103600083015261341c816133e0565b9050919050565b600061342e82612769565b915061343983612769565b925082820390506bffffffffffffffffffffffff81111561345d5761345c613175565b5b92915050565b600061347e61347961347484612bfe565b613215565b612769565b9050919050565b61348e81613463565b82525050565b60006060820190506134a960008301866128fd565b6134b660208301856128fd565b6134c36040830184613485565b949350505050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b6000613501601683613250565b915061350c826134cb565b602082019050919050565b60006020820190508181036000830152613530816134f4565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613593602e83613250565b915061359e82613537565b604082019050919050565b600060208201905081810360008301526135c281613586565b9050919050565b6000819050919050565b600060ff82169050919050565b60006135fb6135f66135f1846135c9565b613215565b6135d3565b9050919050565b61360b816135e0565b82525050565b60006020820190506136266000830184613602565b92915050565b60006020820190506136416000830184612f90565b92915050565b600060608201905061365c60008301866128fd565b6136696020830185612cf7565b6136766040830184612bd4565b949350505050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026136eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826136ae565b6136f586836136ae565b95508019841693508086168417925050509392505050565b600061372861372361371e84612733565b613215565b612733565b9050919050565b6000819050919050565b6137428361370d565b61375661374e8261372f565b8484546136bb565b825550505050565b600090565b61376b61375e565b613776818484613739565b505050565b5b8181101561379a5761378f600082613763565b60018101905061377c565b5050565b601f8211156137df576137b081613689565b6137b98461369e565b810160208510156137c8578190505b6137dc6137d48561369e565b83018261377b565b50505b505050565b600082821c905092915050565b6000613802600019846008026137e4565b1980831691505092915050565b600061381b83836137f1565b9150826002028217905092915050565b613835838361367e565b67ffffffffffffffff81111561384e5761384d612938565b5b613858825461331a565b61386382828561379e565b6000601f8311600181146138925760008415613880578287013590505b61388a858261380f565b8655506138f2565b601f1984166138a086613689565b60005b828110156138c8578489013582556001820191506020850194506020810190506138a3565b868310156138e557848901356138e1601f8916826137f1565b8355505b6001600288020188555050505b50505050505050565b60006139078385612b32565b9350613914838584613261565b61391d83612927565b840190509392505050565b600060208201905081810360008301526139438184866138fb565b90509392505050565b600061395782612733565b915061396283612733565b925082820390508181111561397a57613979613175565b5b92915050565b60006040820190506139956000830185612f9f565b6139a260208301846128fd565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613a05602683613250565b9150613a10826139a9565b604082019050919050565b60006020820190508181036000830152613a34816139f8565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000613a71601083613250565b9150613a7c82613a3b565b602082019050919050565b60006020820190508181036000830152613aa081613a64565b9050919050565b7f546f6b656e4e6f74537570706f72746564000000000000000000000000000000600082015250565b6000613add601183613250565b9150613ae882613aa7565b602082019050919050565b60006020820190508181036000830152613b0c81613ad0565b9050919050565b7f416d6f756e7449735a65726f0000000000000000000000000000000000000000600082015250565b6000613b49600c83613250565b9150613b5482613b13565b602082019050919050565b60006020820190508181036000830152613b7881613b3c565b9050919050565b7f5468726f775a65726f4164647265737300000000000000000000000000000000600082015250565b6000613bb5601083613250565b9150613bc082613b7f565b602082019050919050565b60006020820190508181036000830152613be481613ba8565b9050919050565b7f496e76616c6964496e737469747574696f6e436f646500000000000000000000600082015250565b6000613c21601683613250565b9150613c2c82613beb565b602082019050919050565b60006020820190508181036000830152613c5081613c14565b9050919050565b7f496e76616c696453656e646572466565526563697069656e7400000000000000600082015250565b6000613c8d601983613250565b9150613c9882613c57565b602082019050919050565b60006020820190508181036000830152613cbc81613c80565b9050919050565b6000613cce82612733565b9150613cd983612733565b9250828202613ce781612733565b91508282048414831517613cfe57613cfd613175565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613d3f82612733565b9150613d4a83612733565b925082613d5a57613d59613d05565b5b828204905092915050565b7f53656e646572466565546f6f4869676800000000000000000000000000000000600082015250565b6000613d9b601083613250565b9150613da682613d65565b602082019050919050565b60006020820190508181036000830152613dca81613d8e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613e07602083613250565b9150613e1282613dd1565b602082019050919050565b60006020820190508181036000830152613e3681613dfa565b9050919050565b6000613e4882612733565b9150613e5383612733565b9250828201905080821115613e6b57613e6a613175565b5b92915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613ecd602b83613250565b9150613ed882613e71565b604082019050919050565b60006020820190508181036000830152613efc81613ec0565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613f39601483613250565b9150613f4482613f03565b602082019050919050565b60006020820190508181036000830152613f6881613f2c565b905091905056fea26469706673582212205d227ba26d79be9b459a6d7164455dd3702c091b08d293bcd7cd73430b2947be64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x22 PUSH3 0x28 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x72 SWAP1 PUSH3 0x175 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP1 AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH3 0xEC JUMPI PUSH1 0xFF PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH3 0xE3 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C697A696E6700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15D PUSH1 0x27 DUP4 PUSH3 0xEE JUMP JUMPDEST SWAP2 POP PUSH3 0x16A DUP3 PUSH3 0xFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x190 DUP2 PUSH3 0x14E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1AF DUP2 PUSH3 0x197 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x1CC PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3FA5 DUP1 PUSH3 0x1E2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79A0EFFB GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x315 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x36E JUMPI DUP1 PUSH4 0xD28A8D32 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3BA JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0x87490D86 EQ PUSH2 0x2E5 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x5C975ABB GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x5FE44CAC EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0x768C6EC0 EQ PUSH2 0x269 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x2621338 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x2654EC7E EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x32200882 EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0x3AD59DBC EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1D6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x26B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x186 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x181 SWAP2 SWAP1 PUSH2 0x2812 JUMP JUMPDEST PUSH2 0x514 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x193 SWAP2 SWAP1 PUSH2 0x290C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B1 SWAP2 SWAP1 PUSH2 0x2ACB JUMP JUMPDEST PUSH2 0x96A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH2 0xA7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x2BA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DE PUSH2 0xB10 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E8 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x2BE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x218 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x213 SWAP2 SWAP1 PUSH2 0x2C6A JUMP JUMPDEST PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x226 SWAP3 SWAP2 SWAP1 PUSH2 0x2D06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x237 PUSH2 0xF32 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x253 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24E SWAP2 SWAP1 PUSH2 0x2D2F JUMP JUMPDEST PUSH2 0xF46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x260 SWAP2 SWAP1 PUSH2 0x2BE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x283 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27E SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH2 0xF9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x290 SWAP2 SWAP1 PUSH2 0x2E4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AE SWAP2 SWAP1 PUSH2 0x2E6B JUMP JUMPDEST PUSH2 0x11CD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BD PUSH2 0x130A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C7 PUSH2 0x145A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DE SWAP2 SWAP1 PUSH2 0x2EAB JUMP JUMPDEST PUSH2 0x146C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2FF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH2 0x14D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x2F07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31D PUSH2 0x1518 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x32A SWAP2 SWAP1 PUSH2 0x2F22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x348 SWAP2 SWAP1 PUSH2 0x2F3D JUMP JUMPDEST PUSH2 0x1542 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x357 PUSH2 0x1678 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x365 SWAP3 SWAP2 SWAP1 PUSH2 0x2FAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x388 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x383 SWAP2 SWAP1 PUSH2 0x302D JUMP JUMPDEST PUSH2 0x169D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x307A JUMP JUMPDEST PUSH2 0x16F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B1 SWAP2 SWAP1 PUSH2 0x2BE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CF SWAP2 SWAP1 PUSH2 0x2D2F JUMP JUMPDEST PUSH2 0x1A8D JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x9C PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x453 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x40D JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x47B JUMPI PUSH2 0x47A PUSH2 0x2938 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4B4 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4A1 PUSH2 0x2433 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x499 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x508 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4D5 JUMPI PUSH2 0x4D4 PUSH2 0x30CD JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4F0 JUMPI PUSH2 0x4EF PUSH2 0x30CD JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4BA JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51E PUSH2 0x1B10 JUMP JUMPDEST PUSH2 0x52C DUP12 DUP12 DUP7 DUP10 DUP10 DUP15 PUSH2 0x1B5A JUMP JUMPDEST DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP14 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x569 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x588 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5AC SWAP2 SWAP1 PUSH2 0x3148 JUMP JUMPDEST POP PUSH1 0xD1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x5FD SWAP1 PUSH2 0x31A4 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH1 0xD1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x654 SWAP3 SWAP2 SWAP1 PUSH2 0x31EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x65 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE POP PUSH1 0xD0 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP DUP1 DUP11 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x2C205F90C01160D42994A0EB521810056D94BB82A1FCB038D7179C4158A1F15B DUP11 DUP14 DUP14 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x954 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x329D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x972 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA78 JUMPI PUSH1 0x9C PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9A9 JUMPI PUSH2 0x9A8 PUSH2 0x30CD JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA0E JUMPI PUSH2 0xA0D PUSH2 0x30CD JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9D PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xA3A JUMPI PUSH2 0xA39 PUSH2 0x30CD JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x97B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x68 DUP1 SLOAD PUSH2 0xA8D SWAP1 PUSH2 0x331A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAB9 SWAP1 PUSH2 0x331A JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB06 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xADB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB06 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAE9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB18 PUSH2 0x1DD1 JUMP JUMPDEST PUSH2 0xB20 PUSH2 0x1E4F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9E PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBCC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC3 SWAP1 PUSH2 0x3397 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD0 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xC30 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC27 SWAP1 PUSH2 0x3403 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xD0 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xCB2 SWAP2 SWAP1 PUSH2 0x3423 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0xCF7 DUP10 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP8 PUSH2 0x1EB2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD96 JUMPI PUSH1 0x1 PUSH1 0xD0 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD GT ISZERO PUSH2 0xD95 JUMPI PUSH2 0xD94 DUP10 PUSH2 0x1FC3 JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0xE49 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE04 SWAP3 SWAP2 SWAP1 PUSH2 0x31EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE23 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE47 SWAP2 SWAP1 PUSH2 0x3148 JUMP JUMPDEST POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP9 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE88 SWAP3 SWAP2 SWAP1 PUSH2 0x31EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xECB SWAP2 SWAP1 PUSH2 0x3148 JUMP JUMPDEST POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH32 0xF26DE978CBAEA68EA699627155A10AD53DF3321B0F95A08264C0CFD6D4C05326 DUP13 DUP12 DUP11 PUSH1 0x40 MLOAD PUSH2 0xF17 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3494 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP9 DUP3 SWAP4 POP SWAP4 POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xF3A PUSH2 0x1DD1 JUMP JUMPDEST PUSH2 0xF44 PUSH1 0x0 PUSH2 0x2117 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9B PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFA4 PUSH2 0x2453 JUMP JUMPDEST PUSH1 0xD0 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11D5 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1244 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x123B SWAP1 PUSH2 0x3517 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x7472656173757279000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x12AD JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xD8EF77A7D69A6B79F131ECD9AA37060BA0853BBD37CB175EC1ABD05738CE27CB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH2 0x12FE SWAP2 SWAP1 PUSH2 0x2F22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x133B JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x1368 JUMPI POP PUSH2 0x134A ADDRESS PUSH2 0x21DD JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1367 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x13A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x139E SWAP1 PUSH2 0x35A9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x13E4 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH3 0x186A0 PUSH1 0x65 DUP2 SWAP1 SSTORE POP PUSH2 0x13F6 PUSH2 0x2200 JUMP JUMPDEST PUSH2 0x13FE PUSH2 0x2259 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1457 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x144E SWAP2 SWAP1 PUSH2 0x3611 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x1462 PUSH2 0x1DD1 JUMP JUMPDEST PUSH2 0x146A PUSH2 0x22B2 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1474 PUSH2 0x1DD1 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xB94068A4BD2571ACEE6AC79ACC9DCDCF10C31425D35F09E88F154EC520E26446 DUP2 PUSH1 0x40 MLOAD PUSH2 0x14CC SWAP2 SWAP1 PUSH2 0x362C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x14DF PUSH2 0x2515 JUMP JUMPDEST PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x154A PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15B0 SWAP1 PUSH2 0x3517 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x1638 JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x166B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3647 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x65 SLOAD SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x16A5 PUSH2 0x1DD1 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x16B6 SWAP3 SWAP2 SWAP1 PUSH2 0x382B JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x16E8 SWAP3 SWAP2 SWAP1 PUSH2 0x3928 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1786 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x177D SWAP1 PUSH2 0x3397 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x17EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17E1 SWAP1 PUSH2 0x3403 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD PUSH2 0x180E SWAP2 SWAP1 PUSH2 0x394C JUMP JUMPDEST SWAP1 POP PUSH1 0xD0 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18A3 SWAP3 SWAP2 SWAP1 PUSH2 0x31EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18E6 SWAP2 SWAP1 PUSH2 0x3148 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xD0 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0xD0 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A03 SWAP3 SWAP2 SWAP1 PUSH2 0x31EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A46 SWAP2 SWAP1 PUSH2 0x3148 JUMP JUMPDEST POP DUP4 PUSH32 0xA8E0E11A759CCCCE708FF767ACDE5348E3E96706E2CCE8301462510CE02FA1A6 DUP7 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1A79 SWAP3 SWAP2 SWAP1 PUSH2 0x3980 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1A95 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1B04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AFB SWAP1 PUSH2 0x3A1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B0D DUP2 PUSH2 0x2117 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1B18 PUSH2 0xB22 JUMP JUMPDEST ISZERO PUSH2 0x1B58 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B4F SWAP1 PUSH2 0x3A87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x9B PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1BE6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BDD SWAP1 PUSH2 0x3AF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 GT PUSH2 0x1C29 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C20 SWAP1 PUSH2 0x3B5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1C98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C8F SWAP1 PUSH2 0x3BCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x1CF3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CEA SWAP1 PUSH2 0x3C37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x1D6C JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D6B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D62 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 0x65 SLOAD PUSH2 0x1F4 DUP7 PUSH2 0x1D7D SWAP2 SWAP1 PUSH2 0x3CC3 JUMP JUMPDEST PUSH2 0x1D87 SWAP2 SWAP1 PUSH2 0x3D34 JUMP JUMPDEST DUP3 GT ISZERO PUSH2 0x1DC9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DC0 SWAP1 PUSH2 0x3DB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1DD9 PUSH2 0x2315 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DF7 PUSH2 0x1518 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1E4D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E44 SWAP1 PUSH2 0x3E1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1E57 PUSH2 0x231D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9E PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1E9B PUSH2 0x2315 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EA8 SWAP2 SWAP1 PUSH2 0x2F22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1EBA PUSH2 0x2535 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD DUP2 PUSH2 0x1EF7 SWAP2 SWAP1 PUSH2 0x394C JUMP JUMPDEST SWAP1 POP PUSH1 0x65 SLOAD DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x1F16 SWAP2 SWAP1 PUSH2 0x3CC3 JUMP JUMPDEST PUSH2 0x1F20 SWAP2 SWAP1 PUSH2 0x3D34 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1F5C SWAP2 SWAP1 PUSH2 0x3CC3 JUMP JUMPDEST PUSH2 0x1F66 SWAP2 SWAP1 PUSH2 0x3D34 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1F83 SWAP2 SWAP1 PUSH2 0x394C JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP DUP3 ISZERO PUSH2 0x1FBB JUMPI DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD DUP2 DUP2 MLOAD PUSH2 0x1FA8 SWAP2 SWAP1 PUSH2 0x3E3D JUMP JUMPDEST SWAP2 POP DUP2 DUP2 MSTORE POP POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x208A SWAP3 SWAP2 SWAP1 PUSH2 0x31EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20CD SWAP2 SWAP1 PUSH2 0x3148 JUMP JUMPDEST POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x96C76D5AEC8A8C11A9C8E02768E3FA309347330D08961E0CF9FD43B349B684C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x224F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2246 SWAP1 PUSH2 0x3EE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2257 PUSH2 0x2366 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x229F SWAP1 PUSH2 0x3EE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x22B0 PUSH2 0x23C7 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x22BA PUSH2 0x1B10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x9E PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x22FE PUSH2 0x2315 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x230B SWAP2 SWAP1 PUSH2 0x2F22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2325 PUSH2 0xB22 JUMP JUMPDEST PUSH2 0x2364 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x235B SWAP1 PUSH2 0x3F4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23AC SWAP1 PUSH2 0x3EE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x23C5 PUSH2 0x23C0 PUSH2 0x2315 JUMP JUMPDEST PUSH2 0x2117 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2416 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x240D SWAP1 PUSH2 0x3EE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9E PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2576 DUP2 PUSH2 0x2563 JUMP JUMPDEST DUP2 EQ PUSH2 0x2581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2593 DUP2 PUSH2 0x256D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25AF JUMPI PUSH2 0x25AE PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25BD DUP5 DUP3 DUP6 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25FB DUP2 PUSH2 0x2563 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2617 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x25F2 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x262A PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x25F2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x263C DUP4 DUP4 PUSH2 0x2601 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2660 DUP3 PUSH2 0x25C6 JUMP JUMPDEST PUSH2 0x266A DUP2 DUP6 PUSH2 0x25D1 JUMP JUMPDEST SWAP4 POP PUSH2 0x2675 DUP4 PUSH2 0x25E2 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x26A6 JUMPI DUP2 MLOAD PUSH2 0x268D DUP9 DUP3 PUSH2 0x2630 JUMP JUMPDEST SWAP8 POP PUSH2 0x2698 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2679 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x26CD DUP2 DUP5 PUSH2 0x2655 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2700 DUP3 PUSH2 0x26D5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2710 DUP2 PUSH2 0x26F5 JUMP JUMPDEST DUP2 EQ PUSH2 0x271B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x272D DUP2 PUSH2 0x2707 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2746 DUP2 PUSH2 0x2733 JUMP JUMPDEST DUP2 EQ PUSH2 0x2751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2763 DUP2 PUSH2 0x273D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x278A DUP2 PUSH2 0x2769 JUMP JUMPDEST DUP2 EQ PUSH2 0x2795 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x27A7 DUP2 PUSH2 0x2781 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x27D2 JUMPI PUSH2 0x27D1 PUSH2 0x27AD JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27EF JUMPI PUSH2 0x27EE PUSH2 0x27B2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x280B JUMPI PUSH2 0x280A PUSH2 0x27B7 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x120 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x2836 JUMPI PUSH2 0x2835 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2844 DUP14 DUP3 DUP15 ADD PUSH2 0x271E JUMP JUMPDEST SWAP11 POP POP PUSH1 0x20 PUSH2 0x2855 DUP14 DUP3 DUP15 ADD PUSH2 0x2754 JUMP JUMPDEST SWAP10 POP POP PUSH1 0x40 PUSH2 0x2866 DUP14 DUP3 DUP15 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP9 POP POP PUSH1 0x60 PUSH2 0x2877 DUP14 DUP3 DUP15 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x80 PUSH2 0x2888 DUP14 DUP3 DUP15 ADD PUSH2 0x2798 JUMP JUMPDEST SWAP7 POP POP PUSH1 0xA0 PUSH2 0x2899 DUP14 DUP3 DUP15 ADD PUSH2 0x271E JUMP JUMPDEST SWAP6 POP POP PUSH1 0xC0 PUSH2 0x28AA DUP14 DUP3 DUP15 ADD PUSH2 0x2754 JUMP JUMPDEST SWAP5 POP POP PUSH1 0xE0 PUSH2 0x28BB DUP14 DUP3 DUP15 ADD PUSH2 0x271E JUMP JUMPDEST SWAP4 POP POP PUSH2 0x100 DUP12 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28DD JUMPI PUSH2 0x28DC PUSH2 0x255E JUMP JUMPDEST JUMPDEST PUSH2 0x28E9 DUP14 DUP3 DUP15 ADD PUSH2 0x27BC JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH2 0x2906 DUP2 PUSH2 0x2563 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2921 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x28FD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2970 DUP3 PUSH2 0x2927 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x298F JUMPI PUSH2 0x298E PUSH2 0x2938 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29A2 PUSH2 0x254F JUMP JUMPDEST SWAP1 POP PUSH2 0x29AE DUP3 DUP3 PUSH2 0x2967 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x29CE JUMPI PUSH2 0x29CD PUSH2 0x2938 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29FA JUMPI PUSH2 0x29F9 PUSH2 0x29DF JUMP JUMPDEST JUMPDEST PUSH2 0x2A04 PUSH1 0x40 PUSH2 0x2998 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A14 DUP5 DUP3 DUP6 ADD PUSH2 0x2584 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x2A28 DUP5 DUP3 DUP6 ADD PUSH2 0x2584 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A47 PUSH2 0x2A42 DUP5 PUSH2 0x29B3 JUMP JUMPDEST PUSH2 0x2998 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2A6A JUMPI PUSH2 0x2A69 PUSH2 0x27B7 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2A93 JUMPI DUP1 PUSH2 0x2A7F DUP9 DUP3 PUSH2 0x29E4 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x2A6C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2AB2 JUMPI PUSH2 0x2AB1 PUSH2 0x27AD JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2AC2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2A34 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AE2 JUMPI PUSH2 0x2AE1 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2AF0 DUP6 DUP3 DUP7 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B11 JUMPI PUSH2 0x2B10 PUSH2 0x255E JUMP JUMPDEST JUMPDEST PUSH2 0x2B1D DUP6 DUP3 DUP7 ADD PUSH2 0x2A9D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B61 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2B46 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B78 DUP3 PUSH2 0x2B27 JUMP JUMPDEST PUSH2 0x2B82 DUP2 DUP6 PUSH2 0x2B32 JUMP JUMPDEST SWAP4 POP PUSH2 0x2B92 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2B43 JUMP JUMPDEST PUSH2 0x2B9B DUP2 PUSH2 0x2927 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BC0 DUP2 DUP5 PUSH2 0x2B6D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2BDD DUP2 PUSH2 0x2BC8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2BF8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BD4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C1B DUP2 PUSH2 0x2BFE JUMP JUMPDEST DUP2 EQ PUSH2 0x2C26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2C38 DUP2 PUSH2 0x2C12 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C47 DUP2 PUSH2 0x2BC8 JUMP JUMPDEST DUP2 EQ PUSH2 0x2C52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2C64 DUP2 PUSH2 0x2C3E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2C87 JUMPI PUSH2 0x2C86 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C95 DUP10 DUP3 DUP11 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x2CA6 DUP10 DUP3 DUP11 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x2CB7 DUP10 DUP3 DUP11 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x2CC8 DUP10 DUP3 DUP11 ADD PUSH2 0x271E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x2CD9 DUP10 DUP3 DUP11 ADD PUSH2 0x2C29 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x2CEA DUP10 DUP3 DUP11 ADD PUSH2 0x2C55 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH2 0x2D00 DUP2 PUSH2 0x26F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2D1B PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x2D28 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2CF7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D45 JUMPI PUSH2 0x2D44 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D53 DUP5 DUP3 DUP6 ADD PUSH2 0x271E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2D65 DUP2 PUSH2 0x26F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D74 DUP2 PUSH2 0x2733 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D83 DUP2 PUSH2 0x2769 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D92 DUP2 PUSH2 0x2BC8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2DAF PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2D5C JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2DC2 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2D5C JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2DD5 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2D5C JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2DE8 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2D6B JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2DFB PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2D7A JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2E0E PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2D89 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2E21 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x2D5C JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x2E34 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2D7A JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x2E49 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x2D6B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x2E65 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2D98 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E82 JUMPI PUSH2 0x2E81 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E90 DUP6 DUP3 DUP7 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2EA1 DUP6 DUP3 DUP7 ADD PUSH2 0x271E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2EC1 JUMPI PUSH2 0x2EC0 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2ECF DUP5 DUP3 DUP6 ADD PUSH2 0x2C29 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2EEE PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x25F2 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2F01 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x25F2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2F1C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2ED8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2F37 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2CF7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2F56 JUMPI PUSH2 0x2F55 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F64 DUP7 DUP3 DUP8 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2F75 DUP7 DUP3 DUP8 ADD PUSH2 0x271E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2F86 DUP7 DUP3 DUP8 ADD PUSH2 0x2C55 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x2F99 DUP2 PUSH2 0x2BFE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2FA8 DUP2 PUSH2 0x2733 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2FC3 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2F90 JUMP JUMPDEST PUSH2 0x2FD0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F9F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2FED JUMPI PUSH2 0x2FEC PUSH2 0x27AD JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x300A JUMPI PUSH2 0x3009 PUSH2 0x27B2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x3026 JUMPI PUSH2 0x3025 PUSH2 0x27B7 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3044 JUMPI PUSH2 0x3043 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3062 JUMPI PUSH2 0x3061 PUSH2 0x255E JUMP JUMPDEST JUMPDEST PUSH2 0x306E DUP6 DUP3 DUP7 ADD PUSH2 0x2FD7 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3093 JUMPI PUSH2 0x3092 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x30A1 DUP7 DUP3 DUP8 ADD PUSH2 0x2754 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x30B2 DUP7 DUP3 DUP8 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x30C3 DUP7 DUP3 DUP8 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3111 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2CF7 JUMP JUMPDEST PUSH2 0x311E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2CF7 JUMP JUMPDEST PUSH2 0x312B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2F9F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3142 DUP2 PUSH2 0x2C3E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x315E JUMPI PUSH2 0x315D PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x316C DUP5 DUP3 DUP6 ADD PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x31AF DUP3 PUSH2 0x2733 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x31E1 JUMPI PUSH2 0x31E0 PUSH2 0x3175 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3201 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2CF7 JUMP JUMPDEST PUSH2 0x320E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F9F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x323A PUSH2 0x3235 PUSH2 0x3230 DUP5 PUSH2 0x2769 JUMP JUMPDEST PUSH2 0x3215 JUMP JUMPDEST PUSH2 0x2733 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x324A DUP2 PUSH2 0x321F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C DUP4 DUP6 PUSH2 0x3250 JUMP JUMPDEST SWAP4 POP PUSH2 0x3289 DUP4 DUP6 DUP5 PUSH2 0x3261 JUMP JUMPDEST PUSH2 0x3292 DUP4 PUSH2 0x2927 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x32B2 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3241 JUMP JUMPDEST PUSH2 0x32BF PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x32CC PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x28FD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x32DF DUP2 DUP5 DUP7 PUSH2 0x3270 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3332 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3345 JUMPI PUSH2 0x3344 PUSH2 0x32EB JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C7941676772656761746F72000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3381 PUSH1 0xE DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x338C DUP3 PUSH2 0x334B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x33B0 DUP2 PUSH2 0x3374 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F7264657246756C66696C6C6564000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33ED PUSH1 0xE DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x33F8 DUP3 PUSH2 0x33B7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x341C DUP2 PUSH2 0x33E0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x342E DUP3 PUSH2 0x2769 JUMP JUMPDEST SWAP2 POP PUSH2 0x3439 DUP4 PUSH2 0x2769 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x345D JUMPI PUSH2 0x345C PUSH2 0x3175 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x347E PUSH2 0x3479 PUSH2 0x3474 DUP5 PUSH2 0x2BFE JUMP JUMPDEST PUSH2 0x3215 JUMP JUMPDEST PUSH2 0x2769 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x348E DUP2 PUSH2 0x3463 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x34A9 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x34B6 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x34C3 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3485 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3501 PUSH1 0x16 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x350C DUP3 PUSH2 0x34CB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3530 DUP2 PUSH2 0x34F4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3593 PUSH1 0x2E DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x359E DUP3 PUSH2 0x3537 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35C2 DUP2 PUSH2 0x3586 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35FB PUSH2 0x35F6 PUSH2 0x35F1 DUP5 PUSH2 0x35C9 JUMP JUMPDEST PUSH2 0x3215 JUMP JUMPDEST PUSH2 0x35D3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x360B DUP2 PUSH2 0x35E0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3626 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3602 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3641 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F90 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x365C PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x3669 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2CF7 JUMP JUMPDEST PUSH2 0x3676 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BD4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x36EB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x36AE JUMP JUMPDEST PUSH2 0x36F5 DUP7 DUP4 PUSH2 0x36AE JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3728 PUSH2 0x3723 PUSH2 0x371E DUP5 PUSH2 0x2733 JUMP JUMPDEST PUSH2 0x3215 JUMP JUMPDEST PUSH2 0x2733 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3742 DUP4 PUSH2 0x370D JUMP JUMPDEST PUSH2 0x3756 PUSH2 0x374E DUP3 PUSH2 0x372F JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x36BB JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x376B PUSH2 0x375E JUMP JUMPDEST PUSH2 0x3776 DUP2 DUP5 DUP5 PUSH2 0x3739 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x379A JUMPI PUSH2 0x378F PUSH1 0x0 DUP3 PUSH2 0x3763 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x377C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x37DF JUMPI PUSH2 0x37B0 DUP2 PUSH2 0x3689 JUMP JUMPDEST PUSH2 0x37B9 DUP5 PUSH2 0x369E JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x37C8 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x37DC PUSH2 0x37D4 DUP6 PUSH2 0x369E JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x377B JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3802 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x37E4 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x381B DUP4 DUP4 PUSH2 0x37F1 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3835 DUP4 DUP4 PUSH2 0x367E JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x384E JUMPI PUSH2 0x384D PUSH2 0x2938 JUMP JUMPDEST JUMPDEST PUSH2 0x3858 DUP3 SLOAD PUSH2 0x331A JUMP JUMPDEST PUSH2 0x3863 DUP3 DUP3 DUP6 PUSH2 0x379E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3892 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3880 JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x388A DUP6 DUP3 PUSH2 0x380F JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x38F2 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x38A0 DUP7 PUSH2 0x3689 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x38C8 JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x38A3 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x38E5 JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x38E1 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x37F1 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3907 DUP4 DUP6 PUSH2 0x2B32 JUMP JUMPDEST SWAP4 POP PUSH2 0x3914 DUP4 DUP6 DUP5 PUSH2 0x3261 JUMP JUMPDEST PUSH2 0x391D DUP4 PUSH2 0x2927 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3943 DUP2 DUP5 DUP7 PUSH2 0x38FB JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3957 DUP3 PUSH2 0x2733 JUMP JUMPDEST SWAP2 POP PUSH2 0x3962 DUP4 PUSH2 0x2733 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x397A JUMPI PUSH2 0x3979 PUSH2 0x3175 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3995 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2F9F JUMP JUMPDEST PUSH2 0x39A2 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x28FD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A05 PUSH1 0x26 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A10 DUP3 PUSH2 0x39A9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A34 DUP2 PUSH2 0x39F8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A71 PUSH1 0x10 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A7C DUP3 PUSH2 0x3A3B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AA0 DUP2 PUSH2 0x3A64 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x546F6B656E4E6F74537570706F72746564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3ADD PUSH1 0x11 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AE8 DUP3 PUSH2 0x3AA7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B0C DUP2 PUSH2 0x3AD0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E7449735A65726F0000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B49 PUSH1 0xC DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B54 DUP3 PUSH2 0x3B13 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B78 DUP2 PUSH2 0x3B3C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5468726F775A65726F4164647265737300000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BB5 PUSH1 0x10 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3BC0 DUP3 PUSH2 0x3B7F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3BE4 DUP2 PUSH2 0x3BA8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964496E737469747574696F6E436F646500000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C21 PUSH1 0x16 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C2C DUP3 PUSH2 0x3BEB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C50 DUP2 PUSH2 0x3C14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C696453656E646572466565526563697069656E7400000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C8D PUSH1 0x19 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C98 DUP3 PUSH2 0x3C57 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CBC DUP2 PUSH2 0x3C80 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CCE DUP3 PUSH2 0x2733 JUMP JUMPDEST SWAP2 POP PUSH2 0x3CD9 DUP4 PUSH2 0x2733 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x3CE7 DUP2 PUSH2 0x2733 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x3CFE JUMPI PUSH2 0x3CFD PUSH2 0x3175 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3D3F DUP3 PUSH2 0x2733 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D4A DUP4 PUSH2 0x2733 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3D5A JUMPI PUSH2 0x3D59 PUSH2 0x3D05 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x53656E646572466565546F6F4869676800000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D9B PUSH1 0x10 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3DA6 DUP3 PUSH2 0x3D65 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DCA DUP2 PUSH2 0x3D8E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E07 PUSH1 0x20 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3E12 DUP3 PUSH2 0x3DD1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3E36 DUP2 PUSH2 0x3DFA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E48 DUP3 PUSH2 0x2733 JUMP JUMPDEST SWAP2 POP PUSH2 0x3E53 DUP4 PUSH2 0x2733 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3E6B JUMPI PUSH2 0x3E6A PUSH2 0x3175 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3ECD PUSH1 0x2B DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3ED8 DUP3 PUSH2 0x3E71 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3EFC DUP2 PUSH2 0x3EC0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F39 PUSH1 0x14 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3F44 DUP3 PUSH2 0x3F03 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3F68 DUP2 PUSH2 0x3F2C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0x22 PUSH28 0xA26D79BE9B459A6D7164455DD3702C091B08D293BCD7CD73430B2947 0xBE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"505:9070:15:-:0;;;944:53;;;;;;;;;;968:22;:20;;;:22;;:::i;:::-;505:9070;;5939:280:1;6007:13;;;;;;;;;;;6006:14;5998:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;6094:15;6078:31;;:12;;;;;;;;;;:31;;;6074:139;;6140:15;6125:12;;:30;;;;;;;;;;;;;;;;;;6174:28;6186:15;6174:28;;;;;;:::i;:::-;;;;;;;;6074:139;5939:280::o;7:169:18:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:226::-;322:34;318:1;310:6;306:14;299:58;391:9;386:2;378:6;374:15;367:34;182:226;:::o;414:366::-;556:3;577:67;641:2;636:3;577:67;:::i;:::-;570:74;;653:93;742:3;653:93;:::i;:::-;771:2;766:3;762:12;755:19;;414:366;;;:::o;786:419::-;952:4;990:2;979:9;975:18;967:26;;1039:9;1033:4;1029:20;1025:1;1014:9;1010:17;1003:47;1067:131;1193:4;1067:131;:::i;:::-;1059:139;;786:419;;;:::o;1211:86::-;1246:7;1286:4;1279:5;1275:16;1264:27;;1211:86;;;:::o;1303:112::-;1386:22;1402:5;1386:22;:::i;:::-;1381:3;1374:35;1303:112;;:::o;1421:214::-;1510:4;1548:2;1537:9;1533:18;1525:26;;1561:67;1625:1;1614:9;1610:17;1601:6;1561:67;:::i;:::-;1421:214;;;;:::o;505:9070:15:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__Ownable_init_26":{"entryPoint":8704,"id":26,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_37":{"entryPoint":9062,"id":37,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_331":{"entryPoint":8793,"id":331,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_341":{"entryPoint":9159,"id":341,"parameterSlots":0,"returnSlots":0},"@_calculateFees_3658":{"entryPoint":7858,"id":3658,"parameterSlots":3,"returnSlots":1},"@_checkOwner_68":{"entryPoint":7633,"id":68,"parameterSlots":0,"returnSlots":0},"@_handler_3345":{"entryPoint":7002,"id":3345,"parameterSlots":6,"returnSlots":0},"@_msgSender_1274":{"entryPoint":8981,"id":1274,"parameterSlots":0,"returnSlots":1},"@_pause_405":{"entryPoint":8882,"id":405,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_378":{"entryPoint":6928,"id":378,"parameterSlots":0,"returnSlots":0},"@_requirePaused_389":{"entryPoint":8989,"id":389,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_125":{"entryPoint":8471,"id":125,"parameterSlots":1,"returnSlots":0},"@_unpause_421":{"entryPoint":7759,"id":421,"parameterSlots":0,"returnSlots":0},"@createOrder_3265":{"entryPoint":1300,"id":3265,"parameterSlots":10,"returnSlots":1},"@getAggregator_3780":{"entryPoint":2686,"id":3780,"parameterSlots":0,"returnSlots":1},"@getFeeDetails_3771":{"entryPoint":5752,"id":3771,"parameterSlots":0,"returnSlots":2},"@getOrderInfo_3672":{"entryPoint":3996,"id":3672,"parameterSlots":1,"returnSlots":1},"@getSupportedInstitutionName_3699":{"entryPoint":5335,"id":3699,"parameterSlots":1,"returnSlots":1},"@getSupportedInstitutions_3758":{"entryPoint":982,"id":3758,"parameterSlots":1,"returnSlots":1},"@initialize_3134":{"entryPoint":4874,"id":3134,"parameterSlots":0,"returnSlots":0},"@isContract_935":{"entryPoint":8669,"id":935,"parameterSlots":1,"returnSlots":1},"@isTokenSupported_3685":{"entryPoint":3910,"id":3685,"parameterSlots":1,"returnSlots":1},"@owner_54":{"entryPoint":5400,"id":54,"parameterSlots":0,"returnSlots":1},"@pause_3156":{"entryPoint":5210,"id":3156,"parameterSlots":0,"returnSlots":0},"@paused_366":{"entryPoint":2850,"id":366,"parameterSlots":0,"returnSlots":1},"@refund_3579":{"entryPoint":5876,"id":3579,"parameterSlots":3,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":3890,"id":82,"parameterSlots":0,"returnSlots":0},"@setSupportedInstitutions_3941":{"entryPoint":2410,"id":3941,"parameterSlots":2,"returnSlots":0},"@settingManagerBool_3887":{"entryPoint":5442,"id":3887,"parameterSlots":3,"returnSlots":0},"@settle_3463":{"entryPoint":2873,"id":3463,"parameterSlots":6,"returnSlots":2},"@transferOwnership_105":{"entryPoint":6797,"id":105,"parameterSlots":1,"returnSlots":0},"@transferSenderFee_3499":{"entryPoint":8131,"id":3499,"parameterSlots":1,"returnSlots":0},"@unpause_3166":{"entryPoint":2832,"id":3166,"parameterSlots":0,"returnSlots":0},"@updateProtocolAddresses_3989":{"entryPoint":4557,"id":3989,"parameterSlots":2,"returnSlots":0},"@updateProtocolAggregator_4005":{"entryPoint":5789,"id":4005,"parameterSlots":2,"returnSlots":0},"@updateProtocolFees_3957":{"entryPoint":5228,"id":3957,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr":{"entryPoint":10804,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":10014,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr":{"entryPoint":10909,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":11349,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":12595,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":9604,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":12247,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_string_calldata_ptr":{"entryPoint":10172,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_struct$_Institution_$3791_memory_ptr":{"entryPoint":10724,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":10068,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64":{"entryPoint":11305,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint96":{"entryPoint":10136,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":11567,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes32t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr":{"entryPoint":10258,"id":null,"parameterSlots":2,"returnSlots":10},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":12616,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":9625,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":11883,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":12093,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr":{"entryPoint":10955,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes32t_bytes32t_addresst_uint64t_bool":{"entryPoint":11370,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":12333,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_bytes32t_bytes32":{"entryPoint":12410,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint64":{"entryPoint":11947,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_struct$_Institution_$3791_memory_ptr_to_t_struct$_Institution_$3791_memory_ptr":{"entryPoint":9776,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":11612,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":11511,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9813,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool":{"entryPoint":11657,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":11220,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32":{"entryPoint":9714,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":10493,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":14587,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":11117,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":13826,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":12912,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack":{"entryPoint":16172,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":14840,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack":{"entryPoint":15164,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":14948,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack":{"entryPoint":13556,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack":{"entryPoint":15758,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":13702,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack":{"entryPoint":13280,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack":{"entryPoint":15380,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":15866,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack":{"entryPoint":15272,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack":{"entryPoint":15056,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":16064,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack":{"entryPoint":13172,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8_to_t_string_memory_ptr_fromStack":{"entryPoint":15488,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_InstitutionByCode_$3796_memory_ptr_to_t_struct$_InstitutionByCode_$3796_memory_ptr_fromStack":{"entryPoint":11992,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Institution_$3791_memory_ptr_to_t_struct$_Institution_$3791_memory_ptr":{"entryPoint":9729,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Order_$4094_memory_ptr_to_t_struct$_Order_$4094_memory_ptr_fromStack":{"entryPoint":11672,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":11627,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":12191,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":12176,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint96_fromStack":{"entryPoint":13445,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint256_fromStack":{"entryPoint":12865,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint96":{"entryPoint":11642,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":12066,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":12540,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":12780,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9907,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":11235,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":10508,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":11526,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":13895,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_uint64__to_t_bytes32_t_bytes32_t_uint96__fromStack_reversed":{"entryPoint":13460,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":14632,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11174,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":13841,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16207,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14875,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15199,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14983,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13591,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15793,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13737,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13315,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15415,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15901,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15307,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15091,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16099,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13207,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15523,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_InstitutionByCode_$3796_memory_ptr__to_t_struct$_InstitutionByCode_$3796_memory_ptr__fromStack_reversed":{"entryPoint":12039,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_struct$_Order_$4094_memory_ptr__to_t_struct$_Order_$4094_memory_ptr__fromStack_reversed":{"entryPoint":11855,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_bytes32__to_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":14720,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":13868,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint64_t_uint256__to_t_uint64_t_uint256__fromStack_reversed":{"entryPoint":12206,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint96_t_bytes32_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_bytes32_t_bytes32_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12957,"id":null,"parameterSlots":6,"returnSlots":1},"allocate_memory":{"entryPoint":10648,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":9551,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr":{"entryPoint":10675,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr":{"entryPoint":9698,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_bytes_storage":{"entryPoint":13961,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr":{"entryPoint":9670,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_calldata_ptr":{"entryPoint":13950,"id":null,"parameterSlots":2,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":11047,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr":{"entryPoint":9800,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9681,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":11058,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":12880,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":15933,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":15668,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":15555,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":14668,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint96":{"entryPoint":13347,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_bytes_storage":{"entryPoint":14238,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":9973,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":11208,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":9571,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":13769,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9941,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":10035,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":11262,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":13779,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint96":{"entryPoint":10089,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":14203,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":13792,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":14093,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint64_to_t_uint96":{"entryPoint":13411,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint96_to_t_uint256":{"entryPoint":12831,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage":{"entryPoint":14379,"id":null,"parameterSlots":3,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":12897,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":11075,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":13982,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":13082,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":14351,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":10599,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":12821,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":12708,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":14321,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":12661,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":15621,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":13035,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":12493,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":10552,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":14127,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":10162,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":10157,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":10719,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":10167,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":9566,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":9561,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":10535,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":13998,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":14308,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":14179,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a":{"entryPoint":16131,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":14761,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2":{"entryPoint":15123,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":14907,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4":{"entryPoint":13515,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4":{"entryPoint":15717,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":13623,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5":{"entryPoint":13239,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5":{"entryPoint":15339,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":15825,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7":{"entryPoint":15231,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1":{"entryPoint":15015,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":15985,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243":{"entryPoint":13131,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8":{"entryPoint":15447,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":14011,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":14137,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":9991,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":11326,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":9581,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":10045,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":11282,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint96":{"entryPoint":10113,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":14174,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:52033:18","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:18","statements":[{"nodeType":"YulAssignment","src":"57:19:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:18","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:18"},"nodeType":"YulFunctionCall","src":"67:9:18"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:18"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:18","type":""}],"src":"7:75:18"},{"body":{"nodeType":"YulBlock","src":"177:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:18"},"nodeType":"YulFunctionCall","src":"187:12:18"},"nodeType":"YulExpressionStatement","src":"187:12:18"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:18"},{"body":{"nodeType":"YulBlock","src":"300:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:18"},"nodeType":"YulFunctionCall","src":"310:12:18"},"nodeType":"YulExpressionStatement","src":"310:12:18"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:18"},{"body":{"nodeType":"YulBlock","src":"379:32:18","statements":[{"nodeType":"YulAssignment","src":"389:16:18","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:18"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:18","type":""}],"src":"334:77:18"},{"body":{"nodeType":"YulBlock","src":"460:79:18","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:18"},"nodeType":"YulFunctionCall","src":"519:12:18"},"nodeType":"YulExpressionStatement","src":"519:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:18"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:18"},"nodeType":"YulFunctionCall","src":"490:24:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:18"},"nodeType":"YulFunctionCall","src":"480:35:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:18"},"nodeType":"YulFunctionCall","src":"473:43:18"},"nodeType":"YulIf","src":"470:63:18"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:18","type":""}],"src":"417:122:18"},{"body":{"nodeType":"YulBlock","src":"597:87:18","statements":[{"nodeType":"YulAssignment","src":"607:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:18"},"nodeType":"YulFunctionCall","src":"616:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:18"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:18"},"nodeType":"YulFunctionCall","src":"645:33:18"},"nodeType":"YulExpressionStatement","src":"645:33:18"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:18","type":""}],"src":"545:139:18"},{"body":{"nodeType":"YulBlock","src":"756:263:18","statements":[{"body":{"nodeType":"YulBlock","src":"802:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"804:77:18"},"nodeType":"YulFunctionCall","src":"804:79:18"},"nodeType":"YulExpressionStatement","src":"804:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"777:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"773:3:18"},"nodeType":"YulFunctionCall","src":"773:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"769:3:18"},"nodeType":"YulFunctionCall","src":"769:32:18"},"nodeType":"YulIf","src":"766:119:18"},{"nodeType":"YulBlock","src":"895:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"910:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"924:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:18","type":""}]},{"nodeType":"YulAssignment","src":"939:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"974:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"985:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:18"},"nodeType":"YulFunctionCall","src":"970:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"949:20:18"},"nodeType":"YulFunctionCall","src":"949:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"939:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"726:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"737:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"749:6:18","type":""}],"src":"690:329:18"},{"body":{"nodeType":"YulBlock","src":"1128:40:18","statements":[{"nodeType":"YulAssignment","src":"1139:22:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1155:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1149:5:18"},"nodeType":"YulFunctionCall","src":"1149:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1139:6:18"}]}]},"name":"array_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1111:5:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1121:6:18","type":""}],"src":"1025:143:18"},{"body":{"nodeType":"YulBlock","src":"1314:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1331:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"1336:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1324:6:18"},"nodeType":"YulFunctionCall","src":"1324:19:18"},"nodeType":"YulExpressionStatement","src":"1324:19:18"},{"nodeType":"YulAssignment","src":"1352:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1371:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"1376:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1367:3:18"},"nodeType":"YulFunctionCall","src":"1367:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1352:11:18"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1286:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"1291:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1302:11:18","type":""}],"src":"1174:213:18"},{"body":{"nodeType":"YulBlock","src":"1494:60:18","statements":[{"nodeType":"YulAssignment","src":"1504:11:18","value":{"name":"ptr","nodeType":"YulIdentifier","src":"1512:3:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1504:4:18"}]},{"nodeType":"YulAssignment","src":"1525:22:18","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1537:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"1542:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:18"},"nodeType":"YulFunctionCall","src":"1533:14:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1525:4:18"}]}]},"name":"array_dataslot_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1481:3:18","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1489:4:18","type":""}],"src":"1393:161:18"},{"body":{"nodeType":"YulBlock","src":"1615:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1632:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1655:5:18"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1637:17:18"},"nodeType":"YulFunctionCall","src":"1637:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1625:6:18"},"nodeType":"YulFunctionCall","src":"1625:37:18"},"nodeType":"YulExpressionStatement","src":"1625:37:18"}]},"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1603:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1610:3:18","type":""}],"src":"1560:108:18"},{"body":{"nodeType":"YulBlock","src":"1882:391:18","statements":[{"nodeType":"YulVariableDeclaration","src":"1892:26:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1908:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"1913:4:18","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1904:3:18"},"nodeType":"YulFunctionCall","src":"1904:14:18"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"1896:4:18","type":""}]},{"nodeType":"YulBlock","src":"1928:164:18","statements":[{"nodeType":"YulVariableDeclaration","src":"1963:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1993:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"2000:4:18","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1989:3:18"},"nodeType":"YulFunctionCall","src":"1989:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1983:5:18"},"nodeType":"YulFunctionCall","src":"1983:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"1967:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2053:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2071:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"2076:4:18","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2067:3:18"},"nodeType":"YulFunctionCall","src":"2067:14:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"2019:33:18"},"nodeType":"YulFunctionCall","src":"2019:63:18"},"nodeType":"YulExpressionStatement","src":"2019:63:18"}]},{"nodeType":"YulBlock","src":"2102:164:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2137:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2167:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"2174:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2163:3:18"},"nodeType":"YulFunctionCall","src":"2163:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2157:5:18"},"nodeType":"YulFunctionCall","src":"2157:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"2141:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2227:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2245:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"2250:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2241:3:18"},"nodeType":"YulFunctionCall","src":"2241:14:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"2193:33:18"},"nodeType":"YulFunctionCall","src":"2193:63:18"},"nodeType":"YulExpressionStatement","src":"2193:63:18"}]}]},"name":"abi_encode_t_struct$_Institution_$3791_memory_ptr_to_t_struct$_Institution_$3791_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1869:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1876:3:18","type":""}],"src":"1768:505:18"},{"body":{"nodeType":"YulBlock","src":"2417:157:18","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2519:6:18"},{"name":"pos","nodeType":"YulIdentifier","src":"2527:3:18"}],"functionName":{"name":"abi_encode_t_struct$_Institution_$3791_memory_ptr_to_t_struct$_Institution_$3791_memory_ptr","nodeType":"YulIdentifier","src":"2427:91:18"},"nodeType":"YulFunctionCall","src":"2427:104:18"},"nodeType":"YulExpressionStatement","src":"2427:104:18"},{"nodeType":"YulAssignment","src":"2540:28:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2558:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"2563:4:18","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2554:3:18"},"nodeType":"YulFunctionCall","src":"2554:14:18"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"2540:10:18"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_Institution_$3791_memory_ptr_to_t_struct$_Institution_$3791_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"2390:6:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2398:3:18","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"2406:10:18","type":""}],"src":"2279:295:18"},{"body":{"nodeType":"YulBlock","src":"2684:38:18","statements":[{"nodeType":"YulAssignment","src":"2694:22:18","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2706:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"2711:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2702:3:18"},"nodeType":"YulFunctionCall","src":"2702:14:18"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"2694:4:18"}]}]},"name":"array_nextElement_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2671:3:18","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"2679:4:18","type":""}],"src":"2580:142:18"},{"body":{"nodeType":"YulBlock","src":"3008:782:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3018:97:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3109:5:18"}],"functionName":{"name":"array_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3032:76:18"},"nodeType":"YulFunctionCall","src":"3032:83:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3022:6:18","type":""}]},{"nodeType":"YulAssignment","src":"3124:122:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3234:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"3239:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3131:102:18"},"nodeType":"YulFunctionCall","src":"3131:115:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3124:3:18"}]},{"nodeType":"YulVariableDeclaration","src":"3255:100:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3349:5:18"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3270:78:18"},"nodeType":"YulFunctionCall","src":"3270:85:18"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"3259:7:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3364:21:18","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"3378:7:18"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"3368:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"3454:311:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3468:34:18","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3495:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3489:5:18"},"nodeType":"YulFunctionCall","src":"3489:13:18"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"3472:13:18","type":""}]},{"nodeType":"YulAssignment","src":"3515:128:18","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"3624:13:18"},{"name":"pos","nodeType":"YulIdentifier","src":"3639:3:18"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_Institution_$3791_memory_ptr_to_t_struct$_Institution_$3791_memory_ptr","nodeType":"YulIdentifier","src":"3522:101:18"},"nodeType":"YulFunctionCall","src":"3522:121:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3515:3:18"}]},{"nodeType":"YulAssignment","src":"3656:99:18","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3748:6:18"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3666:81:18"},"nodeType":"YulFunctionCall","src":"3666:89:18"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3656:6:18"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3416:1:18"},{"name":"length","nodeType":"YulIdentifier","src":"3419:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3413:2:18"},"nodeType":"YulFunctionCall","src":"3413:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3427:18:18","statements":[{"nodeType":"YulAssignment","src":"3429:14:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3438:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"3441:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3434:3:18"},"nodeType":"YulFunctionCall","src":"3434:9:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3429:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"3398:14:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3400:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"3409:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3404:1:18","type":""}]}]},"src":"3394:371:18"},{"nodeType":"YulAssignment","src":"3774:10:18","value":{"name":"pos","nodeType":"YulIdentifier","src":"3781:3:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3774:3:18"}]}]},"name":"abi_encode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2987:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2994:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3003:3:18","type":""}],"src":"2826:964:18"},{"body":{"nodeType":"YulBlock","src":"4002:283:18","statements":[{"nodeType":"YulAssignment","src":"4012:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4024:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4035:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4020:3:18"},"nodeType":"YulFunctionCall","src":"4020:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4012:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4059:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4070:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4055:3:18"},"nodeType":"YulFunctionCall","src":"4055:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4078:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"4084:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4074:3:18"},"nodeType":"YulFunctionCall","src":"4074:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4048:6:18"},"nodeType":"YulFunctionCall","src":"4048:47:18"},"nodeType":"YulExpressionStatement","src":"4048:47:18"},{"nodeType":"YulAssignment","src":"4104:174:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4264:6:18"},{"name":"tail","nodeType":"YulIdentifier","src":"4273:4:18"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4112:151:18"},"nodeType":"YulFunctionCall","src":"4112:166:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4104:4:18"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3974:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3986:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3997:4:18","type":""}],"src":"3796:489:18"},{"body":{"nodeType":"YulBlock","src":"4336:81:18","statements":[{"nodeType":"YulAssignment","src":"4346:65:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4361:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"4368:42:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4357:3:18"},"nodeType":"YulFunctionCall","src":"4357:54:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4346:7:18"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4318:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4328:7:18","type":""}],"src":"4291:126:18"},{"body":{"nodeType":"YulBlock","src":"4468:51:18","statements":[{"nodeType":"YulAssignment","src":"4478:35:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4507:5:18"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4489:17:18"},"nodeType":"YulFunctionCall","src":"4489:24:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4478:7:18"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4450:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4460:7:18","type":""}],"src":"4423:96:18"},{"body":{"nodeType":"YulBlock","src":"4568:79:18","statements":[{"body":{"nodeType":"YulBlock","src":"4625:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4634:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4637:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4627:6:18"},"nodeType":"YulFunctionCall","src":"4627:12:18"},"nodeType":"YulExpressionStatement","src":"4627:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4591:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4616:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4598:17:18"},"nodeType":"YulFunctionCall","src":"4598:24:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4588:2:18"},"nodeType":"YulFunctionCall","src":"4588:35:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4581:6:18"},"nodeType":"YulFunctionCall","src":"4581:43:18"},"nodeType":"YulIf","src":"4578:63:18"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4561:5:18","type":""}],"src":"4525:122:18"},{"body":{"nodeType":"YulBlock","src":"4705:87:18","statements":[{"nodeType":"YulAssignment","src":"4715:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4737:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4724:12:18"},"nodeType":"YulFunctionCall","src":"4724:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4715:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4780:5:18"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4753:26:18"},"nodeType":"YulFunctionCall","src":"4753:33:18"},"nodeType":"YulExpressionStatement","src":"4753:33:18"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4683:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"4691:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4699:5:18","type":""}],"src":"4653:139:18"},{"body":{"nodeType":"YulBlock","src":"4843:32:18","statements":[{"nodeType":"YulAssignment","src":"4853:16:18","value":{"name":"value","nodeType":"YulIdentifier","src":"4864:5:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4853:7:18"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4825:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4835:7:18","type":""}],"src":"4798:77:18"},{"body":{"nodeType":"YulBlock","src":"4924:79:18","statements":[{"body":{"nodeType":"YulBlock","src":"4981:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4990:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4993:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4983:6:18"},"nodeType":"YulFunctionCall","src":"4983:12:18"},"nodeType":"YulExpressionStatement","src":"4983:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4947:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4972:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4954:17:18"},"nodeType":"YulFunctionCall","src":"4954:24:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4944:2:18"},"nodeType":"YulFunctionCall","src":"4944:35:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4937:6:18"},"nodeType":"YulFunctionCall","src":"4937:43:18"},"nodeType":"YulIf","src":"4934:63:18"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4917:5:18","type":""}],"src":"4881:122:18"},{"body":{"nodeType":"YulBlock","src":"5061:87:18","statements":[{"nodeType":"YulAssignment","src":"5071:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5093:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5080:12:18"},"nodeType":"YulFunctionCall","src":"5080:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5071:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5136:5:18"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"5109:26:18"},"nodeType":"YulFunctionCall","src":"5109:33:18"},"nodeType":"YulExpressionStatement","src":"5109:33:18"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5039:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"5047:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5055:5:18","type":""}],"src":"5009:139:18"},{"body":{"nodeType":"YulBlock","src":"5198:65:18","statements":[{"nodeType":"YulAssignment","src":"5208:49:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5223:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"5230:26:18","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5219:3:18"},"nodeType":"YulFunctionCall","src":"5219:38:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5208:7:18"}]}]},"name":"cleanup_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5180:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5190:7:18","type":""}],"src":"5154:109:18"},{"body":{"nodeType":"YulBlock","src":"5311:78:18","statements":[{"body":{"nodeType":"YulBlock","src":"5367:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5376:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5379:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5369:6:18"},"nodeType":"YulFunctionCall","src":"5369:12:18"},"nodeType":"YulExpressionStatement","src":"5369:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5334:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5358:5:18"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"5341:16:18"},"nodeType":"YulFunctionCall","src":"5341:23:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5331:2:18"},"nodeType":"YulFunctionCall","src":"5331:34:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5324:6:18"},"nodeType":"YulFunctionCall","src":"5324:42:18"},"nodeType":"YulIf","src":"5321:62:18"}]},"name":"validator_revert_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5304:5:18","type":""}],"src":"5269:120:18"},{"body":{"nodeType":"YulBlock","src":"5446:86:18","statements":[{"nodeType":"YulAssignment","src":"5456:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5478:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5465:12:18"},"nodeType":"YulFunctionCall","src":"5465:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5456:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5520:5:18"}],"functionName":{"name":"validator_revert_t_uint96","nodeType":"YulIdentifier","src":"5494:25:18"},"nodeType":"YulFunctionCall","src":"5494:32:18"},"nodeType":"YulExpressionStatement","src":"5494:32:18"}]},"name":"abi_decode_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5424:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"5432:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5440:5:18","type":""}],"src":"5395:137:18"},{"body":{"nodeType":"YulBlock","src":"5627:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5644:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5647:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5637:6:18"},"nodeType":"YulFunctionCall","src":"5637:12:18"},"nodeType":"YulExpressionStatement","src":"5637:12:18"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"5538:117:18"},{"body":{"nodeType":"YulBlock","src":"5750:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5767:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5770:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5760:6:18"},"nodeType":"YulFunctionCall","src":"5760:12:18"},"nodeType":"YulExpressionStatement","src":"5760:12:18"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"5661:117:18"},{"body":{"nodeType":"YulBlock","src":"5873:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5890:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5893:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5883:6:18"},"nodeType":"YulFunctionCall","src":"5883:12:18"},"nodeType":"YulExpressionStatement","src":"5883:12:18"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"5784:117:18"},{"body":{"nodeType":"YulBlock","src":"5996:478:18","statements":[{"body":{"nodeType":"YulBlock","src":"6045:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"6047:77:18"},"nodeType":"YulFunctionCall","src":"6047:79:18"},"nodeType":"YulExpressionStatement","src":"6047:79:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6024:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"6032:4:18","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6020:3:18"},"nodeType":"YulFunctionCall","src":"6020:17:18"},{"name":"end","nodeType":"YulIdentifier","src":"6039:3:18"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6016:3:18"},"nodeType":"YulFunctionCall","src":"6016:27:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6009:6:18"},"nodeType":"YulFunctionCall","src":"6009:35:18"},"nodeType":"YulIf","src":"6006:122:18"},{"nodeType":"YulAssignment","src":"6137:30:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6160:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6147:12:18"},"nodeType":"YulFunctionCall","src":"6147:20:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6137:6:18"}]},{"body":{"nodeType":"YulBlock","src":"6210:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"6212:77:18"},"nodeType":"YulFunctionCall","src":"6212:79:18"},"nodeType":"YulExpressionStatement","src":"6212:79:18"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6182:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"6190:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6179:2:18"},"nodeType":"YulFunctionCall","src":"6179:30:18"},"nodeType":"YulIf","src":"6176:117:18"},{"nodeType":"YulAssignment","src":"6302:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6318:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"6326:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6314:3:18"},"nodeType":"YulFunctionCall","src":"6314:17:18"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"6302:8:18"}]},{"body":{"nodeType":"YulBlock","src":"6385:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"6387:77:18"},"nodeType":"YulFunctionCall","src":"6387:79:18"},"nodeType":"YulExpressionStatement","src":"6387:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"6350:8:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6364:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"6372:4:18","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6360:3:18"},"nodeType":"YulFunctionCall","src":"6360:17:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6346:3:18"},"nodeType":"YulFunctionCall","src":"6346:32:18"},{"name":"end","nodeType":"YulIdentifier","src":"6380:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6343:2:18"},"nodeType":"YulFunctionCall","src":"6343:41:18"},"nodeType":"YulIf","src":"6340:128:18"}]},"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5963:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"5971:3:18","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"5979:8:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"5989:6:18","type":""}],"src":"5921:553:18"},{"body":{"nodeType":"YulBlock","src":"6701:1472:18","statements":[{"body":{"nodeType":"YulBlock","src":"6748:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6750:77:18"},"nodeType":"YulFunctionCall","src":"6750:79:18"},"nodeType":"YulExpressionStatement","src":"6750:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6722:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"6731:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6718:3:18"},"nodeType":"YulFunctionCall","src":"6718:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"6743:3:18","type":"","value":"288"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6714:3:18"},"nodeType":"YulFunctionCall","src":"6714:33:18"},"nodeType":"YulIf","src":"6711:120:18"},{"nodeType":"YulBlock","src":"6841:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"6856:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"6870:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6860:6:18","type":""}]},{"nodeType":"YulAssignment","src":"6885:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6920:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"6931:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6916:3:18"},"nodeType":"YulFunctionCall","src":"6916:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6940:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6895:20:18"},"nodeType":"YulFunctionCall","src":"6895:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6885:6:18"}]}]},{"nodeType":"YulBlock","src":"6968:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"6983:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"6997:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6987:6:18","type":""}]},{"nodeType":"YulAssignment","src":"7013:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7048:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"7059:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7044:3:18"},"nodeType":"YulFunctionCall","src":"7044:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7068:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7023:20:18"},"nodeType":"YulFunctionCall","src":"7023:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7013:6:18"}]}]},{"nodeType":"YulBlock","src":"7096:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7111:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7125:2:18","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7115:6:18","type":""}]},{"nodeType":"YulAssignment","src":"7141:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7176:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"7187:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7172:3:18"},"nodeType":"YulFunctionCall","src":"7172:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7196:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7151:20:18"},"nodeType":"YulFunctionCall","src":"7151:53:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7141:6:18"}]}]},{"nodeType":"YulBlock","src":"7224:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7239:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7253:2:18","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7243:6:18","type":""}]},{"nodeType":"YulAssignment","src":"7269:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7304:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"7315:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7300:3:18"},"nodeType":"YulFunctionCall","src":"7300:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7324:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7279:20:18"},"nodeType":"YulFunctionCall","src":"7279:53:18"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7269:6:18"}]}]},{"nodeType":"YulBlock","src":"7352:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7367:17:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7381:3:18","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7371:6:18","type":""}]},{"nodeType":"YulAssignment","src":"7398:62:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7432:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"7443:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7428:3:18"},"nodeType":"YulFunctionCall","src":"7428:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7452:7:18"}],"functionName":{"name":"abi_decode_t_uint96","nodeType":"YulIdentifier","src":"7408:19:18"},"nodeType":"YulFunctionCall","src":"7408:52:18"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7398:6:18"}]}]},{"nodeType":"YulBlock","src":"7480:119:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7495:17:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7509:3:18","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7499:6:18","type":""}]},{"nodeType":"YulAssignment","src":"7526:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7561:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"7572:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7557:3:18"},"nodeType":"YulFunctionCall","src":"7557:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7581:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7536:20:18"},"nodeType":"YulFunctionCall","src":"7536:53:18"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7526:6:18"}]}]},{"nodeType":"YulBlock","src":"7609:119:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7624:17:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7638:3:18","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7628:6:18","type":""}]},{"nodeType":"YulAssignment","src":"7655:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7690:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"7701:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7686:3:18"},"nodeType":"YulFunctionCall","src":"7686:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7710:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7665:20:18"},"nodeType":"YulFunctionCall","src":"7665:53:18"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"7655:6:18"}]}]},{"nodeType":"YulBlock","src":"7738:119:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7753:17:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7767:3:18","type":"","value":"224"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7757:6:18","type":""}]},{"nodeType":"YulAssignment","src":"7784:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7819:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"7830:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7815:3:18"},"nodeType":"YulFunctionCall","src":"7815:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7839:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7794:20:18"},"nodeType":"YulFunctionCall","src":"7794:53:18"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"7784:6:18"}]}]},{"nodeType":"YulBlock","src":"7867:299:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7882:47:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7913:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"7924:3:18","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7909:3:18"},"nodeType":"YulFunctionCall","src":"7909:19:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7896:12:18"},"nodeType":"YulFunctionCall","src":"7896:33:18"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7886:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"7976:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7978:77:18"},"nodeType":"YulFunctionCall","src":"7978:79:18"},"nodeType":"YulExpressionStatement","src":"7978:79:18"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7948:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"7956:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7945:2:18"},"nodeType":"YulFunctionCall","src":"7945:30:18"},"nodeType":"YulIf","src":"7942:117:18"},{"nodeType":"YulAssignment","src":"8073:83:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8128:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"8139:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8124:3:18"},"nodeType":"YulFunctionCall","src":"8124:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8148:7:18"}],"functionName":{"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulIdentifier","src":"8091:32:18"},"nodeType":"YulFunctionCall","src":"8091:65:18"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"8073:6:18"},{"name":"value9","nodeType":"YulIdentifier","src":"8081:6:18"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6599:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6610:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6622:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6630:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6638:6:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6646:6:18","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6654:6:18","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6662:6:18","type":""},{"name":"value6","nodeType":"YulTypedName","src":"6670:6:18","type":""},{"name":"value7","nodeType":"YulTypedName","src":"6678:6:18","type":""},{"name":"value8","nodeType":"YulTypedName","src":"6686:6:18","type":""},{"name":"value9","nodeType":"YulTypedName","src":"6694:6:18","type":""}],"src":"6480:1693:18"},{"body":{"nodeType":"YulBlock","src":"8244:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8261:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8284:5:18"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"8266:17:18"},"nodeType":"YulFunctionCall","src":"8266:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8254:6:18"},"nodeType":"YulFunctionCall","src":"8254:37:18"},"nodeType":"YulExpressionStatement","src":"8254:37:18"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8232:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8239:3:18","type":""}],"src":"8179:118:18"},{"body":{"nodeType":"YulBlock","src":"8401:124:18","statements":[{"nodeType":"YulAssignment","src":"8411:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8423:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"8434:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8419:3:18"},"nodeType":"YulFunctionCall","src":"8419:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8411:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8491:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8504:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"8515:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8500:3:18"},"nodeType":"YulFunctionCall","src":"8500:17:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8447:43:18"},"nodeType":"YulFunctionCall","src":"8447:71:18"},"nodeType":"YulExpressionStatement","src":"8447:71:18"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8373:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8385:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8396:4:18","type":""}],"src":"8303:222:18"},{"body":{"nodeType":"YulBlock","src":"8579:54:18","statements":[{"nodeType":"YulAssignment","src":"8589:38:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8607:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"8614:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8603:3:18"},"nodeType":"YulFunctionCall","src":"8603:14:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8623:2:18","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8619:3:18"},"nodeType":"YulFunctionCall","src":"8619:7:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8599:3:18"},"nodeType":"YulFunctionCall","src":"8599:28:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8589:6:18"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8562:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"8572:6:18","type":""}],"src":"8531:102:18"},{"body":{"nodeType":"YulBlock","src":"8667:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8684:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8687:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8677:6:18"},"nodeType":"YulFunctionCall","src":"8677:88:18"},"nodeType":"YulExpressionStatement","src":"8677:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8781:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8784:4:18","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8774:6:18"},"nodeType":"YulFunctionCall","src":"8774:15:18"},"nodeType":"YulExpressionStatement","src":"8774:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8805:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8808:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8798:6:18"},"nodeType":"YulFunctionCall","src":"8798:15:18"},"nodeType":"YulExpressionStatement","src":"8798:15:18"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"8639:180:18"},{"body":{"nodeType":"YulBlock","src":"8868:238:18","statements":[{"nodeType":"YulVariableDeclaration","src":"8878:58:18","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8900:6:18"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8930:4:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8908:21:18"},"nodeType":"YulFunctionCall","src":"8908:27:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8896:3:18"},"nodeType":"YulFunctionCall","src":"8896:40:18"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"8882:10:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"9047:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9049:16:18"},"nodeType":"YulFunctionCall","src":"9049:18:18"},"nodeType":"YulExpressionStatement","src":"9049:18:18"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8990:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"9002:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8987:2:18"},"nodeType":"YulFunctionCall","src":"8987:34:18"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9026:10:18"},{"name":"memPtr","nodeType":"YulIdentifier","src":"9038:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9023:2:18"},"nodeType":"YulFunctionCall","src":"9023:22:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8984:2:18"},"nodeType":"YulFunctionCall","src":"8984:62:18"},"nodeType":"YulIf","src":"8981:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9085:2:18","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9089:10:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9078:6:18"},"nodeType":"YulFunctionCall","src":"9078:22:18"},"nodeType":"YulExpressionStatement","src":"9078:22:18"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8854:6:18","type":""},{"name":"size","nodeType":"YulTypedName","src":"8862:4:18","type":""}],"src":"8825:281:18"},{"body":{"nodeType":"YulBlock","src":"9153:88:18","statements":[{"nodeType":"YulAssignment","src":"9163:30:18","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"9173:18:18"},"nodeType":"YulFunctionCall","src":"9173:20:18"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9163:6:18"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9222:6:18"},{"name":"size","nodeType":"YulIdentifier","src":"9230:4:18"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"9202:19:18"},"nodeType":"YulFunctionCall","src":"9202:33:18"},"nodeType":"YulExpressionStatement","src":"9202:33:18"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"9137:4:18","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"9146:6:18","type":""}],"src":"9112:129:18"},{"body":{"nodeType":"YulBlock","src":"9358:229:18","statements":[{"body":{"nodeType":"YulBlock","src":"9463:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9465:16:18"},"nodeType":"YulFunctionCall","src":"9465:18:18"},"nodeType":"YulExpressionStatement","src":"9465:18:18"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9435:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"9443:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9432:2:18"},"nodeType":"YulFunctionCall","src":"9432:30:18"},"nodeType":"YulIf","src":"9429:56:18"},{"nodeType":"YulAssignment","src":"9495:25:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9507:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"9515:4:18","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9503:3:18"},"nodeType":"YulFunctionCall","src":"9503:17:18"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9495:4:18"}]},{"nodeType":"YulAssignment","src":"9557:23:18","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"9569:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"9575:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9565:3:18"},"nodeType":"YulFunctionCall","src":"9565:15:18"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9557:4:18"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"9342:6:18","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"9353:4:18","type":""}],"src":"9247:340:18"},{"body":{"nodeType":"YulBlock","src":"9682:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9699:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9702:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9692:6:18"},"nodeType":"YulFunctionCall","src":"9692:12:18"},"nodeType":"YulExpressionStatement","src":"9692:12:18"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"9593:117:18"},{"body":{"nodeType":"YulBlock","src":"9805:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9822:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9825:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9815:6:18"},"nodeType":"YulFunctionCall","src":"9815:12:18"},"nodeType":"YulExpressionStatement","src":"9815:12:18"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"9716:117:18"},{"body":{"nodeType":"YulBlock","src":"9972:494:18","statements":[{"body":{"nodeType":"YulBlock","src":"10016:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"10018:77:18"},"nodeType":"YulFunctionCall","src":"10018:79:18"},"nodeType":"YulExpressionStatement","src":"10018:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"9993:3:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"9998:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9989:3:18"},"nodeType":"YulFunctionCall","src":"9989:19:18"},{"kind":"number","nodeType":"YulLiteral","src":"10010:4:18","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9985:3:18"},"nodeType":"YulFunctionCall","src":"9985:30:18"},"nodeType":"YulIf","src":"9982:117:18"},{"nodeType":"YulAssignment","src":"10108:30:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10133:4:18","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"10117:15:18"},"nodeType":"YulFunctionCall","src":"10117:21:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10108:5:18"}]},{"nodeType":"YulBlock","src":"10148:150:18","statements":[{"nodeType":"YulVariableDeclaration","src":"10183:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"10197:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10187:6:18","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10223:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"10230:4:18","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10219:3:18"},"nodeType":"YulFunctionCall","src":"10219:16:18"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10262:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"10273:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10258:3:18"},"nodeType":"YulFunctionCall","src":"10258:22:18"},{"name":"end","nodeType":"YulIdentifier","src":"10282:3:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10237:20:18"},"nodeType":"YulFunctionCall","src":"10237:49:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10212:6:18"},"nodeType":"YulFunctionCall","src":"10212:75:18"},"nodeType":"YulExpressionStatement","src":"10212:75:18"}]},{"nodeType":"YulBlock","src":"10308:151:18","statements":[{"nodeType":"YulVariableDeclaration","src":"10343:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"10357:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10347:6:18","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10384:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"10391:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10380:3:18"},"nodeType":"YulFunctionCall","src":"10380:16:18"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10423:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"10434:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10419:3:18"},"nodeType":"YulFunctionCall","src":"10419:22:18"},{"name":"end","nodeType":"YulIdentifier","src":"10443:3:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10398:20:18"},"nodeType":"YulFunctionCall","src":"10398:49:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10373:6:18"},"nodeType":"YulFunctionCall","src":"10373:75:18"},"nodeType":"YulExpressionStatement","src":"10373:75:18"}]}]},"name":"abi_decode_t_struct$_Institution_$3791_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9947:9:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"9958:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9966:5:18","type":""}],"src":"9888:578:18"},{"body":{"nodeType":"YulBlock","src":"10654:666:18","statements":[{"nodeType":"YulAssignment","src":"10664:119:18","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10775:6:18"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"10689:85:18"},"nodeType":"YulFunctionCall","src":"10689:93:18"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"10673:15:18"},"nodeType":"YulFunctionCall","src":"10673:110:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"10664:5:18"}]},{"nodeType":"YulVariableDeclaration","src":"10792:16:18","value":{"name":"array","nodeType":"YulIdentifier","src":"10803:5:18"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"10796:3:18","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"10825:5:18"},{"name":"length","nodeType":"YulIdentifier","src":"10832:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10818:6:18"},"nodeType":"YulFunctionCall","src":"10818:21:18"},"nodeType":"YulExpressionStatement","src":"10818:21:18"},{"nodeType":"YulAssignment","src":"10848:23:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"10859:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"10866:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10855:3:18"},"nodeType":"YulFunctionCall","src":"10855:16:18"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"10848:3:18"}]},{"nodeType":"YulVariableDeclaration","src":"10881:44:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10899:6:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10911:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"10919:4:18","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10907:3:18"},"nodeType":"YulFunctionCall","src":"10907:17:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10895:3:18"},"nodeType":"YulFunctionCall","src":"10895:30:18"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"10885:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"10953:103:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"10967:77:18"},"nodeType":"YulFunctionCall","src":"10967:79:18"},"nodeType":"YulExpressionStatement","src":"10967:79:18"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"10940:6:18"},{"name":"end","nodeType":"YulIdentifier","src":"10948:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10937:2:18"},"nodeType":"YulFunctionCall","src":"10937:15:18"},"nodeType":"YulIf","src":"10934:122:18"},{"body":{"nodeType":"YulBlock","src":"11141:173:18","statements":[{"nodeType":"YulVariableDeclaration","src":"11156:21:18","value":{"name":"src","nodeType":"YulIdentifier","src":"11174:3:18"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"11160:10:18","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11198:3:18"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"11253:10:18"},{"name":"end","nodeType":"YulIdentifier","src":"11265:3:18"}],"functionName":{"name":"abi_decode_t_struct$_Institution_$3791_memory_ptr","nodeType":"YulIdentifier","src":"11203:49:18"},"nodeType":"YulFunctionCall","src":"11203:66:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11191:6:18"},"nodeType":"YulFunctionCall","src":"11191:79:18"},"nodeType":"YulExpressionStatement","src":"11191:79:18"},{"nodeType":"YulAssignment","src":"11283:21:18","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11294:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"11299:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11290:3:18"},"nodeType":"YulFunctionCall","src":"11290:14:18"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"11283:3:18"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11094:3:18"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"11099:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11091:2:18"},"nodeType":"YulFunctionCall","src":"11091:15:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11107:25:18","statements":[{"nodeType":"YulAssignment","src":"11109:21:18","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11120:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"11125:4:18","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11116:3:18"},"nodeType":"YulFunctionCall","src":"11116:14:18"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"11109:3:18"}]}]},"pre":{"nodeType":"YulBlock","src":"11069:21:18","statements":[{"nodeType":"YulVariableDeclaration","src":"11071:17:18","value":{"name":"offset","nodeType":"YulIdentifier","src":"11082:6:18"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"11075:3:18","type":""}]}]},"src":"11065:249:18"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10624:6:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"10632:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"10640:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"10648:5:18","type":""}],"src":"10523:797:18"},{"body":{"nodeType":"YulBlock","src":"11483:322:18","statements":[{"body":{"nodeType":"YulBlock","src":"11532:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"11534:77:18"},"nodeType":"YulFunctionCall","src":"11534:79:18"},"nodeType":"YulExpressionStatement","src":"11534:79:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11511:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"11519:4:18","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11507:3:18"},"nodeType":"YulFunctionCall","src":"11507:17:18"},{"name":"end","nodeType":"YulIdentifier","src":"11526:3:18"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11503:3:18"},"nodeType":"YulFunctionCall","src":"11503:27:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11496:6:18"},"nodeType":"YulFunctionCall","src":"11496:35:18"},"nodeType":"YulIf","src":"11493:122:18"},{"nodeType":"YulVariableDeclaration","src":"11624:34:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11651:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11638:12:18"},"nodeType":"YulFunctionCall","src":"11638:20:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11628:6:18","type":""}]},{"nodeType":"YulAssignment","src":"11667:132:18","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11772:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"11780:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11768:3:18"},"nodeType":"YulFunctionCall","src":"11768:17:18"},{"name":"length","nodeType":"YulIdentifier","src":"11787:6:18"},{"name":"end","nodeType":"YulIdentifier","src":"11795:3:18"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"11676:91:18"},"nodeType":"YulFunctionCall","src":"11676:123:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"11667:5:18"}]}]},"name":"abi_decode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"11461:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"11469:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"11477:5:18","type":""}],"src":"11377:428:18"},{"body":{"nodeType":"YulBlock","src":"11948:605:18","statements":[{"body":{"nodeType":"YulBlock","src":"11994:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11996:77:18"},"nodeType":"YulFunctionCall","src":"11996:79:18"},"nodeType":"YulExpressionStatement","src":"11996:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11969:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"11978:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11965:3:18"},"nodeType":"YulFunctionCall","src":"11965:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"11990:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11961:3:18"},"nodeType":"YulFunctionCall","src":"11961:32:18"},"nodeType":"YulIf","src":"11958:119:18"},{"nodeType":"YulBlock","src":"12087:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"12102:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"12116:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12106:6:18","type":""}]},{"nodeType":"YulAssignment","src":"12131:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12166:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"12177:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12162:3:18"},"nodeType":"YulFunctionCall","src":"12162:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12186:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"12141:20:18"},"nodeType":"YulFunctionCall","src":"12141:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12131:6:18"}]}]},{"nodeType":"YulBlock","src":"12214:332:18","statements":[{"nodeType":"YulVariableDeclaration","src":"12229:46:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12260:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12271:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12256:3:18"},"nodeType":"YulFunctionCall","src":"12256:18:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12243:12:18"},"nodeType":"YulFunctionCall","src":"12243:32:18"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12233:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"12322:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"12324:77:18"},"nodeType":"YulFunctionCall","src":"12324:79:18"},"nodeType":"YulExpressionStatement","src":"12324:79:18"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12294:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"12302:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12291:2:18"},"nodeType":"YulFunctionCall","src":"12291:30:18"},"nodeType":"YulIf","src":"12288:117:18"},{"nodeType":"YulAssignment","src":"12419:117:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12508:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"12519:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12504:3:18"},"nodeType":"YulFunctionCall","src":"12504:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12528:7:18"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12429:74:18"},"nodeType":"YulFunctionCall","src":"12429:107:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12419:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11910:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11921:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11933:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11941:6:18","type":""}],"src":"11811:742:18"},{"body":{"nodeType":"YulBlock","src":"12617:40:18","statements":[{"nodeType":"YulAssignment","src":"12628:22:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12644:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12638:5:18"},"nodeType":"YulFunctionCall","src":"12638:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12628:6:18"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12600:5:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12610:6:18","type":""}],"src":"12559:98:18"},{"body":{"nodeType":"YulBlock","src":"12758:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12775:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"12780:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12768:6:18"},"nodeType":"YulFunctionCall","src":"12768:19:18"},"nodeType":"YulExpressionStatement","src":"12768:19:18"},{"nodeType":"YulAssignment","src":"12796:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12815:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"12820:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12811:3:18"},"nodeType":"YulFunctionCall","src":"12811:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"12796:11:18"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12730:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"12735:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"12746:11:18","type":""}],"src":"12663:168:18"},{"body":{"nodeType":"YulBlock","src":"12899:184:18","statements":[{"nodeType":"YulVariableDeclaration","src":"12909:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"12918:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"12913:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"12978:63:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13003:3:18"},{"name":"i","nodeType":"YulIdentifier","src":"13008:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12999:3:18"},"nodeType":"YulFunctionCall","src":"12999:11:18"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13022:3:18"},{"name":"i","nodeType":"YulIdentifier","src":"13027:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13018:3:18"},"nodeType":"YulFunctionCall","src":"13018:11:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13012:5:18"},"nodeType":"YulFunctionCall","src":"13012:18:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12992:6:18"},"nodeType":"YulFunctionCall","src":"12992:39:18"},"nodeType":"YulExpressionStatement","src":"12992:39:18"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12939:1:18"},{"name":"length","nodeType":"YulIdentifier","src":"12942:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12936:2:18"},"nodeType":"YulFunctionCall","src":"12936:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12950:19:18","statements":[{"nodeType":"YulAssignment","src":"12952:15:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12961:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"12964:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12957:3:18"},"nodeType":"YulFunctionCall","src":"12957:10:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"12952:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"12932:3:18","statements":[]},"src":"12928:113:18"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13061:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"13066:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13057:3:18"},"nodeType":"YulFunctionCall","src":"13057:16:18"},{"kind":"number","nodeType":"YulLiteral","src":"13075:1:18","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13050:6:18"},"nodeType":"YulFunctionCall","src":"13050:27:18"},"nodeType":"YulExpressionStatement","src":"13050:27:18"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"12881:3:18","type":""},{"name":"dst","nodeType":"YulTypedName","src":"12886:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"12891:6:18","type":""}],"src":"12837:246:18"},{"body":{"nodeType":"YulBlock","src":"13179:283:18","statements":[{"nodeType":"YulVariableDeclaration","src":"13189:52:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13235:5:18"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13203:31:18"},"nodeType":"YulFunctionCall","src":"13203:38:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13193:6:18","type":""}]},{"nodeType":"YulAssignment","src":"13250:77:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13315:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"13320:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13257:57:18"},"nodeType":"YulFunctionCall","src":"13257:70:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13250:3:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13375:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"13382:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13371:3:18"},"nodeType":"YulFunctionCall","src":"13371:16:18"},{"name":"pos","nodeType":"YulIdentifier","src":"13389:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"13394:6:18"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"13336:34:18"},"nodeType":"YulFunctionCall","src":"13336:65:18"},"nodeType":"YulExpressionStatement","src":"13336:65:18"},{"nodeType":"YulAssignment","src":"13410:46:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13421:3:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13448:6:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"13426:21:18"},"nodeType":"YulFunctionCall","src":"13426:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13417:3:18"},"nodeType":"YulFunctionCall","src":"13417:39:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13410:3:18"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13160:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13167:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13175:3:18","type":""}],"src":"13089:373:18"},{"body":{"nodeType":"YulBlock","src":"13584:193:18","statements":[{"nodeType":"YulAssignment","src":"13594:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13606:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"13617:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13602:3:18"},"nodeType":"YulFunctionCall","src":"13602:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13594:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13641:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"13652:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13637:3:18"},"nodeType":"YulFunctionCall","src":"13637:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13660:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"13666:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13656:3:18"},"nodeType":"YulFunctionCall","src":"13656:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13630:6:18"},"nodeType":"YulFunctionCall","src":"13630:47:18"},"nodeType":"YulExpressionStatement","src":"13630:47:18"},{"nodeType":"YulAssignment","src":"13686:84:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13756:6:18"},{"name":"tail","nodeType":"YulIdentifier","src":"13765:4:18"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13694:61:18"},"nodeType":"YulFunctionCall","src":"13694:76:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13686:4:18"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13556:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13568:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13579:4:18","type":""}],"src":"13468:309:18"},{"body":{"nodeType":"YulBlock","src":"13825:48:18","statements":[{"nodeType":"YulAssignment","src":"13835:32:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13860:5:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13853:6:18"},"nodeType":"YulFunctionCall","src":"13853:13:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13846:6:18"},"nodeType":"YulFunctionCall","src":"13846:21:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"13835:7:18"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13807:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"13817:7:18","type":""}],"src":"13783:90:18"},{"body":{"nodeType":"YulBlock","src":"13938:50:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13955:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13975:5:18"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"13960:14:18"},"nodeType":"YulFunctionCall","src":"13960:21:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13948:6:18"},"nodeType":"YulFunctionCall","src":"13948:34:18"},"nodeType":"YulExpressionStatement","src":"13948:34:18"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13926:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13933:3:18","type":""}],"src":"13879:109:18"},{"body":{"nodeType":"YulBlock","src":"14086:118:18","statements":[{"nodeType":"YulAssignment","src":"14096:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14108:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"14119:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14104:3:18"},"nodeType":"YulFunctionCall","src":"14104:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14096:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14170:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14183:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"14194:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14179:3:18"},"nodeType":"YulFunctionCall","src":"14179:17:18"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"14132:37:18"},"nodeType":"YulFunctionCall","src":"14132:65:18"},"nodeType":"YulExpressionStatement","src":"14132:65:18"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14058:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14070:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14081:4:18","type":""}],"src":"13994:210:18"},{"body":{"nodeType":"YulBlock","src":"14254:57:18","statements":[{"nodeType":"YulAssignment","src":"14264:41:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14279:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"14286:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14275:3:18"},"nodeType":"YulFunctionCall","src":"14275:30:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"14264:7:18"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14236:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"14246:7:18","type":""}],"src":"14210:101:18"},{"body":{"nodeType":"YulBlock","src":"14359:78:18","statements":[{"body":{"nodeType":"YulBlock","src":"14415:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14424:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14427:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14417:6:18"},"nodeType":"YulFunctionCall","src":"14417:12:18"},"nodeType":"YulExpressionStatement","src":"14417:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14382:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14406:5:18"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"14389:16:18"},"nodeType":"YulFunctionCall","src":"14389:23:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14379:2:18"},"nodeType":"YulFunctionCall","src":"14379:34:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14372:6:18"},"nodeType":"YulFunctionCall","src":"14372:42:18"},"nodeType":"YulIf","src":"14369:62:18"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14352:5:18","type":""}],"src":"14317:120:18"},{"body":{"nodeType":"YulBlock","src":"14494:86:18","statements":[{"nodeType":"YulAssignment","src":"14504:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14526:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14513:12:18"},"nodeType":"YulFunctionCall","src":"14513:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"14504:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14568:5:18"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"14542:25:18"},"nodeType":"YulFunctionCall","src":"14542:32:18"},"nodeType":"YulExpressionStatement","src":"14542:32:18"}]},"name":"abi_decode_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"14472:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"14480:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"14488:5:18","type":""}],"src":"14443:137:18"},{"body":{"nodeType":"YulBlock","src":"14626:76:18","statements":[{"body":{"nodeType":"YulBlock","src":"14680:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14689:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14692:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14682:6:18"},"nodeType":"YulFunctionCall","src":"14682:12:18"},"nodeType":"YulExpressionStatement","src":"14682:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14649:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14671:5:18"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"14656:14:18"},"nodeType":"YulFunctionCall","src":"14656:21:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14646:2:18"},"nodeType":"YulFunctionCall","src":"14646:32:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14639:6:18"},"nodeType":"YulFunctionCall","src":"14639:40:18"},"nodeType":"YulIf","src":"14636:60:18"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14619:5:18","type":""}],"src":"14586:116:18"},{"body":{"nodeType":"YulBlock","src":"14757:84:18","statements":[{"nodeType":"YulAssignment","src":"14767:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14789:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14776:12:18"},"nodeType":"YulFunctionCall","src":"14776:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"14767:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14829:5:18"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"14805:23:18"},"nodeType":"YulFunctionCall","src":"14805:30:18"},"nodeType":"YulExpressionStatement","src":"14805:30:18"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"14735:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"14743:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"14751:5:18","type":""}],"src":"14708:133:18"},{"body":{"nodeType":"YulBlock","src":"14994:902:18","statements":[{"body":{"nodeType":"YulBlock","src":"15041:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"15043:77:18"},"nodeType":"YulFunctionCall","src":"15043:79:18"},"nodeType":"YulExpressionStatement","src":"15043:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15015:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"15024:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15011:3:18"},"nodeType":"YulFunctionCall","src":"15011:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"15036:3:18","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15007:3:18"},"nodeType":"YulFunctionCall","src":"15007:33:18"},"nodeType":"YulIf","src":"15004:120:18"},{"nodeType":"YulBlock","src":"15134:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"15149:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"15163:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15153:6:18","type":""}]},{"nodeType":"YulAssignment","src":"15178:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15213:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"15224:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15209:3:18"},"nodeType":"YulFunctionCall","src":"15209:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15233:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"15188:20:18"},"nodeType":"YulFunctionCall","src":"15188:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15178:6:18"}]}]},{"nodeType":"YulBlock","src":"15261:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"15276:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"15290:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15280:6:18","type":""}]},{"nodeType":"YulAssignment","src":"15306:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15341:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"15352:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15337:3:18"},"nodeType":"YulFunctionCall","src":"15337:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15361:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"15316:20:18"},"nodeType":"YulFunctionCall","src":"15316:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15306:6:18"}]}]},{"nodeType":"YulBlock","src":"15389:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"15404:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"15418:2:18","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15408:6:18","type":""}]},{"nodeType":"YulAssignment","src":"15434:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15469:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"15480:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15465:3:18"},"nodeType":"YulFunctionCall","src":"15465:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15489:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"15444:20:18"},"nodeType":"YulFunctionCall","src":"15444:53:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"15434:6:18"}]}]},{"nodeType":"YulBlock","src":"15517:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"15532:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"15546:2:18","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15536:6:18","type":""}]},{"nodeType":"YulAssignment","src":"15562:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15597:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"15608:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15593:3:18"},"nodeType":"YulFunctionCall","src":"15593:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15617:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15572:20:18"},"nodeType":"YulFunctionCall","src":"15572:53:18"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"15562:6:18"}]}]},{"nodeType":"YulBlock","src":"15645:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"15660:17:18","value":{"kind":"number","nodeType":"YulLiteral","src":"15674:3:18","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15664:6:18","type":""}]},{"nodeType":"YulAssignment","src":"15691:62:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15725:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"15736:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15721:3:18"},"nodeType":"YulFunctionCall","src":"15721:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15745:7:18"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"15701:19:18"},"nodeType":"YulFunctionCall","src":"15701:52:18"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"15691:6:18"}]}]},{"nodeType":"YulBlock","src":"15773:116:18","statements":[{"nodeType":"YulVariableDeclaration","src":"15788:17:18","value":{"kind":"number","nodeType":"YulLiteral","src":"15802:3:18","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15792:6:18","type":""}]},{"nodeType":"YulAssignment","src":"15819:60:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15851:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"15862:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15847:3:18"},"nodeType":"YulFunctionCall","src":"15847:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15871:7:18"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"15829:17:18"},"nodeType":"YulFunctionCall","src":"15829:50:18"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"15819:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_bytes32t_addresst_uint64t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14924:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14935:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14947:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14955:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14963:6:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14971:6:18","type":""},{"name":"value4","nodeType":"YulTypedName","src":"14979:6:18","type":""},{"name":"value5","nodeType":"YulTypedName","src":"14987:6:18","type":""}],"src":"14847:1049:18"},{"body":{"nodeType":"YulBlock","src":"15967:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15984:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16007:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"15989:17:18"},"nodeType":"YulFunctionCall","src":"15989:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15977:6:18"},"nodeType":"YulFunctionCall","src":"15977:37:18"},"nodeType":"YulExpressionStatement","src":"15977:37:18"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15955:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15962:3:18","type":""}],"src":"15902:118:18"},{"body":{"nodeType":"YulBlock","src":"16152:206:18","statements":[{"nodeType":"YulAssignment","src":"16162:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16174:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"16185:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16170:3:18"},"nodeType":"YulFunctionCall","src":"16170:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16162:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16242:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16255:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"16266:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16251:3:18"},"nodeType":"YulFunctionCall","src":"16251:17:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"16198:43:18"},"nodeType":"YulFunctionCall","src":"16198:71:18"},"nodeType":"YulExpressionStatement","src":"16198:71:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16323:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16336:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"16347:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16332:3:18"},"nodeType":"YulFunctionCall","src":"16332:18:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16279:43:18"},"nodeType":"YulFunctionCall","src":"16279:72:18"},"nodeType":"YulExpressionStatement","src":"16279:72:18"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16116:9:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16128:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16136:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16147:4:18","type":""}],"src":"16026:332:18"},{"body":{"nodeType":"YulBlock","src":"16430:263:18","statements":[{"body":{"nodeType":"YulBlock","src":"16476:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"16478:77:18"},"nodeType":"YulFunctionCall","src":"16478:79:18"},"nodeType":"YulExpressionStatement","src":"16478:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16451:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"16460:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16447:3:18"},"nodeType":"YulFunctionCall","src":"16447:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"16472:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16443:3:18"},"nodeType":"YulFunctionCall","src":"16443:32:18"},"nodeType":"YulIf","src":"16440:119:18"},{"nodeType":"YulBlock","src":"16569:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"16584:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"16598:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16588:6:18","type":""}]},{"nodeType":"YulAssignment","src":"16613:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16648:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"16659:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16644:3:18"},"nodeType":"YulFunctionCall","src":"16644:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16668:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"16623:20:18"},"nodeType":"YulFunctionCall","src":"16623:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16613:6:18"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16400:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16411:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16423:6:18","type":""}],"src":"16364:329:18"},{"body":{"nodeType":"YulBlock","src":"16754:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16771:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16794:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"16776:17:18"},"nodeType":"YulFunctionCall","src":"16776:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16764:6:18"},"nodeType":"YulFunctionCall","src":"16764:37:18"},"nodeType":"YulExpressionStatement","src":"16764:37:18"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16742:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16749:3:18","type":""}],"src":"16699:108:18"},{"body":{"nodeType":"YulBlock","src":"16868:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16885:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16908:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"16890:17:18"},"nodeType":"YulFunctionCall","src":"16890:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16878:6:18"},"nodeType":"YulFunctionCall","src":"16878:37:18"},"nodeType":"YulExpressionStatement","src":"16878:37:18"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16856:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16863:3:18","type":""}],"src":"16813:108:18"},{"body":{"nodeType":"YulBlock","src":"16980:52:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16997:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17019:5:18"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"17002:16:18"},"nodeType":"YulFunctionCall","src":"17002:23:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16990:6:18"},"nodeType":"YulFunctionCall","src":"16990:36:18"},"nodeType":"YulExpressionStatement","src":"16990:36:18"}]},"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16968:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16975:3:18","type":""}],"src":"16927:105:18"},{"body":{"nodeType":"YulBlock","src":"17087:50:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17104:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17124:5:18"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"17109:14:18"},"nodeType":"YulFunctionCall","src":"17109:21:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17097:6:18"},"nodeType":"YulFunctionCall","src":"17097:34:18"},"nodeType":"YulExpressionStatement","src":"17097:34:18"}]},"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17075:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17082:3:18","type":""}],"src":"17038:99:18"},{"body":{"nodeType":"YulBlock","src":"17311:1651:18","statements":[{"nodeType":"YulVariableDeclaration","src":"17321:28:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17337:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"17342:6:18","type":"","value":"0x0120"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17333:3:18"},"nodeType":"YulFunctionCall","src":"17333:16:18"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"17325:4:18","type":""}]},{"nodeType":"YulBlock","src":"17359:166:18","statements":[{"nodeType":"YulVariableDeclaration","src":"17396:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17426:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"17433:4:18","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17422:3:18"},"nodeType":"YulFunctionCall","src":"17422:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17416:5:18"},"nodeType":"YulFunctionCall","src":"17416:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"17400:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"17486:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17504:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"17509:4:18","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17500:3:18"},"nodeType":"YulFunctionCall","src":"17500:14:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"17452:33:18"},"nodeType":"YulFunctionCall","src":"17452:63:18"},"nodeType":"YulExpressionStatement","src":"17452:63:18"}]},{"nodeType":"YulBlock","src":"17535:165:18","statements":[{"nodeType":"YulVariableDeclaration","src":"17571:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17601:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"17608:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17597:3:18"},"nodeType":"YulFunctionCall","src":"17597:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17591:5:18"},"nodeType":"YulFunctionCall","src":"17591:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"17575:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"17661:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17679:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"17684:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17675:3:18"},"nodeType":"YulFunctionCall","src":"17675:14:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"17627:33:18"},"nodeType":"YulFunctionCall","src":"17627:63:18"},"nodeType":"YulExpressionStatement","src":"17627:63:18"}]},{"nodeType":"YulBlock","src":"17710:178:18","statements":[{"nodeType":"YulVariableDeclaration","src":"17759:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17789:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"17796:4:18","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17785:3:18"},"nodeType":"YulFunctionCall","src":"17785:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17779:5:18"},"nodeType":"YulFunctionCall","src":"17779:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"17763:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"17849:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17867:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"17872:4:18","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17863:3:18"},"nodeType":"YulFunctionCall","src":"17863:14:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"17815:33:18"},"nodeType":"YulFunctionCall","src":"17815:63:18"},"nodeType":"YulExpressionStatement","src":"17815:63:18"}]},{"nodeType":"YulBlock","src":"17898:169:18","statements":[{"nodeType":"YulVariableDeclaration","src":"17938:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17968:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"17975:4:18","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17964:3:18"},"nodeType":"YulFunctionCall","src":"17964:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17958:5:18"},"nodeType":"YulFunctionCall","src":"17958:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"17942:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18028:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18046:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18051:4:18","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18042:3:18"},"nodeType":"YulFunctionCall","src":"18042:14:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"17994:33:18"},"nodeType":"YulFunctionCall","src":"17994:63:18"},"nodeType":"YulExpressionStatement","src":"17994:63:18"}]},{"nodeType":"YulBlock","src":"18077:162:18","statements":[{"nodeType":"YulVariableDeclaration","src":"18112:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18142:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"18149:4:18","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18138:3:18"},"nodeType":"YulFunctionCall","src":"18138:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18132:5:18"},"nodeType":"YulFunctionCall","src":"18132:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18116:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18200:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18218:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18223:4:18","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18214:3:18"},"nodeType":"YulFunctionCall","src":"18214:14:18"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulIdentifier","src":"18168:31:18"},"nodeType":"YulFunctionCall","src":"18168:61:18"},"nodeType":"YulExpressionStatement","src":"18168:61:18"}]},{"nodeType":"YulBlock","src":"18249:165:18","statements":[{"nodeType":"YulVariableDeclaration","src":"18291:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18321:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"18328:4:18","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18317:3:18"},"nodeType":"YulFunctionCall","src":"18317:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18311:5:18"},"nodeType":"YulFunctionCall","src":"18311:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18295:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18375:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18393:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18398:4:18","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18389:3:18"},"nodeType":"YulFunctionCall","src":"18389:14:18"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"18347:27:18"},"nodeType":"YulFunctionCall","src":"18347:57:18"},"nodeType":"YulExpressionStatement","src":"18347:57:18"}]},{"nodeType":"YulBlock","src":"18424:173:18","statements":[{"nodeType":"YulVariableDeclaration","src":"18468:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18498:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"18505:4:18","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18494:3:18"},"nodeType":"YulFunctionCall","src":"18494:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18488:5:18"},"nodeType":"YulFunctionCall","src":"18488:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18472:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18558:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18576:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18581:4:18","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18572:3:18"},"nodeType":"YulFunctionCall","src":"18572:14:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"18524:33:18"},"nodeType":"YulFunctionCall","src":"18524:63:18"},"nodeType":"YulExpressionStatement","src":"18524:63:18"}]},{"nodeType":"YulBlock","src":"18607:168:18","statements":[{"nodeType":"YulVariableDeclaration","src":"18648:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18678:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"18685:4:18","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18674:3:18"},"nodeType":"YulFunctionCall","src":"18674:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18668:5:18"},"nodeType":"YulFunctionCall","src":"18668:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18652:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18736:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18754:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18759:4:18","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18750:3:18"},"nodeType":"YulFunctionCall","src":"18750:14:18"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulIdentifier","src":"18704:31:18"},"nodeType":"YulFunctionCall","src":"18704:61:18"},"nodeType":"YulExpressionStatement","src":"18704:61:18"}]},{"nodeType":"YulBlock","src":"18785:170:18","statements":[{"nodeType":"YulVariableDeclaration","src":"18822:45:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18852:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"18859:6:18","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18848:3:18"},"nodeType":"YulFunctionCall","src":"18848:18:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18842:5:18"},"nodeType":"YulFunctionCall","src":"18842:25:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18826:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18914:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18932:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18937:6:18","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18928:3:18"},"nodeType":"YulFunctionCall","src":"18928:16:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"18880:33:18"},"nodeType":"YulFunctionCall","src":"18880:65:18"},"nodeType":"YulExpressionStatement","src":"18880:65:18"}]}]},"name":"abi_encode_t_struct$_Order_$4094_memory_ptr_to_t_struct$_Order_$4094_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17298:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17305:3:18","type":""}],"src":"17199:1763:18"},{"body":{"nodeType":"YulBlock","src":"19112:171:18","statements":[{"nodeType":"YulAssignment","src":"19122:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19134:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"19145:3:18","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19130:3:18"},"nodeType":"YulFunctionCall","src":"19130:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19122:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19249:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19262:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"19273:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19258:3:18"},"nodeType":"YulFunctionCall","src":"19258:17:18"}],"functionName":{"name":"abi_encode_t_struct$_Order_$4094_memory_ptr_to_t_struct$_Order_$4094_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19159:89:18"},"nodeType":"YulFunctionCall","src":"19159:117:18"},"nodeType":"YulExpressionStatement","src":"19159:117:18"}]},"name":"abi_encode_tuple_t_struct$_Order_$4094_memory_ptr__to_t_struct$_Order_$4094_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19084:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19096:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19107:4:18","type":""}],"src":"18968:315:18"},{"body":{"nodeType":"YulBlock","src":"19372:391:18","statements":[{"body":{"nodeType":"YulBlock","src":"19418:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"19420:77:18"},"nodeType":"YulFunctionCall","src":"19420:79:18"},"nodeType":"YulExpressionStatement","src":"19420:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19393:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"19402:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19389:3:18"},"nodeType":"YulFunctionCall","src":"19389:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"19414:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19385:3:18"},"nodeType":"YulFunctionCall","src":"19385:32:18"},"nodeType":"YulIf","src":"19382:119:18"},{"nodeType":"YulBlock","src":"19511:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"19526:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"19540:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19530:6:18","type":""}]},{"nodeType":"YulAssignment","src":"19555:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19590:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"19601:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19586:3:18"},"nodeType":"YulFunctionCall","src":"19586:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19610:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"19565:20:18"},"nodeType":"YulFunctionCall","src":"19565:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19555:6:18"}]}]},{"nodeType":"YulBlock","src":"19638:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"19653:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"19667:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19657:6:18","type":""}]},{"nodeType":"YulAssignment","src":"19683:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19718:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"19729:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19714:3:18"},"nodeType":"YulFunctionCall","src":"19714:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19738:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19693:20:18"},"nodeType":"YulFunctionCall","src":"19693:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"19683:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19334:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19345:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19357:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19365:6:18","type":""}],"src":"19289:474:18"},{"body":{"nodeType":"YulBlock","src":"19834:262:18","statements":[{"body":{"nodeType":"YulBlock","src":"19880:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"19882:77:18"},"nodeType":"YulFunctionCall","src":"19882:79:18"},"nodeType":"YulExpressionStatement","src":"19882:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19855:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"19864:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19851:3:18"},"nodeType":"YulFunctionCall","src":"19851:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"19876:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19847:3:18"},"nodeType":"YulFunctionCall","src":"19847:32:18"},"nodeType":"YulIf","src":"19844:119:18"},{"nodeType":"YulBlock","src":"19973:116:18","statements":[{"nodeType":"YulVariableDeclaration","src":"19988:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"20002:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19992:6:18","type":""}]},{"nodeType":"YulAssignment","src":"20017:62:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20051:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"20062:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20047:3:18"},"nodeType":"YulFunctionCall","src":"20047:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20071:7:18"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"20027:19:18"},"nodeType":"YulFunctionCall","src":"20027:52:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20017:6:18"}]}]}]},"name":"abi_decode_tuple_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19804:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19815:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19827:6:18","type":""}],"src":"19769:327:18"},{"body":{"nodeType":"YulBlock","src":"20344:395:18","statements":[{"nodeType":"YulVariableDeclaration","src":"20354:26:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20370:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"20375:4:18","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20366:3:18"},"nodeType":"YulFunctionCall","src":"20366:14:18"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"20358:4:18","type":""}]},{"nodeType":"YulBlock","src":"20390:164:18","statements":[{"nodeType":"YulVariableDeclaration","src":"20425:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20455:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"20462:4:18","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20451:3:18"},"nodeType":"YulFunctionCall","src":"20451:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20445:5:18"},"nodeType":"YulFunctionCall","src":"20445:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"20429:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"20515:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20533:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"20538:4:18","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20529:3:18"},"nodeType":"YulFunctionCall","src":"20529:14:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"20481:33:18"},"nodeType":"YulFunctionCall","src":"20481:63:18"},"nodeType":"YulExpressionStatement","src":"20481:63:18"}]},{"nodeType":"YulBlock","src":"20564:168:18","statements":[{"nodeType":"YulVariableDeclaration","src":"20603:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20633:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"20640:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20629:3:18"},"nodeType":"YulFunctionCall","src":"20629:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20623:5:18"},"nodeType":"YulFunctionCall","src":"20623:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"20607:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"20693:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20711:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"20716:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20707:3:18"},"nodeType":"YulFunctionCall","src":"20707:14:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"20659:33:18"},"nodeType":"YulFunctionCall","src":"20659:63:18"},"nodeType":"YulExpressionStatement","src":"20659:63:18"}]}]},"name":"abi_encode_t_struct$_InstitutionByCode_$3796_memory_ptr_to_t_struct$_InstitutionByCode_$3796_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20331:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"20338:3:18","type":""}],"src":"20208:531:18"},{"body":{"nodeType":"YulBlock","src":"20913:194:18","statements":[{"nodeType":"YulAssignment","src":"20923:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20935:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"20946:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20931:3:18"},"nodeType":"YulFunctionCall","src":"20931:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20923:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21073:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21086:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"21097:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21082:3:18"},"nodeType":"YulFunctionCall","src":"21082:17:18"}],"functionName":{"name":"abi_encode_t_struct$_InstitutionByCode_$3796_memory_ptr_to_t_struct$_InstitutionByCode_$3796_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20959:113:18"},"nodeType":"YulFunctionCall","src":"20959:141:18"},"nodeType":"YulExpressionStatement","src":"20959:141:18"}]},"name":"abi_encode_tuple_t_struct$_InstitutionByCode_$3796_memory_ptr__to_t_struct$_InstitutionByCode_$3796_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20885:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20897:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20908:4:18","type":""}],"src":"20745:362:18"},{"body":{"nodeType":"YulBlock","src":"21211:124:18","statements":[{"nodeType":"YulAssignment","src":"21221:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21233:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"21244:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21229:3:18"},"nodeType":"YulFunctionCall","src":"21229:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21221:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21301:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21314:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"21325:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21310:3:18"},"nodeType":"YulFunctionCall","src":"21310:17:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"21257:43:18"},"nodeType":"YulFunctionCall","src":"21257:71:18"},"nodeType":"YulExpressionStatement","src":"21257:71:18"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21183:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21195:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21206:4:18","type":""}],"src":"21113:222:18"},{"body":{"nodeType":"YulBlock","src":"21438:516:18","statements":[{"body":{"nodeType":"YulBlock","src":"21484:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"21486:77:18"},"nodeType":"YulFunctionCall","src":"21486:79:18"},"nodeType":"YulExpressionStatement","src":"21486:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21459:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"21468:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21455:3:18"},"nodeType":"YulFunctionCall","src":"21455:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"21480:2:18","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21451:3:18"},"nodeType":"YulFunctionCall","src":"21451:32:18"},"nodeType":"YulIf","src":"21448:119:18"},{"nodeType":"YulBlock","src":"21577:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"21592:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"21606:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21596:6:18","type":""}]},{"nodeType":"YulAssignment","src":"21621:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21656:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"21667:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21652:3:18"},"nodeType":"YulFunctionCall","src":"21652:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21676:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"21631:20:18"},"nodeType":"YulFunctionCall","src":"21631:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"21621:6:18"}]}]},{"nodeType":"YulBlock","src":"21704:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"21719:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"21733:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21723:6:18","type":""}]},{"nodeType":"YulAssignment","src":"21749:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21784:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"21795:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21780:3:18"},"nodeType":"YulFunctionCall","src":"21780:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21804:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"21759:20:18"},"nodeType":"YulFunctionCall","src":"21759:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"21749:6:18"}]}]},{"nodeType":"YulBlock","src":"21832:115:18","statements":[{"nodeType":"YulVariableDeclaration","src":"21847:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"21861:2:18","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21851:6:18","type":""}]},{"nodeType":"YulAssignment","src":"21877:60:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21909:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"21920:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21905:3:18"},"nodeType":"YulFunctionCall","src":"21905:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21929:7:18"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"21887:17:18"},"nodeType":"YulFunctionCall","src":"21887:50:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"21877:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21392:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"21403:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21415:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21423:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21431:6:18","type":""}],"src":"21341:613:18"},{"body":{"nodeType":"YulBlock","src":"22023:52:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22040:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22062:5:18"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"22045:16:18"},"nodeType":"YulFunctionCall","src":"22045:23:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22033:6:18"},"nodeType":"YulFunctionCall","src":"22033:36:18"},"nodeType":"YulExpressionStatement","src":"22033:36:18"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22011:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22018:3:18","type":""}],"src":"21960:115:18"},{"body":{"nodeType":"YulBlock","src":"22146:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22163:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22186:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22168:17:18"},"nodeType":"YulFunctionCall","src":"22168:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22156:6:18"},"nodeType":"YulFunctionCall","src":"22156:37:18"},"nodeType":"YulExpressionStatement","src":"22156:37:18"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22134:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22141:3:18","type":""}],"src":"22081:118:18"},{"body":{"nodeType":"YulBlock","src":"22329:204:18","statements":[{"nodeType":"YulAssignment","src":"22339:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22351:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"22362:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22347:3:18"},"nodeType":"YulFunctionCall","src":"22347:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22339:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22417:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22430:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"22441:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22426:3:18"},"nodeType":"YulFunctionCall","src":"22426:17:18"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"22375:41:18"},"nodeType":"YulFunctionCall","src":"22375:69:18"},"nodeType":"YulExpressionStatement","src":"22375:69:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22498:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22511:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"22522:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22507:3:18"},"nodeType":"YulFunctionCall","src":"22507:18:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"22454:43:18"},"nodeType":"YulFunctionCall","src":"22454:72:18"},"nodeType":"YulExpressionStatement","src":"22454:72:18"}]},"name":"abi_encode_tuple_t_uint64_t_uint256__to_t_uint64_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22293:9:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22305:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22313:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22324:4:18","type":""}],"src":"22205:328:18"},{"body":{"nodeType":"YulBlock","src":"22626:478:18","statements":[{"body":{"nodeType":"YulBlock","src":"22675:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"22677:77:18"},"nodeType":"YulFunctionCall","src":"22677:79:18"},"nodeType":"YulExpressionStatement","src":"22677:79:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22654:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"22662:4:18","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22650:3:18"},"nodeType":"YulFunctionCall","src":"22650:17:18"},{"name":"end","nodeType":"YulIdentifier","src":"22669:3:18"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22646:3:18"},"nodeType":"YulFunctionCall","src":"22646:27:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22639:6:18"},"nodeType":"YulFunctionCall","src":"22639:35:18"},"nodeType":"YulIf","src":"22636:122:18"},{"nodeType":"YulAssignment","src":"22767:30:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22790:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"22777:12:18"},"nodeType":"YulFunctionCall","src":"22777:20:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"22767:6:18"}]},{"body":{"nodeType":"YulBlock","src":"22840:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"22842:77:18"},"nodeType":"YulFunctionCall","src":"22842:79:18"},"nodeType":"YulExpressionStatement","src":"22842:79:18"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22812:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"22820:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22809:2:18"},"nodeType":"YulFunctionCall","src":"22809:30:18"},"nodeType":"YulIf","src":"22806:117:18"},{"nodeType":"YulAssignment","src":"22932:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22948:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"22956:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22944:3:18"},"nodeType":"YulFunctionCall","src":"22944:17:18"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"22932:8:18"}]},{"body":{"nodeType":"YulBlock","src":"23015:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"23017:77:18"},"nodeType":"YulFunctionCall","src":"23017:79:18"},"nodeType":"YulExpressionStatement","src":"23017:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"22980:8:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22994:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"23002:4:18","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"22990:3:18"},"nodeType":"YulFunctionCall","src":"22990:17:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22976:3:18"},"nodeType":"YulFunctionCall","src":"22976:32:18"},{"name":"end","nodeType":"YulIdentifier","src":"23010:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22973:2:18"},"nodeType":"YulFunctionCall","src":"22973:41:18"},"nodeType":"YulIf","src":"22970:128:18"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"22593:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"22601:3:18","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"22609:8:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"22619:6:18","type":""}],"src":"22552:552:18"},{"body":{"nodeType":"YulBlock","src":"23195:442:18","statements":[{"body":{"nodeType":"YulBlock","src":"23241:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23243:77:18"},"nodeType":"YulFunctionCall","src":"23243:79:18"},"nodeType":"YulExpressionStatement","src":"23243:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23216:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"23225:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23212:3:18"},"nodeType":"YulFunctionCall","src":"23212:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"23237:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23208:3:18"},"nodeType":"YulFunctionCall","src":"23208:32:18"},"nodeType":"YulIf","src":"23205:119:18"},{"nodeType":"YulBlock","src":"23334:296:18","statements":[{"nodeType":"YulVariableDeclaration","src":"23349:45:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23380:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"23391:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23376:3:18"},"nodeType":"YulFunctionCall","src":"23376:17:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"23363:12:18"},"nodeType":"YulFunctionCall","src":"23363:31:18"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23353:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"23441:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"23443:77:18"},"nodeType":"YulFunctionCall","src":"23443:79:18"},"nodeType":"YulExpressionStatement","src":"23443:79:18"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23413:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"23421:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23410:2:18"},"nodeType":"YulFunctionCall","src":"23410:30:18"},"nodeType":"YulIf","src":"23407:117:18"},{"nodeType":"YulAssignment","src":"23538:82:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23592:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"23603:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23588:3:18"},"nodeType":"YulFunctionCall","src":"23588:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23612:7:18"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"23556:31:18"},"nodeType":"YulFunctionCall","src":"23556:64:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23538:6:18"},{"name":"value1","nodeType":"YulIdentifier","src":"23546:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23157:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23168:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23180:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23188:6:18","type":""}],"src":"23110:527:18"},{"body":{"nodeType":"YulBlock","src":"23743:519:18","statements":[{"body":{"nodeType":"YulBlock","src":"23789:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23791:77:18"},"nodeType":"YulFunctionCall","src":"23791:79:18"},"nodeType":"YulExpressionStatement","src":"23791:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23764:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"23773:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23760:3:18"},"nodeType":"YulFunctionCall","src":"23760:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"23785:2:18","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23756:3:18"},"nodeType":"YulFunctionCall","src":"23756:32:18"},"nodeType":"YulIf","src":"23753:119:18"},{"nodeType":"YulBlock","src":"23882:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"23897:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"23911:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23901:6:18","type":""}]},{"nodeType":"YulAssignment","src":"23926:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23961:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"23972:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23957:3:18"},"nodeType":"YulFunctionCall","src":"23957:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23981:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"23936:20:18"},"nodeType":"YulFunctionCall","src":"23936:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23926:6:18"}]}]},{"nodeType":"YulBlock","src":"24009:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"24024:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"24038:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24028:6:18","type":""}]},{"nodeType":"YulAssignment","src":"24054:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24089:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"24100:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24085:3:18"},"nodeType":"YulFunctionCall","src":"24085:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24109:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"24064:20:18"},"nodeType":"YulFunctionCall","src":"24064:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"24054:6:18"}]}]},{"nodeType":"YulBlock","src":"24137:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"24152:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"24166:2:18","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24156:6:18","type":""}]},{"nodeType":"YulAssignment","src":"24182:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24217:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"24228:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24213:3:18"},"nodeType":"YulFunctionCall","src":"24213:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24237:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"24192:20:18"},"nodeType":"YulFunctionCall","src":"24192:53:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"24182:6:18"}]}]}]},"name":"abi_decode_tuple_t_uint256t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23697:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23708:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23720:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23728:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23736:6:18","type":""}],"src":"23643:619:18"},{"body":{"nodeType":"YulBlock","src":"24296:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24313:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24316:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24306:6:18"},"nodeType":"YulFunctionCall","src":"24306:88:18"},"nodeType":"YulExpressionStatement","src":"24306:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24410:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"24413:4:18","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24403:6:18"},"nodeType":"YulFunctionCall","src":"24403:15:18"},"nodeType":"YulExpressionStatement","src":"24403:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24434:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24437:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24427:6:18"},"nodeType":"YulFunctionCall","src":"24427:15:18"},"nodeType":"YulExpressionStatement","src":"24427:15:18"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"24268:180:18"},{"body":{"nodeType":"YulBlock","src":"24608:288:18","statements":[{"nodeType":"YulAssignment","src":"24618:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24630:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"24641:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24626:3:18"},"nodeType":"YulFunctionCall","src":"24626:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24618:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24698:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24711:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"24722:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24707:3:18"},"nodeType":"YulFunctionCall","src":"24707:17:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"24654:43:18"},"nodeType":"YulFunctionCall","src":"24654:71:18"},"nodeType":"YulExpressionStatement","src":"24654:71:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24779:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24792:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"24803:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24788:3:18"},"nodeType":"YulFunctionCall","src":"24788:18:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"24735:43:18"},"nodeType":"YulFunctionCall","src":"24735:72:18"},"nodeType":"YulExpressionStatement","src":"24735:72:18"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"24861:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24874:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"24885:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24870:3:18"},"nodeType":"YulFunctionCall","src":"24870:18:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"24817:43:18"},"nodeType":"YulFunctionCall","src":"24817:72:18"},"nodeType":"YulExpressionStatement","src":"24817:72:18"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24564:9:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"24576:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24584:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24592:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24603:4:18","type":""}],"src":"24454:442:18"},{"body":{"nodeType":"YulBlock","src":"24962:77:18","statements":[{"nodeType":"YulAssignment","src":"24972:22:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24987:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24981:5:18"},"nodeType":"YulFunctionCall","src":"24981:13:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24972:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25027:5:18"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"25003:23:18"},"nodeType":"YulFunctionCall","src":"25003:30:18"},"nodeType":"YulExpressionStatement","src":"25003:30:18"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"24940:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"24948:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"24956:5:18","type":""}],"src":"24902:137:18"},{"body":{"nodeType":"YulBlock","src":"25119:271:18","statements":[{"body":{"nodeType":"YulBlock","src":"25165:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"25167:77:18"},"nodeType":"YulFunctionCall","src":"25167:79:18"},"nodeType":"YulExpressionStatement","src":"25167:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"25140:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"25149:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25136:3:18"},"nodeType":"YulFunctionCall","src":"25136:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"25161:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"25132:3:18"},"nodeType":"YulFunctionCall","src":"25132:32:18"},"nodeType":"YulIf","src":"25129:119:18"},{"nodeType":"YulBlock","src":"25258:125:18","statements":[{"nodeType":"YulVariableDeclaration","src":"25273:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"25287:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"25277:6:18","type":""}]},{"nodeType":"YulAssignment","src":"25302:71:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25345:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"25356:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25341:3:18"},"nodeType":"YulFunctionCall","src":"25341:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"25365:7:18"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"25312:28:18"},"nodeType":"YulFunctionCall","src":"25312:61:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"25302:6:18"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25089:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"25100:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"25112:6:18","type":""}],"src":"25045:345:18"},{"body":{"nodeType":"YulBlock","src":"25424:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25441:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25444:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25434:6:18"},"nodeType":"YulFunctionCall","src":"25434:88:18"},"nodeType":"YulExpressionStatement","src":"25434:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25538:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25541:4:18","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25531:6:18"},"nodeType":"YulFunctionCall","src":"25531:15:18"},"nodeType":"YulExpressionStatement","src":"25531:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25562:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25565:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25555:6:18"},"nodeType":"YulFunctionCall","src":"25555:15:18"},"nodeType":"YulExpressionStatement","src":"25555:15:18"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"25396:180:18"},{"body":{"nodeType":"YulBlock","src":"25625:190:18","statements":[{"nodeType":"YulAssignment","src":"25635:33:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25662:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25644:17:18"},"nodeType":"YulFunctionCall","src":"25644:24:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"25635:5:18"}]},{"body":{"nodeType":"YulBlock","src":"25758:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25760:16:18"},"nodeType":"YulFunctionCall","src":"25760:18:18"},"nodeType":"YulExpressionStatement","src":"25760:18:18"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25683:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"25690:66:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"25680:2:18"},"nodeType":"YulFunctionCall","src":"25680:77:18"},"nodeType":"YulIf","src":"25677:103:18"},{"nodeType":"YulAssignment","src":"25789:20:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25800:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"25807:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25796:3:18"},"nodeType":"YulFunctionCall","src":"25796:13:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"25789:3:18"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25611:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"25621:3:18","type":""}],"src":"25582:233:18"},{"body":{"nodeType":"YulBlock","src":"25947:206:18","statements":[{"nodeType":"YulAssignment","src":"25957:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25969:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"25980:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25965:3:18"},"nodeType":"YulFunctionCall","src":"25965:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25957:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26037:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26050:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"26061:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26046:3:18"},"nodeType":"YulFunctionCall","src":"26046:17:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"25993:43:18"},"nodeType":"YulFunctionCall","src":"25993:71:18"},"nodeType":"YulExpressionStatement","src":"25993:71:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26118:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26131:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"26142:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26127:3:18"},"nodeType":"YulFunctionCall","src":"26127:18:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26074:43:18"},"nodeType":"YulFunctionCall","src":"26074:72:18"},"nodeType":"YulExpressionStatement","src":"26074:72:18"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25911:9:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25923:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25931:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25942:4:18","type":""}],"src":"25821:332:18"},{"body":{"nodeType":"YulBlock","src":"26191:28:18","statements":[{"nodeType":"YulAssignment","src":"26201:12:18","value":{"name":"value","nodeType":"YulIdentifier","src":"26208:5:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"26201:3:18"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26177:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"26187:3:18","type":""}],"src":"26159:60:18"},{"body":{"nodeType":"YulBlock","src":"26284:81:18","statements":[{"nodeType":"YulAssignment","src":"26294:65:18","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26351:5:18"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"26334:16:18"},"nodeType":"YulFunctionCall","src":"26334:23:18"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"26325:8:18"},"nodeType":"YulFunctionCall","src":"26325:33:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26307:17:18"},"nodeType":"YulFunctionCall","src":"26307:52:18"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"26294:9:18"}]}]},"name":"convert_t_uint96_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26264:5:18","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"26274:9:18","type":""}],"src":"26225:140:18"},{"body":{"nodeType":"YulBlock","src":"26435:65:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26452:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26487:5:18"}],"functionName":{"name":"convert_t_uint96_to_t_uint256","nodeType":"YulIdentifier","src":"26457:29:18"},"nodeType":"YulFunctionCall","src":"26457:36:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26445:6:18"},"nodeType":"YulFunctionCall","src":"26445:49:18"},"nodeType":"YulExpressionStatement","src":"26445:49:18"}]},"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26423:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"26430:3:18","type":""}],"src":"26371:129:18"},{"body":{"nodeType":"YulBlock","src":"26602:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26619:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"26624:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26612:6:18"},"nodeType":"YulFunctionCall","src":"26612:19:18"},"nodeType":"YulExpressionStatement","src":"26612:19:18"},{"nodeType":"YulAssignment","src":"26640:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26659:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"26664:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26655:3:18"},"nodeType":"YulFunctionCall","src":"26655:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26640:11:18"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26574:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"26579:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"26590:11:18","type":""}],"src":"26506:169:18"},{"body":{"nodeType":"YulBlock","src":"26745:82:18","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"26768:3:18"},{"name":"src","nodeType":"YulIdentifier","src":"26773:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"26778:6:18"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"26755:12:18"},"nodeType":"YulFunctionCall","src":"26755:30:18"},"nodeType":"YulExpressionStatement","src":"26755:30:18"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"26805:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"26810:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26801:3:18"},"nodeType":"YulFunctionCall","src":"26801:16:18"},{"kind":"number","nodeType":"YulLiteral","src":"26819:1:18","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26794:6:18"},"nodeType":"YulFunctionCall","src":"26794:27:18"},"nodeType":"YulExpressionStatement","src":"26794:27:18"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"26727:3:18","type":""},{"name":"dst","nodeType":"YulTypedName","src":"26732:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"26737:6:18","type":""}],"src":"26681:146:18"},{"body":{"nodeType":"YulBlock","src":"26959:215:18","statements":[{"nodeType":"YulAssignment","src":"26969:78:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27035:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"27040:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26976:58:18"},"nodeType":"YulFunctionCall","src":"26976:71:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26969:3:18"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"27094:5:18"},{"name":"pos","nodeType":"YulIdentifier","src":"27101:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"27106:6:18"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"27057:36:18"},"nodeType":"YulFunctionCall","src":"27057:56:18"},"nodeType":"YulExpressionStatement","src":"27057:56:18"},{"nodeType":"YulAssignment","src":"27122:46:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27133:3:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27160:6:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"27138:21:18"},"nodeType":"YulFunctionCall","src":"27138:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27129:3:18"},"nodeType":"YulFunctionCall","src":"27129:39:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27122:3:18"}]}]},"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"26932:5:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"26939:6:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"26947:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26955:3:18","type":""}],"src":"26857:317:18"},{"body":{"nodeType":"YulBlock","src":"27391:451:18","statements":[{"nodeType":"YulAssignment","src":"27401:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27413:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"27424:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27409:3:18"},"nodeType":"YulFunctionCall","src":"27409:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27401:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27481:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27494:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"27505:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27490:3:18"},"nodeType":"YulFunctionCall","src":"27490:17:18"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"27438:42:18"},"nodeType":"YulFunctionCall","src":"27438:70:18"},"nodeType":"YulExpressionStatement","src":"27438:70:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27562:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27575:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"27586:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27571:3:18"},"nodeType":"YulFunctionCall","src":"27571:18:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"27518:43:18"},"nodeType":"YulFunctionCall","src":"27518:72:18"},"nodeType":"YulExpressionStatement","src":"27518:72:18"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"27644:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27657:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"27668:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27653:3:18"},"nodeType":"YulFunctionCall","src":"27653:18:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"27600:43:18"},"nodeType":"YulFunctionCall","src":"27600:72:18"},"nodeType":"YulExpressionStatement","src":"27600:72:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27693:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"27704:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27689:3:18"},"nodeType":"YulFunctionCall","src":"27689:18:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27713:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"27719:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27709:3:18"},"nodeType":"YulFunctionCall","src":"27709:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27682:6:18"},"nodeType":"YulFunctionCall","src":"27682:48:18"},"nodeType":"YulExpressionStatement","src":"27682:48:18"},{"nodeType":"YulAssignment","src":"27739:96:18","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"27813:6:18"},{"name":"value4","nodeType":"YulIdentifier","src":"27821:6:18"},{"name":"tail","nodeType":"YulIdentifier","src":"27830:4:18"}],"functionName":{"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27747:65:18"},"nodeType":"YulFunctionCall","src":"27747:88:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27739:4:18"}]}]},"name":"abi_encode_tuple_t_uint96_t_bytes32_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_bytes32_t_bytes32_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27331:9:18","type":""},{"name":"value4","nodeType":"YulTypedName","src":"27343:6:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"27351:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"27359:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27367:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27375:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27386:4:18","type":""}],"src":"27180:662:18"},{"body":{"nodeType":"YulBlock","src":"27876:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27893:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27896:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27886:6:18"},"nodeType":"YulFunctionCall","src":"27886:88:18"},"nodeType":"YulExpressionStatement","src":"27886:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27990:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"27993:4:18","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27983:6:18"},"nodeType":"YulFunctionCall","src":"27983:15:18"},"nodeType":"YulExpressionStatement","src":"27983:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28014:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28017:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28007:6:18"},"nodeType":"YulFunctionCall","src":"28007:15:18"},"nodeType":"YulExpressionStatement","src":"28007:15:18"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"27848:180:18"},{"body":{"nodeType":"YulBlock","src":"28085:269:18","statements":[{"nodeType":"YulAssignment","src":"28095:22:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"28109:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"28115:1:18","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"28105:3:18"},"nodeType":"YulFunctionCall","src":"28105:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28095:6:18"}]},{"nodeType":"YulVariableDeclaration","src":"28126:38:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"28156:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"28162:1:18","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28152:3:18"},"nodeType":"YulFunctionCall","src":"28152:12:18"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"28130:18:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"28203:51:18","statements":[{"nodeType":"YulAssignment","src":"28217:27:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"28231:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"28239:4:18","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28227:3:18"},"nodeType":"YulFunctionCall","src":"28227:17:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28217:6:18"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"28183:18:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28176:6:18"},"nodeType":"YulFunctionCall","src":"28176:26:18"},"nodeType":"YulIf","src":"28173:81:18"},{"body":{"nodeType":"YulBlock","src":"28306:42:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"28320:16:18"},"nodeType":"YulFunctionCall","src":"28320:18:18"},"nodeType":"YulExpressionStatement","src":"28320:18:18"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"28270:18:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"28293:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"28301:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"28290:2:18"},"nodeType":"YulFunctionCall","src":"28290:14:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28267:2:18"},"nodeType":"YulFunctionCall","src":"28267:38:18"},"nodeType":"YulIf","src":"28264:84:18"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"28069:4:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"28078:6:18","type":""}],"src":"28034:320:18"},{"body":{"nodeType":"YulBlock","src":"28466:58:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28488:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"28496:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28484:3:18"},"nodeType":"YulFunctionCall","src":"28484:14:18"},{"hexValue":"4f6e6c7941676772656761746f72","kind":"string","nodeType":"YulLiteral","src":"28500:16:18","type":"","value":"OnlyAggregator"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28477:6:18"},"nodeType":"YulFunctionCall","src":"28477:40:18"},"nodeType":"YulExpressionStatement","src":"28477:40:18"}]},"name":"store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28458:6:18","type":""}],"src":"28360:164:18"},{"body":{"nodeType":"YulBlock","src":"28676:220:18","statements":[{"nodeType":"YulAssignment","src":"28686:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28752:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"28757:2:18","type":"","value":"14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28693:58:18"},"nodeType":"YulFunctionCall","src":"28693:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28686:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28858:3:18"}],"functionName":{"name":"store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","nodeType":"YulIdentifier","src":"28769:88:18"},"nodeType":"YulFunctionCall","src":"28769:93:18"},"nodeType":"YulExpressionStatement","src":"28769:93:18"},{"nodeType":"YulAssignment","src":"28871:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28882:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"28887:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28878:3:18"},"nodeType":"YulFunctionCall","src":"28878:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28871:3:18"}]}]},"name":"abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28664:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28672:3:18","type":""}],"src":"28530:366:18"},{"body":{"nodeType":"YulBlock","src":"29073:248:18","statements":[{"nodeType":"YulAssignment","src":"29083:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29095:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"29106:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29091:3:18"},"nodeType":"YulFunctionCall","src":"29091:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29083:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29130:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"29141:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29126:3:18"},"nodeType":"YulFunctionCall","src":"29126:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29149:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"29155:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29145:3:18"},"nodeType":"YulFunctionCall","src":"29145:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29119:6:18"},"nodeType":"YulFunctionCall","src":"29119:47:18"},"nodeType":"YulExpressionStatement","src":"29119:47:18"},{"nodeType":"YulAssignment","src":"29175:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29309:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29183:124:18"},"nodeType":"YulFunctionCall","src":"29183:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29175:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29053:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29068:4:18","type":""}],"src":"28902:419:18"},{"body":{"nodeType":"YulBlock","src":"29433:58:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29455:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"29463:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29451:3:18"},"nodeType":"YulFunctionCall","src":"29451:14:18"},{"hexValue":"4f7264657246756c66696c6c6564","kind":"string","nodeType":"YulLiteral","src":"29467:16:18","type":"","value":"OrderFulfilled"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29444:6:18"},"nodeType":"YulFunctionCall","src":"29444:40:18"},"nodeType":"YulExpressionStatement","src":"29444:40:18"}]},"name":"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29425:6:18","type":""}],"src":"29327:164:18"},{"body":{"nodeType":"YulBlock","src":"29643:220:18","statements":[{"nodeType":"YulAssignment","src":"29653:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29719:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"29724:2:18","type":"","value":"14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29660:58:18"},"nodeType":"YulFunctionCall","src":"29660:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29653:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29825:3:18"}],"functionName":{"name":"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","nodeType":"YulIdentifier","src":"29736:88:18"},"nodeType":"YulFunctionCall","src":"29736:93:18"},"nodeType":"YulExpressionStatement","src":"29736:93:18"},{"nodeType":"YulAssignment","src":"29838:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29849:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"29854:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29845:3:18"},"nodeType":"YulFunctionCall","src":"29845:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29838:3:18"}]}]},"name":"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29631:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29639:3:18","type":""}],"src":"29497:366:18"},{"body":{"nodeType":"YulBlock","src":"30040:248:18","statements":[{"nodeType":"YulAssignment","src":"30050:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30062:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"30073:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30058:3:18"},"nodeType":"YulFunctionCall","src":"30058:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30050:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30097:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"30108:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30093:3:18"},"nodeType":"YulFunctionCall","src":"30093:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30116:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"30122:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30112:3:18"},"nodeType":"YulFunctionCall","src":"30112:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30086:6:18"},"nodeType":"YulFunctionCall","src":"30086:47:18"},"nodeType":"YulExpressionStatement","src":"30086:47:18"},{"nodeType":"YulAssignment","src":"30142:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30276:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30150:124:18"},"nodeType":"YulFunctionCall","src":"30150:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30142:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30020:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30035:4:18","type":""}],"src":"29869:419:18"},{"body":{"nodeType":"YulBlock","src":"30338:172:18","statements":[{"nodeType":"YulAssignment","src":"30348:24:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30370:1:18"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"30353:16:18"},"nodeType":"YulFunctionCall","src":"30353:19:18"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"30348:1:18"}]},{"nodeType":"YulAssignment","src":"30381:24:18","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"30403:1:18"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"30386:16:18"},"nodeType":"YulFunctionCall","src":"30386:19:18"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"30381:1:18"}]},{"nodeType":"YulAssignment","src":"30414:17:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30426:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"30429:1:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30422:3:18"},"nodeType":"YulFunctionCall","src":"30422:9:18"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"30414:4:18"}]},{"body":{"nodeType":"YulBlock","src":"30481:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"30483:16:18"},"nodeType":"YulFunctionCall","src":"30483:18:18"},"nodeType":"YulExpressionStatement","src":"30483:18:18"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"30447:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"30453:26:18","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"30444:2:18"},"nodeType":"YulFunctionCall","src":"30444:36:18"},"nodeType":"YulIf","src":"30441:62:18"}]},"name":"checked_sub_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"30324:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"30327:1:18","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"30333:4:18","type":""}],"src":"30294:216:18"},{"body":{"nodeType":"YulBlock","src":"30574:80:18","statements":[{"nodeType":"YulAssignment","src":"30584:64:18","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30640:5:18"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"30623:16:18"},"nodeType":"YulFunctionCall","src":"30623:23:18"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"30614:8:18"},"nodeType":"YulFunctionCall","src":"30614:33:18"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"30597:16:18"},"nodeType":"YulFunctionCall","src":"30597:51:18"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"30584:9:18"}]}]},"name":"convert_t_uint64_to_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30554:5:18","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"30564:9:18","type":""}],"src":"30516:138:18"},{"body":{"nodeType":"YulBlock","src":"30723:64:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30740:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30774:5:18"}],"functionName":{"name":"convert_t_uint64_to_t_uint96","nodeType":"YulIdentifier","src":"30745:28:18"},"nodeType":"YulFunctionCall","src":"30745:35:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30733:6:18"},"nodeType":"YulFunctionCall","src":"30733:48:18"},"nodeType":"YulExpressionStatement","src":"30733:48:18"}]},"name":"abi_encode_t_uint64_to_t_uint96_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30711:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"30718:3:18","type":""}],"src":"30660:127:18"},{"body":{"nodeType":"YulBlock","src":"30945:286:18","statements":[{"nodeType":"YulAssignment","src":"30955:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30967:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"30978:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30963:3:18"},"nodeType":"YulFunctionCall","src":"30963:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30955:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"31035:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31048:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"31059:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31044:3:18"},"nodeType":"YulFunctionCall","src":"31044:17:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"30991:43:18"},"nodeType":"YulFunctionCall","src":"30991:71:18"},"nodeType":"YulExpressionStatement","src":"30991:71:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"31116:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31129:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"31140:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31125:3:18"},"nodeType":"YulFunctionCall","src":"31125:18:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"31072:43:18"},"nodeType":"YulFunctionCall","src":"31072:72:18"},"nodeType":"YulExpressionStatement","src":"31072:72:18"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"31196:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31209:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"31220:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31205:3:18"},"nodeType":"YulFunctionCall","src":"31205:18:18"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint96_fromStack","nodeType":"YulIdentifier","src":"31154:41:18"},"nodeType":"YulFunctionCall","src":"31154:70:18"},"nodeType":"YulExpressionStatement","src":"31154:70:18"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_uint64__to_t_bytes32_t_bytes32_t_uint96__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30901:9:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"30913:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"30921:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"30929:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30940:4:18","type":""}],"src":"30793:438:18"},{"body":{"nodeType":"YulBlock","src":"31343:66:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31365:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"31373:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31361:3:18"},"nodeType":"YulFunctionCall","src":"31361:14:18"},{"hexValue":"50617963726573743a207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"31377:24:18","type":"","value":"Paycrest: zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31354:6:18"},"nodeType":"YulFunctionCall","src":"31354:48:18"},"nodeType":"YulExpressionStatement","src":"31354:48:18"}]},"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31335:6:18","type":""}],"src":"31237:172:18"},{"body":{"nodeType":"YulBlock","src":"31561:220:18","statements":[{"nodeType":"YulAssignment","src":"31571:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31637:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"31642:2:18","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31578:58:18"},"nodeType":"YulFunctionCall","src":"31578:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31571:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31743:3:18"}],"functionName":{"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulIdentifier","src":"31654:88:18"},"nodeType":"YulFunctionCall","src":"31654:93:18"},"nodeType":"YulExpressionStatement","src":"31654:93:18"},{"nodeType":"YulAssignment","src":"31756:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31767:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"31772:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31763:3:18"},"nodeType":"YulFunctionCall","src":"31763:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31756:3:18"}]}]},"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31549:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31557:3:18","type":""}],"src":"31415:366:18"},{"body":{"nodeType":"YulBlock","src":"31958:248:18","statements":[{"nodeType":"YulAssignment","src":"31968:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31980:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"31991:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31976:3:18"},"nodeType":"YulFunctionCall","src":"31976:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31968:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32015:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"32026:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32011:3:18"},"nodeType":"YulFunctionCall","src":"32011:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32034:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"32040:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32030:3:18"},"nodeType":"YulFunctionCall","src":"32030:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32004:6:18"},"nodeType":"YulFunctionCall","src":"32004:47:18"},"nodeType":"YulExpressionStatement","src":"32004:47:18"},{"nodeType":"YulAssignment","src":"32060:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32194:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32068:124:18"},"nodeType":"YulFunctionCall","src":"32068:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32060:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31938:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31953:4:18","type":""}],"src":"31787:419:18"},{"body":{"nodeType":"YulBlock","src":"32318:127:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32340:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"32348:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32336:3:18"},"nodeType":"YulFunctionCall","src":"32336:14:18"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"32352:34:18","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32329:6:18"},"nodeType":"YulFunctionCall","src":"32329:58:18"},"nodeType":"YulExpressionStatement","src":"32329:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32408:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"32416:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32404:3:18"},"nodeType":"YulFunctionCall","src":"32404:15:18"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"32421:16:18","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32397:6:18"},"nodeType":"YulFunctionCall","src":"32397:41:18"},"nodeType":"YulExpressionStatement","src":"32397:41:18"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32310:6:18","type":""}],"src":"32212:233:18"},{"body":{"nodeType":"YulBlock","src":"32597:220:18","statements":[{"nodeType":"YulAssignment","src":"32607:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32673:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"32678:2:18","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32614:58:18"},"nodeType":"YulFunctionCall","src":"32614:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32607:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32779:3:18"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"32690:88:18"},"nodeType":"YulFunctionCall","src":"32690:93:18"},"nodeType":"YulExpressionStatement","src":"32690:93:18"},{"nodeType":"YulAssignment","src":"32792:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32803:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"32808:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32799:3:18"},"nodeType":"YulFunctionCall","src":"32799:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32792:3:18"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32585:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32593:3:18","type":""}],"src":"32451:366:18"},{"body":{"nodeType":"YulBlock","src":"32994:248:18","statements":[{"nodeType":"YulAssignment","src":"33004:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33016:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"33027:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33012:3:18"},"nodeType":"YulFunctionCall","src":"33012:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33004:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33051:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"33062:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33047:3:18"},"nodeType":"YulFunctionCall","src":"33047:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33070:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"33076:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33066:3:18"},"nodeType":"YulFunctionCall","src":"33066:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33040:6:18"},"nodeType":"YulFunctionCall","src":"33040:47:18"},"nodeType":"YulExpressionStatement","src":"33040:47:18"},{"nodeType":"YulAssignment","src":"33096:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33230:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33104:124:18"},"nodeType":"YulFunctionCall","src":"33104:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33096:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32974:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32989:4:18","type":""}],"src":"32823:419:18"},{"body":{"nodeType":"YulBlock","src":"33301:32:18","statements":[{"nodeType":"YulAssignment","src":"33311:16:18","value":{"name":"value","nodeType":"YulIdentifier","src":"33322:5:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"33311:7:18"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33283:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"33293:7:18","type":""}],"src":"33248:85:18"},{"body":{"nodeType":"YulBlock","src":"33382:43:18","statements":[{"nodeType":"YulAssignment","src":"33392:27:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33407:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"33414:4:18","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"33403:3:18"},"nodeType":"YulFunctionCall","src":"33403:16:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"33392:7:18"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33364:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"33374:7:18","type":""}],"src":"33339:86:18"},{"body":{"nodeType":"YulBlock","src":"33497:88:18","statements":[{"nodeType":"YulAssignment","src":"33507:72:18","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33571:5:18"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"33545:25:18"},"nodeType":"YulFunctionCall","src":"33545:32:18"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"33536:8:18"},"nodeType":"YulFunctionCall","src":"33536:42:18"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"33520:15:18"},"nodeType":"YulFunctionCall","src":"33520:59:18"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"33507:9:18"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33477:5:18","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"33487:9:18","type":""}],"src":"33431:154:18"},{"body":{"nodeType":"YulBlock","src":"33662:72:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33679:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33721:5:18"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"33684:36:18"},"nodeType":"YulFunctionCall","src":"33684:43:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33672:6:18"},"nodeType":"YulFunctionCall","src":"33672:56:18"},"nodeType":"YulExpressionStatement","src":"33672:56:18"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33650:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"33657:3:18","type":""}],"src":"33591:143:18"},{"body":{"nodeType":"YulBlock","src":"33844:130:18","statements":[{"nodeType":"YulAssignment","src":"33854:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33866:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"33877:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33862:3:18"},"nodeType":"YulFunctionCall","src":"33862:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33854:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"33940:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33953:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"33964:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33949:3:18"},"nodeType":"YulFunctionCall","src":"33949:17:18"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"33890:49:18"},"nodeType":"YulFunctionCall","src":"33890:77:18"},"nodeType":"YulExpressionStatement","src":"33890:77:18"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33816:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"33828:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33839:4:18","type":""}],"src":"33740:234:18"},{"body":{"nodeType":"YulBlock","src":"34076:122:18","statements":[{"nodeType":"YulAssignment","src":"34086:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34098:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"34109:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34094:3:18"},"nodeType":"YulFunctionCall","src":"34094:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34086:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"34164:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34177:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"34188:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34173:3:18"},"nodeType":"YulFunctionCall","src":"34173:17:18"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"34122:41:18"},"nodeType":"YulFunctionCall","src":"34122:69:18"},"nodeType":"YulExpressionStatement","src":"34122:69:18"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34048:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"34060:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34071:4:18","type":""}],"src":"33980:218:18"},{"body":{"nodeType":"YulBlock","src":"34352:282:18","statements":[{"nodeType":"YulAssignment","src":"34362:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34374:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"34385:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34370:3:18"},"nodeType":"YulFunctionCall","src":"34370:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34362:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"34442:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34455:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"34466:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34451:3:18"},"nodeType":"YulFunctionCall","src":"34451:17:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"34398:43:18"},"nodeType":"YulFunctionCall","src":"34398:71:18"},"nodeType":"YulExpressionStatement","src":"34398:71:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"34523:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34536:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"34547:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34532:3:18"},"nodeType":"YulFunctionCall","src":"34532:18:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"34479:43:18"},"nodeType":"YulFunctionCall","src":"34479:72:18"},"nodeType":"YulExpressionStatement","src":"34479:72:18"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"34599:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34612:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"34623:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34608:3:18"},"nodeType":"YulFunctionCall","src":"34608:18:18"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"34561:37:18"},"nodeType":"YulFunctionCall","src":"34561:66:18"},"nodeType":"YulExpressionStatement","src":"34561:66:18"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34308:9:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"34320:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"34328:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"34336:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34347:4:18","type":""}],"src":"34204:430:18"},{"body":{"nodeType":"YulBlock","src":"34705:31:18","statements":[{"nodeType":"YulAssignment","src":"34716:13:18","value":{"name":"len","nodeType":"YulIdentifier","src":"34726:3:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"34716:6:18"}]}]},"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34683:5:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"34690:3:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"34698:6:18","type":""}],"src":"34640:96:18"},{"body":{"nodeType":"YulBlock","src":"34795:87:18","statements":[{"nodeType":"YulAssignment","src":"34805:11:18","value":{"name":"ptr","nodeType":"YulIdentifier","src":"34813:3:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"34805:4:18"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34833:1:18","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"34836:3:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34826:6:18"},"nodeType":"YulFunctionCall","src":"34826:14:18"},"nodeType":"YulExpressionStatement","src":"34826:14:18"},{"nodeType":"YulAssignment","src":"34849:26:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34867:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34870:4:18","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"34857:9:18"},"nodeType":"YulFunctionCall","src":"34857:18:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"34849:4:18"}]}]},"name":"array_dataslot_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"34782:3:18","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"34790:4:18","type":""}],"src":"34742:140:18"},{"body":{"nodeType":"YulBlock","src":"34932:49:18","statements":[{"nodeType":"YulAssignment","src":"34942:33:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"34960:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"34967:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34956:3:18"},"nodeType":"YulFunctionCall","src":"34956:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"34972:2:18","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"34952:3:18"},"nodeType":"YulFunctionCall","src":"34952:23:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"34942:6:18"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34915:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"34925:6:18","type":""}],"src":"34888:93:18"},{"body":{"nodeType":"YulBlock","src":"35040:54:18","statements":[{"nodeType":"YulAssignment","src":"35050:37:18","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"35075:4:18"},{"name":"value","nodeType":"YulIdentifier","src":"35081:5:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"35071:3:18"},"nodeType":"YulFunctionCall","src":"35071:16:18"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"35050:8:18"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"35015:4:18","type":""},{"name":"value","nodeType":"YulTypedName","src":"35021:5:18","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"35031:8:18","type":""}],"src":"34987:107:18"},{"body":{"nodeType":"YulBlock","src":"35176:317:18","statements":[{"nodeType":"YulVariableDeclaration","src":"35186:35:18","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"35207:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"35219:1:18","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"35203:3:18"},"nodeType":"YulFunctionCall","src":"35203:18:18"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"35190:9:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"35230:109:18","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"35261:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"35272:66:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"35242:18:18"},"nodeType":"YulFunctionCall","src":"35242:97:18"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"35234:4:18","type":""}]},{"nodeType":"YulAssignment","src":"35348:51:18","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"35379:9:18"},{"name":"toInsert","nodeType":"YulIdentifier","src":"35390:8:18"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"35360:18:18"},"nodeType":"YulFunctionCall","src":"35360:39:18"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"35348:8:18"}]},{"nodeType":"YulAssignment","src":"35408:30:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35421:5:18"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"35432:4:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"35428:3:18"},"nodeType":"YulFunctionCall","src":"35428:9:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35417:3:18"},"nodeType":"YulFunctionCall","src":"35417:21:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"35408:5:18"}]},{"nodeType":"YulAssignment","src":"35447:40:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35460:5:18"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"35471:8:18"},{"name":"mask","nodeType":"YulIdentifier","src":"35481:4:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35467:3:18"},"nodeType":"YulFunctionCall","src":"35467:19:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"35457:2:18"},"nodeType":"YulFunctionCall","src":"35457:30:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"35447:6:18"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"35137:5:18","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"35144:10:18","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"35156:8:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"35169:6:18","type":""}],"src":"35100:393:18"},{"body":{"nodeType":"YulBlock","src":"35559:82:18","statements":[{"nodeType":"YulAssignment","src":"35569:66:18","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35627:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"35609:17:18"},"nodeType":"YulFunctionCall","src":"35609:24:18"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"35600:8:18"},"nodeType":"YulFunctionCall","src":"35600:34:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"35582:17:18"},"nodeType":"YulFunctionCall","src":"35582:53:18"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"35569:9:18"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"35539:5:18","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"35549:9:18","type":""}],"src":"35499:142:18"},{"body":{"nodeType":"YulBlock","src":"35694:28:18","statements":[{"nodeType":"YulAssignment","src":"35704:12:18","value":{"name":"value","nodeType":"YulIdentifier","src":"35711:5:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"35704:3:18"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"35680:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"35690:3:18","type":""}],"src":"35647:75:18"},{"body":{"nodeType":"YulBlock","src":"35804:193:18","statements":[{"nodeType":"YulVariableDeclaration","src":"35814:63:18","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"35869:7:18"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"35838:30:18"},"nodeType":"YulFunctionCall","src":"35838:39:18"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"35818:16:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35893:4:18"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35933:4:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"35927:5:18"},"nodeType":"YulFunctionCall","src":"35927:11:18"},{"name":"offset","nodeType":"YulIdentifier","src":"35940:6:18"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"35972:16:18"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"35948:23:18"},"nodeType":"YulFunctionCall","src":"35948:41:18"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"35899:27:18"},"nodeType":"YulFunctionCall","src":"35899:91:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35886:6:18"},"nodeType":"YulFunctionCall","src":"35886:105:18"},"nodeType":"YulExpressionStatement","src":"35886:105:18"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"35781:4:18","type":""},{"name":"offset","nodeType":"YulTypedName","src":"35787:6:18","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"35795:7:18","type":""}],"src":"35728:269:18"},{"body":{"nodeType":"YulBlock","src":"36052:24:18","statements":[{"nodeType":"YulAssignment","src":"36062:8:18","value":{"kind":"number","nodeType":"YulLiteral","src":"36069:1:18","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"36062:3:18"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"36048:3:18","type":""}],"src":"36003:73:18"},{"body":{"nodeType":"YulBlock","src":"36135:136:18","statements":[{"nodeType":"YulVariableDeclaration","src":"36145:46:18","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"36159:30:18"},"nodeType":"YulFunctionCall","src":"36159:32:18"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"36149:6:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"36244:4:18"},{"name":"offset","nodeType":"YulIdentifier","src":"36250:6:18"},{"name":"zero_0","nodeType":"YulIdentifier","src":"36258:6:18"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"36200:43:18"},"nodeType":"YulFunctionCall","src":"36200:65:18"},"nodeType":"YulExpressionStatement","src":"36200:65:18"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"36121:4:18","type":""},{"name":"offset","nodeType":"YulTypedName","src":"36127:6:18","type":""}],"src":"36082:189:18"},{"body":{"nodeType":"YulBlock","src":"36327:136:18","statements":[{"body":{"nodeType":"YulBlock","src":"36394:63:18","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"36438:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"36445:1:18","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"36408:29:18"},"nodeType":"YulFunctionCall","src":"36408:39:18"},"nodeType":"YulExpressionStatement","src":"36408:39:18"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"36347:5:18"},{"name":"end","nodeType":"YulIdentifier","src":"36354:3:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"36344:2:18"},"nodeType":"YulFunctionCall","src":"36344:14:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"36359:26:18","statements":[{"nodeType":"YulAssignment","src":"36361:22:18","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"36374:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"36381:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36370:3:18"},"nodeType":"YulFunctionCall","src":"36370:13:18"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"36361:5:18"}]}]},"pre":{"nodeType":"YulBlock","src":"36341:2:18","statements":[]},"src":"36337:120:18"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"36315:5:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"36322:3:18","type":""}],"src":"36277:186:18"},{"body":{"nodeType":"YulBlock","src":"36547:463:18","statements":[{"body":{"nodeType":"YulBlock","src":"36573:430:18","statements":[{"nodeType":"YulVariableDeclaration","src":"36587:53:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"36634:5:18"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"36603:30:18"},"nodeType":"YulFunctionCall","src":"36603:37:18"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"36591:8:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"36653:63:18","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"36676:8:18"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"36704:10:18"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"36686:17:18"},"nodeType":"YulFunctionCall","src":"36686:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36672:3:18"},"nodeType":"YulFunctionCall","src":"36672:44:18"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"36657:11:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"36873:27:18","statements":[{"nodeType":"YulAssignment","src":"36875:23:18","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"36890:8:18"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"36875:11:18"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"36857:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"36869:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"36854:2:18"},"nodeType":"YulFunctionCall","src":"36854:18:18"},"nodeType":"YulIf","src":"36851:49:18"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"36942:11:18"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"36959:8:18"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"36987:3:18"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"36969:17:18"},"nodeType":"YulFunctionCall","src":"36969:22:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36955:3:18"},"nodeType":"YulFunctionCall","src":"36955:37:18"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"36913:28:18"},"nodeType":"YulFunctionCall","src":"36913:80:18"},"nodeType":"YulExpressionStatement","src":"36913:80:18"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"36564:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"36569:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"36561:2:18"},"nodeType":"YulFunctionCall","src":"36561:11:18"},"nodeType":"YulIf","src":"36558:445:18"}]},"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"36523:5:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"36530:3:18","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"36535:10:18","type":""}],"src":"36469:541:18"},{"body":{"nodeType":"YulBlock","src":"37079:54:18","statements":[{"nodeType":"YulAssignment","src":"37089:37:18","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"37114:4:18"},{"name":"value","nodeType":"YulIdentifier","src":"37120:5:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"37110:3:18"},"nodeType":"YulFunctionCall","src":"37110:16:18"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"37089:8:18"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"37054:4:18","type":""},{"name":"value","nodeType":"YulTypedName","src":"37060:5:18","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"37070:8:18","type":""}],"src":"37016:117:18"},{"body":{"nodeType":"YulBlock","src":"37190:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"37200:68:18","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37249:1:18","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"37252:5:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"37245:3:18"},"nodeType":"YulFunctionCall","src":"37245:13:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37264:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"37260:3:18"},"nodeType":"YulFunctionCall","src":"37260:6:18"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"37216:28:18"},"nodeType":"YulFunctionCall","src":"37216:51:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"37212:3:18"},"nodeType":"YulFunctionCall","src":"37212:56:18"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"37204:4:18","type":""}]},{"nodeType":"YulAssignment","src":"37277:25:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"37291:4:18"},{"name":"mask","nodeType":"YulIdentifier","src":"37297:4:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"37287:3:18"},"nodeType":"YulFunctionCall","src":"37287:15:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"37277:6:18"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"37167:4:18","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"37173:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"37183:6:18","type":""}],"src":"37139:169:18"},{"body":{"nodeType":"YulBlock","src":"37394:214:18","statements":[{"nodeType":"YulAssignment","src":"37527:37:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"37554:4:18"},{"name":"len","nodeType":"YulIdentifier","src":"37560:3:18"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"37535:18:18"},"nodeType":"YulFunctionCall","src":"37535:29:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"37527:4:18"}]},{"nodeType":"YulAssignment","src":"37573:29:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"37584:4:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37594:1:18","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"37597:3:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"37590:3:18"},"nodeType":"YulFunctionCall","src":"37590:11:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"37581:2:18"},"nodeType":"YulFunctionCall","src":"37581:21:18"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"37573:4:18"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"37375:4:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"37381:3:18","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"37389:4:18","type":""}],"src":"37313:295:18"},{"body":{"nodeType":"YulBlock","src":"37710:1301:18","statements":[{"nodeType":"YulVariableDeclaration","src":"37721:57:18","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"37769:3:18"},{"name":"len","nodeType":"YulIdentifier","src":"37774:3:18"}],"functionName":{"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"37735:33:18"},"nodeType":"YulFunctionCall","src":"37735:43:18"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"37725:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"37863:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"37865:16:18"},"nodeType":"YulFunctionCall","src":"37865:18:18"},"nodeType":"YulExpressionStatement","src":"37865:18:18"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"37835:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"37843:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"37832:2:18"},"nodeType":"YulFunctionCall","src":"37832:30:18"},"nodeType":"YulIf","src":"37829:56:18"},{"nodeType":"YulVariableDeclaration","src":"37895:52:18","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"37941:4:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"37935:5:18"},"nodeType":"YulFunctionCall","src":"37935:11:18"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"37909:25:18"},"nodeType":"YulFunctionCall","src":"37909:38:18"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"37899:6:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"38039:4:18"},{"name":"oldLen","nodeType":"YulIdentifier","src":"38045:6:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"38053:6:18"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulIdentifier","src":"37994:44:18"},"nodeType":"YulFunctionCall","src":"37994:66:18"},"nodeType":"YulExpressionStatement","src":"37994:66:18"},{"nodeType":"YulVariableDeclaration","src":"38070:18:18","value":{"kind":"number","nodeType":"YulLiteral","src":"38087:1:18","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"38074:9:18","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"38135:624:18","statements":[{"nodeType":"YulVariableDeclaration","src":"38149:37:18","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"38168:6:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38180:4:18","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"38176:3:18"},"nodeType":"YulFunctionCall","src":"38176:9:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"38164:3:18"},"nodeType":"YulFunctionCall","src":"38164:22:18"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"38153:7:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"38200:50:18","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"38245:4:18"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"38214:30:18"},"nodeType":"YulFunctionCall","src":"38214:36:18"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"38204:6:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"38263:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"38272:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"38267:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"38331:170:18","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"38356:6:18"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"38381:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"38386:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38377:3:18"},"nodeType":"YulFunctionCall","src":"38377:19:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"38364:12:18"},"nodeType":"YulFunctionCall","src":"38364:33:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"38349:6:18"},"nodeType":"YulFunctionCall","src":"38349:49:18"},"nodeType":"YulExpressionStatement","src":"38349:49:18"},{"nodeType":"YulAssignment","src":"38415:24:18","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"38429:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"38437:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38425:3:18"},"nodeType":"YulFunctionCall","src":"38425:14:18"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"38415:6:18"}]},{"nodeType":"YulAssignment","src":"38456:31:18","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"38473:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"38484:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38469:3:18"},"nodeType":"YulFunctionCall","src":"38469:18:18"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"38456:9:18"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"38297:1:18"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"38300:7:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"38294:2:18"},"nodeType":"YulFunctionCall","src":"38294:14:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"38309:21:18","statements":[{"nodeType":"YulAssignment","src":"38311:17:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"38320:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"38323:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38316:3:18"},"nodeType":"YulFunctionCall","src":"38316:12:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"38311:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"38290:3:18","statements":[]},"src":"38286:215:18"},{"body":{"nodeType":"YulBlock","src":"38537:163:18","statements":[{"nodeType":"YulVariableDeclaration","src":"38555:50:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"38589:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"38594:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38585:3:18"},"nodeType":"YulFunctionCall","src":"38585:19:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"38572:12:18"},"nodeType":"YulFunctionCall","src":"38572:33:18"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"38559:9:18","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"38629:6:18"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"38656:9:18"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"38671:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"38679:4:18","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"38667:3:18"},"nodeType":"YulFunctionCall","src":"38667:17:18"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"38637:18:18"},"nodeType":"YulFunctionCall","src":"38637:48:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"38622:6:18"},"nodeType":"YulFunctionCall","src":"38622:64:18"},"nodeType":"YulExpressionStatement","src":"38622:64:18"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"38520:7:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"38529:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"38517:2:18"},"nodeType":"YulFunctionCall","src":"38517:19:18"},"nodeType":"YulIf","src":"38514:186:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"38720:4:18"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"38734:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"38742:1:18","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"38730:3:18"},"nodeType":"YulFunctionCall","src":"38730:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"38746:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38726:3:18"},"nodeType":"YulFunctionCall","src":"38726:22:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"38713:6:18"},"nodeType":"YulFunctionCall","src":"38713:36:18"},"nodeType":"YulExpressionStatement","src":"38713:36:18"}]},"nodeType":"YulCase","src":"38128:631:18","value":{"kind":"number","nodeType":"YulLiteral","src":"38133:1:18","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"38776:229:18","statements":[{"nodeType":"YulVariableDeclaration","src":"38790:14:18","value":{"kind":"number","nodeType":"YulLiteral","src":"38803:1:18","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"38794:5:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"38827:74:18","statements":[{"nodeType":"YulAssignment","src":"38845:42:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"38871:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"38876:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38867:3:18"},"nodeType":"YulFunctionCall","src":"38867:19:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"38854:12:18"},"nodeType":"YulFunctionCall","src":"38854:33:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"38845:5:18"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"38820:6:18"},"nodeType":"YulIf","src":"38817:84:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"38921:4:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38980:5:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"38987:6:18"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"38927:52:18"},"nodeType":"YulFunctionCall","src":"38927:67:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"38914:6:18"},"nodeType":"YulFunctionCall","src":"38914:81:18"},"nodeType":"YulExpressionStatement","src":"38914:81:18"}]},"nodeType":"YulCase","src":"38768:237:18","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"38108:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"38116:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"38105:2:18"},"nodeType":"YulFunctionCall","src":"38105:14:18"},"nodeType":"YulSwitch","src":"38098:907:18"}]},"name":"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"37694:4:18","type":""},{"name":"src","nodeType":"YulTypedName","src":"37700:3:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"37705:3:18","type":""}],"src":"37613:1398:18"},{"body":{"nodeType":"YulBlock","src":"39139:214:18","statements":[{"nodeType":"YulAssignment","src":"39149:77:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39214:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"39219:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39156:57:18"},"nodeType":"YulFunctionCall","src":"39156:70:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"39149:3:18"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"39273:5:18"},{"name":"pos","nodeType":"YulIdentifier","src":"39280:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"39285:6:18"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"39236:36:18"},"nodeType":"YulFunctionCall","src":"39236:56:18"},"nodeType":"YulExpressionStatement","src":"39236:56:18"},{"nodeType":"YulAssignment","src":"39301:46:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39312:3:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"39339:6:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"39317:21:18"},"nodeType":"YulFunctionCall","src":"39317:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39308:3:18"},"nodeType":"YulFunctionCall","src":"39308:39:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"39301:3:18"}]}]},"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"39112:5:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"39119:6:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"39127:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"39135:3:18","type":""}],"src":"39039:314:18"},{"body":{"nodeType":"YulBlock","src":"39485:203:18","statements":[{"nodeType":"YulAssignment","src":"39495:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39507:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"39518:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39503:3:18"},"nodeType":"YulFunctionCall","src":"39503:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39495:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39542:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"39553:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39538:3:18"},"nodeType":"YulFunctionCall","src":"39538:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39561:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"39567:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39557:3:18"},"nodeType":"YulFunctionCall","src":"39557:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39531:6:18"},"nodeType":"YulFunctionCall","src":"39531:47:18"},"nodeType":"YulExpressionStatement","src":"39531:47:18"},{"nodeType":"YulAssignment","src":"39587:94:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"39659:6:18"},{"name":"value1","nodeType":"YulIdentifier","src":"39667:6:18"},{"name":"tail","nodeType":"YulIdentifier","src":"39676:4:18"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39595:63:18"},"nodeType":"YulFunctionCall","src":"39595:86:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39587:4:18"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39449:9:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"39461:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"39469:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"39480:4:18","type":""}],"src":"39359:329:18"},{"body":{"nodeType":"YulBlock","src":"39739:149:18","statements":[{"nodeType":"YulAssignment","src":"39749:25:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39772:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"39754:17:18"},"nodeType":"YulFunctionCall","src":"39754:20:18"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"39749:1:18"}]},{"nodeType":"YulAssignment","src":"39783:25:18","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"39806:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"39788:17:18"},"nodeType":"YulFunctionCall","src":"39788:20:18"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"39783:1:18"}]},{"nodeType":"YulAssignment","src":"39817:17:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39829:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"39832:1:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39825:3:18"},"nodeType":"YulFunctionCall","src":"39825:9:18"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"39817:4:18"}]},{"body":{"nodeType":"YulBlock","src":"39859:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"39861:16:18"},"nodeType":"YulFunctionCall","src":"39861:18:18"},"nodeType":"YulExpressionStatement","src":"39861:18:18"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"39850:4:18"},{"name":"x","nodeType":"YulIdentifier","src":"39856:1:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"39847:2:18"},"nodeType":"YulFunctionCall","src":"39847:11:18"},"nodeType":"YulIf","src":"39844:37:18"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"39725:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"39728:1:18","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"39734:4:18","type":""}],"src":"39694:194:18"},{"body":{"nodeType":"YulBlock","src":"40020:206:18","statements":[{"nodeType":"YulAssignment","src":"40030:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40042:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"40053:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40038:3:18"},"nodeType":"YulFunctionCall","src":"40038:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40030:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"40110:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40123:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"40134:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40119:3:18"},"nodeType":"YulFunctionCall","src":"40119:17:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"40066:43:18"},"nodeType":"YulFunctionCall","src":"40066:71:18"},"nodeType":"YulExpressionStatement","src":"40066:71:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"40191:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40204:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"40215:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40200:3:18"},"nodeType":"YulFunctionCall","src":"40200:18:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"40147:43:18"},"nodeType":"YulFunctionCall","src":"40147:72:18"},"nodeType":"YulExpressionStatement","src":"40147:72:18"}]},"name":"abi_encode_tuple_t_uint256_t_bytes32__to_t_uint256_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39984:9:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"39996:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"40004:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"40015:4:18","type":""}],"src":"39894:332:18"},{"body":{"nodeType":"YulBlock","src":"40338:119:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"40360:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"40368:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40356:3:18"},"nodeType":"YulFunctionCall","src":"40356:14:18"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"40372:34:18","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40349:6:18"},"nodeType":"YulFunctionCall","src":"40349:58:18"},"nodeType":"YulExpressionStatement","src":"40349:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"40428:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"40436:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40424:3:18"},"nodeType":"YulFunctionCall","src":"40424:15:18"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"40441:8:18","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40417:6:18"},"nodeType":"YulFunctionCall","src":"40417:33:18"},"nodeType":"YulExpressionStatement","src":"40417:33:18"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"40330:6:18","type":""}],"src":"40232:225:18"},{"body":{"nodeType":"YulBlock","src":"40609:220:18","statements":[{"nodeType":"YulAssignment","src":"40619:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40685:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"40690:2:18","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"40626:58:18"},"nodeType":"YulFunctionCall","src":"40626:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"40619:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40791:3:18"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"40702:88:18"},"nodeType":"YulFunctionCall","src":"40702:93:18"},"nodeType":"YulExpressionStatement","src":"40702:93:18"},{"nodeType":"YulAssignment","src":"40804:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40815:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"40820:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40811:3:18"},"nodeType":"YulFunctionCall","src":"40811:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"40804:3:18"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"40597:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"40605:3:18","type":""}],"src":"40463:366:18"},{"body":{"nodeType":"YulBlock","src":"41006:248:18","statements":[{"nodeType":"YulAssignment","src":"41016:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41028:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"41039:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41024:3:18"},"nodeType":"YulFunctionCall","src":"41024:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41016:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41063:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"41074:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41059:3:18"},"nodeType":"YulFunctionCall","src":"41059:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"41082:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"41088:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41078:3:18"},"nodeType":"YulFunctionCall","src":"41078:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41052:6:18"},"nodeType":"YulFunctionCall","src":"41052:47:18"},"nodeType":"YulExpressionStatement","src":"41052:47:18"},{"nodeType":"YulAssignment","src":"41108:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"41242:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"41116:124:18"},"nodeType":"YulFunctionCall","src":"41116:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41108:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40986:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"41001:4:18","type":""}],"src":"40835:419:18"},{"body":{"nodeType":"YulBlock","src":"41366:60:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"41388:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"41396:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41384:3:18"},"nodeType":"YulFunctionCall","src":"41384:14:18"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"41400:18:18","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41377:6:18"},"nodeType":"YulFunctionCall","src":"41377:42:18"},"nodeType":"YulExpressionStatement","src":"41377:42:18"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"41358:6:18","type":""}],"src":"41260:166:18"},{"body":{"nodeType":"YulBlock","src":"41578:220:18","statements":[{"nodeType":"YulAssignment","src":"41588:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41654:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"41659:2:18","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"41595:58:18"},"nodeType":"YulFunctionCall","src":"41595:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"41588:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41760:3:18"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"41671:88:18"},"nodeType":"YulFunctionCall","src":"41671:93:18"},"nodeType":"YulExpressionStatement","src":"41671:93:18"},{"nodeType":"YulAssignment","src":"41773:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41784:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"41789:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41780:3:18"},"nodeType":"YulFunctionCall","src":"41780:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"41773:3:18"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"41566:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"41574:3:18","type":""}],"src":"41432:366:18"},{"body":{"nodeType":"YulBlock","src":"41975:248:18","statements":[{"nodeType":"YulAssignment","src":"41985:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41997:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"42008:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41993:3:18"},"nodeType":"YulFunctionCall","src":"41993:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41985:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42032:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"42043:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42028:3:18"},"nodeType":"YulFunctionCall","src":"42028:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"42051:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"42057:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"42047:3:18"},"nodeType":"YulFunctionCall","src":"42047:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42021:6:18"},"nodeType":"YulFunctionCall","src":"42021:47:18"},"nodeType":"YulExpressionStatement","src":"42021:47:18"},{"nodeType":"YulAssignment","src":"42077:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"42211:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42085:124:18"},"nodeType":"YulFunctionCall","src":"42085:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42077:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"41955:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"41970:4:18","type":""}],"src":"41804:419:18"},{"body":{"nodeType":"YulBlock","src":"42335:61:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"42357:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"42365:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42353:3:18"},"nodeType":"YulFunctionCall","src":"42353:14:18"},{"hexValue":"546f6b656e4e6f74537570706f72746564","kind":"string","nodeType":"YulLiteral","src":"42369:19:18","type":"","value":"TokenNotSupported"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42346:6:18"},"nodeType":"YulFunctionCall","src":"42346:43:18"},"nodeType":"YulExpressionStatement","src":"42346:43:18"}]},"name":"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"42327:6:18","type":""}],"src":"42229:167:18"},{"body":{"nodeType":"YulBlock","src":"42548:220:18","statements":[{"nodeType":"YulAssignment","src":"42558:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42624:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"42629:2:18","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42565:58:18"},"nodeType":"YulFunctionCall","src":"42565:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"42558:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42730:3:18"}],"functionName":{"name":"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","nodeType":"YulIdentifier","src":"42641:88:18"},"nodeType":"YulFunctionCall","src":"42641:93:18"},"nodeType":"YulExpressionStatement","src":"42641:93:18"},{"nodeType":"YulAssignment","src":"42743:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42754:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"42759:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42750:3:18"},"nodeType":"YulFunctionCall","src":"42750:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"42743:3:18"}]}]},"name":"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"42536:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"42544:3:18","type":""}],"src":"42402:366:18"},{"body":{"nodeType":"YulBlock","src":"42945:248:18","statements":[{"nodeType":"YulAssignment","src":"42955:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42967:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"42978:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42963:3:18"},"nodeType":"YulFunctionCall","src":"42963:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42955:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43002:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"43013:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42998:3:18"},"nodeType":"YulFunctionCall","src":"42998:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43021:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"43027:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43017:3:18"},"nodeType":"YulFunctionCall","src":"43017:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42991:6:18"},"nodeType":"YulFunctionCall","src":"42991:47:18"},"nodeType":"YulExpressionStatement","src":"42991:47:18"},{"nodeType":"YulAssignment","src":"43047:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43181:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43055:124:18"},"nodeType":"YulFunctionCall","src":"43055:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43047:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42925:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"42940:4:18","type":""}],"src":"42774:419:18"},{"body":{"nodeType":"YulBlock","src":"43305:56:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"43327:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"43335:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43323:3:18"},"nodeType":"YulFunctionCall","src":"43323:14:18"},{"hexValue":"416d6f756e7449735a65726f","kind":"string","nodeType":"YulLiteral","src":"43339:14:18","type":"","value":"AmountIsZero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43316:6:18"},"nodeType":"YulFunctionCall","src":"43316:38:18"},"nodeType":"YulExpressionStatement","src":"43316:38:18"}]},"name":"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"43297:6:18","type":""}],"src":"43199:162:18"},{"body":{"nodeType":"YulBlock","src":"43513:220:18","statements":[{"nodeType":"YulAssignment","src":"43523:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43589:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"43594:2:18","type":"","value":"12"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43530:58:18"},"nodeType":"YulFunctionCall","src":"43530:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"43523:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43695:3:18"}],"functionName":{"name":"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","nodeType":"YulIdentifier","src":"43606:88:18"},"nodeType":"YulFunctionCall","src":"43606:93:18"},"nodeType":"YulExpressionStatement","src":"43606:93:18"},{"nodeType":"YulAssignment","src":"43708:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43719:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"43724:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43715:3:18"},"nodeType":"YulFunctionCall","src":"43715:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"43708:3:18"}]}]},"name":"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"43501:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"43509:3:18","type":""}],"src":"43367:366:18"},{"body":{"nodeType":"YulBlock","src":"43910:248:18","statements":[{"nodeType":"YulAssignment","src":"43920:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43932:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"43943:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43928:3:18"},"nodeType":"YulFunctionCall","src":"43928:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43920:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43967:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"43978:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43963:3:18"},"nodeType":"YulFunctionCall","src":"43963:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43986:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"43992:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43982:3:18"},"nodeType":"YulFunctionCall","src":"43982:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43956:6:18"},"nodeType":"YulFunctionCall","src":"43956:47:18"},"nodeType":"YulExpressionStatement","src":"43956:47:18"},{"nodeType":"YulAssignment","src":"44012:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44146:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44020:124:18"},"nodeType":"YulFunctionCall","src":"44020:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44012:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43890:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"43905:4:18","type":""}],"src":"43739:419:18"},{"body":{"nodeType":"YulBlock","src":"44270:60:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"44292:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"44300:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44288:3:18"},"nodeType":"YulFunctionCall","src":"44288:14:18"},{"hexValue":"5468726f775a65726f41646472657373","kind":"string","nodeType":"YulLiteral","src":"44304:18:18","type":"","value":"ThrowZeroAddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44281:6:18"},"nodeType":"YulFunctionCall","src":"44281:42:18"},"nodeType":"YulExpressionStatement","src":"44281:42:18"}]},"name":"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"44262:6:18","type":""}],"src":"44164:166:18"},{"body":{"nodeType":"YulBlock","src":"44482:220:18","statements":[{"nodeType":"YulAssignment","src":"44492:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44558:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"44563:2:18","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44499:58:18"},"nodeType":"YulFunctionCall","src":"44499:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"44492:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44664:3:18"}],"functionName":{"name":"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","nodeType":"YulIdentifier","src":"44575:88:18"},"nodeType":"YulFunctionCall","src":"44575:93:18"},"nodeType":"YulExpressionStatement","src":"44575:93:18"},{"nodeType":"YulAssignment","src":"44677:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44688:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"44693:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44684:3:18"},"nodeType":"YulFunctionCall","src":"44684:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"44677:3:18"}]}]},"name":"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"44470:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"44478:3:18","type":""}],"src":"44336:366:18"},{"body":{"nodeType":"YulBlock","src":"44879:248:18","statements":[{"nodeType":"YulAssignment","src":"44889:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44901:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"44912:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44897:3:18"},"nodeType":"YulFunctionCall","src":"44897:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44889:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44936:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"44947:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44932:3:18"},"nodeType":"YulFunctionCall","src":"44932:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44955:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"44961:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"44951:3:18"},"nodeType":"YulFunctionCall","src":"44951:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44925:6:18"},"nodeType":"YulFunctionCall","src":"44925:47:18"},"nodeType":"YulExpressionStatement","src":"44925:47:18"},{"nodeType":"YulAssignment","src":"44981:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45115:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44989:124:18"},"nodeType":"YulFunctionCall","src":"44989:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44981:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"44859:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"44874:4:18","type":""}],"src":"44708:419:18"},{"body":{"nodeType":"YulBlock","src":"45239:66:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45261:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"45269:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45257:3:18"},"nodeType":"YulFunctionCall","src":"45257:14:18"},{"hexValue":"496e76616c6964496e737469747574696f6e436f6465","kind":"string","nodeType":"YulLiteral","src":"45273:24:18","type":"","value":"InvalidInstitutionCode"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45250:6:18"},"nodeType":"YulFunctionCall","src":"45250:48:18"},"nodeType":"YulExpressionStatement","src":"45250:48:18"}]},"name":"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"45231:6:18","type":""}],"src":"45133:172:18"},{"body":{"nodeType":"YulBlock","src":"45457:220:18","statements":[{"nodeType":"YulAssignment","src":"45467:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45533:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"45538:2:18","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45474:58:18"},"nodeType":"YulFunctionCall","src":"45474:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"45467:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45639:3:18"}],"functionName":{"name":"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","nodeType":"YulIdentifier","src":"45550:88:18"},"nodeType":"YulFunctionCall","src":"45550:93:18"},"nodeType":"YulExpressionStatement","src":"45550:93:18"},{"nodeType":"YulAssignment","src":"45652:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45663:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"45668:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45659:3:18"},"nodeType":"YulFunctionCall","src":"45659:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"45652:3:18"}]}]},"name":"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"45445:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"45453:3:18","type":""}],"src":"45311:366:18"},{"body":{"nodeType":"YulBlock","src":"45854:248:18","statements":[{"nodeType":"YulAssignment","src":"45864:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45876:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"45887:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45872:3:18"},"nodeType":"YulFunctionCall","src":"45872:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45864:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45911:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"45922:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45907:3:18"},"nodeType":"YulFunctionCall","src":"45907:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45930:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"45936:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"45926:3:18"},"nodeType":"YulFunctionCall","src":"45926:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45900:6:18"},"nodeType":"YulFunctionCall","src":"45900:47:18"},"nodeType":"YulExpressionStatement","src":"45900:47:18"},{"nodeType":"YulAssignment","src":"45956:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46090:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45964:124:18"},"nodeType":"YulFunctionCall","src":"45964:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45956:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"45834:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"45849:4:18","type":""}],"src":"45683:419:18"},{"body":{"nodeType":"YulBlock","src":"46214:69:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46236:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"46244:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46232:3:18"},"nodeType":"YulFunctionCall","src":"46232:14:18"},{"hexValue":"496e76616c696453656e646572466565526563697069656e74","kind":"string","nodeType":"YulLiteral","src":"46248:27:18","type":"","value":"InvalidSenderFeeRecipient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46225:6:18"},"nodeType":"YulFunctionCall","src":"46225:51:18"},"nodeType":"YulExpressionStatement","src":"46225:51:18"}]},"name":"store_literal_in_memory_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"46206:6:18","type":""}],"src":"46108:175:18"},{"body":{"nodeType":"YulBlock","src":"46435:220:18","statements":[{"nodeType":"YulAssignment","src":"46445:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46511:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"46516:2:18","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"46452:58:18"},"nodeType":"YulFunctionCall","src":"46452:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"46445:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46617:3:18"}],"functionName":{"name":"store_literal_in_memory_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8","nodeType":"YulIdentifier","src":"46528:88:18"},"nodeType":"YulFunctionCall","src":"46528:93:18"},"nodeType":"YulExpressionStatement","src":"46528:93:18"},{"nodeType":"YulAssignment","src":"46630:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46641:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"46646:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46637:3:18"},"nodeType":"YulFunctionCall","src":"46637:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"46630:3:18"}]}]},"name":"abi_encode_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"46423:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"46431:3:18","type":""}],"src":"46289:366:18"},{"body":{"nodeType":"YulBlock","src":"46832:248:18","statements":[{"nodeType":"YulAssignment","src":"46842:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46854:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"46865:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46850:3:18"},"nodeType":"YulFunctionCall","src":"46850:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46842:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46889:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"46900:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46885:3:18"},"nodeType":"YulFunctionCall","src":"46885:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46908:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"46914:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"46904:3:18"},"nodeType":"YulFunctionCall","src":"46904:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46878:6:18"},"nodeType":"YulFunctionCall","src":"46878:47:18"},"nodeType":"YulExpressionStatement","src":"46878:47:18"},{"nodeType":"YulAssignment","src":"46934:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"47068:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"46942:124:18"},"nodeType":"YulFunctionCall","src":"46942:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46934:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"46812:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"46827:4:18","type":""}],"src":"46661:419:18"},{"body":{"nodeType":"YulBlock","src":"47134:362:18","statements":[{"nodeType":"YulAssignment","src":"47144:25:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"47167:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"47149:17:18"},"nodeType":"YulFunctionCall","src":"47149:20:18"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"47144:1:18"}]},{"nodeType":"YulAssignment","src":"47178:25:18","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"47201:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"47183:17:18"},"nodeType":"YulFunctionCall","src":"47183:20:18"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"47178:1:18"}]},{"nodeType":"YulVariableDeclaration","src":"47212:28:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"47235:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"47238:1:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"47231:3:18"},"nodeType":"YulFunctionCall","src":"47231:9:18"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"47216:11:18","type":""}]},{"nodeType":"YulAssignment","src":"47249:41:18","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"47278:11:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"47260:17:18"},"nodeType":"YulFunctionCall","src":"47260:30:18"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"47249:7:18"}]},{"body":{"nodeType":"YulBlock","src":"47467:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"47469:16:18"},"nodeType":"YulFunctionCall","src":"47469:18:18"},"nodeType":"YulExpressionStatement","src":"47469:18:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"47400:1:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"47393:6:18"},"nodeType":"YulFunctionCall","src":"47393:9:18"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"47423:1:18"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"47430:7:18"},{"name":"x","nodeType":"YulIdentifier","src":"47439:1:18"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"47426:3:18"},"nodeType":"YulFunctionCall","src":"47426:15:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"47420:2:18"},"nodeType":"YulFunctionCall","src":"47420:22:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"47373:2:18"},"nodeType":"YulFunctionCall","src":"47373:83:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"47353:6:18"},"nodeType":"YulFunctionCall","src":"47353:113:18"},"nodeType":"YulIf","src":"47350:139:18"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"47117:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"47120:1:18","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"47126:7:18","type":""}],"src":"47086:410:18"},{"body":{"nodeType":"YulBlock","src":"47530:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"47547:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"47550:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47540:6:18"},"nodeType":"YulFunctionCall","src":"47540:88:18"},"nodeType":"YulExpressionStatement","src":"47540:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"47644:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"47647:4:18","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47637:6:18"},"nodeType":"YulFunctionCall","src":"47637:15:18"},"nodeType":"YulExpressionStatement","src":"47637:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"47668:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"47671:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"47661:6:18"},"nodeType":"YulFunctionCall","src":"47661:15:18"},"nodeType":"YulExpressionStatement","src":"47661:15:18"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"47502:180:18"},{"body":{"nodeType":"YulBlock","src":"47730:143:18","statements":[{"nodeType":"YulAssignment","src":"47740:25:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"47763:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"47745:17:18"},"nodeType":"YulFunctionCall","src":"47745:20:18"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"47740:1:18"}]},{"nodeType":"YulAssignment","src":"47774:25:18","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"47797:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"47779:17:18"},"nodeType":"YulFunctionCall","src":"47779:20:18"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"47774:1:18"}]},{"body":{"nodeType":"YulBlock","src":"47821:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"47823:16:18"},"nodeType":"YulFunctionCall","src":"47823:18:18"},"nodeType":"YulExpressionStatement","src":"47823:18:18"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"47818:1:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"47811:6:18"},"nodeType":"YulFunctionCall","src":"47811:9:18"},"nodeType":"YulIf","src":"47808:35:18"},{"nodeType":"YulAssignment","src":"47853:14:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"47862:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"47865:1:18"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"47858:3:18"},"nodeType":"YulFunctionCall","src":"47858:9:18"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"47853:1:18"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"47719:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"47722:1:18","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"47728:1:18","type":""}],"src":"47688:185:18"},{"body":{"nodeType":"YulBlock","src":"47985:60:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"48007:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"48015:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48003:3:18"},"nodeType":"YulFunctionCall","src":"48003:14:18"},{"hexValue":"53656e646572466565546f6f48696768","kind":"string","nodeType":"YulLiteral","src":"48019:18:18","type":"","value":"SenderFeeTooHigh"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47996:6:18"},"nodeType":"YulFunctionCall","src":"47996:42:18"},"nodeType":"YulExpressionStatement","src":"47996:42:18"}]},"name":"store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"47977:6:18","type":""}],"src":"47879:166:18"},{"body":{"nodeType":"YulBlock","src":"48197:220:18","statements":[{"nodeType":"YulAssignment","src":"48207:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48273:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"48278:2:18","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48214:58:18"},"nodeType":"YulFunctionCall","src":"48214:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"48207:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48379:3:18"}],"functionName":{"name":"store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4","nodeType":"YulIdentifier","src":"48290:88:18"},"nodeType":"YulFunctionCall","src":"48290:93:18"},"nodeType":"YulExpressionStatement","src":"48290:93:18"},{"nodeType":"YulAssignment","src":"48392:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48403:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"48408:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48399:3:18"},"nodeType":"YulFunctionCall","src":"48399:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"48392:3:18"}]}]},"name":"abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"48185:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"48193:3:18","type":""}],"src":"48051:366:18"},{"body":{"nodeType":"YulBlock","src":"48594:248:18","statements":[{"nodeType":"YulAssignment","src":"48604:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48616:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"48627:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48612:3:18"},"nodeType":"YulFunctionCall","src":"48612:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48604:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48651:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"48662:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48647:3:18"},"nodeType":"YulFunctionCall","src":"48647:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"48670:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"48676:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"48666:3:18"},"nodeType":"YulFunctionCall","src":"48666:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48640:6:18"},"nodeType":"YulFunctionCall","src":"48640:47:18"},"nodeType":"YulExpressionStatement","src":"48640:47:18"},{"nodeType":"YulAssignment","src":"48696:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"48830:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48704:124:18"},"nodeType":"YulFunctionCall","src":"48704:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48696:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48574:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"48589:4:18","type":""}],"src":"48423:419:18"},{"body":{"nodeType":"YulBlock","src":"48954:76:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"48976:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"48984:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48972:3:18"},"nodeType":"YulFunctionCall","src":"48972:14:18"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"48988:34:18","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48965:6:18"},"nodeType":"YulFunctionCall","src":"48965:58:18"},"nodeType":"YulExpressionStatement","src":"48965:58:18"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"48946:6:18","type":""}],"src":"48848:182:18"},{"body":{"nodeType":"YulBlock","src":"49182:220:18","statements":[{"nodeType":"YulAssignment","src":"49192:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49258:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"49263:2:18","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"49199:58:18"},"nodeType":"YulFunctionCall","src":"49199:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"49192:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49364:3:18"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"49275:88:18"},"nodeType":"YulFunctionCall","src":"49275:93:18"},"nodeType":"YulExpressionStatement","src":"49275:93:18"},{"nodeType":"YulAssignment","src":"49377:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49388:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"49393:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49384:3:18"},"nodeType":"YulFunctionCall","src":"49384:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"49377:3:18"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"49170:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"49178:3:18","type":""}],"src":"49036:366:18"},{"body":{"nodeType":"YulBlock","src":"49579:248:18","statements":[{"nodeType":"YulAssignment","src":"49589:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49601:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"49612:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49597:3:18"},"nodeType":"YulFunctionCall","src":"49597:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49589:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49636:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"49647:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49632:3:18"},"nodeType":"YulFunctionCall","src":"49632:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"49655:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"49661:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"49651:3:18"},"nodeType":"YulFunctionCall","src":"49651:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49625:6:18"},"nodeType":"YulFunctionCall","src":"49625:47:18"},"nodeType":"YulExpressionStatement","src":"49625:47:18"},{"nodeType":"YulAssignment","src":"49681:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"49815:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"49689:124:18"},"nodeType":"YulFunctionCall","src":"49689:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49681:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49559:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"49574:4:18","type":""}],"src":"49408:419:18"},{"body":{"nodeType":"YulBlock","src":"49877:147:18","statements":[{"nodeType":"YulAssignment","src":"49887:25:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"49910:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"49892:17:18"},"nodeType":"YulFunctionCall","src":"49892:20:18"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"49887:1:18"}]},{"nodeType":"YulAssignment","src":"49921:25:18","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"49944:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"49926:17:18"},"nodeType":"YulFunctionCall","src":"49926:20:18"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"49921:1:18"}]},{"nodeType":"YulAssignment","src":"49955:16:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"49966:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"49969:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49962:3:18"},"nodeType":"YulFunctionCall","src":"49962:9:18"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"49955:3:18"}]},{"body":{"nodeType":"YulBlock","src":"49995:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"49997:16:18"},"nodeType":"YulFunctionCall","src":"49997:18:18"},"nodeType":"YulExpressionStatement","src":"49997:18:18"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"49987:1:18"},{"name":"sum","nodeType":"YulIdentifier","src":"49990:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"49984:2:18"},"nodeType":"YulFunctionCall","src":"49984:10:18"},"nodeType":"YulIf","src":"49981:36:18"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"49864:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"49867:1:18","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"49873:3:18","type":""}],"src":"49833:191:18"},{"body":{"nodeType":"YulBlock","src":"50136:124:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"50158:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"50166:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50154:3:18"},"nodeType":"YulFunctionCall","src":"50154:14:18"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"50170:34:18","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50147:6:18"},"nodeType":"YulFunctionCall","src":"50147:58:18"},"nodeType":"YulExpressionStatement","src":"50147:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"50226:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"50234:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50222:3:18"},"nodeType":"YulFunctionCall","src":"50222:15:18"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"50239:13:18","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50215:6:18"},"nodeType":"YulFunctionCall","src":"50215:38:18"},"nodeType":"YulExpressionStatement","src":"50215:38:18"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"50128:6:18","type":""}],"src":"50030:230:18"},{"body":{"nodeType":"YulBlock","src":"50412:220:18","statements":[{"nodeType":"YulAssignment","src":"50422:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50488:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"50493:2:18","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"50429:58:18"},"nodeType":"YulFunctionCall","src":"50429:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"50422:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50594:3:18"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"50505:88:18"},"nodeType":"YulFunctionCall","src":"50505:93:18"},"nodeType":"YulExpressionStatement","src":"50505:93:18"},{"nodeType":"YulAssignment","src":"50607:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50618:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"50623:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50614:3:18"},"nodeType":"YulFunctionCall","src":"50614:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"50607:3:18"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"50400:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"50408:3:18","type":""}],"src":"50266:366:18"},{"body":{"nodeType":"YulBlock","src":"50809:248:18","statements":[{"nodeType":"YulAssignment","src":"50819:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50831:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"50842:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50827:3:18"},"nodeType":"YulFunctionCall","src":"50827:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50819:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50866:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"50877:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50862:3:18"},"nodeType":"YulFunctionCall","src":"50862:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"50885:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"50891:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"50881:3:18"},"nodeType":"YulFunctionCall","src":"50881:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50855:6:18"},"nodeType":"YulFunctionCall","src":"50855:47:18"},"nodeType":"YulExpressionStatement","src":"50855:47:18"},{"nodeType":"YulAssignment","src":"50911:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"51045:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"50919:124:18"},"nodeType":"YulFunctionCall","src":"50919:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50911:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50789:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"50804:4:18","type":""}],"src":"50638:419:18"},{"body":{"nodeType":"YulBlock","src":"51169:64:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"51191:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"51199:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51187:3:18"},"nodeType":"YulFunctionCall","src":"51187:14:18"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"51203:22:18","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51180:6:18"},"nodeType":"YulFunctionCall","src":"51180:46:18"},"nodeType":"YulExpressionStatement","src":"51180:46:18"}]},"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"51161:6:18","type":""}],"src":"51063:170:18"},{"body":{"nodeType":"YulBlock","src":"51385:220:18","statements":[{"nodeType":"YulAssignment","src":"51395:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51461:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"51466:2:18","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"51402:58:18"},"nodeType":"YulFunctionCall","src":"51402:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"51395:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51567:3:18"}],"functionName":{"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulIdentifier","src":"51478:88:18"},"nodeType":"YulFunctionCall","src":"51478:93:18"},"nodeType":"YulExpressionStatement","src":"51478:93:18"},{"nodeType":"YulAssignment","src":"51580:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51591:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"51596:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51587:3:18"},"nodeType":"YulFunctionCall","src":"51587:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"51580:3:18"}]}]},"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"51373:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"51381:3:18","type":""}],"src":"51239:366:18"},{"body":{"nodeType":"YulBlock","src":"51782:248:18","statements":[{"nodeType":"YulAssignment","src":"51792:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51804:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"51815:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51800:3:18"},"nodeType":"YulFunctionCall","src":"51800:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"51792:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51839:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"51850:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51835:3:18"},"nodeType":"YulFunctionCall","src":"51835:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"51858:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"51864:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"51854:3:18"},"nodeType":"YulFunctionCall","src":"51854:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51828:6:18"},"nodeType":"YulFunctionCall","src":"51828:47:18"},"nodeType":"YulExpressionStatement","src":"51828:47:18"},{"nodeType":"YulAssignment","src":"51884:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"52018:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"51892:124:18"},"nodeType":"YulFunctionCall","src":"51892:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"51884:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"51762:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"51777:4:18","type":""}],"src":"51611:419:18"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    // struct PaycrestSettingManager.Institution -> struct PaycrestSettingManager.Institution\n    function abi_encode_t_struct$_Institution_$3791_memory_ptr_to_t_struct$_Institution_$3791_memory_ptr(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // code\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Institution_$3791_memory_ptr_to_t_struct$_Institution_$3791_memory_ptr(value0, pos) -> updatedPos {\n        abi_encode_t_struct$_Institution_$3791_memory_ptr_to_t_struct$_Institution_$3791_memory_ptr(value0, pos)\n        updatedPos := add(pos, 0x40)\n    }\n\n    function array_nextElement_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct PaycrestSettingManager.Institution[] -> struct PaycrestSettingManager.Institution[]\n    function abi_encode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_Institution_$3791_memory_ptr_to_t_struct$_Institution_$3791_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_uint96(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffff)\n    }\n\n    function validator_revert_t_uint96(value) {\n        if iszero(eq(value, cleanup_t_uint96(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint96(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint96(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // string\n    function abi_decode_t_string_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9 {\n        if slt(sub(dataEnd, headStart), 288) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint96(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 224\n\n            value7 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 256))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value8, value9 := abi_decode_t_string_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct PaycrestSettingManager.Institution\n    function abi_decode_t_struct$_Institution_$3791_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // code\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // name\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_available_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Institution_$3791_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_bytes32t_bytes32t_addresst_uint64t_bool(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint96_to_t_uint96(value, pos) {\n        mstore(pos, cleanup_t_uint96(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    // struct IPaycrest.Order -> struct IPaycrest.Order\n    function abi_encode_t_struct$_Order_$4094_memory_ptr_to_t_struct$_Order_$4094_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x0120)\n\n        {\n            // seller\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // token\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // senderFeeRecipient\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // senderFee\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // rate\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint96_to_t_uint96(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // isFulfilled\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // refundAddress\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0xc0))\n        }\n\n        {\n            // currentBPS\n\n            let memberValue0 := mload(add(value, 0xe0))\n            abi_encode_t_uint96_to_t_uint96(memberValue0, add(pos, 0xe0))\n        }\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x0100))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x0100))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_Order_$4094_memory_ptr__to_t_struct$_Order_$4094_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 288)\n\n        abi_encode_t_struct$_Order_$4094_memory_ptr_to_t_struct$_Order_$4094_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    // struct PaycrestSettingManager.InstitutionByCode -> struct PaycrestSettingManager.InstitutionByCode\n    function abi_encode_t_struct$_InstitutionByCode_$3796_memory_ptr_to_t_struct$_InstitutionByCode_$3796_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // currency\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_InstitutionByCode_$3796_memory_ptr__to_t_struct$_InstitutionByCode_$3796_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_struct$_InstitutionByCode_$3796_memory_ptr_to_t_struct$_InstitutionByCode_$3796_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint64_t_uint256__to_t_uint64_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint96_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint96(value)))\n    }\n\n    function abi_encode_t_uint96_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_uint96_to_t_uint256(value))\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // string -> string\n    function abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_uint96_t_bytes32_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_bytes32_t_bytes32_t_string_memory_ptr__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_uint96_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(value3, value4,  tail)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243(memPtr) {\n\n        mstore(add(memPtr, 0), \"OnlyAggregator\")\n\n    }\n\n    function abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5(memPtr) {\n\n        mstore(add(memPtr, 0), \"OrderFulfilled\")\n\n    }\n\n    function abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint96(x, y) -> diff {\n        x := cleanup_t_uint96(x)\n        y := cleanup_t_uint96(y)\n        diff := sub(x, y)\n\n        if gt(diff, 0xffffffffffffffffffffffff) { panic_error_0x11() }\n\n    }\n\n    function convert_t_uint64_to_t_uint96(value) -> converted {\n        converted := cleanup_t_uint96(identity(cleanup_t_uint64(value)))\n    }\n\n    function abi_encode_t_uint64_to_t_uint96_fromStack(value, pos) {\n        mstore(pos, convert_t_uint64_to_t_uint96(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_uint64__to_t_bytes32_t_bytes32_t_uint96__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint64_to_t_uint96_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(memPtr) {\n\n        mstore(add(memPtr, 0), \"Paycrest: zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_length_t_bytes_calldata_ptr(value, len) -> length {\n\n        length := len\n\n    }\n\n    function array_dataslot_t_bytes_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_bytes_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_bytes_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage(slot, src, len) {\n\n        let newLen := array_length_t_bytes_calldata_ptr(src, len)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_bytes_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := calldataload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value0, value1,  tail)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_bytes32__to_t_uint256_t_bytes32__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1(memPtr) {\n\n        mstore(add(memPtr, 0), \"TokenNotSupported\")\n\n    }\n\n    function abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2(memPtr) {\n\n        mstore(add(memPtr, 0), \"AmountIsZero\")\n\n    }\n\n    function abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)\n        store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7(memPtr) {\n\n        mstore(add(memPtr, 0), \"ThrowZeroAddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5(memPtr) {\n\n        mstore(add(memPtr, 0), \"InvalidInstitutionCode\")\n\n    }\n\n    function abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8(memPtr) {\n\n        mstore(add(memPtr, 0), \"InvalidSenderFeeRecipient\")\n\n    }\n\n    function abi_encode_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4(memPtr) {\n\n        mstore(add(memPtr, 0), \"SenderFeeTooHigh\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":18,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101375760003560e01c806379a0effb116100b85780638da5cb5b1161007c5780638da5cb5b1461031557806399e3c0b414610333578063b810c6361461034f578063cb79455b1461036e578063d28a8d321461038a578063f2fde38b146103ba57610137565b806379a0effb146102995780638129fc1c146102b55780638456cb59146102bf57806384630736146102c957806387490d86146102e557610137565b80635c975abb116100ff5780635c975abb146101e05780635fe44cac146101fe578063715018a61461022f57806375151b6314610239578063768c6ec01461026957610137565b8063026213381461013c5780632654ec7e1461016c578063322008821461019c5780633ad59dbc146101b85780633f4ba83a146101d6575b600080fd5b61015660048036038101906101519190612599565b6103d6565b60405161016391906126b3565b60405180910390f35b61018660048036038101906101819190612812565b610514565b604051610193919061290c565b60405180910390f35b6101b660048036038101906101b19190612acb565b61096a565b005b6101c0610a7e565b6040516101cd9190612ba6565b60405180910390f35b6101de610b10565b005b6101e8610b22565b6040516101f59190612be3565b60405180910390f35b61021860048036038101906102139190612c6a565b610b39565b604051610226929190612d06565b60405180910390f35b610237610f32565b005b610253600480360381019061024e9190612d2f565b610f46565b6040516102609190612be3565b60405180910390f35b610283600480360381019061027e9190612599565b610f9c565b6040516102909190612e4f565b60405180910390f35b6102b360048036038101906102ae9190612e6b565b6111cd565b005b6102bd61130a565b005b6102c761145a565b005b6102e360048036038101906102de9190612eab565b61146c565b005b6102ff60048036038101906102fa9190612599565b6114d7565b60405161030c9190612f07565b60405180910390f35b61031d611518565b60405161032a9190612f22565b60405180910390f35b61034d60048036038101906103489190612f3d565b611542565b005b610357611678565b604051610365929190612fae565b60405180910390f35b6103886004803603810190610383919061302d565b61169d565b005b6103a4600480360381019061039f919061307a565b6116f4565b6040516103b19190612be3565b60405180910390f35b6103d460048036038101906103cf9190612d2f565b611a8d565b005b60606000609c6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156104535783829060005260206000209060020201604051806040016040529081600082015481526020016001820154815250508152602001906001019061040d565b50505050905060008151905060008167ffffffffffffffff81111561047b5761047a612938565b5b6040519080825280602002602001820160405280156104b457816020015b6104a1612433565b8152602001906001900390816104995790505b50905060005b82811015610508578381815181106104d5576104d46130cd565b5b60200260200101518282815181106104f0576104ef6130cd565b5b602002602001018190525080806001019150506104ba565b50809350505050919050565b600061051e611b10565b61052c8b8b8689898e611b5a565b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd33308d6040518463ffffffff1660e01b8152600401610569939291906130fc565b6020604051808303816000875af1158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac9190613148565b5060d160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906105fd906131a4565b91905055503360d160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516020016106549291906131ec565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001886bffffffffffffffffffffffff1681526020016000151581526020018573ffffffffffffffffffffffffffffffffffffffff16815260200160655467ffffffffffffffff166bffffffffffffffffffffffff1681526020018b81525060d0600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506101008201518160060155905050808a8c73ffffffffffffffffffffffffffffffffffffffff167f2c205f90c01160d42994a0eb521810056d94bb82a1fcb038d7179c4158a1f15b8a8d8d898960405161095495949392919061329d565b60405180910390a49a9950505050505050505050565b610972611dd1565b60008151905060005b81811015610a7857609c60008581526020019081526020016000208382815181106109a9576109a86130cd565b5b60200260200101519080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506040518060400160405280848381518110610a0e57610a0d6130cd565b5b602002602001015160200151815260200185815250609d6000858481518110610a3a57610a396130cd565b5b60200260200101516000015181526020019081526020016000206000820151816000015560208201518160010155905050808060010191505061097b565b50505050565b606060688054610a8d9061331a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab99061331a565b8015610b065780601f10610adb57610100808354040283529160200191610b06565b820191906000526020600020905b815481529060010190602001808311610ae957829003601f168201915b5050505050905090565b610b18611dd1565b610b20611e4f565b565b6000609e60009054906101000a900460ff16905090565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc390613397565b60405180910390fd5b60d06000888152602001908152602001600020600401600c9054906101000a900460ff1615610c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2790613403565b60405180910390fd5b600060d0600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508467ffffffffffffffff1660d060008a815260200190815260200160002060050160148282829054906101000a90046bffffffffffffffffffffffff16610cb29190613423565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506000610cf7898767ffffffffffffffff1687611eb2565b9050600060d060008b815260200190815260200160002060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1603610d9657600160d060008b8152602001908152602001600020600401600c6101000a81548160ff021916908315150217905550600060d060008b8152602001908152602001600020600301541115610d9557610d9489611fc3565b5b5b600081600001511115610e49578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600001516040518363ffffffff1660e01b8152600401610e049291906131ec565b6020604051808303816000875af1158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e479190613148565b505b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8883602001516040518363ffffffff1660e01b8152600401610e889291906131ec565b6020604051808303816000875af1158015610ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecb9190613148565b508673ffffffffffffffffffffffffffffffffffffffff16897ff26de978cbaea68ea699627155a10ad53df3321b0f95a08264c0cfd6d4c053268c8b8a604051610f1793929190613494565b60405180910390a38882935093505050965096945050505050565b610f3a611dd1565b610f446000612117565b565b6000609b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610fa4612453565b60d06000838152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff161515151581526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b6111d5611dd1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b90613517565b60405180910390fd5b7f747265617375727900000000000000000000000000000000000000000000000082036112ad5780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7fd8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516112fe9190612f22565b60405180910390a15050565b60008060019054906101000a900460ff1615905080801561133b5750600160008054906101000a900460ff1660ff16105b80611368575061134a306121dd565b1580156113675750600160008054906101000a900460ff1660ff16145b5b6113a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139e906135a9565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156113e4576001600060016101000a81548160ff0219169083151502179055505b620186a06065819055506113f6612200565b6113fe612259565b80156114575760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161144e9190613611565b60405180910390a15b50565b611462611dd1565b61146a6122b2565b565b611474611dd1565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fb94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e26446816040516114cc919061362c565b60405180910390a150565b6114df612515565b609d6000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61154a611dd1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b090613517565b60405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036116385780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161166b93929190613647565b60405180910390a1505050565b600080606660009054906101000a900467ffffffffffffffff16606554915091509091565b6116a5611dd1565b8181606891826116b692919061382b565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef82826040516116e8929190613928565b60405180910390a15050565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177d90613397565b60405180910390fd5b60d06000848152602001908152602001600020600401600c9054906101000a900460ff16156117ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e190613403565b60405180910390fd5b60008460d060008681526020019081526020016000206006015461180e919061394c565b905060d0600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518363ffffffff1660e01b81526004016118a39291906131ec565b6020604051808303816000875af11580156118c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e69190613148565b50600160d06000868152602001908152602001600020600401600c6101000a81548160ff021916908315150217905550600060d0600086815260200190815260200160002060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060d0600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60d0600087815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611a039291906131ec565b6020604051808303816000875af1158015611a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a469190613148565b50837fa8e0e11a759cccce708ff767acde5348e3e96706e2cce8301462510ce02fa1a68685604051611a79929190613980565b60405180910390a260019150509392505050565b611a95611dd1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afb90613a1b565b60405180910390fd5b611b0d81612117565b50565b611b18610b22565b15611b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4f90613a87565b60405180910390fd5b565b609b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdd90613af3565b60405180910390fd5b60008511611c29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2090613b5f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8f90613bcb565b60405180910390fd5b6000801b609d60008381526020019081526020016000206000015403611cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cea90613c37565b60405180910390fd5b6000821115611d6c57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6290613ca3565b60405180910390fd5b5b6065546101f486611d7d9190613cc3565b611d879190613d34565b821115611dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc090613db1565b60405180910390fd5b505050505050565b611dd9612315565b73ffffffffffffffffffffffffffffffffffffffff16611df7611518565b73ffffffffffffffffffffffffffffffffffffffff1614611e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4490613e1d565b60405180910390fd5b565b611e5761231d565b6000609e60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e9b612315565b604051611ea89190612f22565b60405180910390a1565b611eba612535565b600060d0600086815260200190815260200160002060060154905060d060008681526020019081526020016000206003015481611ef7919061394c565b9050606554846bffffffffffffffffffffffff1682611f169190613cc3565b611f209190613d34565b826020018181525050606554606660009054906101000a900467ffffffffffffffff1667ffffffffffffffff168360200151611f5c9190613cc3565b611f669190613d34565b82600001818152505081600001518260200151611f83919061394c565b8260200181815250508215611fbb57816000015182602001818151611fa89190613e3d565b9150818152505060008260000181815250505b509392505050565b600060d0600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060d0600084815260200190815260200160002060030154905060d0600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161208a9291906131ec565b6020604051808303816000875af11580156120a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cd9190613148565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661224f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224690613ee3565b60405180910390fd5b612257612366565b565b600060019054906101000a900460ff166122a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229f90613ee3565b60405180910390fd5b6122b06123c7565b565b6122ba611b10565b6001609e60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122fe612315565b60405161230b9190612f22565b60405180910390a1565b600033905090565b612325610b22565b612364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235b90613f4f565b60405180910390fd5b565b600060019054906101000a900460ff166123b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ac90613ee3565b60405180910390fd5b6123c56123c0612315565b612117565b565b600060019054906101000a900460ff16612416576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240d90613ee3565b60405180910390fd5b6000609e60006101000a81548160ff021916908315150217905550565b604051806040016040528060008019168152602001600080191681525090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006bffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008019168152602001600080191681525090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61257681612563565b811461258157600080fd5b50565b6000813590506125938161256d565b92915050565b6000602082840312156125af576125ae612559565b5b60006125bd84828501612584565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125fb81612563565b82525050565b60408201600082015161261760008501826125f2565b50602082015161262a60208501826125f2565b50505050565b600061263c8383612601565b60408301905092915050565b6000602082019050919050565b6000612660826125c6565b61266a81856125d1565b9350612675836125e2565b8060005b838110156126a657815161268d8882612630565b975061269883612648565b925050600181019050612679565b5085935050505092915050565b600060208201905081810360008301526126cd8184612655565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612700826126d5565b9050919050565b612710816126f5565b811461271b57600080fd5b50565b60008135905061272d81612707565b92915050565b6000819050919050565b61274681612733565b811461275157600080fd5b50565b6000813590506127638161273d565b92915050565b60006bffffffffffffffffffffffff82169050919050565b61278a81612769565b811461279557600080fd5b50565b6000813590506127a781612781565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126127d2576127d16127ad565b5b8235905067ffffffffffffffff8111156127ef576127ee6127b2565b5b60208301915083600182028301111561280b5761280a6127b7565b5b9250929050565b6000806000806000806000806000806101208b8d03121561283657612835612559565b5b60006128448d828e0161271e565b9a505060206128558d828e01612754565b99505060406128668d828e01612584565b98505060606128778d828e01612584565b97505060806128888d828e01612798565b96505060a06128998d828e0161271e565b95505060c06128aa8d828e01612754565b94505060e06128bb8d828e0161271e565b9350506101008b013567ffffffffffffffff8111156128dd576128dc61255e565b5b6128e98d828e016127bc565b92509250509295989b9194979a5092959850565b61290681612563565b82525050565b600060208201905061292160008301846128fd565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61297082612927565b810181811067ffffffffffffffff8211171561298f5761298e612938565b5b80604052505050565b60006129a261254f565b90506129ae8282612967565b919050565b600067ffffffffffffffff8211156129ce576129cd612938565b5b602082029050602081019050919050565b600080fd5b6000604082840312156129fa576129f96129df565b5b612a046040612998565b90506000612a1484828501612584565b6000830152506020612a2884828501612584565b60208301525092915050565b6000612a47612a42846129b3565b612998565b90508083825260208201905060408402830185811115612a6a57612a696127b7565b5b835b81811015612a935780612a7f88826129e4565b845260208401935050604081019050612a6c565b5050509392505050565b600082601f830112612ab257612ab16127ad565b5b8135612ac2848260208601612a34565b91505092915050565b60008060408385031215612ae257612ae1612559565b5b6000612af085828601612584565b925050602083013567ffffffffffffffff811115612b1157612b1061255e565b5b612b1d85828601612a9d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b61578082015181840152602081019050612b46565b60008484015250505050565b6000612b7882612b27565b612b828185612b32565b9350612b92818560208601612b43565b612b9b81612927565b840191505092915050565b60006020820190508181036000830152612bc08184612b6d565b905092915050565b60008115159050919050565b612bdd81612bc8565b82525050565b6000602082019050612bf86000830184612bd4565b92915050565b600067ffffffffffffffff82169050919050565b612c1b81612bfe565b8114612c2657600080fd5b50565b600081359050612c3881612c12565b92915050565b612c4781612bc8565b8114612c5257600080fd5b50565b600081359050612c6481612c3e565b92915050565b60008060008060008060c08789031215612c8757612c86612559565b5b6000612c9589828a01612584565b9650506020612ca689828a01612584565b9550506040612cb789828a01612584565b9450506060612cc889828a0161271e565b9350506080612cd989828a01612c29565b92505060a0612cea89828a01612c55565b9150509295509295509295565b612d00816126f5565b82525050565b6000604082019050612d1b60008301856128fd565b612d286020830184612cf7565b9392505050565b600060208284031215612d4557612d44612559565b5b6000612d538482850161271e565b91505092915050565b612d65816126f5565b82525050565b612d7481612733565b82525050565b612d8381612769565b82525050565b612d9281612bc8565b82525050565b61012082016000820151612daf6000850182612d5c565b506020820151612dc26020850182612d5c565b506040820151612dd56040850182612d5c565b506060820151612de86060850182612d6b565b506080820151612dfb6080850182612d7a565b5060a0820151612e0e60a0850182612d89565b5060c0820151612e2160c0850182612d5c565b5060e0820151612e3460e0850182612d7a565b50610100820151612e49610100850182612d6b565b50505050565b600061012082019050612e656000830184612d98565b92915050565b60008060408385031215612e8257612e81612559565b5b6000612e9085828601612584565b9250506020612ea18582860161271e565b9150509250929050565b600060208284031215612ec157612ec0612559565b5b6000612ecf84828501612c29565b91505092915050565b604082016000820151612eee60008501826125f2565b506020820151612f0160208501826125f2565b50505050565b6000604082019050612f1c6000830184612ed8565b92915050565b6000602082019050612f376000830184612cf7565b92915050565b600080600060608486031215612f5657612f55612559565b5b6000612f6486828701612584565b9350506020612f758682870161271e565b9250506040612f8686828701612c55565b9150509250925092565b612f9981612bfe565b82525050565b612fa881612733565b82525050565b6000604082019050612fc36000830185612f90565b612fd06020830184612f9f565b9392505050565b60008083601f840112612fed57612fec6127ad565b5b8235905067ffffffffffffffff81111561300a576130096127b2565b5b602083019150836001820283011115613026576130256127b7565b5b9250929050565b6000806020838503121561304457613043612559565b5b600083013567ffffffffffffffff8111156130625761306161255e565b5b61306e85828601612fd7565b92509250509250929050565b60008060006060848603121561309357613092612559565b5b60006130a186828701612754565b93505060206130b286828701612584565b92505060406130c386828701612584565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006060820190506131116000830186612cf7565b61311e6020830185612cf7565b61312b6040830184612f9f565b949350505050565b60008151905061314281612c3e565b92915050565b60006020828403121561315e5761315d612559565b5b600061316c84828501613133565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131af82612733565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131e1576131e0613175565b5b600182019050919050565b60006040820190506132016000830185612cf7565b61320e6020830184612f9f565b9392505050565b6000819050919050565b600061323a61323561323084612769565b613215565b612733565b9050919050565b61324a8161321f565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b600061327c8385613250565b9350613289838584613261565b61329283612927565b840190509392505050565b60006080820190506132b26000830188613241565b6132bf60208301876128fd565b6132cc60408301866128fd565b81810360608301526132df818486613270565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061333257607f821691505b602082108103613345576133446132eb565b5b50919050565b7f4f6e6c7941676772656761746f72000000000000000000000000000000000000600082015250565b6000613381600e83613250565b915061338c8261334b565b602082019050919050565b600060208201905081810360008301526133b081613374565b9050919050565b7f4f7264657246756c66696c6c6564000000000000000000000000000000000000600082015250565b60006133ed600e83613250565b91506133f8826133b7565b602082019050919050565b6000602082019050818103600083015261341c816133e0565b9050919050565b600061342e82612769565b915061343983612769565b925082820390506bffffffffffffffffffffffff81111561345d5761345c613175565b5b92915050565b600061347e61347961347484612bfe565b613215565b612769565b9050919050565b61348e81613463565b82525050565b60006060820190506134a960008301866128fd565b6134b660208301856128fd565b6134c36040830184613485565b949350505050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b6000613501601683613250565b915061350c826134cb565b602082019050919050565b60006020820190508181036000830152613530816134f4565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613593602e83613250565b915061359e82613537565b604082019050919050565b600060208201905081810360008301526135c281613586565b9050919050565b6000819050919050565b600060ff82169050919050565b60006135fb6135f66135f1846135c9565b613215565b6135d3565b9050919050565b61360b816135e0565b82525050565b60006020820190506136266000830184613602565b92915050565b60006020820190506136416000830184612f90565b92915050565b600060608201905061365c60008301866128fd565b6136696020830185612cf7565b6136766040830184612bd4565b949350505050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026136eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826136ae565b6136f586836136ae565b95508019841693508086168417925050509392505050565b600061372861372361371e84612733565b613215565b612733565b9050919050565b6000819050919050565b6137428361370d565b61375661374e8261372f565b8484546136bb565b825550505050565b600090565b61376b61375e565b613776818484613739565b505050565b5b8181101561379a5761378f600082613763565b60018101905061377c565b5050565b601f8211156137df576137b081613689565b6137b98461369e565b810160208510156137c8578190505b6137dc6137d48561369e565b83018261377b565b50505b505050565b600082821c905092915050565b6000613802600019846008026137e4565b1980831691505092915050565b600061381b83836137f1565b9150826002028217905092915050565b613835838361367e565b67ffffffffffffffff81111561384e5761384d612938565b5b613858825461331a565b61386382828561379e565b6000601f8311600181146138925760008415613880578287013590505b61388a858261380f565b8655506138f2565b601f1984166138a086613689565b60005b828110156138c8578489013582556001820191506020850194506020810190506138a3565b868310156138e557848901356138e1601f8916826137f1565b8355505b6001600288020188555050505b50505050505050565b60006139078385612b32565b9350613914838584613261565b61391d83612927565b840190509392505050565b600060208201905081810360008301526139438184866138fb565b90509392505050565b600061395782612733565b915061396283612733565b925082820390508181111561397a57613979613175565b5b92915050565b60006040820190506139956000830185612f9f565b6139a260208301846128fd565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613a05602683613250565b9150613a10826139a9565b604082019050919050565b60006020820190508181036000830152613a34816139f8565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000613a71601083613250565b9150613a7c82613a3b565b602082019050919050565b60006020820190508181036000830152613aa081613a64565b9050919050565b7f546f6b656e4e6f74537570706f72746564000000000000000000000000000000600082015250565b6000613add601183613250565b9150613ae882613aa7565b602082019050919050565b60006020820190508181036000830152613b0c81613ad0565b9050919050565b7f416d6f756e7449735a65726f0000000000000000000000000000000000000000600082015250565b6000613b49600c83613250565b9150613b5482613b13565b602082019050919050565b60006020820190508181036000830152613b7881613b3c565b9050919050565b7f5468726f775a65726f4164647265737300000000000000000000000000000000600082015250565b6000613bb5601083613250565b9150613bc082613b7f565b602082019050919050565b60006020820190508181036000830152613be481613ba8565b9050919050565b7f496e76616c6964496e737469747574696f6e436f646500000000000000000000600082015250565b6000613c21601683613250565b9150613c2c82613beb565b602082019050919050565b60006020820190508181036000830152613c5081613c14565b9050919050565b7f496e76616c696453656e646572466565526563697069656e7400000000000000600082015250565b6000613c8d601983613250565b9150613c9882613c57565b602082019050919050565b60006020820190508181036000830152613cbc81613c80565b9050919050565b6000613cce82612733565b9150613cd983612733565b9250828202613ce781612733565b91508282048414831517613cfe57613cfd613175565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613d3f82612733565b9150613d4a83612733565b925082613d5a57613d59613d05565b5b828204905092915050565b7f53656e646572466565546f6f4869676800000000000000000000000000000000600082015250565b6000613d9b601083613250565b9150613da682613d65565b602082019050919050565b60006020820190508181036000830152613dca81613d8e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613e07602083613250565b9150613e1282613dd1565b602082019050919050565b60006020820190508181036000830152613e3681613dfa565b9050919050565b6000613e4882612733565b9150613e5383612733565b9250828201905080821115613e6b57613e6a613175565b5b92915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613ecd602b83613250565b9150613ed882613e71565b604082019050919050565b60006020820190508181036000830152613efc81613ec0565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613f39601483613250565b9150613f4482613f03565b602082019050919050565b60006020820190508181036000830152613f6881613f2c565b905091905056fea26469706673582212205d227ba26d79be9b459a6d7164455dd3702c091b08d293bcd7cd73430b2947be64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79A0EFFB GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x315 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x36E JUMPI DUP1 PUSH4 0xD28A8D32 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3BA JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0x87490D86 EQ PUSH2 0x2E5 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x5C975ABB GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x5FE44CAC EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0x768C6EC0 EQ PUSH2 0x269 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x2621338 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x2654EC7E EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x32200882 EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0x3AD59DBC EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1D6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x26B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x186 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x181 SWAP2 SWAP1 PUSH2 0x2812 JUMP JUMPDEST PUSH2 0x514 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x193 SWAP2 SWAP1 PUSH2 0x290C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B1 SWAP2 SWAP1 PUSH2 0x2ACB JUMP JUMPDEST PUSH2 0x96A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH2 0xA7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x2BA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DE PUSH2 0xB10 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E8 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x2BE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x218 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x213 SWAP2 SWAP1 PUSH2 0x2C6A JUMP JUMPDEST PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x226 SWAP3 SWAP2 SWAP1 PUSH2 0x2D06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x237 PUSH2 0xF32 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x253 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24E SWAP2 SWAP1 PUSH2 0x2D2F JUMP JUMPDEST PUSH2 0xF46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x260 SWAP2 SWAP1 PUSH2 0x2BE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x283 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27E SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH2 0xF9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x290 SWAP2 SWAP1 PUSH2 0x2E4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AE SWAP2 SWAP1 PUSH2 0x2E6B JUMP JUMPDEST PUSH2 0x11CD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BD PUSH2 0x130A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C7 PUSH2 0x145A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DE SWAP2 SWAP1 PUSH2 0x2EAB JUMP JUMPDEST PUSH2 0x146C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2FF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH2 0x14D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x2F07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31D PUSH2 0x1518 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x32A SWAP2 SWAP1 PUSH2 0x2F22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x348 SWAP2 SWAP1 PUSH2 0x2F3D JUMP JUMPDEST PUSH2 0x1542 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x357 PUSH2 0x1678 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x365 SWAP3 SWAP2 SWAP1 PUSH2 0x2FAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x388 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x383 SWAP2 SWAP1 PUSH2 0x302D JUMP JUMPDEST PUSH2 0x169D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x307A JUMP JUMPDEST PUSH2 0x16F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B1 SWAP2 SWAP1 PUSH2 0x2BE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CF SWAP2 SWAP1 PUSH2 0x2D2F JUMP JUMPDEST PUSH2 0x1A8D JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x9C PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x453 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x40D JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x47B JUMPI PUSH2 0x47A PUSH2 0x2938 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4B4 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4A1 PUSH2 0x2433 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x499 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x508 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4D5 JUMPI PUSH2 0x4D4 PUSH2 0x30CD JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4F0 JUMPI PUSH2 0x4EF PUSH2 0x30CD JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4BA JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51E PUSH2 0x1B10 JUMP JUMPDEST PUSH2 0x52C DUP12 DUP12 DUP7 DUP10 DUP10 DUP15 PUSH2 0x1B5A JUMP JUMPDEST DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP14 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x569 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x588 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5AC SWAP2 SWAP1 PUSH2 0x3148 JUMP JUMPDEST POP PUSH1 0xD1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x5FD SWAP1 PUSH2 0x31A4 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH1 0xD1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x654 SWAP3 SWAP2 SWAP1 PUSH2 0x31EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x65 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE POP PUSH1 0xD0 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP DUP1 DUP11 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x2C205F90C01160D42994A0EB521810056D94BB82A1FCB038D7179C4158A1F15B DUP11 DUP14 DUP14 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x954 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x329D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x972 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA78 JUMPI PUSH1 0x9C PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9A9 JUMPI PUSH2 0x9A8 PUSH2 0x30CD JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA0E JUMPI PUSH2 0xA0D PUSH2 0x30CD JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9D PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xA3A JUMPI PUSH2 0xA39 PUSH2 0x30CD JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x97B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x68 DUP1 SLOAD PUSH2 0xA8D SWAP1 PUSH2 0x331A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAB9 SWAP1 PUSH2 0x331A JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB06 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xADB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB06 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAE9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB18 PUSH2 0x1DD1 JUMP JUMPDEST PUSH2 0xB20 PUSH2 0x1E4F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9E PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBCC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC3 SWAP1 PUSH2 0x3397 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD0 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xC30 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC27 SWAP1 PUSH2 0x3403 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xD0 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xCB2 SWAP2 SWAP1 PUSH2 0x3423 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0xCF7 DUP10 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP8 PUSH2 0x1EB2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD96 JUMPI PUSH1 0x1 PUSH1 0xD0 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD GT ISZERO PUSH2 0xD95 JUMPI PUSH2 0xD94 DUP10 PUSH2 0x1FC3 JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0xE49 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE04 SWAP3 SWAP2 SWAP1 PUSH2 0x31EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE23 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE47 SWAP2 SWAP1 PUSH2 0x3148 JUMP JUMPDEST POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP9 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE88 SWAP3 SWAP2 SWAP1 PUSH2 0x31EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xECB SWAP2 SWAP1 PUSH2 0x3148 JUMP JUMPDEST POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH32 0xF26DE978CBAEA68EA699627155A10AD53DF3321B0F95A08264C0CFD6D4C05326 DUP13 DUP12 DUP11 PUSH1 0x40 MLOAD PUSH2 0xF17 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3494 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP9 DUP3 SWAP4 POP SWAP4 POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xF3A PUSH2 0x1DD1 JUMP JUMPDEST PUSH2 0xF44 PUSH1 0x0 PUSH2 0x2117 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9B PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFA4 PUSH2 0x2453 JUMP JUMPDEST PUSH1 0xD0 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11D5 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1244 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x123B SWAP1 PUSH2 0x3517 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x7472656173757279000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x12AD JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xD8EF77A7D69A6B79F131ECD9AA37060BA0853BBD37CB175EC1ABD05738CE27CB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH2 0x12FE SWAP2 SWAP1 PUSH2 0x2F22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x133B JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x1368 JUMPI POP PUSH2 0x134A ADDRESS PUSH2 0x21DD JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1367 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x13A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x139E SWAP1 PUSH2 0x35A9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x13E4 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH3 0x186A0 PUSH1 0x65 DUP2 SWAP1 SSTORE POP PUSH2 0x13F6 PUSH2 0x2200 JUMP JUMPDEST PUSH2 0x13FE PUSH2 0x2259 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1457 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x144E SWAP2 SWAP1 PUSH2 0x3611 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x1462 PUSH2 0x1DD1 JUMP JUMPDEST PUSH2 0x146A PUSH2 0x22B2 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1474 PUSH2 0x1DD1 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xB94068A4BD2571ACEE6AC79ACC9DCDCF10C31425D35F09E88F154EC520E26446 DUP2 PUSH1 0x40 MLOAD PUSH2 0x14CC SWAP2 SWAP1 PUSH2 0x362C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x14DF PUSH2 0x2515 JUMP JUMPDEST PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x154A PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15B0 SWAP1 PUSH2 0x3517 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x1638 JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x166B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3647 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x65 SLOAD SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x16A5 PUSH2 0x1DD1 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x16B6 SWAP3 SWAP2 SWAP1 PUSH2 0x382B JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x16E8 SWAP3 SWAP2 SWAP1 PUSH2 0x3928 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1786 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x177D SWAP1 PUSH2 0x3397 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x17EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17E1 SWAP1 PUSH2 0x3403 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD PUSH2 0x180E SWAP2 SWAP1 PUSH2 0x394C JUMP JUMPDEST SWAP1 POP PUSH1 0xD0 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18A3 SWAP3 SWAP2 SWAP1 PUSH2 0x31EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18E6 SWAP2 SWAP1 PUSH2 0x3148 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xD0 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0xD0 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A03 SWAP3 SWAP2 SWAP1 PUSH2 0x31EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A46 SWAP2 SWAP1 PUSH2 0x3148 JUMP JUMPDEST POP DUP4 PUSH32 0xA8E0E11A759CCCCE708FF767ACDE5348E3E96706E2CCE8301462510CE02FA1A6 DUP7 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1A79 SWAP3 SWAP2 SWAP1 PUSH2 0x3980 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1A95 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1B04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AFB SWAP1 PUSH2 0x3A1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B0D DUP2 PUSH2 0x2117 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1B18 PUSH2 0xB22 JUMP JUMPDEST ISZERO PUSH2 0x1B58 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B4F SWAP1 PUSH2 0x3A87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x9B PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1BE6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BDD SWAP1 PUSH2 0x3AF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 GT PUSH2 0x1C29 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C20 SWAP1 PUSH2 0x3B5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1C98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C8F SWAP1 PUSH2 0x3BCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x1CF3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CEA SWAP1 PUSH2 0x3C37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x1D6C JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D6B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D62 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 0x65 SLOAD PUSH2 0x1F4 DUP7 PUSH2 0x1D7D SWAP2 SWAP1 PUSH2 0x3CC3 JUMP JUMPDEST PUSH2 0x1D87 SWAP2 SWAP1 PUSH2 0x3D34 JUMP JUMPDEST DUP3 GT ISZERO PUSH2 0x1DC9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DC0 SWAP1 PUSH2 0x3DB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1DD9 PUSH2 0x2315 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DF7 PUSH2 0x1518 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1E4D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E44 SWAP1 PUSH2 0x3E1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1E57 PUSH2 0x231D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9E PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1E9B PUSH2 0x2315 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EA8 SWAP2 SWAP1 PUSH2 0x2F22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1EBA PUSH2 0x2535 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD DUP2 PUSH2 0x1EF7 SWAP2 SWAP1 PUSH2 0x394C JUMP JUMPDEST SWAP1 POP PUSH1 0x65 SLOAD DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x1F16 SWAP2 SWAP1 PUSH2 0x3CC3 JUMP JUMPDEST PUSH2 0x1F20 SWAP2 SWAP1 PUSH2 0x3D34 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1F5C SWAP2 SWAP1 PUSH2 0x3CC3 JUMP JUMPDEST PUSH2 0x1F66 SWAP2 SWAP1 PUSH2 0x3D34 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1F83 SWAP2 SWAP1 PUSH2 0x394C JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP DUP3 ISZERO PUSH2 0x1FBB JUMPI DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD DUP2 DUP2 MLOAD PUSH2 0x1FA8 SWAP2 SWAP1 PUSH2 0x3E3D JUMP JUMPDEST SWAP2 POP DUP2 DUP2 MSTORE POP POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x208A SWAP3 SWAP2 SWAP1 PUSH2 0x31EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20CD SWAP2 SWAP1 PUSH2 0x3148 JUMP JUMPDEST POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x96C76D5AEC8A8C11A9C8E02768E3FA309347330D08961E0CF9FD43B349B684C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x224F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2246 SWAP1 PUSH2 0x3EE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2257 PUSH2 0x2366 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x229F SWAP1 PUSH2 0x3EE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x22B0 PUSH2 0x23C7 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x22BA PUSH2 0x1B10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x9E PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x22FE PUSH2 0x2315 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x230B SWAP2 SWAP1 PUSH2 0x2F22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2325 PUSH2 0xB22 JUMP JUMPDEST PUSH2 0x2364 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x235B SWAP1 PUSH2 0x3F4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23AC SWAP1 PUSH2 0x3EE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x23C5 PUSH2 0x23C0 PUSH2 0x2315 JUMP JUMPDEST PUSH2 0x2117 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2416 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x240D SWAP1 PUSH2 0x3EE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9E PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2576 DUP2 PUSH2 0x2563 JUMP JUMPDEST DUP2 EQ PUSH2 0x2581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2593 DUP2 PUSH2 0x256D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25AF JUMPI PUSH2 0x25AE PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25BD DUP5 DUP3 DUP6 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25FB DUP2 PUSH2 0x2563 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2617 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x25F2 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x262A PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x25F2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x263C DUP4 DUP4 PUSH2 0x2601 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2660 DUP3 PUSH2 0x25C6 JUMP JUMPDEST PUSH2 0x266A DUP2 DUP6 PUSH2 0x25D1 JUMP JUMPDEST SWAP4 POP PUSH2 0x2675 DUP4 PUSH2 0x25E2 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x26A6 JUMPI DUP2 MLOAD PUSH2 0x268D DUP9 DUP3 PUSH2 0x2630 JUMP JUMPDEST SWAP8 POP PUSH2 0x2698 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2679 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x26CD DUP2 DUP5 PUSH2 0x2655 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2700 DUP3 PUSH2 0x26D5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2710 DUP2 PUSH2 0x26F5 JUMP JUMPDEST DUP2 EQ PUSH2 0x271B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x272D DUP2 PUSH2 0x2707 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2746 DUP2 PUSH2 0x2733 JUMP JUMPDEST DUP2 EQ PUSH2 0x2751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2763 DUP2 PUSH2 0x273D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x278A DUP2 PUSH2 0x2769 JUMP JUMPDEST DUP2 EQ PUSH2 0x2795 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x27A7 DUP2 PUSH2 0x2781 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x27D2 JUMPI PUSH2 0x27D1 PUSH2 0x27AD JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27EF JUMPI PUSH2 0x27EE PUSH2 0x27B2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x280B JUMPI PUSH2 0x280A PUSH2 0x27B7 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x120 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x2836 JUMPI PUSH2 0x2835 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2844 DUP14 DUP3 DUP15 ADD PUSH2 0x271E JUMP JUMPDEST SWAP11 POP POP PUSH1 0x20 PUSH2 0x2855 DUP14 DUP3 DUP15 ADD PUSH2 0x2754 JUMP JUMPDEST SWAP10 POP POP PUSH1 0x40 PUSH2 0x2866 DUP14 DUP3 DUP15 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP9 POP POP PUSH1 0x60 PUSH2 0x2877 DUP14 DUP3 DUP15 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x80 PUSH2 0x2888 DUP14 DUP3 DUP15 ADD PUSH2 0x2798 JUMP JUMPDEST SWAP7 POP POP PUSH1 0xA0 PUSH2 0x2899 DUP14 DUP3 DUP15 ADD PUSH2 0x271E JUMP JUMPDEST SWAP6 POP POP PUSH1 0xC0 PUSH2 0x28AA DUP14 DUP3 DUP15 ADD PUSH2 0x2754 JUMP JUMPDEST SWAP5 POP POP PUSH1 0xE0 PUSH2 0x28BB DUP14 DUP3 DUP15 ADD PUSH2 0x271E JUMP JUMPDEST SWAP4 POP POP PUSH2 0x100 DUP12 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28DD JUMPI PUSH2 0x28DC PUSH2 0x255E JUMP JUMPDEST JUMPDEST PUSH2 0x28E9 DUP14 DUP3 DUP15 ADD PUSH2 0x27BC JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH2 0x2906 DUP2 PUSH2 0x2563 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2921 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x28FD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2970 DUP3 PUSH2 0x2927 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x298F JUMPI PUSH2 0x298E PUSH2 0x2938 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29A2 PUSH2 0x254F JUMP JUMPDEST SWAP1 POP PUSH2 0x29AE DUP3 DUP3 PUSH2 0x2967 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x29CE JUMPI PUSH2 0x29CD PUSH2 0x2938 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29FA JUMPI PUSH2 0x29F9 PUSH2 0x29DF JUMP JUMPDEST JUMPDEST PUSH2 0x2A04 PUSH1 0x40 PUSH2 0x2998 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A14 DUP5 DUP3 DUP6 ADD PUSH2 0x2584 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x2A28 DUP5 DUP3 DUP6 ADD PUSH2 0x2584 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A47 PUSH2 0x2A42 DUP5 PUSH2 0x29B3 JUMP JUMPDEST PUSH2 0x2998 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2A6A JUMPI PUSH2 0x2A69 PUSH2 0x27B7 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2A93 JUMPI DUP1 PUSH2 0x2A7F DUP9 DUP3 PUSH2 0x29E4 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x2A6C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2AB2 JUMPI PUSH2 0x2AB1 PUSH2 0x27AD JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2AC2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2A34 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AE2 JUMPI PUSH2 0x2AE1 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2AF0 DUP6 DUP3 DUP7 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B11 JUMPI PUSH2 0x2B10 PUSH2 0x255E JUMP JUMPDEST JUMPDEST PUSH2 0x2B1D DUP6 DUP3 DUP7 ADD PUSH2 0x2A9D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B61 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2B46 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B78 DUP3 PUSH2 0x2B27 JUMP JUMPDEST PUSH2 0x2B82 DUP2 DUP6 PUSH2 0x2B32 JUMP JUMPDEST SWAP4 POP PUSH2 0x2B92 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2B43 JUMP JUMPDEST PUSH2 0x2B9B DUP2 PUSH2 0x2927 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BC0 DUP2 DUP5 PUSH2 0x2B6D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2BDD DUP2 PUSH2 0x2BC8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2BF8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BD4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C1B DUP2 PUSH2 0x2BFE JUMP JUMPDEST DUP2 EQ PUSH2 0x2C26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2C38 DUP2 PUSH2 0x2C12 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C47 DUP2 PUSH2 0x2BC8 JUMP JUMPDEST DUP2 EQ PUSH2 0x2C52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2C64 DUP2 PUSH2 0x2C3E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2C87 JUMPI PUSH2 0x2C86 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C95 DUP10 DUP3 DUP11 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x2CA6 DUP10 DUP3 DUP11 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x2CB7 DUP10 DUP3 DUP11 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x2CC8 DUP10 DUP3 DUP11 ADD PUSH2 0x271E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x2CD9 DUP10 DUP3 DUP11 ADD PUSH2 0x2C29 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x2CEA DUP10 DUP3 DUP11 ADD PUSH2 0x2C55 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH2 0x2D00 DUP2 PUSH2 0x26F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2D1B PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x2D28 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2CF7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D45 JUMPI PUSH2 0x2D44 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D53 DUP5 DUP3 DUP6 ADD PUSH2 0x271E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2D65 DUP2 PUSH2 0x26F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D74 DUP2 PUSH2 0x2733 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D83 DUP2 PUSH2 0x2769 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D92 DUP2 PUSH2 0x2BC8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2DAF PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2D5C JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2DC2 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2D5C JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2DD5 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2D5C JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2DE8 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2D6B JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2DFB PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2D7A JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2E0E PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2D89 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2E21 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x2D5C JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x2E34 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2D7A JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x2E49 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x2D6B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x2E65 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2D98 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E82 JUMPI PUSH2 0x2E81 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E90 DUP6 DUP3 DUP7 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2EA1 DUP6 DUP3 DUP7 ADD PUSH2 0x271E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2EC1 JUMPI PUSH2 0x2EC0 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2ECF DUP5 DUP3 DUP6 ADD PUSH2 0x2C29 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2EEE PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x25F2 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2F01 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x25F2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2F1C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2ED8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2F37 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2CF7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2F56 JUMPI PUSH2 0x2F55 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F64 DUP7 DUP3 DUP8 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2F75 DUP7 DUP3 DUP8 ADD PUSH2 0x271E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2F86 DUP7 DUP3 DUP8 ADD PUSH2 0x2C55 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x2F99 DUP2 PUSH2 0x2BFE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2FA8 DUP2 PUSH2 0x2733 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2FC3 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2F90 JUMP JUMPDEST PUSH2 0x2FD0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F9F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2FED JUMPI PUSH2 0x2FEC PUSH2 0x27AD JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x300A JUMPI PUSH2 0x3009 PUSH2 0x27B2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x3026 JUMPI PUSH2 0x3025 PUSH2 0x27B7 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3044 JUMPI PUSH2 0x3043 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3062 JUMPI PUSH2 0x3061 PUSH2 0x255E JUMP JUMPDEST JUMPDEST PUSH2 0x306E DUP6 DUP3 DUP7 ADD PUSH2 0x2FD7 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3093 JUMPI PUSH2 0x3092 PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x30A1 DUP7 DUP3 DUP8 ADD PUSH2 0x2754 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x30B2 DUP7 DUP3 DUP8 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x30C3 DUP7 DUP3 DUP8 ADD PUSH2 0x2584 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3111 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2CF7 JUMP JUMPDEST PUSH2 0x311E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2CF7 JUMP JUMPDEST PUSH2 0x312B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2F9F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3142 DUP2 PUSH2 0x2C3E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x315E JUMPI PUSH2 0x315D PUSH2 0x2559 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x316C DUP5 DUP3 DUP6 ADD PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x31AF DUP3 PUSH2 0x2733 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x31E1 JUMPI PUSH2 0x31E0 PUSH2 0x3175 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3201 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2CF7 JUMP JUMPDEST PUSH2 0x320E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F9F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x323A PUSH2 0x3235 PUSH2 0x3230 DUP5 PUSH2 0x2769 JUMP JUMPDEST PUSH2 0x3215 JUMP JUMPDEST PUSH2 0x2733 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x324A DUP2 PUSH2 0x321F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C DUP4 DUP6 PUSH2 0x3250 JUMP JUMPDEST SWAP4 POP PUSH2 0x3289 DUP4 DUP6 DUP5 PUSH2 0x3261 JUMP JUMPDEST PUSH2 0x3292 DUP4 PUSH2 0x2927 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x32B2 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3241 JUMP JUMPDEST PUSH2 0x32BF PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x32CC PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x28FD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x32DF DUP2 DUP5 DUP7 PUSH2 0x3270 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3332 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3345 JUMPI PUSH2 0x3344 PUSH2 0x32EB JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C7941676772656761746F72000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3381 PUSH1 0xE DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x338C DUP3 PUSH2 0x334B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x33B0 DUP2 PUSH2 0x3374 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F7264657246756C66696C6C6564000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33ED PUSH1 0xE DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x33F8 DUP3 PUSH2 0x33B7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x341C DUP2 PUSH2 0x33E0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x342E DUP3 PUSH2 0x2769 JUMP JUMPDEST SWAP2 POP PUSH2 0x3439 DUP4 PUSH2 0x2769 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x345D JUMPI PUSH2 0x345C PUSH2 0x3175 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x347E PUSH2 0x3479 PUSH2 0x3474 DUP5 PUSH2 0x2BFE JUMP JUMPDEST PUSH2 0x3215 JUMP JUMPDEST PUSH2 0x2769 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x348E DUP2 PUSH2 0x3463 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x34A9 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x34B6 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x34C3 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3485 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3501 PUSH1 0x16 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x350C DUP3 PUSH2 0x34CB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3530 DUP2 PUSH2 0x34F4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3593 PUSH1 0x2E DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x359E DUP3 PUSH2 0x3537 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35C2 DUP2 PUSH2 0x3586 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35FB PUSH2 0x35F6 PUSH2 0x35F1 DUP5 PUSH2 0x35C9 JUMP JUMPDEST PUSH2 0x3215 JUMP JUMPDEST PUSH2 0x35D3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x360B DUP2 PUSH2 0x35E0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3626 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3602 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3641 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F90 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x365C PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x3669 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2CF7 JUMP JUMPDEST PUSH2 0x3676 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BD4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x36EB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x36AE JUMP JUMPDEST PUSH2 0x36F5 DUP7 DUP4 PUSH2 0x36AE JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3728 PUSH2 0x3723 PUSH2 0x371E DUP5 PUSH2 0x2733 JUMP JUMPDEST PUSH2 0x3215 JUMP JUMPDEST PUSH2 0x2733 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3742 DUP4 PUSH2 0x370D JUMP JUMPDEST PUSH2 0x3756 PUSH2 0x374E DUP3 PUSH2 0x372F JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x36BB JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x376B PUSH2 0x375E JUMP JUMPDEST PUSH2 0x3776 DUP2 DUP5 DUP5 PUSH2 0x3739 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x379A JUMPI PUSH2 0x378F PUSH1 0x0 DUP3 PUSH2 0x3763 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x377C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x37DF JUMPI PUSH2 0x37B0 DUP2 PUSH2 0x3689 JUMP JUMPDEST PUSH2 0x37B9 DUP5 PUSH2 0x369E JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x37C8 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x37DC PUSH2 0x37D4 DUP6 PUSH2 0x369E JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x377B JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3802 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x37E4 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x381B DUP4 DUP4 PUSH2 0x37F1 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3835 DUP4 DUP4 PUSH2 0x367E JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x384E JUMPI PUSH2 0x384D PUSH2 0x2938 JUMP JUMPDEST JUMPDEST PUSH2 0x3858 DUP3 SLOAD PUSH2 0x331A JUMP JUMPDEST PUSH2 0x3863 DUP3 DUP3 DUP6 PUSH2 0x379E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3892 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3880 JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x388A DUP6 DUP3 PUSH2 0x380F JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x38F2 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x38A0 DUP7 PUSH2 0x3689 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x38C8 JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x38A3 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x38E5 JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x38E1 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x37F1 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3907 DUP4 DUP6 PUSH2 0x2B32 JUMP JUMPDEST SWAP4 POP PUSH2 0x3914 DUP4 DUP6 DUP5 PUSH2 0x3261 JUMP JUMPDEST PUSH2 0x391D DUP4 PUSH2 0x2927 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3943 DUP2 DUP5 DUP7 PUSH2 0x38FB JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3957 DUP3 PUSH2 0x2733 JUMP JUMPDEST SWAP2 POP PUSH2 0x3962 DUP4 PUSH2 0x2733 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x397A JUMPI PUSH2 0x3979 PUSH2 0x3175 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3995 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2F9F JUMP JUMPDEST PUSH2 0x39A2 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x28FD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A05 PUSH1 0x26 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A10 DUP3 PUSH2 0x39A9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A34 DUP2 PUSH2 0x39F8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A71 PUSH1 0x10 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A7C DUP3 PUSH2 0x3A3B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AA0 DUP2 PUSH2 0x3A64 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x546F6B656E4E6F74537570706F72746564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3ADD PUSH1 0x11 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AE8 DUP3 PUSH2 0x3AA7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B0C DUP2 PUSH2 0x3AD0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E7449735A65726F0000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B49 PUSH1 0xC DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B54 DUP3 PUSH2 0x3B13 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B78 DUP2 PUSH2 0x3B3C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5468726F775A65726F4164647265737300000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BB5 PUSH1 0x10 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3BC0 DUP3 PUSH2 0x3B7F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3BE4 DUP2 PUSH2 0x3BA8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964496E737469747574696F6E436F646500000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C21 PUSH1 0x16 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C2C DUP3 PUSH2 0x3BEB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C50 DUP2 PUSH2 0x3C14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C696453656E646572466565526563697069656E7400000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C8D PUSH1 0x19 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C98 DUP3 PUSH2 0x3C57 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CBC DUP2 PUSH2 0x3C80 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CCE DUP3 PUSH2 0x2733 JUMP JUMPDEST SWAP2 POP PUSH2 0x3CD9 DUP4 PUSH2 0x2733 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x3CE7 DUP2 PUSH2 0x2733 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x3CFE JUMPI PUSH2 0x3CFD PUSH2 0x3175 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3D3F DUP3 PUSH2 0x2733 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D4A DUP4 PUSH2 0x2733 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3D5A JUMPI PUSH2 0x3D59 PUSH2 0x3D05 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x53656E646572466565546F6F4869676800000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D9B PUSH1 0x10 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3DA6 DUP3 PUSH2 0x3D65 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DCA DUP2 PUSH2 0x3D8E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E07 PUSH1 0x20 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3E12 DUP3 PUSH2 0x3DD1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3E36 DUP2 PUSH2 0x3DFA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E48 DUP3 PUSH2 0x2733 JUMP JUMPDEST SWAP2 POP PUSH2 0x3E53 DUP4 PUSH2 0x2733 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3E6B JUMPI PUSH2 0x3E6A PUSH2 0x3175 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3ECD PUSH1 0x2B DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3ED8 DUP3 PUSH2 0x3E71 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3EFC DUP2 PUSH2 0x3EC0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F39 PUSH1 0x14 DUP4 PUSH2 0x3250 JUMP JUMPDEST SWAP2 POP PUSH2 0x3F44 DUP3 PUSH2 0x3F03 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3F68 DUP2 PUSH2 0x3F2C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0x22 PUSH28 0xA26D79BE9B459A6D7164455DD3702C091B08D293BCD7CD73430B2947 0xBE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"505:9070:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8744:487;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1876:1351;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1663:500:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9476:96:15;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1565:65;;;:::i;:::-;;1858:84:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4142:1579:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;2064:101:0;;;:::i;:::-;;8395:119:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8224:115;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2362:265:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1003:130:15;;;:::i;:::-;;1474:61;;;:::i;:::-;;2169:187:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8581:157:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1441:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1378:279:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9284:139:15;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;2633:161:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6116:734:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2314:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8744:487:15;8819:20;8851:33;8887:21;:31;8909:8;8887:31;;;;;;;;;;;8851:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8928:14;8945:12;:19;8928:36;;8974:27;9022:6;9004:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;8974:55;;9053:9;9048:145;9072:6;9068:1;:10;9048:145;;;9108:12;9121:1;9108:15;;;;;;;;:::i;:::-;;;;;;;;9096:6;9103:1;9096:9;;;;;;;;:::i;:::-;;;;;;;:27;;;;9165:3;;;;;;;9048:145;;;;9218:6;9211:13;;;;;8744:487;;;:::o;1876:1351::-;2203:15;1482:19:2;:17;:19::i;:::-;2266:92:15::1;2275:6;2283:7;2292:14;2308:19;2329:10;2341:16;2266:8;:92::i;:::-;2430:6;2423:27;;;2451:10;2471:4;2478:7;2423:63;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2553:6;:18;2560:10;2553:18;;;;;;;;;;;;;;;;:21;;;;;;;;;:::i;:::-;;;;;;2671:10;2683:6;:18;2690:10;2683:18;;;;;;;;;;;;;;;;2660:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2650:53;;;;;;2640:63;;2761:334;;;;;;;;2789:10;2761:334;;;;;;2820:6;2761:334;;;;;;2860:19;2761:334;;;;;;2904:10;2761:334;;;;2934:5;2761:334;;;;;;2966:5;2761:334;;;;;;3000:14;2761:334;;;;;;3047:7;;2761:334;;;;;;;;3077:7;2761:334;;::::0;2744:5:::1;:14;2750:7;2744:14;;;;;;;;;;;:351;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3166:7;3157;3149:6;3141:79;;;3175:5;3182:16;3200:6;3208:11;;3141:79;;;;;;;;;;:::i;:::-;;;;;;;;1876:1351:::0;;;;;;;;;;;;:::o;1663:500:16:-;1334:13:0;:11;:13::i;:::-;1780:14:16::1;1797:12;:19;1780:36;;1831:6;1826:331;1847:6;1843:1;:10;1826:331;;;1871:21;:31;1893:8;1871:31;;;;;;;;;;;1908:12;1921:1;1908:15;;;;;;;;:::i;:::-;;;;;;;;1871:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1990:97;;;;;;;;2032:12;2045:1;2032:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;1990:97;;;;2064:8;1990:97;;::::0;1938:27:::1;:49;1966:12;1979:1;1966:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;1938:49;;;;;;;;;;;:149;;;;;;;;;;;;;;;;;;;2129:3;;;;;;;1826:331;;;;1769:394;1663:500:::0;;:::o;9476:96:15:-;9523:12;9554:11;9547:18;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9476:96;:::o;1565:65::-;1334:13:0;:11;:13::i;:::-;1613:10:15::1;:8;:10::i;:::-;1565:65::o:0;1858:84:2:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;4142:1579:15:-;4378:7;4387;1195:18;;;;;;;;;;;1181:32;;:10;:32;;;1173:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;4472:5:::1;:15;4478:8;4472:15;;;;;;;;;;;:27;;;;;;;;;;;;4471:28;4463:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;4567:13;4583:5;:15;4589:8;4583:15;;;;;;;;;;;:21;;;;;;;;;;;;4567:37;;4713:14;4683:44;;:5;:15;4689:8;4683:15;;;;;;;;;;;:26;;;:44;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4874:21;4901:52;4916:8;4926:14;4901:52;;4942:10;4901:14;:52::i;:::-;4872:81;;4996:1;4966:5;:15;4972:8;4966:15;;;;;;;;;;;:26;;;;;;;;;;;;:31;;::::0;4963:296:::1;;5097:4;5067:5;:15;5073:8;5067:15;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;5147:1;5119:5;:15;5125:8;5119:15;;;;;;;;;;;:25;;;:29;5115:134;;;5207:27;5225:8;5207:17;:27::i;:::-;5115:134;4963:296;5306:1;5281:10;:22;;;:26;5277:157;;;5367:5;5360:22;;;5383:15;;;;;;;;;;;5400:10;:22;;;5360:63;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5277:157;5494:5;5487:22;;;5510:18;5530:10;:34;;;5487:78;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5645:18;5603:77;;5626:8;5603:77;5611:13;5636:6;5665:14;5603:77;;;;;;;;:::i;:::-;;;;;;;;5698:8;5708:5;5690:24;;;;;;4142:1579:::0;;;;;;;;;:::o;2064:101:0:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;8395:119:15:-;8459:4;8482:17;:25;8500:6;8482:25;;;;;;;;;;;;;;;;;;;;;;;;;8475:32;;8395:119;;;:::o;8224:115::-;8286:12;;:::i;:::-;8317:5;:15;8323:8;8317:15;;;;;;;;;;;8310:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8224:115;;;:::o;2362:265:16:-;1334:13:0;:11;:13::i;:::-;2478:1:16::1;2461:19;;:5;:19;;::::0;2453:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2521:18;:4;:18:::0;2517:47:::1;;2559:5;2541:15;;:23;;;;;;;;;;;;;;;;;;2517:47;2579:41;2604:15;;;;;;;;;;;2579:41;;;;;;:::i;:::-;;;;;;;;2362:265:::0;;:::o;1003:130:15:-;3279:19:1;3302:13;;;;;;;;;;;3301:14;3279:36;;3347:14;:34;;;;;3380:1;3365:12;;;;;;;;;;:16;;;3347:34;3346:108;;;;3388:44;3426:4;3388:29;:44::i;:::-;3387:45;:66;;;;;3452:1;3436:12;;;;;;;;;;:17;;;3387:66;3346:108;3325:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3551:1;3536:12;;:16;;;;;;;;;;;;;;;;;;3566:14;3562:65;;;3612:4;3596:13;;:20;;;;;;;;;;;;;;;;;;3562:65;1066:7:15::1;1056;:17;;;;1083:16;:14;:16::i;:::-;1109:17;:15;:17::i;:::-;3651:14:1::0;3647:99;;;3697:5;3681:13;;:21;;;;;;;;;;;;;;;;;;3721:14;3733:1;3721:14;;;;;;:::i;:::-;;;;;;;;3647:99;3269:483;1003:130:15:o;1474:61::-;1334:13:0;:11;:13::i;:::-;1520:8:15::1;:6;:8::i;:::-;1474:61::o:0;2169:187:16:-;1334:13:0;:11;:13::i;:::-;2275:19:16::1;2254:18;;:40;;;;;;;;;;;;;;;;;;2309;2329:19;2309:40;;;;;;:::i;:::-;;;;;;;;2169:187:::0;:::o;8581:157:15:-;8655:24;;:::i;:::-;8698:27;:33;8726:4;8698:33;;;;;;;;;;;8691:40;;;;;;;;;;;;;;;;;;;;;;;;;;;8581:157;;;:::o;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;1378:279:16:-;1334:13:0;:11;:13::i;:::-;1502:1:16::1;1485:19;;:5;:19;;::::0;1477:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;1545:15;:4;:15:::0;1541:54:::1;;1589:6;1562:17;:24;1580:5;1562:24;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;1541:54;1611:39;1630:4;1636:5;1643:6;1611:39;;;;;;;;:::i;:::-;;;;;;;;1378:279:::0;;;:::o;9284:139:15:-;9340:6;9357:7;9388:18;;;;;;;;;;;9408:7;;9381:35;;;;9284:139;;:::o;2633:161:16:-;1334:13:0;:11;:13::i;:::-;2737:10:16::1;;2723:11;:24;;;;;;;:::i;:::-;;2762:25;2776:10;;2762:25;;;;;;;:::i;:::-;;;;;;;;2633:161:::0;;:::o;6116:734:15:-;6214:4;1195:18;;;;;;;;;;;1181:32;;:10;:32;;;1173:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;6296:5:::1;:15;6302:8;6296:15;;;;;;;;;;;:27;;;;;;;;;;;;6295:28;6287:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;6393:20;6441:4;6416:5;:15;6422:8;6416:15;;;;;;;;;;;:22;;;:29;;;;:::i;:::-;6393:52;;6462:5;:15;6468:8;6462:15;;;;;;;;;;;:21;;;;;;;;;;;;6455:38;;;6494:15;;;;;;;;;;;6511:4;6455:61;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6587:4;6557:5;:15;6563:8;6557:15;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;6630:1;6601:5;:15;6607:8;6601:15;;;;;;;;;;;:26;;;:30;;;;;;;;;;;;;;;;;;6698:5;:15;6704:8;6698:15;;;;;;;;;;;:21;;;;;;;;;;;;6691:38;;;6730:5;:15;6736:8;6730:15;;;;;;;;;;;:29;;;;;;;;;;;;6761:12;6691:83;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6804:8;6789:32;6798:4;6814:6;6789:32;;;;;;;:::i;:::-;;;;;;;;6839:4;6832:11;;;6116:734:::0;;;;;:::o;2314:198:0:-;1334:13;:11;:13::i;:::-;2422:1:::1;2402:22;;:8;:22;;::::0;2394:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;2010:106:2:-;2080:8;:6;:8::i;:::-;2079:9;2071:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2010:106::o;3233:662:15:-;3415:17;:25;3433:6;3415:25;;;;;;;;;;;;;;;;;;;;;;;;;3407:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;3490:1;3480:7;:11;3472:36;;;;;;;;;;;;:::i;:::-;;;;;;;;;3552:1;3526:28;;:14;:28;;;3518:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3655:1;3647:10;;3593:27;:45;3621:16;3593:45;;;;;;;;;;;:50;;;:64;3585:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;3712:1;3699:10;:14;3695:116;;;3768:1;3737:33;;:19;:33;;;3729:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;3695:116;3860:7;;3853:3;3843:7;:13;;;;:::i;:::-;3842:25;;;;:::i;:::-;3828:10;:39;;3820:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;3233:662;;;;;;:::o;1599:130:0:-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;2676:117:2:-;1729:16;:14;:16::i;:::-;2744:5:::1;2734:7;;:15;;;;;;;;;;;;;;;;;;2764:22;2773:12;:10;:12::i;:::-;2764:22;;;;;;:::i;:::-;;;;;;;;2676:117::o:0;6856:1121:15:-;6959:21;;:::i;:::-;7053:14;7070:5;:15;7076:8;7070:15;;;;;;;;;;;:22;;;7053:39;;7159:5;:15;7165:8;7159:15;;;;;;;;;;;:25;;;7150:6;:34;;;;:::i;:::-;7141:43;;7329:7;;7311:14;7302:23;;:6;:23;;;;:::i;:::-;7301:35;;;;:::i;:::-;7264:10;:34;;:72;;;;;7490:7;;7468:18;;;;;;;;;;;7431:55;;:10;:34;;;:55;;;;:::i;:::-;7430:67;;;;:::i;:::-;7405:10;:22;;:92;;;;;7678:10;:22;;;7641:10;:34;;;:59;;;;:::i;:::-;7603:10;:34;;:98;;;;;7834:10;7830:141;;;7898:10;:22;;;7860:10;:34;;:60;;;;;;;:::i;:::-;;;;;;;;7959:1;7934:10;:22;;:26;;;;;7830:141;6983:994;6856:1121;;;;;:::o;5727:343::-;5791:17;5811:5;:15;5817:8;5811:15;;;;;;;;;;;:34;;;;;;;;;;;;5791:54;;5855:12;5870:5;:15;5876:8;5870:15;;;;;;;;;;;:25;;;5855:40;;5943:5;:15;5949:8;5943:15;;;;;;;;;;;:21;;;;;;;;;;;;5936:38;;;5975:9;5986:4;5936:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6058:4;6047:9;6029:34;;;;;;;;;;;;5781:289;;5727:343;:::o;2666:187:0:-;2739:16;2758:6;;;;;;;;;;;2739:25;;2783:8;2774:6;;:17;;;;;;;;;;;;;;;;;;2837:8;2806:40;;2827:8;2806:40;;;;;;;;;;;;2729:124;2666:187;:::o;1423:320:6:-;1483:4;1735:1;1713:7;:19;;;:23;1706:30;;1423:320;;;:::o;1003:95:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1065:26:0::1;:24;:26::i;:::-;1003:95::o:0;1063:97:2:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:2::1;:25;:27::i;:::-;1063:97::o:0;2429:115::-;1482:19;:17;:19::i;:::-;2498:4:::1;2488:7;;:14;;;;;;;;;;;;;;;;;;2517:20;2524:12;:10;:12::i;:::-;2517:20;;;;;;:::i;:::-;;;;;;;;2429:115::o:0;850:96:7:-;903:7;929:10;922:17;;850:96;:::o;2188:106:2:-;2254:8;:6;:8::i;:::-;2246:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2188:106::o;1104:111:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1176:32:0::1;1195:12;:10;:12::i;:::-;1176:18;:32::i;:::-;1104:111::o:0;1166:95:2:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:2::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;7:75:18:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:143::-;1121:6;1155:5;1149:12;1139:22;;1025:143;;;:::o;1174:213::-;1302:11;1336:6;1331:3;1324:19;1376:4;1371:3;1367:14;1352:29;;1174:213;;;;:::o;1393:161::-;1489:4;1512:3;1504:11;;1542:4;1537:3;1533:14;1525:22;;1393:161;;;:::o;1560:108::-;1637:24;1655:5;1637:24;:::i;:::-;1632:3;1625:37;1560:108;;:::o;1768:505::-;1913:4;1908:3;1904:14;2000:4;1993:5;1989:16;1983:23;2019:63;2076:4;2071:3;2067:14;2053:12;2019:63;:::i;:::-;1928:164;2174:4;2167:5;2163:16;2157:23;2193:63;2250:4;2245:3;2241:14;2227:12;2193:63;:::i;:::-;2102:164;1882:391;1768:505;;:::o;2279:295::-;2406:10;2427:104;2527:3;2519:6;2427:104;:::i;:::-;2563:4;2558:3;2554:14;2540:28;;2279:295;;;;:::o;2580:142::-;2679:4;2711;2706:3;2702:14;2694:22;;2580:142;;;:::o;2826:964::-;3003:3;3032:83;3109:5;3032:83;:::i;:::-;3131:115;3239:6;3234:3;3131:115;:::i;:::-;3124:122;;3270:85;3349:5;3270:85;:::i;:::-;3378:7;3409:1;3394:371;3419:6;3416:1;3413:13;3394:371;;;3495:6;3489:13;3522:121;3639:3;3624:13;3522:121;:::i;:::-;3515:128;;3666:89;3748:6;3666:89;:::i;:::-;3656:99;;3454:311;3441:1;3438;3434:9;3429:14;;3394:371;;;3398:14;3781:3;3774:10;;3008:782;;;2826:964;;;;:::o;3796:489::-;3997:4;4035:2;4024:9;4020:18;4012:26;;4084:9;4078:4;4074:20;4070:1;4059:9;4055:17;4048:47;4112:166;4273:4;4264:6;4112:166;:::i;:::-;4104:174;;3796:489;;;;:::o;4291:126::-;4328:7;4368:42;4361:5;4357:54;4346:65;;4291:126;;;:::o;4423:96::-;4460:7;4489:24;4507:5;4489:24;:::i;:::-;4478:35;;4423:96;;;:::o;4525:122::-;4598:24;4616:5;4598:24;:::i;:::-;4591:5;4588:35;4578:63;;4637:1;4634;4627:12;4578:63;4525:122;:::o;4653:139::-;4699:5;4737:6;4724:20;4715:29;;4753:33;4780:5;4753:33;:::i;:::-;4653:139;;;;:::o;4798:77::-;4835:7;4864:5;4853:16;;4798:77;;;:::o;4881:122::-;4954:24;4972:5;4954:24;:::i;:::-;4947:5;4944:35;4934:63;;4993:1;4990;4983:12;4934:63;4881:122;:::o;5009:139::-;5055:5;5093:6;5080:20;5071:29;;5109:33;5136:5;5109:33;:::i;:::-;5009:139;;;;:::o;5154:109::-;5190:7;5230:26;5223:5;5219:38;5208:49;;5154:109;;;:::o;5269:120::-;5341:23;5358:5;5341:23;:::i;:::-;5334:5;5331:34;5321:62;;5379:1;5376;5369:12;5321:62;5269:120;:::o;5395:137::-;5440:5;5478:6;5465:20;5456:29;;5494:32;5520:5;5494:32;:::i;:::-;5395:137;;;;:::o;5538:117::-;5647:1;5644;5637:12;5661:117;5770:1;5767;5760:12;5784:117;5893:1;5890;5883:12;5921:553;5979:8;5989:6;6039:3;6032:4;6024:6;6020:17;6016:27;6006:122;;6047:79;;:::i;:::-;6006:122;6160:6;6147:20;6137:30;;6190:18;6182:6;6179:30;6176:117;;;6212:79;;:::i;:::-;6176:117;6326:4;6318:6;6314:17;6302:29;;6380:3;6372:4;6364:6;6360:17;6350:8;6346:32;6343:41;6340:128;;;6387:79;;:::i;:::-;6340:128;5921:553;;;;;:::o;6480:1693::-;6622:6;6630;6638;6646;6654;6662;6670;6678;6686;6694;6743:3;6731:9;6722:7;6718:23;6714:33;6711:120;;;6750:79;;:::i;:::-;6711:120;6870:1;6895:53;6940:7;6931:6;6920:9;6916:22;6895:53;:::i;:::-;6885:63;;6841:117;6997:2;7023:53;7068:7;7059:6;7048:9;7044:22;7023:53;:::i;:::-;7013:63;;6968:118;7125:2;7151:53;7196:7;7187:6;7176:9;7172:22;7151:53;:::i;:::-;7141:63;;7096:118;7253:2;7279:53;7324:7;7315:6;7304:9;7300:22;7279:53;:::i;:::-;7269:63;;7224:118;7381:3;7408:52;7452:7;7443:6;7432:9;7428:22;7408:52;:::i;:::-;7398:62;;7352:118;7509:3;7536:53;7581:7;7572:6;7561:9;7557:22;7536:53;:::i;:::-;7526:63;;7480:119;7638:3;7665:53;7710:7;7701:6;7690:9;7686:22;7665:53;:::i;:::-;7655:63;;7609:119;7767:3;7794:53;7839:7;7830:6;7819:9;7815:22;7794:53;:::i;:::-;7784:63;;7738:119;7924:3;7913:9;7909:19;7896:33;7956:18;7948:6;7945:30;7942:117;;;7978:79;;:::i;:::-;7942:117;8091:65;8148:7;8139:6;8128:9;8124:22;8091:65;:::i;:::-;8073:83;;;;7867:299;6480:1693;;;;;;;;;;;;;:::o;8179:118::-;8266:24;8284:5;8266:24;:::i;:::-;8261:3;8254:37;8179:118;;:::o;8303:222::-;8396:4;8434:2;8423:9;8419:18;8411:26;;8447:71;8515:1;8504:9;8500:17;8491:6;8447:71;:::i;:::-;8303:222;;;;:::o;8531:102::-;8572:6;8623:2;8619:7;8614:2;8607:5;8603:14;8599:28;8589:38;;8531:102;;;:::o;8639:180::-;8687:77;8684:1;8677:88;8784:4;8781:1;8774:15;8808:4;8805:1;8798:15;8825:281;8908:27;8930:4;8908:27;:::i;:::-;8900:6;8896:40;9038:6;9026:10;9023:22;9002:18;8990:10;8987:34;8984:62;8981:88;;;9049:18;;:::i;:::-;8981:88;9089:10;9085:2;9078:22;8868:238;8825:281;;:::o;9112:129::-;9146:6;9173:20;;:::i;:::-;9163:30;;9202:33;9230:4;9222:6;9202:33;:::i;:::-;9112:129;;;:::o;9247:340::-;9353:4;9443:18;9435:6;9432:30;9429:56;;;9465:18;;:::i;:::-;9429:56;9515:4;9507:6;9503:17;9495:25;;9575:4;9569;9565:15;9557:23;;9247:340;;;:::o;9593:117::-;9702:1;9699;9692:12;9888:578;9966:5;10010:4;9998:9;9993:3;9989:19;9985:30;9982:117;;;10018:79;;:::i;:::-;9982:117;10117:21;10133:4;10117:21;:::i;:::-;10108:30;;10197:1;10237:49;10282:3;10273:6;10262:9;10258:22;10237:49;:::i;:::-;10230:4;10223:5;10219:16;10212:75;10148:150;10357:2;10398:49;10443:3;10434:6;10423:9;10419:22;10398:49;:::i;:::-;10391:4;10384:5;10380:16;10373:75;10308:151;9888:578;;;;:::o;10523:797::-;10648:5;10673:110;10689:93;10775:6;10689:93;:::i;:::-;10673:110;:::i;:::-;10664:119;;10803:5;10832:6;10825:5;10818:21;10866:4;10859:5;10855:16;10848:23;;10919:4;10911:6;10907:17;10899:6;10895:30;10948:3;10940:6;10937:15;10934:122;;;10967:79;;:::i;:::-;10934:122;11082:6;11065:249;11099:6;11094:3;11091:15;11065:249;;;11174:3;11203:66;11265:3;11253:10;11203:66;:::i;:::-;11198:3;11191:79;11299:4;11294:3;11290:14;11283:21;;11141:173;11125:4;11120:3;11116:14;11109:21;;11065:249;;;11069:21;10654:666;;10523:797;;;;;:::o;11377:428::-;11477:5;11526:3;11519:4;11511:6;11507:17;11503:27;11493:122;;11534:79;;:::i;:::-;11493:122;11651:6;11638:20;11676:123;11795:3;11787:6;11780:4;11772:6;11768:17;11676:123;:::i;:::-;11667:132;;11483:322;11377:428;;;;:::o;11811:742::-;11933:6;11941;11990:2;11978:9;11969:7;11965:23;11961:32;11958:119;;;11996:79;;:::i;:::-;11958:119;12116:1;12141:53;12186:7;12177:6;12166:9;12162:22;12141:53;:::i;:::-;12131:63;;12087:117;12271:2;12260:9;12256:18;12243:32;12302:18;12294:6;12291:30;12288:117;;;12324:79;;:::i;:::-;12288:117;12429:107;12528:7;12519:6;12508:9;12504:22;12429:107;:::i;:::-;12419:117;;12214:332;11811:742;;;;;:::o;12559:98::-;12610:6;12644:5;12638:12;12628:22;;12559:98;;;:::o;12663:168::-;12746:11;12780:6;12775:3;12768:19;12820:4;12815:3;12811:14;12796:29;;12663:168;;;;:::o;12837:246::-;12918:1;12928:113;12942:6;12939:1;12936:13;12928:113;;;13027:1;13022:3;13018:11;13012:18;13008:1;13003:3;12999:11;12992:39;12964:2;12961:1;12957:10;12952:15;;12928:113;;;13075:1;13066:6;13061:3;13057:16;13050:27;12899:184;12837:246;;;:::o;13089:373::-;13175:3;13203:38;13235:5;13203:38;:::i;:::-;13257:70;13320:6;13315:3;13257:70;:::i;:::-;13250:77;;13336:65;13394:6;13389:3;13382:4;13375:5;13371:16;13336:65;:::i;:::-;13426:29;13448:6;13426:29;:::i;:::-;13421:3;13417:39;13410:46;;13179:283;13089:373;;;;:::o;13468:309::-;13579:4;13617:2;13606:9;13602:18;13594:26;;13666:9;13660:4;13656:20;13652:1;13641:9;13637:17;13630:47;13694:76;13765:4;13756:6;13694:76;:::i;:::-;13686:84;;13468:309;;;;:::o;13783:90::-;13817:7;13860:5;13853:13;13846:21;13835:32;;13783:90;;;:::o;13879:109::-;13960:21;13975:5;13960:21;:::i;:::-;13955:3;13948:34;13879:109;;:::o;13994:210::-;14081:4;14119:2;14108:9;14104:18;14096:26;;14132:65;14194:1;14183:9;14179:17;14170:6;14132:65;:::i;:::-;13994:210;;;;:::o;14210:101::-;14246:7;14286:18;14279:5;14275:30;14264:41;;14210:101;;;:::o;14317:120::-;14389:23;14406:5;14389:23;:::i;:::-;14382:5;14379:34;14369:62;;14427:1;14424;14417:12;14369:62;14317:120;:::o;14443:137::-;14488:5;14526:6;14513:20;14504:29;;14542:32;14568:5;14542:32;:::i;:::-;14443:137;;;;:::o;14586:116::-;14656:21;14671:5;14656:21;:::i;:::-;14649:5;14646:32;14636:60;;14692:1;14689;14682:12;14636:60;14586:116;:::o;14708:133::-;14751:5;14789:6;14776:20;14767:29;;14805:30;14829:5;14805:30;:::i;:::-;14708:133;;;;:::o;14847:1049::-;14947:6;14955;14963;14971;14979;14987;15036:3;15024:9;15015:7;15011:23;15007:33;15004:120;;;15043:79;;:::i;:::-;15004:120;15163:1;15188:53;15233:7;15224:6;15213:9;15209:22;15188:53;:::i;:::-;15178:63;;15134:117;15290:2;15316:53;15361:7;15352:6;15341:9;15337:22;15316:53;:::i;:::-;15306:63;;15261:118;15418:2;15444:53;15489:7;15480:6;15469:9;15465:22;15444:53;:::i;:::-;15434:63;;15389:118;15546:2;15572:53;15617:7;15608:6;15597:9;15593:22;15572:53;:::i;:::-;15562:63;;15517:118;15674:3;15701:52;15745:7;15736:6;15725:9;15721:22;15701:52;:::i;:::-;15691:62;;15645:118;15802:3;15829:50;15871:7;15862:6;15851:9;15847:22;15829:50;:::i;:::-;15819:60;;15773:116;14847:1049;;;;;;;;:::o;15902:118::-;15989:24;16007:5;15989:24;:::i;:::-;15984:3;15977:37;15902:118;;:::o;16026:332::-;16147:4;16185:2;16174:9;16170:18;16162:26;;16198:71;16266:1;16255:9;16251:17;16242:6;16198:71;:::i;:::-;16279:72;16347:2;16336:9;16332:18;16323:6;16279:72;:::i;:::-;16026:332;;;;;:::o;16364:329::-;16423:6;16472:2;16460:9;16451:7;16447:23;16443:32;16440:119;;;16478:79;;:::i;:::-;16440:119;16598:1;16623:53;16668:7;16659:6;16648:9;16644:22;16623:53;:::i;:::-;16613:63;;16569:117;16364:329;;;;:::o;16699:108::-;16776:24;16794:5;16776:24;:::i;:::-;16771:3;16764:37;16699:108;;:::o;16813:::-;16890:24;16908:5;16890:24;:::i;:::-;16885:3;16878:37;16813:108;;:::o;16927:105::-;17002:23;17019:5;17002:23;:::i;:::-;16997:3;16990:36;16927:105;;:::o;17038:99::-;17109:21;17124:5;17109:21;:::i;:::-;17104:3;17097:34;17038:99;;:::o;17199:1763::-;17342:6;17337:3;17333:16;17433:4;17426:5;17422:16;17416:23;17452:63;17509:4;17504:3;17500:14;17486:12;17452:63;:::i;:::-;17359:166;17608:4;17601:5;17597:16;17591:23;17627:63;17684:4;17679:3;17675:14;17661:12;17627:63;:::i;:::-;17535:165;17796:4;17789:5;17785:16;17779:23;17815:63;17872:4;17867:3;17863:14;17849:12;17815:63;:::i;:::-;17710:178;17975:4;17968:5;17964:16;17958:23;17994:63;18051:4;18046:3;18042:14;18028:12;17994:63;:::i;:::-;17898:169;18149:4;18142:5;18138:16;18132:23;18168:61;18223:4;18218:3;18214:14;18200:12;18168:61;:::i;:::-;18077:162;18328:4;18321:5;18317:16;18311:23;18347:57;18398:4;18393:3;18389:14;18375:12;18347:57;:::i;:::-;18249:165;18505:4;18498:5;18494:16;18488:23;18524:63;18581:4;18576:3;18572:14;18558:12;18524:63;:::i;:::-;18424:173;18685:4;18678:5;18674:16;18668:23;18704:61;18759:4;18754:3;18750:14;18736:12;18704:61;:::i;:::-;18607:168;18859:6;18852:5;18848:18;18842:25;18880:65;18937:6;18932:3;18928:16;18914:12;18880:65;:::i;:::-;18785:170;17311:1651;17199:1763;;:::o;18968:315::-;19107:4;19145:3;19134:9;19130:19;19122:27;;19159:117;19273:1;19262:9;19258:17;19249:6;19159:117;:::i;:::-;18968:315;;;;:::o;19289:474::-;19357:6;19365;19414:2;19402:9;19393:7;19389:23;19385:32;19382:119;;;19420:79;;:::i;:::-;19382:119;19540:1;19565:53;19610:7;19601:6;19590:9;19586:22;19565:53;:::i;:::-;19555:63;;19511:117;19667:2;19693:53;19738:7;19729:6;19718:9;19714:22;19693:53;:::i;:::-;19683:63;;19638:118;19289:474;;;;;:::o;19769:327::-;19827:6;19876:2;19864:9;19855:7;19851:23;19847:32;19844:119;;;19882:79;;:::i;:::-;19844:119;20002:1;20027:52;20071:7;20062:6;20051:9;20047:22;20027:52;:::i;:::-;20017:62;;19973:116;19769:327;;;;:::o;20208:531::-;20375:4;20370:3;20366:14;20462:4;20455:5;20451:16;20445:23;20481:63;20538:4;20533:3;20529:14;20515:12;20481:63;:::i;:::-;20390:164;20640:4;20633:5;20629:16;20623:23;20659:63;20716:4;20711:3;20707:14;20693:12;20659:63;:::i;:::-;20564:168;20344:395;20208:531;;:::o;20745:362::-;20908:4;20946:2;20935:9;20931:18;20923:26;;20959:141;21097:1;21086:9;21082:17;21073:6;20959:141;:::i;:::-;20745:362;;;;:::o;21113:222::-;21206:4;21244:2;21233:9;21229:18;21221:26;;21257:71;21325:1;21314:9;21310:17;21301:6;21257:71;:::i;:::-;21113:222;;;;:::o;21341:613::-;21415:6;21423;21431;21480:2;21468:9;21459:7;21455:23;21451:32;21448:119;;;21486:79;;:::i;:::-;21448:119;21606:1;21631:53;21676:7;21667:6;21656:9;21652:22;21631:53;:::i;:::-;21621:63;;21577:117;21733:2;21759:53;21804:7;21795:6;21784:9;21780:22;21759:53;:::i;:::-;21749:63;;21704:118;21861:2;21887:50;21929:7;21920:6;21909:9;21905:22;21887:50;:::i;:::-;21877:60;;21832:115;21341:613;;;;;:::o;21960:115::-;22045:23;22062:5;22045:23;:::i;:::-;22040:3;22033:36;21960:115;;:::o;22081:118::-;22168:24;22186:5;22168:24;:::i;:::-;22163:3;22156:37;22081:118;;:::o;22205:328::-;22324:4;22362:2;22351:9;22347:18;22339:26;;22375:69;22441:1;22430:9;22426:17;22417:6;22375:69;:::i;:::-;22454:72;22522:2;22511:9;22507:18;22498:6;22454:72;:::i;:::-;22205:328;;;;;:::o;22552:552::-;22609:8;22619:6;22669:3;22662:4;22654:6;22650:17;22646:27;22636:122;;22677:79;;:::i;:::-;22636:122;22790:6;22777:20;22767:30;;22820:18;22812:6;22809:30;22806:117;;;22842:79;;:::i;:::-;22806:117;22956:4;22948:6;22944:17;22932:29;;23010:3;23002:4;22994:6;22990:17;22980:8;22976:32;22973:41;22970:128;;;23017:79;;:::i;:::-;22970:128;22552:552;;;;;:::o;23110:527::-;23180:6;23188;23237:2;23225:9;23216:7;23212:23;23208:32;23205:119;;;23243:79;;:::i;:::-;23205:119;23391:1;23380:9;23376:17;23363:31;23421:18;23413:6;23410:30;23407:117;;;23443:79;;:::i;:::-;23407:117;23556:64;23612:7;23603:6;23592:9;23588:22;23556:64;:::i;:::-;23538:82;;;;23334:296;23110:527;;;;;:::o;23643:619::-;23720:6;23728;23736;23785:2;23773:9;23764:7;23760:23;23756:32;23753:119;;;23791:79;;:::i;:::-;23753:119;23911:1;23936:53;23981:7;23972:6;23961:9;23957:22;23936:53;:::i;:::-;23926:63;;23882:117;24038:2;24064:53;24109:7;24100:6;24089:9;24085:22;24064:53;:::i;:::-;24054:63;;24009:118;24166:2;24192:53;24237:7;24228:6;24217:9;24213:22;24192:53;:::i;:::-;24182:63;;24137:118;23643:619;;;;;:::o;24268:180::-;24316:77;24313:1;24306:88;24413:4;24410:1;24403:15;24437:4;24434:1;24427:15;24454:442;24603:4;24641:2;24630:9;24626:18;24618:26;;24654:71;24722:1;24711:9;24707:17;24698:6;24654:71;:::i;:::-;24735:72;24803:2;24792:9;24788:18;24779:6;24735:72;:::i;:::-;24817;24885:2;24874:9;24870:18;24861:6;24817:72;:::i;:::-;24454:442;;;;;;:::o;24902:137::-;24956:5;24987:6;24981:13;24972:22;;25003:30;25027:5;25003:30;:::i;:::-;24902:137;;;;:::o;25045:345::-;25112:6;25161:2;25149:9;25140:7;25136:23;25132:32;25129:119;;;25167:79;;:::i;:::-;25129:119;25287:1;25312:61;25365:7;25356:6;25345:9;25341:22;25312:61;:::i;:::-;25302:71;;25258:125;25045:345;;;;:::o;25396:180::-;25444:77;25441:1;25434:88;25541:4;25538:1;25531:15;25565:4;25562:1;25555:15;25582:233;25621:3;25644:24;25662:5;25644:24;:::i;:::-;25635:33;;25690:66;25683:5;25680:77;25677:103;;25760:18;;:::i;:::-;25677:103;25807:1;25800:5;25796:13;25789:20;;25582:233;;;:::o;25821:332::-;25942:4;25980:2;25969:9;25965:18;25957:26;;25993:71;26061:1;26050:9;26046:17;26037:6;25993:71;:::i;:::-;26074:72;26142:2;26131:9;26127:18;26118:6;26074:72;:::i;:::-;25821:332;;;;;:::o;26159:60::-;26187:3;26208:5;26201:12;;26159:60;;;:::o;26225:140::-;26274:9;26307:52;26325:33;26334:23;26351:5;26334:23;:::i;:::-;26325:33;:::i;:::-;26307:52;:::i;:::-;26294:65;;26225:140;;;:::o;26371:129::-;26457:36;26487:5;26457:36;:::i;:::-;26452:3;26445:49;26371:129;;:::o;26506:169::-;26590:11;26624:6;26619:3;26612:19;26664:4;26659:3;26655:14;26640:29;;26506:169;;;;:::o;26681:146::-;26778:6;26773:3;26768;26755:30;26819:1;26810:6;26805:3;26801:16;26794:27;26681:146;;;:::o;26857:317::-;26955:3;26976:71;27040:6;27035:3;26976:71;:::i;:::-;26969:78;;27057:56;27106:6;27101:3;27094:5;27057:56;:::i;:::-;27138:29;27160:6;27138:29;:::i;:::-;27133:3;27129:39;27122:46;;26857:317;;;;;:::o;27180:662::-;27386:4;27424:3;27413:9;27409:19;27401:27;;27438:70;27505:1;27494:9;27490:17;27481:6;27438:70;:::i;:::-;27518:72;27586:2;27575:9;27571:18;27562:6;27518:72;:::i;:::-;27600;27668:2;27657:9;27653:18;27644:6;27600:72;:::i;:::-;27719:9;27713:4;27709:20;27704:2;27693:9;27689:18;27682:48;27747:88;27830:4;27821:6;27813;27747:88;:::i;:::-;27739:96;;27180:662;;;;;;;;:::o;27848:180::-;27896:77;27893:1;27886:88;27993:4;27990:1;27983:15;28017:4;28014:1;28007:15;28034:320;28078:6;28115:1;28109:4;28105:12;28095:22;;28162:1;28156:4;28152:12;28183:18;28173:81;;28239:4;28231:6;28227:17;28217:27;;28173:81;28301:2;28293:6;28290:14;28270:18;28267:38;28264:84;;28320:18;;:::i;:::-;28264:84;28085:269;28034:320;;;:::o;28360:164::-;28500:16;28496:1;28488:6;28484:14;28477:40;28360:164;:::o;28530:366::-;28672:3;28693:67;28757:2;28752:3;28693:67;:::i;:::-;28686:74;;28769:93;28858:3;28769:93;:::i;:::-;28887:2;28882:3;28878:12;28871:19;;28530:366;;;:::o;28902:419::-;29068:4;29106:2;29095:9;29091:18;29083:26;;29155:9;29149:4;29145:20;29141:1;29130:9;29126:17;29119:47;29183:131;29309:4;29183:131;:::i;:::-;29175:139;;28902:419;;;:::o;29327:164::-;29467:16;29463:1;29455:6;29451:14;29444:40;29327:164;:::o;29497:366::-;29639:3;29660:67;29724:2;29719:3;29660:67;:::i;:::-;29653:74;;29736:93;29825:3;29736:93;:::i;:::-;29854:2;29849:3;29845:12;29838:19;;29497:366;;;:::o;29869:419::-;30035:4;30073:2;30062:9;30058:18;30050:26;;30122:9;30116:4;30112:20;30108:1;30097:9;30093:17;30086:47;30150:131;30276:4;30150:131;:::i;:::-;30142:139;;29869:419;;;:::o;30294:216::-;30333:4;30353:19;30370:1;30353:19;:::i;:::-;30348:24;;30386:19;30403:1;30386:19;:::i;:::-;30381:24;;30429:1;30426;30422:9;30414:17;;30453:26;30447:4;30444:36;30441:62;;;30483:18;;:::i;:::-;30441:62;30294:216;;;;:::o;30516:138::-;30564:9;30597:51;30614:33;30623:23;30640:5;30623:23;:::i;:::-;30614:33;:::i;:::-;30597:51;:::i;:::-;30584:64;;30516:138;;;:::o;30660:127::-;30745:35;30774:5;30745:35;:::i;:::-;30740:3;30733:48;30660:127;;:::o;30793:438::-;30940:4;30978:2;30967:9;30963:18;30955:26;;30991:71;31059:1;31048:9;31044:17;31035:6;30991:71;:::i;:::-;31072:72;31140:2;31129:9;31125:18;31116:6;31072:72;:::i;:::-;31154:70;31220:2;31209:9;31205:18;31196:6;31154:70;:::i;:::-;30793:438;;;;;;:::o;31237:172::-;31377:24;31373:1;31365:6;31361:14;31354:48;31237:172;:::o;31415:366::-;31557:3;31578:67;31642:2;31637:3;31578:67;:::i;:::-;31571:74;;31654:93;31743:3;31654:93;:::i;:::-;31772:2;31767:3;31763:12;31756:19;;31415:366;;;:::o;31787:419::-;31953:4;31991:2;31980:9;31976:18;31968:26;;32040:9;32034:4;32030:20;32026:1;32015:9;32011:17;32004:47;32068:131;32194:4;32068:131;:::i;:::-;32060:139;;31787:419;;;:::o;32212:233::-;32352:34;32348:1;32340:6;32336:14;32329:58;32421:16;32416:2;32408:6;32404:15;32397:41;32212:233;:::o;32451:366::-;32593:3;32614:67;32678:2;32673:3;32614:67;:::i;:::-;32607:74;;32690:93;32779:3;32690:93;:::i;:::-;32808:2;32803:3;32799:12;32792:19;;32451:366;;;:::o;32823:419::-;32989:4;33027:2;33016:9;33012:18;33004:26;;33076:9;33070:4;33066:20;33062:1;33051:9;33047:17;33040:47;33104:131;33230:4;33104:131;:::i;:::-;33096:139;;32823:419;;;:::o;33248:85::-;33293:7;33322:5;33311:16;;33248:85;;;:::o;33339:86::-;33374:7;33414:4;33407:5;33403:16;33392:27;;33339:86;;;:::o;33431:154::-;33487:9;33520:59;33536:42;33545:32;33571:5;33545:32;:::i;:::-;33536:42;:::i;:::-;33520:59;:::i;:::-;33507:72;;33431:154;;;:::o;33591:143::-;33684:43;33721:5;33684:43;:::i;:::-;33679:3;33672:56;33591:143;;:::o;33740:234::-;33839:4;33877:2;33866:9;33862:18;33854:26;;33890:77;33964:1;33953:9;33949:17;33940:6;33890:77;:::i;:::-;33740:234;;;;:::o;33980:218::-;34071:4;34109:2;34098:9;34094:18;34086:26;;34122:69;34188:1;34177:9;34173:17;34164:6;34122:69;:::i;:::-;33980:218;;;;:::o;34204:430::-;34347:4;34385:2;34374:9;34370:18;34362:26;;34398:71;34466:1;34455:9;34451:17;34442:6;34398:71;:::i;:::-;34479:72;34547:2;34536:9;34532:18;34523:6;34479:72;:::i;:::-;34561:66;34623:2;34612:9;34608:18;34599:6;34561:66;:::i;:::-;34204:430;;;;;;:::o;34640:96::-;34698:6;34726:3;34716:13;;34640:96;;;;:::o;34742:140::-;34790:4;34813:3;34805:11;;34836:3;34833:1;34826:14;34870:4;34867:1;34857:18;34849:26;;34742:140;;;:::o;34888:93::-;34925:6;34972:2;34967;34960:5;34956:14;34952:23;34942:33;;34888:93;;;:::o;34987:107::-;35031:8;35081:5;35075:4;35071:16;35050:37;;34987:107;;;;:::o;35100:393::-;35169:6;35219:1;35207:10;35203:18;35242:97;35272:66;35261:9;35242:97;:::i;:::-;35360:39;35390:8;35379:9;35360:39;:::i;:::-;35348:51;;35432:4;35428:9;35421:5;35417:21;35408:30;;35481:4;35471:8;35467:19;35460:5;35457:30;35447:40;;35176:317;;35100:393;;;;;:::o;35499:142::-;35549:9;35582:53;35600:34;35609:24;35627:5;35609:24;:::i;:::-;35600:34;:::i;:::-;35582:53;:::i;:::-;35569:66;;35499:142;;;:::o;35647:75::-;35690:3;35711:5;35704:12;;35647:75;;;:::o;35728:269::-;35838:39;35869:7;35838:39;:::i;:::-;35899:91;35948:41;35972:16;35948:41;:::i;:::-;35940:6;35933:4;35927:11;35899:91;:::i;:::-;35893:4;35886:105;35804:193;35728:269;;;:::o;36003:73::-;36048:3;36003:73;:::o;36082:189::-;36159:32;;:::i;:::-;36200:65;36258:6;36250;36244:4;36200:65;:::i;:::-;36135:136;36082:189;;:::o;36277:186::-;36337:120;36354:3;36347:5;36344:14;36337:120;;;36408:39;36445:1;36438:5;36408:39;:::i;:::-;36381:1;36374:5;36370:13;36361:22;;36337:120;;;36277:186;;:::o;36469:541::-;36569:2;36564:3;36561:11;36558:445;;;36603:37;36634:5;36603:37;:::i;:::-;36686:29;36704:10;36686:29;:::i;:::-;36676:8;36672:44;36869:2;36857:10;36854:18;36851:49;;;36890:8;36875:23;;36851:49;36913:80;36969:22;36987:3;36969:22;:::i;:::-;36959:8;36955:37;36942:11;36913:80;:::i;:::-;36573:430;;36558:445;36469:541;;;:::o;37016:117::-;37070:8;37120:5;37114:4;37110:16;37089:37;;37016:117;;;;:::o;37139:169::-;37183:6;37216:51;37264:1;37260:6;37252:5;37249:1;37245:13;37216:51;:::i;:::-;37212:56;37297:4;37291;37287:15;37277:25;;37190:118;37139:169;;;;:::o;37313:295::-;37389:4;37535:29;37560:3;37554:4;37535:29;:::i;:::-;37527:37;;37597:3;37594:1;37590:11;37584:4;37581:21;37573:29;;37313:295;;;;:::o;37613:1398::-;37735:43;37774:3;37769;37735:43;:::i;:::-;37843:18;37835:6;37832:30;37829:56;;;37865:18;;:::i;:::-;37829:56;37909:38;37941:4;37935:11;37909:38;:::i;:::-;37994:66;38053:6;38045;38039:4;37994:66;:::i;:::-;38087:1;38116:2;38108:6;38105:14;38133:1;38128:631;;;;38803:1;38820:6;38817:84;;;38876:9;38871:3;38867:19;38854:33;38845:42;;38817:84;38927:67;38987:6;38980:5;38927:67;:::i;:::-;38921:4;38914:81;38776:229;38098:907;;38128:631;38180:4;38176:9;38168:6;38164:22;38214:36;38245:4;38214:36;:::i;:::-;38272:1;38286:215;38300:7;38297:1;38294:14;38286:215;;;38386:9;38381:3;38377:19;38364:33;38356:6;38349:49;38437:1;38429:6;38425:14;38415:24;;38484:2;38473:9;38469:18;38456:31;;38323:4;38320:1;38316:12;38311:17;;38286:215;;;38529:6;38520:7;38517:19;38514:186;;;38594:9;38589:3;38585:19;38572:33;38637:48;38679:4;38671:6;38667:17;38656:9;38637:48;:::i;:::-;38629:6;38622:64;38537:163;38514:186;38746:1;38742;38734:6;38730:14;38726:22;38720:4;38713:36;38135:624;;;38098:907;;37710:1301;;;37613:1398;;;:::o;39039:314::-;39135:3;39156:70;39219:6;39214:3;39156:70;:::i;:::-;39149:77;;39236:56;39285:6;39280:3;39273:5;39236:56;:::i;:::-;39317:29;39339:6;39317:29;:::i;:::-;39312:3;39308:39;39301:46;;39039:314;;;;;:::o;39359:329::-;39480:4;39518:2;39507:9;39503:18;39495:26;;39567:9;39561:4;39557:20;39553:1;39542:9;39538:17;39531:47;39595:86;39676:4;39667:6;39659;39595:86;:::i;:::-;39587:94;;39359:329;;;;;:::o;39694:194::-;39734:4;39754:20;39772:1;39754:20;:::i;:::-;39749:25;;39788:20;39806:1;39788:20;:::i;:::-;39783:25;;39832:1;39829;39825:9;39817:17;;39856:1;39850:4;39847:11;39844:37;;;39861:18;;:::i;:::-;39844:37;39694:194;;;;:::o;39894:332::-;40015:4;40053:2;40042:9;40038:18;40030:26;;40066:71;40134:1;40123:9;40119:17;40110:6;40066:71;:::i;:::-;40147:72;40215:2;40204:9;40200:18;40191:6;40147:72;:::i;:::-;39894:332;;;;;:::o;40232:225::-;40372:34;40368:1;40360:6;40356:14;40349:58;40441:8;40436:2;40428:6;40424:15;40417:33;40232:225;:::o;40463:366::-;40605:3;40626:67;40690:2;40685:3;40626:67;:::i;:::-;40619:74;;40702:93;40791:3;40702:93;:::i;:::-;40820:2;40815:3;40811:12;40804:19;;40463:366;;;:::o;40835:419::-;41001:4;41039:2;41028:9;41024:18;41016:26;;41088:9;41082:4;41078:20;41074:1;41063:9;41059:17;41052:47;41116:131;41242:4;41116:131;:::i;:::-;41108:139;;40835:419;;;:::o;41260:166::-;41400:18;41396:1;41388:6;41384:14;41377:42;41260:166;:::o;41432:366::-;41574:3;41595:67;41659:2;41654:3;41595:67;:::i;:::-;41588:74;;41671:93;41760:3;41671:93;:::i;:::-;41789:2;41784:3;41780:12;41773:19;;41432:366;;;:::o;41804:419::-;41970:4;42008:2;41997:9;41993:18;41985:26;;42057:9;42051:4;42047:20;42043:1;42032:9;42028:17;42021:47;42085:131;42211:4;42085:131;:::i;:::-;42077:139;;41804:419;;;:::o;42229:167::-;42369:19;42365:1;42357:6;42353:14;42346:43;42229:167;:::o;42402:366::-;42544:3;42565:67;42629:2;42624:3;42565:67;:::i;:::-;42558:74;;42641:93;42730:3;42641:93;:::i;:::-;42759:2;42754:3;42750:12;42743:19;;42402:366;;;:::o;42774:419::-;42940:4;42978:2;42967:9;42963:18;42955:26;;43027:9;43021:4;43017:20;43013:1;43002:9;42998:17;42991:47;43055:131;43181:4;43055:131;:::i;:::-;43047:139;;42774:419;;;:::o;43199:162::-;43339:14;43335:1;43327:6;43323:14;43316:38;43199:162;:::o;43367:366::-;43509:3;43530:67;43594:2;43589:3;43530:67;:::i;:::-;43523:74;;43606:93;43695:3;43606:93;:::i;:::-;43724:2;43719:3;43715:12;43708:19;;43367:366;;;:::o;43739:419::-;43905:4;43943:2;43932:9;43928:18;43920:26;;43992:9;43986:4;43982:20;43978:1;43967:9;43963:17;43956:47;44020:131;44146:4;44020:131;:::i;:::-;44012:139;;43739:419;;;:::o;44164:166::-;44304:18;44300:1;44292:6;44288:14;44281:42;44164:166;:::o;44336:366::-;44478:3;44499:67;44563:2;44558:3;44499:67;:::i;:::-;44492:74;;44575:93;44664:3;44575:93;:::i;:::-;44693:2;44688:3;44684:12;44677:19;;44336:366;;;:::o;44708:419::-;44874:4;44912:2;44901:9;44897:18;44889:26;;44961:9;44955:4;44951:20;44947:1;44936:9;44932:17;44925:47;44989:131;45115:4;44989:131;:::i;:::-;44981:139;;44708:419;;;:::o;45133:172::-;45273:24;45269:1;45261:6;45257:14;45250:48;45133:172;:::o;45311:366::-;45453:3;45474:67;45538:2;45533:3;45474:67;:::i;:::-;45467:74;;45550:93;45639:3;45550:93;:::i;:::-;45668:2;45663:3;45659:12;45652:19;;45311:366;;;:::o;45683:419::-;45849:4;45887:2;45876:9;45872:18;45864:26;;45936:9;45930:4;45926:20;45922:1;45911:9;45907:17;45900:47;45964:131;46090:4;45964:131;:::i;:::-;45956:139;;45683:419;;;:::o;46108:175::-;46248:27;46244:1;46236:6;46232:14;46225:51;46108:175;:::o;46289:366::-;46431:3;46452:67;46516:2;46511:3;46452:67;:::i;:::-;46445:74;;46528:93;46617:3;46528:93;:::i;:::-;46646:2;46641:3;46637:12;46630:19;;46289:366;;;:::o;46661:419::-;46827:4;46865:2;46854:9;46850:18;46842:26;;46914:9;46908:4;46904:20;46900:1;46889:9;46885:17;46878:47;46942:131;47068:4;46942:131;:::i;:::-;46934:139;;46661:419;;;:::o;47086:410::-;47126:7;47149:20;47167:1;47149:20;:::i;:::-;47144:25;;47183:20;47201:1;47183:20;:::i;:::-;47178:25;;47238:1;47235;47231:9;47260:30;47278:11;47260:30;:::i;:::-;47249:41;;47439:1;47430:7;47426:15;47423:1;47420:22;47400:1;47393:9;47373:83;47350:139;;47469:18;;:::i;:::-;47350:139;47134:362;47086:410;;;;:::o;47502:180::-;47550:77;47547:1;47540:88;47647:4;47644:1;47637:15;47671:4;47668:1;47661:15;47688:185;47728:1;47745:20;47763:1;47745:20;:::i;:::-;47740:25;;47779:20;47797:1;47779:20;:::i;:::-;47774:25;;47818:1;47808:35;;47823:18;;:::i;:::-;47808:35;47865:1;47862;47858:9;47853:14;;47688:185;;;;:::o;47879:166::-;48019:18;48015:1;48007:6;48003:14;47996:42;47879:166;:::o;48051:366::-;48193:3;48214:67;48278:2;48273:3;48214:67;:::i;:::-;48207:74;;48290:93;48379:3;48290:93;:::i;:::-;48408:2;48403:3;48399:12;48392:19;;48051:366;;;:::o;48423:419::-;48589:4;48627:2;48616:9;48612:18;48604:26;;48676:9;48670:4;48666:20;48662:1;48651:9;48647:17;48640:47;48704:131;48830:4;48704:131;:::i;:::-;48696:139;;48423:419;;;:::o;48848:182::-;48988:34;48984:1;48976:6;48972:14;48965:58;48848:182;:::o;49036:366::-;49178:3;49199:67;49263:2;49258:3;49199:67;:::i;:::-;49192:74;;49275:93;49364:3;49275:93;:::i;:::-;49393:2;49388:3;49384:12;49377:19;;49036:366;;;:::o;49408:419::-;49574:4;49612:2;49601:9;49597:18;49589:26;;49661:9;49655:4;49651:20;49647:1;49636:9;49632:17;49625:47;49689:131;49815:4;49689:131;:::i;:::-;49681:139;;49408:419;;;:::o;49833:191::-;49873:3;49892:20;49910:1;49892:20;:::i;:::-;49887:25;;49926:20;49944:1;49926:20;:::i;:::-;49921:25;;49969:1;49966;49962:9;49955:16;;49990:3;49987:1;49984:10;49981:36;;;49997:18;;:::i;:::-;49981:36;49833:191;;;;:::o;50030:230::-;50170:34;50166:1;50158:6;50154:14;50147:58;50239:13;50234:2;50226:6;50222:15;50215:38;50030:230;:::o;50266:366::-;50408:3;50429:67;50493:2;50488:3;50429:67;:::i;:::-;50422:74;;50505:93;50594:3;50505:93;:::i;:::-;50623:2;50618:3;50614:12;50607:19;;50266:366;;;:::o;50638:419::-;50804:4;50842:2;50831:9;50827:18;50819:26;;50891:9;50885:4;50881:20;50877:1;50866:9;50862:17;50855:47;50919:131;51045:4;50919:131;:::i;:::-;50911:139;;50638:419;;;:::o;51063:170::-;51203:22;51199:1;51191:6;51187:14;51180:46;51063:170;:::o;51239:366::-;51381:3;51402:67;51466:2;51461:3;51402:67;:::i;:::-;51395:74;;51478:93;51567:3;51478:93;:::i;:::-;51596:2;51591:3;51587:12;51580:19;;51239:366;;;:::o;51611:419::-;51777:4;51815:2;51804:9;51800:18;51792:26;;51864:9;51858:4;51854:20;51850:1;51839:9;51835:17;51828:47;51892:131;52018:4;51892:131;:::i;:::-;51884:139;;51611:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3258600","executionCost":"infinite","totalCost":"infinite"},"external":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":"infinite","getAggregator()":"infinite","getFeeDetails()":"4759","getOrderInfo(bytes32)":"infinite","getSupportedInstitutionName(bytes32)":"infinite","getSupportedInstitutions(bytes32)":"infinite","initialize()":"167007","isTokenSupported(address)":"2972","owner()":"2544","pause()":"infinite","paused()":"2502","refund(uint256,bytes32,bytes32)":"infinite","renounceOwnership()":"30465","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"infinite","settingManagerBool(bytes32,address,bool)":"infinite","settle(bytes32,bytes32,bytes32,address,uint64,bool)":"infinite","transferOwnership(address)":"30876","unpause()":"infinite","updateProtocolAddresses(bytes32,address)":"infinite","updateProtocolAggregator(bytes)":"infinite","updateProtocolFees(uint64)":"infinite"},"internal":{"_calculateFees(bytes32,uint96,bool)":"infinite","_handler(address,uint256,address,address,uint256,bytes32)":"infinite","transferSenderFee(bytes32)":"infinite"}},"methodIdentifiers":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":"2654ec7e","getAggregator()":"3ad59dbc","getFeeDetails()":"b810c636","getOrderInfo(bytes32)":"768c6ec0","getSupportedInstitutionName(bytes32)":"87490d86","getSupportedInstitutions(bytes32)":"02621338","initialize()":"8129fc1c","isTokenSupported(address)":"75151b63","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","refund(uint256,bytes32,bytes32)":"d28a8d32","renounceOwnership()":"715018a6","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"32200882","settingManagerBool(bytes32,address,bool)":"99e3c0b4","settle(bytes32,bytes32,bytes32,address,uint64,bool)":"5fe44cac","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a","updateProtocolAddresses(bytes32,address)":"79a0effb","updateProtocolAggregator(bytes)":"cb79455b","updateProtocolFees(uint64)":"84630736"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"ProtocolAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"ProtocolFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionName\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_isPartner\",\"type\":\"bool\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"updateProtocolAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deposit(address,uint256,bytes32,uint256,bytes32,bytes32,string)\":{\"details\":\"Emitted when deposit is made.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Refunded(uint256,bytes32,bytes32)\":{\"details\":\"Emitted when aggregator refund transaction.\"},\"RewardValidator(address,uint256)\":{\"details\":\"Emitted when primary validator get their rewards.\"},\"Settled(bytes32,bytes32,bytes32,address,uint96)\":{\"details\":\"Emitted when aggregator settle transaction.\"},\"TransferSenderFee(address,uint256)\":{\"details\":\"Emitted when sender get their rewards.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"See {createOrder-IPaycrest}. \"},\"getAggregator()\":{\"details\":\"See {getAggregator-IPaycrest}. \"},\"getFeeDetails()\":{\"details\":\"See {getFeeDetails-IPaycrest}. \"},\"getOrderInfo(bytes32)\":{\"details\":\"See {getOrderInfo-IPaycrest}. \"},\"getSupportedInstitutionName(bytes32)\":{\"details\":\"See {getSupportedInstitutionName-IPaycrest}. \"},\"isTokenSupported(address)\":{\"details\":\"See {isTokenSupported-IPaycrest}. \"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause \"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"refund(uint256,bytes32,bytes32)\":{\"details\":\"See {refund-IPaycrest}. \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"settle(bytes32,bytes32,bytes32,address,uint64,bool)\":{\"details\":\"See {settle-IPaycrest}. \"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Paycrest.sol\":\"Paycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Paycrest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {PaycrestSettingManager} from \\\"./PaycrestSettingManager.sol\\\";\\nimport {IPaycrest, IERC20} from \\\"./interface/IPaycrest.sol\\\";\\n\\n\\ncontract Paycrest is IPaycrest, PaycrestSettingManager, PausableUpgradeable { \\n    using SafeERC20Upgradeable for IERC20;\\n    using ECDSAUpgradeable for bytes32;\\n\\n    struct fee {\\n        uint256 protocolFee;\\n        uint256 liquidityProviderAmount;\\n    }\\n\\n    mapping(bytes32 => Order) private order;\\n    mapping(address => uint256) private _nonce;\\n    uint256[50] private __gap;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize() external initializer {\\n        MAX_BPS = 100_000;\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    modifier onlyAggregator {\\n        require(msg.sender == _aggregatorAddress, \\\"OnlyAggregator\\\");\\n        _;\\n    }\\n\\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    /** @dev pause */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /** @dev unpause */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n    \\n    /* ##################################################################\\n                                USER CALLS\\n    ################################################################## */\\n    /** @dev See {createOrder-IPaycrest}. */\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        bytes32 _label,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash\\n    ) external whenNotPaused() returns(bytes32 orderId) {\\n        // checks that are required\\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _senderFee, _institutionCode);\\n\\n        // transfer token from msg.sender to contract\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n\\n        // increase users nonce to avoid replay attacks\\n        _nonce[msg.sender] ++;\\n\\n        // generate transaction id for the transaction\\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\\n\\n        // update transaction\\n        order[orderId] = Order({\\n            seller: msg.sender,\\n            token: _token,\\n            senderFeeRecipient: _senderFeeRecipient,\\n            senderFee: _senderFee,\\n            rate: _rate,\\n            isFulfilled: false,\\n            refundAddress: _refundAddress,\\n            currentBPS: uint64(MAX_BPS),\\n            amount: _amount\\n        });\\n\\n        // emit deposit event\\n        emit Deposit(_token, _amount, orderId, _rate, _institutionCode, _label, messageHash);\\n    }\\n\\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, uint256 _senderFee, bytes32 _institutionCode) internal view {\\n        require(_isTokenSupported[_token], \\\"TokenNotSupported\\\");\\n        require(_amount > 0, \\\"AmountIsZero\\\");\\n        require(_refundAddress != address(0), \\\"ThrowZeroAddress\\\");\\n        require(supportedInstitutionsByCode[_institutionCode].name != bytes32(0), \\\"InvalidInstitutionCode\\\");\\n\\n        if (_senderFee > 0) {\\n            require(_senderFeeRecipient != address(0), \\\"InvalidSenderFeeRecipient\\\");\\n        }\\n        require(_senderFee <= (_amount * 500) / MAX_BPS, \\\"SenderFeeTooHigh\\\");\\n    }\\n\\n    /* ##################################################################\\n                                AGGREGATOR FUNCTIONS\\n    ################################################################## */\\n    /** @dev See {settle-IPaycrest}. */\\n    function settle(\\n        bytes32 _splitOrderId,\\n        bytes32 _orderId, \\n        bytes32 _label,\\n        address _liquidityProvider, \\n        uint64 _settlePercent,\\n        bool _isPartner\\n        )  external onlyAggregator() returns(bytes32, address) {\\n        // ensure the transaction has not been fulfilled\\n        require(!order[_orderId].isFulfilled, \\\"OrderFulfilled\\\");\\n\\n        // load the token into memory\\n        address token = order[_orderId].token;\\n\\n        // subtract sum of amount based on the input _settlePercent\\n        order[_orderId].currentBPS -= _settlePercent;\\n\\n        // if transaction amount is zero\\n        // load the fees and transfer associated protocol fees to the protocol fee recipient\\n        ( fee memory _feeParams  ) = _calculateFees(_orderId, _settlePercent, _isPartner);\\n        if(order[_orderId].currentBPS == 0) {\\n            // update the transaction to be fulfilled\\n            order[_orderId].isFulfilled = true;\\n            if (order[_orderId].senderFee > 0) {\\n                // transfer sender fee\\n                transferSenderFee(_orderId);\\n            }\\n        }\\n        \\n        if (_feeParams.protocolFee > 0) {\\n            // transfer protocol fee\\n            IERC20(token).transfer(treasuryAddress, _feeParams.protocolFee);\\n        }\\n\\n        // transfer to liquidity provider \\n        IERC20(token).transfer(_liquidityProvider, _feeParams.liquidityProviderAmount);\\n\\n        // emit event\\n        emit Settled(_splitOrderId, _orderId, _label,  _liquidityProvider, _settlePercent);\\n        return (_orderId, token);\\n    }\\n\\n    function transferSenderFee(bytes32 _orderId) internal {\\n        address recipient = order[_orderId].senderFeeRecipient;\\n        uint256 _fee = order[_orderId].senderFee;\\n        // transfer sender fee\\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\\n        // emmit event\\n        emit TransferSenderFee(recipient, _fee);\\n    }\\n\\n    /** @dev See {refund-IPaycrest}. */\\n    function refund(uint256 _fee, bytes32 _orderId, bytes32 _label) external onlyAggregator() returns(bool) {\\n        // ensure the transaction has not been fulfilled\\n        require(!order[_orderId].isFulfilled, \\\"OrderFulfilled\\\");\\n\\n        // deduct fee from order amount\\n        uint256 refundAmount = order[_orderId].amount - _fee;\\n        IERC20(order[_orderId].token).transfer(treasuryAddress, _fee);\\n\\n        // reset state values\\n        order[_orderId].isFulfilled = true;\\n        order[_orderId].currentBPS = 0;\\n    \\n        // transfer to sender and emit event\\n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, refundAmount);\\n        emit Refunded(_fee, _orderId, _label);\\n\\n        return true;\\n    }\\n\\n    function _calculateFees(bytes32 _orderId, uint96 _settlePercent, bool _isPartner) private view returns(fee memory _feeParams ) {\\n        // get the total amount associated with the orderId\\n        uint256 amount = order[_orderId].amount;\\n\\n        // get sender fee from amount\\n        amount = amount - order[_orderId].senderFee;\\n\\n        // get the settled percent that is scheduled for this amount\\n        _feeParams.liquidityProviderAmount = (amount * _settlePercent) / MAX_BPS;\\n\\n        // deduct protocol fees from the new total amount\\n        _feeParams.protocolFee = (_feeParams.liquidityProviderAmount * protocolFeePercent) / MAX_BPS;\\n        \\n        // substract total fees from the new amount after getting the scheduled amount\\n        _feeParams.liquidityProviderAmount = (_feeParams.liquidityProviderAmount - _feeParams.protocolFee);\\n\\n        // if (_isPartner) protocol fee should be 0, and the whole protocol fee should be added to liquidity provider\\n        if (_isPartner) {\\n            _feeParams.liquidityProviderAmount += _feeParams.protocolFee;\\n            _feeParams.protocolFee = 0;\\n        }\\n    }\\n    \\n    /* ##################################################################\\n                                VIEW CALLS\\n    ################################################################## */\\n    /** @dev See {getOrderInfo-IPaycrest}. */\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\\n        return order[_orderId];\\n    }\\n\\n    /** @dev See {isTokenSupported-IPaycrest}. */\\n    function isTokenSupported(address _token) external view returns(bool) {\\n        return _isTokenSupported[_token];\\n    }\\n\\n    /** @dev See {getSupportedInstitutionName-IPaycrest}. */\\n    function getSupportedInstitutionName(bytes32 code) external view returns (InstitutionByCode memory) {\\n        return supportedInstitutionsByCode[code];\\n    }\\n\\n    function getSupportedInstitutions(bytes32 currency) external view returns (Institution[] memory) {\\n        Institution[] memory institutions = supportedInstitutions[currency];\\n        uint256 length = institutions.length;\\n        Institution[] memory result = new Institution[](length);\\n        \\n        for (uint256 i = 0; i < length; ) {\\n            result[i] = institutions[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n\\n    /** @dev See {getFeeDetails-IPaycrest}. */\\n    function getFeeDetails() external view returns(\\n        uint64, \\n        uint256\\n    ) {\\n        return(protocolFeePercent, MAX_BPS);\\n    }\\n\\n    /** @dev See {getAggregator-IPaycrest}. */\\n    function getAggregator() external view returns(bytes memory) {\\n        return _aggregator;\\n    } \\n}\\n\",\"keccak256\":\"0x639ca68d37e8616493052306b9dc4eb6bb119a49ddef9e8f647b6ba25422c63c\",\"license\":\"UNLICENSED\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    struct Institution {\\n        bytes32 code;\\n        bytes32 name;\\n    }\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n    uint256 internal MAX_BPS;\\n    uint64 internal protocolFeePercent;\\n    address internal treasuryAddress;\\n    address internal _aggregatorAddress;\\n    bytes internal _aggregator;\\n    \\n    // this should decrease if more slots are needed on this contract to avoid collisions with base contract\\n    uint256[50] private __gap;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n\\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event ProtocolFeesUpdated(uint64 protocolFee);\\n    event ProtocolAddressesUpdated(address treasuryAddress);\\n    event SetAggregator(bytes aggregator);\\n    event SetFeeRecipient(address treasuryAddress);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function updateProtocolFees(uint64 _protocolFeePercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        emit ProtocolFeesUpdated(_protocolFeePercent);\\n    }\\n\\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"treasury\\\") treasuryAddress = value;\\n        emit ProtocolAddressesUpdated(treasuryAddress);\\n    }\\n\\n    function updateProtocolAggregator(bytes calldata aggregator) external onlyOwner {\\n        _aggregator = aggregator;\\n        emit SetAggregator(aggregator);\\n    }\\n}\\n\",\"keccak256\":\"0x8138addd429d835214d4ac4ea0f651cf70efa4d1798592f55478dadf3b9c5a1b\",\"license\":\"UNLICENSED\"},\"contracts/interface/IPaycrest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @author Paycrest Team\\n * Factory and global config params\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /// @dev Emitted when deposit is made.\\n    event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash);\\n    /// @dev Emitted when aggregator settle transaction.\\n    event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent);\\n    /// @dev Emitted when aggregator refund transaction.\\n    event Refunded(uint256 _fee, bytes32 indexed orderId, bytes32 label);\\n    /// @dev Emitted when sender get their rewards.\\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\\n    /// @dev Emitted when primary validator get their rewards.\\n    event RewardValidator(address indexed validator, uint256 indexed amount);\\n\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    struct TransactionMetadata {\\n        bytes8 identifier;                 //                                                                   slot 0\\n        bytes8 institution;                //                                                                   slot 0\\n        bytes8 name;                       //                                                                   slot 0\\n        bytes8 currency;                   //                                                                   slot 0\\n        uint256 liquidityProviderID;       //                                                                   slot 1\\n    }\\n\\n    struct Order {\\n        address seller;                     //                                                                   slot 0\\n        address token;                      //                                                                   slot 1\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint96 rate;                        //                                                                   slot 1\\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\\n        uint96 currentBPS;                  //                                                                   slot 2 {}\\n        uint256 amount;                     //                                                                   slot 3\\n    }\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /// @notice lock sender `_amount` of `token` into Paycrest.\\n    /// Requirements:\\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _token address of the token.\\n    /// @param _amount amount in the decimal of `_token` above.\\n    /// @param _institutionCode institution code of the sender.\\n    /// @param _label reference of the sender.\\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\\n    /// @param _senderFeeRecipient address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\\n    /// @param _senderFee amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\\n    /// @return _orderId the bytes20 which is the orderId\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        bytes32 _label,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash)  external returns(bytes32 _orderId);\\n\\n    /// @notice settle transaction and distribute rewards accordingly.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _orderId transaction Id.\\n    /// @param _label reference of the sender.\\n    /// @param _liquidityProvider address of the liquidity provider.\\n    /// @param _settlePercent rate at which the transaction is settled.\\n    /// @param _isPartner is the liquidity provider a partner.\\n    /// @return return the status of transaction {bool}\\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address _liquidityProvider, uint64 _settlePercent, bool _isPartner)  external returns(bytes32, address);\\n\\n    /// @notice refund to the specified refundable address.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `isFulfilled` must be false.\\n    /// @param _fee amount to be deducted from the amount to be refunded\\n    /// @param _orderId transaction Id.\\n    /// @param _label reference of the sender.\\n    /// @return return the status of transaction {bool}\\n    function refund(uint256 _fee, bytes32 _orderId, bytes32 _label)  external returns(bool);\\n\\n    /// @notice get supported token from Paycrest.\\n    /// @param _token address of the token to check.\\n    /// @return return the status of `_token` {bool}\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /// @notice get order details.\\n    /// @param _orderId transaction Id.\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /// @notice get every rewards and address on Paycrest.\\n    /// @return protocolReward amount that will be taken in percentage on all trade.\\n    /// @return max_bps maximum amount in bps \\\"100% == 100_000\\\".\\n    function getFeeDetails() external view returns(\\n        uint64 protocolReward, \\n        uint256 max_bps\\n    );\\n\\n    /// @notice get public key of liquidity aggregator.\\n    /// @return aggregator public key.\\n    function getAggregator() external view returns(bytes memory);\\n}\\n\",\"keccak256\":\"0x49729590c9029903138bb45f3761bfa26643a9a1c17e2a7eecd46db78602046b\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/Paycrest.sol:Paycrest","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"contracts/Paycrest.sol:Paycrest","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1288,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/Paycrest.sol:Paycrest","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3798,"contract":"contracts/Paycrest.sol:Paycrest","label":"MAX_BPS","offset":0,"slot":"101","type":"t_uint256"},{"astId":3800,"contract":"contracts/Paycrest.sol:Paycrest","label":"protocolFeePercent","offset":0,"slot":"102","type":"t_uint64"},{"astId":3802,"contract":"contracts/Paycrest.sol:Paycrest","label":"treasuryAddress","offset":8,"slot":"102","type":"t_address"},{"astId":3804,"contract":"contracts/Paycrest.sol:Paycrest","label":"_aggregatorAddress","offset":0,"slot":"103","type":"t_address"},{"astId":3806,"contract":"contracts/Paycrest.sol:Paycrest","label":"_aggregator","offset":0,"slot":"104","type":"t_bytes_storage"},{"astId":3810,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"105","type":"t_array(t_uint256)50_storage"},{"astId":3814,"contract":"contracts/Paycrest.sol:Paycrest","label":"_isTokenSupported","offset":0,"slot":"155","type":"t_mapping(t_address,t_bool)"},{"astId":3820,"contract":"contracts/Paycrest.sol:Paycrest","label":"supportedInstitutions","offset":0,"slot":"156","type":"t_mapping(t_bytes32,t_array(t_struct(Institution)3791_storage)dyn_storage)"},{"astId":3825,"contract":"contracts/Paycrest.sol:Paycrest","label":"supportedInstitutionsByCode","offset":0,"slot":"157","type":"t_mapping(t_bytes32,t_struct(InstitutionByCode)3796_storage)"},{"astId":321,"contract":"contracts/Paycrest.sol:Paycrest","label":"_paused","offset":0,"slot":"158","type":"t_bool"},{"astId":426,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"159","type":"t_array(t_uint256)49_storage"},{"astId":3102,"contract":"contracts/Paycrest.sol:Paycrest","label":"order","offset":0,"slot":"208","type":"t_mapping(t_bytes32,t_struct(Order)4094_storage)"},{"astId":3106,"contract":"contracts/Paycrest.sol:Paycrest","label":"_nonce","offset":0,"slot":"209","type":"t_mapping(t_address,t_uint256)"},{"astId":3110,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"210","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Institution)3791_storage)dyn_storage":{"base":"t_struct(Institution)3791_storage","encoding":"dynamic_array","label":"struct PaycrestSettingManager.Institution[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_array(t_struct(Institution)3791_storage)dyn_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])","numberOfBytes":"32","value":"t_array(t_struct(Institution)3791_storage)dyn_storage"},"t_mapping(t_bytes32,t_struct(InstitutionByCode)3796_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)","numberOfBytes":"32","value":"t_struct(InstitutionByCode)3796_storage"},"t_mapping(t_bytes32,t_struct(Order)4094_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IPaycrest.Order)","numberOfBytes":"32","value":"t_struct(Order)4094_storage"},"t_struct(Institution)3791_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.Institution","members":[{"astId":3788,"contract":"contracts/Paycrest.sol:Paycrest","label":"code","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3790,"contract":"contracts/Paycrest.sol:Paycrest","label":"name","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(InstitutionByCode)3796_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.InstitutionByCode","members":[{"astId":3793,"contract":"contracts/Paycrest.sol:Paycrest","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3795,"contract":"contracts/Paycrest.sol:Paycrest","label":"currency","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Order)4094_storage":{"encoding":"inplace","label":"struct IPaycrest.Order","members":[{"astId":4077,"contract":"contracts/Paycrest.sol:Paycrest","label":"seller","offset":0,"slot":"0","type":"t_address"},{"astId":4079,"contract":"contracts/Paycrest.sol:Paycrest","label":"token","offset":0,"slot":"1","type":"t_address"},{"astId":4081,"contract":"contracts/Paycrest.sol:Paycrest","label":"senderFeeRecipient","offset":0,"slot":"2","type":"t_address"},{"astId":4083,"contract":"contracts/Paycrest.sol:Paycrest","label":"senderFee","offset":0,"slot":"3","type":"t_uint256"},{"astId":4085,"contract":"contracts/Paycrest.sol:Paycrest","label":"rate","offset":0,"slot":"4","type":"t_uint96"},{"astId":4087,"contract":"contracts/Paycrest.sol:Paycrest","label":"isFulfilled","offset":12,"slot":"4","type":"t_bool"},{"astId":4089,"contract":"contracts/Paycrest.sol:Paycrest","label":"refundAddress","offset":0,"slot":"5","type":"t_address"},{"astId":4091,"contract":"contracts/Paycrest.sol:Paycrest","label":"currentBPS","offset":20,"slot":"5","type":"t_uint96"},{"astId":4093,"contract":"contracts/Paycrest.sol:Paycrest","label":"amount","offset":0,"slot":"6","type":"t_uint256"}],"numberOfBytes":"224"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/PaycrestSettingManager.sol":{"PaycrestSettingManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"treasuryAddress","type":"address"}],"name":"ProtocolAddressesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"protocolFee","type":"uint64"}],"name":"ProtocolFeesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"SetAggregator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"treasuryAddress","type":"address"}],"name":"SetFeeRecipient","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"SettingManagerBool","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"institutions","type":"tuple[]"}],"name":"setSupportedInstitutions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateProtocolAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"updateProtocolAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_protocolFeePercent","type":"uint64"}],"name":"updateProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5061125d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100eb57806399e3c0b414610109578063cb79455b14610125578063f2fde38b1461014157610088565b8063322008821461008d578063715018a6146100a957806379a0effb146100b357806384630736146100cf575b600080fd5b6100a760048036038101906100a291906109ab565b61015d565b005b6100b1610271565b005b6100cd60048036038101906100c89190610a65565b610285565b005b6100e960048036038101906100e49190610ae5565b6103c2565b005b6100f361042d565b6040516101009190610b21565b60405180910390f35b610123600480360381019061011e9190610b74565b610457565b005b61013f600480360381019061013a9190610c22565b61058d565b005b61015b60048036038101906101569190610c6f565b6105e4565b005b610165610667565b60008151905060005b8181101561026b57609c600085815260200190815260200160002083828151811061019c5761019b610c9c565b5b6020026020010151908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050604051806040016040528084838151811061020157610200610c9c565b5b602002602001015160200151815260200185815250609d600085848151811061022d5761022c610c9c565b5b60200260200101516000015181526020019081526020016000206000820151816000015560208201518160010155905050808060010191505061016e565b50505050565b610279610667565b61028360006106e5565b565b61028d610667565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390610d28565b60405180910390fd5b7f747265617375727900000000000000000000000000000000000000000000000082036103655780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7fd8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516103b69190610b21565b60405180910390a15050565b6103ca610667565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fb94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e26446816040516104229190610d57565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61045f610667565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590610d28565b60405180910390fd5b7f746f6b656e000000000000000000000000000000000000000000000000000000830361054d5780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161058093929190610d90565b60405180910390a1505050565b610595610667565b8181606891826105a6929190610fe8565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef82826040516105d8929190611105565b60405180910390a15050565b6105ec610667565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361065b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106529061119b565b60405180910390fd5b610664816106e5565b50565b61066f6107ab565b73ffffffffffffffffffffffffffffffffffffffff1661068d61042d565b73ffffffffffffffffffffffffffffffffffffffff16146106e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106da90611207565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6107da816107c7565b81146107e557600080fd5b50565b6000813590506107f7816107d1565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61084b82610802565b810181811067ffffffffffffffff8211171561086a57610869610813565b5b80604052505050565b600061087d6107b3565b90506108898282610842565b919050565b600067ffffffffffffffff8211156108a9576108a8610813565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156108da576108d96108bf565b5b6108e46040610873565b905060006108f4848285016107e8565b6000830152506020610908848285016107e8565b60208301525092915050565b60006109276109228461088e565b610873565b9050808382526020820190506040840283018581111561094a576109496108ba565b5b835b81811015610973578061095f88826108c4565b84526020840193505060408101905061094c565b5050509392505050565b600082601f830112610992576109916107fd565b5b81356109a2848260208601610914565b91505092915050565b600080604083850312156109c2576109c16107bd565b5b60006109d0858286016107e8565b925050602083013567ffffffffffffffff8111156109f1576109f06107c2565b5b6109fd8582860161097d565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3282610a07565b9050919050565b610a4281610a27565b8114610a4d57600080fd5b50565b600081359050610a5f81610a39565b92915050565b60008060408385031215610a7c57610a7b6107bd565b5b6000610a8a858286016107e8565b9250506020610a9b85828601610a50565b9150509250929050565b600067ffffffffffffffff82169050919050565b610ac281610aa5565b8114610acd57600080fd5b50565b600081359050610adf81610ab9565b92915050565b600060208284031215610afb57610afa6107bd565b5b6000610b0984828501610ad0565b91505092915050565b610b1b81610a27565b82525050565b6000602082019050610b366000830184610b12565b92915050565b60008115159050919050565b610b5181610b3c565b8114610b5c57600080fd5b50565b600081359050610b6e81610b48565b92915050565b600080600060608486031215610b8d57610b8c6107bd565b5b6000610b9b868287016107e8565b9350506020610bac86828701610a50565b9250506040610bbd86828701610b5f565b9150509250925092565b600080fd5b60008083601f840112610be257610be16107fd565b5b8235905067ffffffffffffffff811115610bff57610bfe610bc7565b5b602083019150836001820283011115610c1b57610c1a6108ba565b5b9250929050565b60008060208385031215610c3957610c386107bd565b5b600083013567ffffffffffffffff811115610c5757610c566107c2565b5b610c6385828601610bcc565b92509250509250929050565b600060208284031215610c8557610c846107bd565b5b6000610c9384828501610a50565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b6000610d12601683610ccb565b9150610d1d82610cdc565b602082019050919050565b60006020820190508181036000830152610d4181610d05565b9050919050565b610d5181610aa5565b82525050565b6000602082019050610d6c6000830184610d48565b92915050565b610d7b816107c7565b82525050565b610d8a81610b3c565b82525050565b6000606082019050610da56000830186610d72565b610db26020830185610b12565b610dbf6040830184610d81565b949350505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e1957607f821691505b602082108103610e2c57610e2b610dd2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610e947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610e57565b610e9e8683610e57565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610ee5610ee0610edb84610eb6565b610ec0565b610eb6565b9050919050565b6000819050919050565b610eff83610eca565b610f13610f0b82610eec565b848454610e64565b825550505050565b600090565b610f28610f1b565b610f33818484610ef6565b505050565b5b81811015610f5757610f4c600082610f20565b600181019050610f39565b5050565b601f821115610f9c57610f6d81610e32565b610f7684610e47565b81016020851015610f85578190505b610f99610f9185610e47565b830182610f38565b50505b505050565b600082821c905092915050565b6000610fbf60001984600802610fa1565b1980831691505092915050565b6000610fd88383610fae565b9150826002028217905092915050565b610ff28383610dc7565b67ffffffffffffffff81111561100b5761100a610813565b5b6110158254610e01565b611020828285610f5b565b6000601f83116001811461104f576000841561103d578287013590505b6110478582610fcc565b8655506110af565b601f19841661105d86610e32565b60005b8281101561108557848901358255600182019150602085019450602081019050611060565b868310156110a2578489013561109e601f891682610fae565b8355505b6001600288020188555050505b50505050505050565b600082825260208201905092915050565b82818337600083830152505050565b60006110e483856110b8565b93506110f18385846110c9565b6110fa83610802565b840190509392505050565b600060208201905081810360008301526111208184866110d8565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611185602683610ccb565b915061119082611129565b604082019050919050565b600060208201905081810360008301526111b481611178565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006111f1602083610ccb565b91506111fc826111bb565b602082019050919050565b60006020820190508181036000830152611220816111e4565b905091905056fea26469706673582212200ac48374db43635dc515d1616cb1293eebaaa8faa4246c902deee08ae6be56f664736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x141 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x32200882 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0xCF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x9AB JUMP JUMPDEST PUSH2 0x15D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB1 PUSH2 0x271 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xA65 JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE4 SWAP2 SWAP1 PUSH2 0xAE5 JUMP JUMPDEST PUSH2 0x3C2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF3 PUSH2 0x42D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0xB21 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x123 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11E SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x457 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x156 SWAP2 SWAP1 PUSH2 0xC6F JUMP JUMPDEST PUSH2 0x5E4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x165 PUSH2 0x667 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x9C PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x19C JUMPI PUSH2 0x19B PUSH2 0xC9C JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x201 JUMPI PUSH2 0x200 PUSH2 0xC9C JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9D PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI PUSH2 0x22C PUSH2 0xC9C JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x16E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x279 PUSH2 0x667 JUMP JUMPDEST PUSH2 0x283 PUSH1 0x0 PUSH2 0x6E5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x28D PUSH2 0x667 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F3 SWAP1 PUSH2 0xD28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x7472656173757279000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x365 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xD8EF77A7D69A6B79F131ECD9AA37060BA0853BBD37CB175EC1ABD05738CE27CB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH2 0x3B6 SWAP2 SWAP1 PUSH2 0xB21 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x3CA PUSH2 0x667 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xB94068A4BD2571ACEE6AC79ACC9DCDCF10C31425D35F09E88F154EC520E26446 DUP2 PUSH1 0x40 MLOAD PUSH2 0x422 SWAP2 SWAP1 PUSH2 0xD57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x45F PUSH2 0x667 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C5 SWAP1 PUSH2 0xD28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x54D JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x580 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD90 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x595 PUSH2 0x667 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x5A6 SWAP3 SWAP2 SWAP1 PUSH2 0xFE8 JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x5D8 SWAP3 SWAP2 SWAP1 PUSH2 0x1105 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x5EC PUSH2 0x667 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x65B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x652 SWAP1 PUSH2 0x119B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x664 DUP2 PUSH2 0x6E5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x66F PUSH2 0x7AB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x68D PUSH2 0x42D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6DA SWAP1 PUSH2 0x1207 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7DA DUP2 PUSH2 0x7C7 JUMP JUMPDEST DUP2 EQ PUSH2 0x7E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x7F7 DUP2 PUSH2 0x7D1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x84B DUP3 PUSH2 0x802 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x86A JUMPI PUSH2 0x869 PUSH2 0x813 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87D PUSH2 0x7B3 JUMP JUMPDEST SWAP1 POP PUSH2 0x889 DUP3 DUP3 PUSH2 0x842 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x8A9 JUMPI PUSH2 0x8A8 PUSH2 0x813 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8DA JUMPI PUSH2 0x8D9 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x8E4 PUSH1 0x40 PUSH2 0x873 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8F4 DUP5 DUP3 DUP6 ADD PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x908 DUP5 DUP3 DUP6 ADD PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x927 PUSH2 0x922 DUP5 PUSH2 0x88E JUMP JUMPDEST PUSH2 0x873 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x94A JUMPI PUSH2 0x949 PUSH2 0x8BA JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x973 JUMPI DUP1 PUSH2 0x95F DUP9 DUP3 PUSH2 0x8C4 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x94C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x992 JUMPI PUSH2 0x991 PUSH2 0x7FD JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9A2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x914 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9C2 JUMPI PUSH2 0x9C1 PUSH2 0x7BD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x9D0 DUP6 DUP3 DUP7 ADD PUSH2 0x7E8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9F1 JUMPI PUSH2 0x9F0 PUSH2 0x7C2 JUMP JUMPDEST JUMPDEST PUSH2 0x9FD DUP6 DUP3 DUP7 ADD PUSH2 0x97D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA32 DUP3 PUSH2 0xA07 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA42 DUP2 PUSH2 0xA27 JUMP JUMPDEST DUP2 EQ PUSH2 0xA4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA5F DUP2 PUSH2 0xA39 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA7C JUMPI PUSH2 0xA7B PUSH2 0x7BD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA8A DUP6 DUP3 DUP7 ADD PUSH2 0x7E8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xA9B DUP6 DUP3 DUP7 ADD PUSH2 0xA50 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAC2 DUP2 PUSH2 0xAA5 JUMP JUMPDEST DUP2 EQ PUSH2 0xACD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xADF DUP2 PUSH2 0xAB9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAFB JUMPI PUSH2 0xAFA PUSH2 0x7BD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB09 DUP5 DUP3 DUP6 ADD PUSH2 0xAD0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB1B DUP2 PUSH2 0xA27 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB36 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB12 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB51 DUP2 PUSH2 0xB3C JUMP JUMPDEST DUP2 EQ PUSH2 0xB5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB6E DUP2 PUSH2 0xB48 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB8D JUMPI PUSH2 0xB8C PUSH2 0x7BD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB9B DUP7 DUP3 DUP8 ADD PUSH2 0x7E8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xBAC DUP7 DUP3 DUP8 ADD PUSH2 0xA50 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xBBD DUP7 DUP3 DUP8 ADD PUSH2 0xB5F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xBE2 JUMPI PUSH2 0xBE1 PUSH2 0x7FD JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBFF JUMPI PUSH2 0xBFE PUSH2 0xBC7 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xC1B JUMPI PUSH2 0xC1A PUSH2 0x8BA JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC39 JUMPI PUSH2 0xC38 PUSH2 0x7BD JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC57 JUMPI PUSH2 0xC56 PUSH2 0x7C2 JUMP JUMPDEST JUMPDEST PUSH2 0xC63 DUP6 DUP3 DUP7 ADD PUSH2 0xBCC JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC85 JUMPI PUSH2 0xC84 PUSH2 0x7BD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC93 DUP5 DUP3 DUP6 ADD PUSH2 0xA50 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD12 PUSH1 0x16 DUP4 PUSH2 0xCCB JUMP JUMPDEST SWAP2 POP PUSH2 0xD1D DUP3 PUSH2 0xCDC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD41 DUP2 PUSH2 0xD05 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD51 DUP2 PUSH2 0xAA5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD6C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD48 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD7B DUP2 PUSH2 0x7C7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xD8A DUP2 PUSH2 0xB3C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xDA5 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xD72 JUMP JUMPDEST PUSH2 0xDB2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xB12 JUMP JUMPDEST PUSH2 0xDBF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xD81 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xE19 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xE2C JUMPI PUSH2 0xE2B PUSH2 0xDD2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0xE94 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0xE57 JUMP JUMPDEST PUSH2 0xE9E DUP7 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEE5 PUSH2 0xEE0 PUSH2 0xEDB DUP5 PUSH2 0xEB6 JUMP JUMPDEST PUSH2 0xEC0 JUMP JUMPDEST PUSH2 0xEB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEFF DUP4 PUSH2 0xECA JUMP JUMPDEST PUSH2 0xF13 PUSH2 0xF0B DUP3 PUSH2 0xEEC JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0xE64 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xF28 PUSH2 0xF1B JUMP JUMPDEST PUSH2 0xF33 DUP2 DUP5 DUP5 PUSH2 0xEF6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF57 JUMPI PUSH2 0xF4C PUSH1 0x0 DUP3 PUSH2 0xF20 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xF39 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xF9C JUMPI PUSH2 0xF6D DUP2 PUSH2 0xE32 JUMP JUMPDEST PUSH2 0xF76 DUP5 PUSH2 0xE47 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0xF85 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0xF99 PUSH2 0xF91 DUP6 PUSH2 0xE47 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0xF38 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBF PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0xFA1 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD8 DUP4 DUP4 PUSH2 0xFAE JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xFF2 DUP4 DUP4 PUSH2 0xDC7 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x100B JUMPI PUSH2 0x100A PUSH2 0x813 JUMP JUMPDEST JUMPDEST PUSH2 0x1015 DUP3 SLOAD PUSH2 0xE01 JUMP JUMPDEST PUSH2 0x1020 DUP3 DUP3 DUP6 PUSH2 0xF5B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x104F JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x103D JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x1047 DUP6 DUP3 PUSH2 0xFCC JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x10AF JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x105D DUP7 PUSH2 0xE32 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1085 JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1060 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x10A2 JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x109E PUSH1 0x1F DUP10 AND DUP3 PUSH2 0xFAE JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E4 DUP4 DUP6 PUSH2 0x10B8 JUMP JUMPDEST SWAP4 POP PUSH2 0x10F1 DUP4 DUP6 DUP5 PUSH2 0x10C9 JUMP JUMPDEST PUSH2 0x10FA DUP4 PUSH2 0x802 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1120 DUP2 DUP5 DUP7 PUSH2 0x10D8 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1185 PUSH1 0x26 DUP4 PUSH2 0xCCB JUMP JUMPDEST SWAP2 POP PUSH2 0x1190 DUP3 PUSH2 0x1129 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11B4 DUP2 PUSH2 0x1178 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11F1 PUSH1 0x20 DUP4 PUSH2 0xCCB JUMP JUMPDEST SWAP2 POP PUSH2 0x11FC DUP3 PUSH2 0x11BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1220 DUP2 PUSH2 0x11E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP 0xC4 DUP4 PUSH21 0xDB43635DC515D1616CB1293EEBAAA8FAA4246C902D 0xEE 0xE0 DUP11 0xE6 0xBE JUMP 0xF6 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"141:2655:16:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_68":{"entryPoint":1639,"id":68,"parameterSlots":0,"returnSlots":0},"@_msgSender_1274":{"entryPoint":1963,"id":1274,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_125":{"entryPoint":1765,"id":125,"parameterSlots":1,"returnSlots":0},"@owner_54":{"entryPoint":1069,"id":54,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":625,"id":82,"parameterSlots":0,"returnSlots":0},"@setSupportedInstitutions_3941":{"entryPoint":349,"id":3941,"parameterSlots":2,"returnSlots":0},"@settingManagerBool_3887":{"entryPoint":1111,"id":3887,"parameterSlots":3,"returnSlots":0},"@transferOwnership_105":{"entryPoint":1508,"id":105,"parameterSlots":1,"returnSlots":0},"@updateProtocolAddresses_3989":{"entryPoint":645,"id":3989,"parameterSlots":2,"returnSlots":0},"@updateProtocolAggregator_4005":{"entryPoint":1421,"id":4005,"parameterSlots":2,"returnSlots":0},"@updateProtocolFees_3957":{"entryPoint":962,"id":3957,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr":{"entryPoint":2324,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2640,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr":{"entryPoint":2429,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":2911,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":2024,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":3020,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_struct$_Institution_$3791_memory_ptr":{"entryPoint":2244,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64":{"entryPoint":2768,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3183,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":2661,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":2932,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr":{"entryPoint":2475,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":3106,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64":{"entryPoint":2789,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":2834,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3457,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3442,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":4312,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":4472,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack":{"entryPoint":3333,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":4580,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":3400,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":2849,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":3472,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4357,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4507,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3368,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4615,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":3415,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":2163,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":1971,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr":{"entryPoint":2190,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_bytes_storage":{"entryPoint":3634,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_calldata_ptr":{"entryPoint":3527,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":4280,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3275,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_bytes_storage":{"entryPoint":3931,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":2599,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":2876,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":1991,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2567,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":3766,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":2725,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":3896,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":3786,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage":{"entryPoint":4072,"id":null,"parameterSlots":3,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":4297,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":3655,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":3585,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":4044,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":2114,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":3776,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":4014,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":3538,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3228,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2067,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":3820,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":3015,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":2045,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":2239,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":2234,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":1986,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1981,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2050,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":3671,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":4001,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":3872,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":4393,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4":{"entryPoint":3292,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":4539,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":3684,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":3830,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2617,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":2888,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":2001,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":2745,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":3867,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:19957:18","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:18","statements":[{"nodeType":"YulAssignment","src":"57:19:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:18","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:18"},"nodeType":"YulFunctionCall","src":"67:9:18"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:18"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:18","type":""}],"src":"7:75:18"},{"body":{"nodeType":"YulBlock","src":"177:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:18"},"nodeType":"YulFunctionCall","src":"187:12:18"},"nodeType":"YulExpressionStatement","src":"187:12:18"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:18"},{"body":{"nodeType":"YulBlock","src":"300:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:18"},"nodeType":"YulFunctionCall","src":"310:12:18"},"nodeType":"YulExpressionStatement","src":"310:12:18"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:18"},{"body":{"nodeType":"YulBlock","src":"379:32:18","statements":[{"nodeType":"YulAssignment","src":"389:16:18","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:18"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:18","type":""}],"src":"334:77:18"},{"body":{"nodeType":"YulBlock","src":"460:79:18","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:18"},"nodeType":"YulFunctionCall","src":"519:12:18"},"nodeType":"YulExpressionStatement","src":"519:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:18"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:18"},"nodeType":"YulFunctionCall","src":"490:24:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:18"},"nodeType":"YulFunctionCall","src":"480:35:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:18"},"nodeType":"YulFunctionCall","src":"473:43:18"},"nodeType":"YulIf","src":"470:63:18"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:18","type":""}],"src":"417:122:18"},{"body":{"nodeType":"YulBlock","src":"597:87:18","statements":[{"nodeType":"YulAssignment","src":"607:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:18"},"nodeType":"YulFunctionCall","src":"616:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:18"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:18"},"nodeType":"YulFunctionCall","src":"645:33:18"},"nodeType":"YulExpressionStatement","src":"645:33:18"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:18","type":""}],"src":"545:139:18"},{"body":{"nodeType":"YulBlock","src":"779:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"796:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"799:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"789:6:18"},"nodeType":"YulFunctionCall","src":"789:12:18"},"nodeType":"YulExpressionStatement","src":"789:12:18"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"690:117:18"},{"body":{"nodeType":"YulBlock","src":"861:54:18","statements":[{"nodeType":"YulAssignment","src":"871:38:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"889:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"896:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"885:3:18"},"nodeType":"YulFunctionCall","src":"885:14:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"905:2:18","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"901:3:18"},"nodeType":"YulFunctionCall","src":"901:7:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"881:3:18"},"nodeType":"YulFunctionCall","src":"881:28:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"871:6:18"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"844:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"854:6:18","type":""}],"src":"813:102:18"},{"body":{"nodeType":"YulBlock","src":"949:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"966:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"969:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"959:6:18"},"nodeType":"YulFunctionCall","src":"959:88:18"},"nodeType":"YulExpressionStatement","src":"959:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1063:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1066:4:18","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1056:6:18"},"nodeType":"YulFunctionCall","src":"1056:15:18"},"nodeType":"YulExpressionStatement","src":"1056:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1087:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1090:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1080:6:18"},"nodeType":"YulFunctionCall","src":"1080:15:18"},"nodeType":"YulExpressionStatement","src":"1080:15:18"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"921:180:18"},{"body":{"nodeType":"YulBlock","src":"1150:238:18","statements":[{"nodeType":"YulVariableDeclaration","src":"1160:58:18","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1182:6:18"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1212:4:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1190:21:18"},"nodeType":"YulFunctionCall","src":"1190:27:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1178:3:18"},"nodeType":"YulFunctionCall","src":"1178:40:18"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1164:10:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"1329:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1331:16:18"},"nodeType":"YulFunctionCall","src":"1331:18:18"},"nodeType":"YulExpressionStatement","src":"1331:18:18"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1272:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"1284:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1269:2:18"},"nodeType":"YulFunctionCall","src":"1269:34:18"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1308:10:18"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1320:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1305:2:18"},"nodeType":"YulFunctionCall","src":"1305:22:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1266:2:18"},"nodeType":"YulFunctionCall","src":"1266:62:18"},"nodeType":"YulIf","src":"1263:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1367:2:18","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1371:10:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1360:6:18"},"nodeType":"YulFunctionCall","src":"1360:22:18"},"nodeType":"YulExpressionStatement","src":"1360:22:18"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1136:6:18","type":""},{"name":"size","nodeType":"YulTypedName","src":"1144:4:18","type":""}],"src":"1107:281:18"},{"body":{"nodeType":"YulBlock","src":"1435:88:18","statements":[{"nodeType":"YulAssignment","src":"1445:30:18","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1455:18:18"},"nodeType":"YulFunctionCall","src":"1455:20:18"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1445:6:18"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1504:6:18"},{"name":"size","nodeType":"YulIdentifier","src":"1512:4:18"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1484:19:18"},"nodeType":"YulFunctionCall","src":"1484:33:18"},"nodeType":"YulExpressionStatement","src":"1484:33:18"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1419:4:18","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1428:6:18","type":""}],"src":"1394:129:18"},{"body":{"nodeType":"YulBlock","src":"1640:229:18","statements":[{"body":{"nodeType":"YulBlock","src":"1745:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1747:16:18"},"nodeType":"YulFunctionCall","src":"1747:18:18"},"nodeType":"YulExpressionStatement","src":"1747:18:18"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1717:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"1725:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1714:2:18"},"nodeType":"YulFunctionCall","src":"1714:30:18"},"nodeType":"YulIf","src":"1711:56:18"},{"nodeType":"YulAssignment","src":"1777:25:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1789:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"1797:4:18","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1785:3:18"},"nodeType":"YulFunctionCall","src":"1785:17:18"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1777:4:18"}]},{"nodeType":"YulAssignment","src":"1839:23:18","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1851:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"1857:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1847:3:18"},"nodeType":"YulFunctionCall","src":"1847:15:18"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1839:4:18"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1624:6:18","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1635:4:18","type":""}],"src":"1529:340:18"},{"body":{"nodeType":"YulBlock","src":"1964:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1981:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1984:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1974:6:18"},"nodeType":"YulFunctionCall","src":"1974:12:18"},"nodeType":"YulExpressionStatement","src":"1974:12:18"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"1875:117:18"},{"body":{"nodeType":"YulBlock","src":"2087:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2104:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2107:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2097:6:18"},"nodeType":"YulFunctionCall","src":"2097:12:18"},"nodeType":"YulExpressionStatement","src":"2097:12:18"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"1998:117:18"},{"body":{"nodeType":"YulBlock","src":"2210:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2227:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2230:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2220:6:18"},"nodeType":"YulFunctionCall","src":"2220:12:18"},"nodeType":"YulExpressionStatement","src":"2220:12:18"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"2121:117:18"},{"body":{"nodeType":"YulBlock","src":"2377:494:18","statements":[{"body":{"nodeType":"YulBlock","src":"2421:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"2423:77:18"},"nodeType":"YulFunctionCall","src":"2423:79:18"},"nodeType":"YulExpressionStatement","src":"2423:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"2398:3:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"2403:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2394:3:18"},"nodeType":"YulFunctionCall","src":"2394:19:18"},{"kind":"number","nodeType":"YulLiteral","src":"2415:4:18","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2390:3:18"},"nodeType":"YulFunctionCall","src":"2390:30:18"},"nodeType":"YulIf","src":"2387:117:18"},{"nodeType":"YulAssignment","src":"2513:30:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2538:4:18","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2522:15:18"},"nodeType":"YulFunctionCall","src":"2522:21:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2513:5:18"}]},{"nodeType":"YulBlock","src":"2553:150:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2588:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"2602:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2592:6:18","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2628:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"2635:4:18","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2624:3:18"},"nodeType":"YulFunctionCall","src":"2624:16:18"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2667:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"2678:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2663:3:18"},"nodeType":"YulFunctionCall","src":"2663:22:18"},{"name":"end","nodeType":"YulIdentifier","src":"2687:3:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2642:20:18"},"nodeType":"YulFunctionCall","src":"2642:49:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2617:6:18"},"nodeType":"YulFunctionCall","src":"2617:75:18"},"nodeType":"YulExpressionStatement","src":"2617:75:18"}]},{"nodeType":"YulBlock","src":"2713:151:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2748:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"2762:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2752:6:18","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2789:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"2796:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2785:3:18"},"nodeType":"YulFunctionCall","src":"2785:16:18"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2828:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"2839:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2824:3:18"},"nodeType":"YulFunctionCall","src":"2824:22:18"},{"name":"end","nodeType":"YulIdentifier","src":"2848:3:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2803:20:18"},"nodeType":"YulFunctionCall","src":"2803:49:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2778:6:18"},"nodeType":"YulFunctionCall","src":"2778:75:18"},"nodeType":"YulExpressionStatement","src":"2778:75:18"}]}]},"name":"abi_decode_t_struct$_Institution_$3791_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2352:9:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"2363:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2371:5:18","type":""}],"src":"2293:578:18"},{"body":{"nodeType":"YulBlock","src":"3059:666:18","statements":[{"nodeType":"YulAssignment","src":"3069:119:18","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3180:6:18"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3094:85:18"},"nodeType":"YulFunctionCall","src":"3094:93:18"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3078:15:18"},"nodeType":"YulFunctionCall","src":"3078:110:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3069:5:18"}]},{"nodeType":"YulVariableDeclaration","src":"3197:16:18","value":{"name":"array","nodeType":"YulIdentifier","src":"3208:5:18"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3201:3:18","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3230:5:18"},{"name":"length","nodeType":"YulIdentifier","src":"3237:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3223:6:18"},"nodeType":"YulFunctionCall","src":"3223:21:18"},"nodeType":"YulExpressionStatement","src":"3223:21:18"},{"nodeType":"YulAssignment","src":"3253:23:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3264:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"3271:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3260:3:18"},"nodeType":"YulFunctionCall","src":"3260:16:18"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3253:3:18"}]},{"nodeType":"YulVariableDeclaration","src":"3286:44:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3304:6:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3316:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"3324:4:18","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3312:3:18"},"nodeType":"YulFunctionCall","src":"3312:17:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3300:3:18"},"nodeType":"YulFunctionCall","src":"3300:30:18"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3290:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"3358:103:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"3372:77:18"},"nodeType":"YulFunctionCall","src":"3372:79:18"},"nodeType":"YulExpressionStatement","src":"3372:79:18"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3345:6:18"},{"name":"end","nodeType":"YulIdentifier","src":"3353:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3342:2:18"},"nodeType":"YulFunctionCall","src":"3342:15:18"},"nodeType":"YulIf","src":"3339:122:18"},{"body":{"nodeType":"YulBlock","src":"3546:173:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3561:21:18","value":{"name":"src","nodeType":"YulIdentifier","src":"3579:3:18"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"3565:10:18","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3603:3:18"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"3658:10:18"},{"name":"end","nodeType":"YulIdentifier","src":"3670:3:18"}],"functionName":{"name":"abi_decode_t_struct$_Institution_$3791_memory_ptr","nodeType":"YulIdentifier","src":"3608:49:18"},"nodeType":"YulFunctionCall","src":"3608:66:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3596:6:18"},"nodeType":"YulFunctionCall","src":"3596:79:18"},"nodeType":"YulExpressionStatement","src":"3596:79:18"},{"nodeType":"YulAssignment","src":"3688:21:18","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3699:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"3704:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3695:3:18"},"nodeType":"YulFunctionCall","src":"3695:14:18"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3688:3:18"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3499:3:18"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3504:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3496:2:18"},"nodeType":"YulFunctionCall","src":"3496:15:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3512:25:18","statements":[{"nodeType":"YulAssignment","src":"3514:21:18","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3525:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"3530:4:18","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3521:3:18"},"nodeType":"YulFunctionCall","src":"3521:14:18"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3514:3:18"}]}]},"pre":{"nodeType":"YulBlock","src":"3474:21:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3476:17:18","value":{"name":"offset","nodeType":"YulIdentifier","src":"3487:6:18"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3480:3:18","type":""}]}]},"src":"3470:249:18"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3029:6:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"3037:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"3045:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3053:5:18","type":""}],"src":"2928:797:18"},{"body":{"nodeType":"YulBlock","src":"3888:322:18","statements":[{"body":{"nodeType":"YulBlock","src":"3937:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3939:77:18"},"nodeType":"YulFunctionCall","src":"3939:79:18"},"nodeType":"YulExpressionStatement","src":"3939:79:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3916:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"3924:4:18","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3912:3:18"},"nodeType":"YulFunctionCall","src":"3912:17:18"},{"name":"end","nodeType":"YulIdentifier","src":"3931:3:18"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3908:3:18"},"nodeType":"YulFunctionCall","src":"3908:27:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3901:6:18"},"nodeType":"YulFunctionCall","src":"3901:35:18"},"nodeType":"YulIf","src":"3898:122:18"},{"nodeType":"YulVariableDeclaration","src":"4029:34:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4056:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4043:12:18"},"nodeType":"YulFunctionCall","src":"4043:20:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4033:6:18","type":""}]},{"nodeType":"YulAssignment","src":"4072:132:18","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4177:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"4185:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4173:3:18"},"nodeType":"YulFunctionCall","src":"4173:17:18"},{"name":"length","nodeType":"YulIdentifier","src":"4192:6:18"},{"name":"end","nodeType":"YulIdentifier","src":"4200:3:18"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4081:91:18"},"nodeType":"YulFunctionCall","src":"4081:123:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4072:5:18"}]}]},"name":"abi_decode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3866:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"3874:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3882:5:18","type":""}],"src":"3782:428:18"},{"body":{"nodeType":"YulBlock","src":"4353:605:18","statements":[{"body":{"nodeType":"YulBlock","src":"4399:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4401:77:18"},"nodeType":"YulFunctionCall","src":"4401:79:18"},"nodeType":"YulExpressionStatement","src":"4401:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4374:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"4383:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4370:3:18"},"nodeType":"YulFunctionCall","src":"4370:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"4395:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4366:3:18"},"nodeType":"YulFunctionCall","src":"4366:32:18"},"nodeType":"YulIf","src":"4363:119:18"},{"nodeType":"YulBlock","src":"4492:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"4507:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"4521:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4511:6:18","type":""}]},{"nodeType":"YulAssignment","src":"4536:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"4582:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4567:3:18"},"nodeType":"YulFunctionCall","src":"4567:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4591:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4546:20:18"},"nodeType":"YulFunctionCall","src":"4546:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4536:6:18"}]}]},{"nodeType":"YulBlock","src":"4619:332:18","statements":[{"nodeType":"YulVariableDeclaration","src":"4634:46:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4665:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4676:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4661:3:18"},"nodeType":"YulFunctionCall","src":"4661:18:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4648:12:18"},"nodeType":"YulFunctionCall","src":"4648:32:18"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4638:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"4727:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4729:77:18"},"nodeType":"YulFunctionCall","src":"4729:79:18"},"nodeType":"YulExpressionStatement","src":"4729:79:18"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4699:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"4707:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4696:2:18"},"nodeType":"YulFunctionCall","src":"4696:30:18"},"nodeType":"YulIf","src":"4693:117:18"},{"nodeType":"YulAssignment","src":"4824:117:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4913:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"4924:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4909:3:18"},"nodeType":"YulFunctionCall","src":"4909:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4933:7:18"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4834:74:18"},"nodeType":"YulFunctionCall","src":"4834:107:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4824:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4315:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4326:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4338:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4346:6:18","type":""}],"src":"4216:742:18"},{"body":{"nodeType":"YulBlock","src":"5009:81:18","statements":[{"nodeType":"YulAssignment","src":"5019:65:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5034:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"5041:42:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5030:3:18"},"nodeType":"YulFunctionCall","src":"5030:54:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5019:7:18"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4991:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5001:7:18","type":""}],"src":"4964:126:18"},{"body":{"nodeType":"YulBlock","src":"5141:51:18","statements":[{"nodeType":"YulAssignment","src":"5151:35:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5180:5:18"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"5162:17:18"},"nodeType":"YulFunctionCall","src":"5162:24:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5151:7:18"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5123:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5133:7:18","type":""}],"src":"5096:96:18"},{"body":{"nodeType":"YulBlock","src":"5241:79:18","statements":[{"body":{"nodeType":"YulBlock","src":"5298:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5307:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5310:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5300:6:18"},"nodeType":"YulFunctionCall","src":"5300:12:18"},"nodeType":"YulExpressionStatement","src":"5300:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5264:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5289:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5271:17:18"},"nodeType":"YulFunctionCall","src":"5271:24:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5261:2:18"},"nodeType":"YulFunctionCall","src":"5261:35:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5254:6:18"},"nodeType":"YulFunctionCall","src":"5254:43:18"},"nodeType":"YulIf","src":"5251:63:18"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5234:5:18","type":""}],"src":"5198:122:18"},{"body":{"nodeType":"YulBlock","src":"5378:87:18","statements":[{"nodeType":"YulAssignment","src":"5388:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5410:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5397:12:18"},"nodeType":"YulFunctionCall","src":"5397:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5388:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5453:5:18"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"5426:26:18"},"nodeType":"YulFunctionCall","src":"5426:33:18"},"nodeType":"YulExpressionStatement","src":"5426:33:18"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5356:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"5364:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5372:5:18","type":""}],"src":"5326:139:18"},{"body":{"nodeType":"YulBlock","src":"5554:391:18","statements":[{"body":{"nodeType":"YulBlock","src":"5600:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5602:77:18"},"nodeType":"YulFunctionCall","src":"5602:79:18"},"nodeType":"YulExpressionStatement","src":"5602:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5575:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"5584:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5571:3:18"},"nodeType":"YulFunctionCall","src":"5571:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"5596:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5567:3:18"},"nodeType":"YulFunctionCall","src":"5567:32:18"},"nodeType":"YulIf","src":"5564:119:18"},{"nodeType":"YulBlock","src":"5693:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5708:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"5722:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5712:6:18","type":""}]},{"nodeType":"YulAssignment","src":"5737:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5772:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"5783:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5768:3:18"},"nodeType":"YulFunctionCall","src":"5768:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5792:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"5747:20:18"},"nodeType":"YulFunctionCall","src":"5747:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5737:6:18"}]}]},{"nodeType":"YulBlock","src":"5820:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5835:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"5849:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5839:6:18","type":""}]},{"nodeType":"YulAssignment","src":"5865:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5900:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"5911:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5896:3:18"},"nodeType":"YulFunctionCall","src":"5896:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5920:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5875:20:18"},"nodeType":"YulFunctionCall","src":"5875:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5865:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5516:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5527:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5539:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5547:6:18","type":""}],"src":"5471:474:18"},{"body":{"nodeType":"YulBlock","src":"5995:57:18","statements":[{"nodeType":"YulAssignment","src":"6005:41:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6020:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"6027:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6016:3:18"},"nodeType":"YulFunctionCall","src":"6016:30:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6005:7:18"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5977:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5987:7:18","type":""}],"src":"5951:101:18"},{"body":{"nodeType":"YulBlock","src":"6100:78:18","statements":[{"body":{"nodeType":"YulBlock","src":"6156:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6165:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6168:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6158:6:18"},"nodeType":"YulFunctionCall","src":"6158:12:18"},"nodeType":"YulExpressionStatement","src":"6158:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6123:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6147:5:18"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"6130:16:18"},"nodeType":"YulFunctionCall","src":"6130:23:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6120:2:18"},"nodeType":"YulFunctionCall","src":"6120:34:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6113:6:18"},"nodeType":"YulFunctionCall","src":"6113:42:18"},"nodeType":"YulIf","src":"6110:62:18"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6093:5:18","type":""}],"src":"6058:120:18"},{"body":{"nodeType":"YulBlock","src":"6235:86:18","statements":[{"nodeType":"YulAssignment","src":"6245:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6267:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6254:12:18"},"nodeType":"YulFunctionCall","src":"6254:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6245:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6309:5:18"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"6283:25:18"},"nodeType":"YulFunctionCall","src":"6283:32:18"},"nodeType":"YulExpressionStatement","src":"6283:32:18"}]},"name":"abi_decode_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6213:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"6221:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6229:5:18","type":""}],"src":"6184:137:18"},{"body":{"nodeType":"YulBlock","src":"6392:262:18","statements":[{"body":{"nodeType":"YulBlock","src":"6438:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6440:77:18"},"nodeType":"YulFunctionCall","src":"6440:79:18"},"nodeType":"YulExpressionStatement","src":"6440:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6413:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"6422:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6409:3:18"},"nodeType":"YulFunctionCall","src":"6409:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"6434:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6405:3:18"},"nodeType":"YulFunctionCall","src":"6405:32:18"},"nodeType":"YulIf","src":"6402:119:18"},{"nodeType":"YulBlock","src":"6531:116:18","statements":[{"nodeType":"YulVariableDeclaration","src":"6546:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"6560:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6550:6:18","type":""}]},{"nodeType":"YulAssignment","src":"6575:62:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6609:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"6620:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6605:3:18"},"nodeType":"YulFunctionCall","src":"6605:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6629:7:18"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"6585:19:18"},"nodeType":"YulFunctionCall","src":"6585:52:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6575:6:18"}]}]}]},"name":"abi_decode_tuple_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6362:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6373:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6385:6:18","type":""}],"src":"6327:327:18"},{"body":{"nodeType":"YulBlock","src":"6725:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6742:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6765:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"6747:17:18"},"nodeType":"YulFunctionCall","src":"6747:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6735:6:18"},"nodeType":"YulFunctionCall","src":"6735:37:18"},"nodeType":"YulExpressionStatement","src":"6735:37:18"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6713:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6720:3:18","type":""}],"src":"6660:118:18"},{"body":{"nodeType":"YulBlock","src":"6882:124:18","statements":[{"nodeType":"YulAssignment","src":"6892:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6904:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6915:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6900:3:18"},"nodeType":"YulFunctionCall","src":"6900:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6892:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6972:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6985:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6996:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6981:3:18"},"nodeType":"YulFunctionCall","src":"6981:17:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6928:43:18"},"nodeType":"YulFunctionCall","src":"6928:71:18"},"nodeType":"YulExpressionStatement","src":"6928:71:18"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6854:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6866:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6877:4:18","type":""}],"src":"6784:222:18"},{"body":{"nodeType":"YulBlock","src":"7054:48:18","statements":[{"nodeType":"YulAssignment","src":"7064:32:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7089:5:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7082:6:18"},"nodeType":"YulFunctionCall","src":"7082:13:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7075:6:18"},"nodeType":"YulFunctionCall","src":"7075:21:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7064:7:18"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7036:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7046:7:18","type":""}],"src":"7012:90:18"},{"body":{"nodeType":"YulBlock","src":"7148:76:18","statements":[{"body":{"nodeType":"YulBlock","src":"7202:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7211:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7214:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7204:6:18"},"nodeType":"YulFunctionCall","src":"7204:12:18"},"nodeType":"YulExpressionStatement","src":"7204:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7171:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7193:5:18"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"7178:14:18"},"nodeType":"YulFunctionCall","src":"7178:21:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7168:2:18"},"nodeType":"YulFunctionCall","src":"7168:32:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7161:6:18"},"nodeType":"YulFunctionCall","src":"7161:40:18"},"nodeType":"YulIf","src":"7158:60:18"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7141:5:18","type":""}],"src":"7108:116:18"},{"body":{"nodeType":"YulBlock","src":"7279:84:18","statements":[{"nodeType":"YulAssignment","src":"7289:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7311:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7298:12:18"},"nodeType":"YulFunctionCall","src":"7298:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7289:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7351:5:18"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"7327:23:18"},"nodeType":"YulFunctionCall","src":"7327:30:18"},"nodeType":"YulExpressionStatement","src":"7327:30:18"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7257:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"7265:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7273:5:18","type":""}],"src":"7230:133:18"},{"body":{"nodeType":"YulBlock","src":"7466:516:18","statements":[{"body":{"nodeType":"YulBlock","src":"7512:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7514:77:18"},"nodeType":"YulFunctionCall","src":"7514:79:18"},"nodeType":"YulExpressionStatement","src":"7514:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7487:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"7496:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7483:3:18"},"nodeType":"YulFunctionCall","src":"7483:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"7508:2:18","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7479:3:18"},"nodeType":"YulFunctionCall","src":"7479:32:18"},"nodeType":"YulIf","src":"7476:119:18"},{"nodeType":"YulBlock","src":"7605:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7620:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7634:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7624:6:18","type":""}]},{"nodeType":"YulAssignment","src":"7649:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7684:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"7695:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7680:3:18"},"nodeType":"YulFunctionCall","src":"7680:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7704:7:18"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7659:20:18"},"nodeType":"YulFunctionCall","src":"7659:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7649:6:18"}]}]},{"nodeType":"YulBlock","src":"7732:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7747:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7761:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7751:6:18","type":""}]},{"nodeType":"YulAssignment","src":"7777:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7812:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"7823:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7808:3:18"},"nodeType":"YulFunctionCall","src":"7808:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7832:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7787:20:18"},"nodeType":"YulFunctionCall","src":"7787:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7777:6:18"}]}]},{"nodeType":"YulBlock","src":"7860:115:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7875:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7889:2:18","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7879:6:18","type":""}]},{"nodeType":"YulAssignment","src":"7905:60:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7937:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"7948:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7933:3:18"},"nodeType":"YulFunctionCall","src":"7933:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7957:7:18"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"7915:17:18"},"nodeType":"YulFunctionCall","src":"7915:50:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7905:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7420:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7431:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7443:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7451:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7459:6:18","type":""}],"src":"7369:613:18"},{"body":{"nodeType":"YulBlock","src":"8077:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8094:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8097:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8087:6:18"},"nodeType":"YulFunctionCall","src":"8087:12:18"},"nodeType":"YulExpressionStatement","src":"8087:12:18"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"7988:117:18"},{"body":{"nodeType":"YulBlock","src":"8198:478:18","statements":[{"body":{"nodeType":"YulBlock","src":"8247:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8249:77:18"},"nodeType":"YulFunctionCall","src":"8249:79:18"},"nodeType":"YulExpressionStatement","src":"8249:79:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8226:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"8234:4:18","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8222:3:18"},"nodeType":"YulFunctionCall","src":"8222:17:18"},{"name":"end","nodeType":"YulIdentifier","src":"8241:3:18"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8218:3:18"},"nodeType":"YulFunctionCall","src":"8218:27:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8211:6:18"},"nodeType":"YulFunctionCall","src":"8211:35:18"},"nodeType":"YulIf","src":"8208:122:18"},{"nodeType":"YulAssignment","src":"8339:30:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8362:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8349:12:18"},"nodeType":"YulFunctionCall","src":"8349:20:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8339:6:18"}]},{"body":{"nodeType":"YulBlock","src":"8412:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"8414:77:18"},"nodeType":"YulFunctionCall","src":"8414:79:18"},"nodeType":"YulExpressionStatement","src":"8414:79:18"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8384:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"8392:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8381:2:18"},"nodeType":"YulFunctionCall","src":"8381:30:18"},"nodeType":"YulIf","src":"8378:117:18"},{"nodeType":"YulAssignment","src":"8504:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8520:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"8528:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8516:3:18"},"nodeType":"YulFunctionCall","src":"8516:17:18"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"8504:8:18"}]},{"body":{"nodeType":"YulBlock","src":"8587:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"8589:77:18"},"nodeType":"YulFunctionCall","src":"8589:79:18"},"nodeType":"YulExpressionStatement","src":"8589:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"8552:8:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8566:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"8574:4:18","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8562:3:18"},"nodeType":"YulFunctionCall","src":"8562:17:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8548:3:18"},"nodeType":"YulFunctionCall","src":"8548:32:18"},{"name":"end","nodeType":"YulIdentifier","src":"8582:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8545:2:18"},"nodeType":"YulFunctionCall","src":"8545:41:18"},"nodeType":"YulIf","src":"8542:128:18"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8165:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"8173:3:18","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"8181:8:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"8191:6:18","type":""}],"src":"8124:552:18"},{"body":{"nodeType":"YulBlock","src":"8767:442:18","statements":[{"body":{"nodeType":"YulBlock","src":"8813:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8815:77:18"},"nodeType":"YulFunctionCall","src":"8815:79:18"},"nodeType":"YulExpressionStatement","src":"8815:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8788:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"8797:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8784:3:18"},"nodeType":"YulFunctionCall","src":"8784:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"8809:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8780:3:18"},"nodeType":"YulFunctionCall","src":"8780:32:18"},"nodeType":"YulIf","src":"8777:119:18"},{"nodeType":"YulBlock","src":"8906:296:18","statements":[{"nodeType":"YulVariableDeclaration","src":"8921:45:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8952:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"8963:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8948:3:18"},"nodeType":"YulFunctionCall","src":"8948:17:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8935:12:18"},"nodeType":"YulFunctionCall","src":"8935:31:18"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8925:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"9013:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9015:77:18"},"nodeType":"YulFunctionCall","src":"9015:79:18"},"nodeType":"YulExpressionStatement","src":"9015:79:18"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8985:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"8993:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8982:2:18"},"nodeType":"YulFunctionCall","src":"8982:30:18"},"nodeType":"YulIf","src":"8979:117:18"},{"nodeType":"YulAssignment","src":"9110:82:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9164:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"9175:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9160:3:18"},"nodeType":"YulFunctionCall","src":"9160:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9184:7:18"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"9128:31:18"},"nodeType":"YulFunctionCall","src":"9128:64:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9110:6:18"},{"name":"value1","nodeType":"YulIdentifier","src":"9118:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8729:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8740:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8752:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8760:6:18","type":""}],"src":"8682:527:18"},{"body":{"nodeType":"YulBlock","src":"9281:263:18","statements":[{"body":{"nodeType":"YulBlock","src":"9327:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9329:77:18"},"nodeType":"YulFunctionCall","src":"9329:79:18"},"nodeType":"YulExpressionStatement","src":"9329:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9302:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"9311:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9298:3:18"},"nodeType":"YulFunctionCall","src":"9298:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"9323:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9294:3:18"},"nodeType":"YulFunctionCall","src":"9294:32:18"},"nodeType":"YulIf","src":"9291:119:18"},{"nodeType":"YulBlock","src":"9420:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"9435:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"9449:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9439:6:18","type":""}]},{"nodeType":"YulAssignment","src":"9464:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9499:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"9510:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9495:3:18"},"nodeType":"YulFunctionCall","src":"9495:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9519:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9474:20:18"},"nodeType":"YulFunctionCall","src":"9474:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9464:6:18"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9251:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9262:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9274:6:18","type":""}],"src":"9215:329:18"},{"body":{"nodeType":"YulBlock","src":"9578:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9595:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9598:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9588:6:18"},"nodeType":"YulFunctionCall","src":"9588:88:18"},"nodeType":"YulExpressionStatement","src":"9588:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9692:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9695:4:18","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9685:6:18"},"nodeType":"YulFunctionCall","src":"9685:15:18"},"nodeType":"YulExpressionStatement","src":"9685:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9716:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9719:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9709:6:18"},"nodeType":"YulFunctionCall","src":"9709:15:18"},"nodeType":"YulExpressionStatement","src":"9709:15:18"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9550:180:18"},{"body":{"nodeType":"YulBlock","src":"9832:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9849:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"9854:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9842:6:18"},"nodeType":"YulFunctionCall","src":"9842:19:18"},"nodeType":"YulExpressionStatement","src":"9842:19:18"},{"nodeType":"YulAssignment","src":"9870:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9889:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"9894:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9885:3:18"},"nodeType":"YulFunctionCall","src":"9885:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9870:11:18"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9804:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"9809:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9820:11:18","type":""}],"src":"9736:169:18"},{"body":{"nodeType":"YulBlock","src":"10017:66:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10039:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"10047:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10035:3:18"},"nodeType":"YulFunctionCall","src":"10035:14:18"},{"hexValue":"50617963726573743a207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"10051:24:18","type":"","value":"Paycrest: zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10028:6:18"},"nodeType":"YulFunctionCall","src":"10028:48:18"},"nodeType":"YulExpressionStatement","src":"10028:48:18"}]},"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10009:6:18","type":""}],"src":"9911:172:18"},{"body":{"nodeType":"YulBlock","src":"10235:220:18","statements":[{"nodeType":"YulAssignment","src":"10245:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10311:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"10316:2:18","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10252:58:18"},"nodeType":"YulFunctionCall","src":"10252:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10245:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10417:3:18"}],"functionName":{"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulIdentifier","src":"10328:88:18"},"nodeType":"YulFunctionCall","src":"10328:93:18"},"nodeType":"YulExpressionStatement","src":"10328:93:18"},{"nodeType":"YulAssignment","src":"10430:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10441:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"10446:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10437:3:18"},"nodeType":"YulFunctionCall","src":"10437:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10430:3:18"}]}]},"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10223:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10231:3:18","type":""}],"src":"10089:366:18"},{"body":{"nodeType":"YulBlock","src":"10632:248:18","statements":[{"nodeType":"YulAssignment","src":"10642:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10654:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10665:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10650:3:18"},"nodeType":"YulFunctionCall","src":"10650:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10642:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10689:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10700:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10685:3:18"},"nodeType":"YulFunctionCall","src":"10685:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10708:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"10714:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10704:3:18"},"nodeType":"YulFunctionCall","src":"10704:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10678:6:18"},"nodeType":"YulFunctionCall","src":"10678:47:18"},"nodeType":"YulExpressionStatement","src":"10678:47:18"},{"nodeType":"YulAssignment","src":"10734:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10868:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10742:124:18"},"nodeType":"YulFunctionCall","src":"10742:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10734:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10612:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10627:4:18","type":""}],"src":"10461:419:18"},{"body":{"nodeType":"YulBlock","src":"10949:52:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10966:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10988:5:18"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"10971:16:18"},"nodeType":"YulFunctionCall","src":"10971:23:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10959:6:18"},"nodeType":"YulFunctionCall","src":"10959:36:18"},"nodeType":"YulExpressionStatement","src":"10959:36:18"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10937:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10944:3:18","type":""}],"src":"10886:115:18"},{"body":{"nodeType":"YulBlock","src":"11103:122:18","statements":[{"nodeType":"YulAssignment","src":"11113:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11125:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11136:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11121:3:18"},"nodeType":"YulFunctionCall","src":"11121:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11113:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11191:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11204:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11215:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11200:3:18"},"nodeType":"YulFunctionCall","src":"11200:17:18"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"11149:41:18"},"nodeType":"YulFunctionCall","src":"11149:69:18"},"nodeType":"YulExpressionStatement","src":"11149:69:18"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11075:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11087:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11098:4:18","type":""}],"src":"11007:218:18"},{"body":{"nodeType":"YulBlock","src":"11296:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11313:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11336:5:18"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"11318:17:18"},"nodeType":"YulFunctionCall","src":"11318:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11306:6:18"},"nodeType":"YulFunctionCall","src":"11306:37:18"},"nodeType":"YulExpressionStatement","src":"11306:37:18"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11284:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11291:3:18","type":""}],"src":"11231:118:18"},{"body":{"nodeType":"YulBlock","src":"11414:50:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11431:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11451:5:18"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"11436:14:18"},"nodeType":"YulFunctionCall","src":"11436:21:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11424:6:18"},"nodeType":"YulFunctionCall","src":"11424:34:18"},"nodeType":"YulExpressionStatement","src":"11424:34:18"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11402:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11409:3:18","type":""}],"src":"11355:109:18"},{"body":{"nodeType":"YulBlock","src":"11618:282:18","statements":[{"nodeType":"YulAssignment","src":"11628:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11640:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11651:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11636:3:18"},"nodeType":"YulFunctionCall","src":"11636:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11628:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11708:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11721:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11732:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11717:3:18"},"nodeType":"YulFunctionCall","src":"11717:17:18"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"11664:43:18"},"nodeType":"YulFunctionCall","src":"11664:71:18"},"nodeType":"YulExpressionStatement","src":"11664:71:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11789:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11802:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11813:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11798:3:18"},"nodeType":"YulFunctionCall","src":"11798:18:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11745:43:18"},"nodeType":"YulFunctionCall","src":"11745:72:18"},"nodeType":"YulExpressionStatement","src":"11745:72:18"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11865:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11878:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11889:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11874:3:18"},"nodeType":"YulFunctionCall","src":"11874:18:18"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"11827:37:18"},"nodeType":"YulFunctionCall","src":"11827:66:18"},"nodeType":"YulExpressionStatement","src":"11827:66:18"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11574:9:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11586:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11594:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11602:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11613:4:18","type":""}],"src":"11470:430:18"},{"body":{"nodeType":"YulBlock","src":"11971:31:18","statements":[{"nodeType":"YulAssignment","src":"11982:13:18","value":{"name":"len","nodeType":"YulIdentifier","src":"11992:3:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"11982:6:18"}]}]},"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11949:5:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"11956:3:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"11964:6:18","type":""}],"src":"11906:96:18"},{"body":{"nodeType":"YulBlock","src":"12036:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12053:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12056:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12046:6:18"},"nodeType":"YulFunctionCall","src":"12046:88:18"},"nodeType":"YulExpressionStatement","src":"12046:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12150:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12153:4:18","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12143:6:18"},"nodeType":"YulFunctionCall","src":"12143:15:18"},"nodeType":"YulExpressionStatement","src":"12143:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12174:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12177:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12167:6:18"},"nodeType":"YulFunctionCall","src":"12167:15:18"},"nodeType":"YulExpressionStatement","src":"12167:15:18"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"12008:180:18"},{"body":{"nodeType":"YulBlock","src":"12245:269:18","statements":[{"nodeType":"YulAssignment","src":"12255:22:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12269:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"12275:1:18","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12265:3:18"},"nodeType":"YulFunctionCall","src":"12265:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12255:6:18"}]},{"nodeType":"YulVariableDeclaration","src":"12286:38:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12316:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"12322:1:18","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12312:3:18"},"nodeType":"YulFunctionCall","src":"12312:12:18"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"12290:18:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"12363:51:18","statements":[{"nodeType":"YulAssignment","src":"12377:27:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12391:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"12399:4:18","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12387:3:18"},"nodeType":"YulFunctionCall","src":"12387:17:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12377:6:18"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12343:18:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12336:6:18"},"nodeType":"YulFunctionCall","src":"12336:26:18"},"nodeType":"YulIf","src":"12333:81:18"},{"body":{"nodeType":"YulBlock","src":"12466:42:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"12480:16:18"},"nodeType":"YulFunctionCall","src":"12480:18:18"},"nodeType":"YulExpressionStatement","src":"12480:18:18"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12430:18:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12453:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"12461:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12450:2:18"},"nodeType":"YulFunctionCall","src":"12450:14:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12427:2:18"},"nodeType":"YulFunctionCall","src":"12427:38:18"},"nodeType":"YulIf","src":"12424:84:18"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"12229:4:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12238:6:18","type":""}],"src":"12194:320:18"},{"body":{"nodeType":"YulBlock","src":"12573:87:18","statements":[{"nodeType":"YulAssignment","src":"12583:11:18","value":{"name":"ptr","nodeType":"YulIdentifier","src":"12591:3:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"12583:4:18"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12611:1:18","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"12614:3:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12604:6:18"},"nodeType":"YulFunctionCall","src":"12604:14:18"},"nodeType":"YulExpressionStatement","src":"12604:14:18"},{"nodeType":"YulAssignment","src":"12627:26:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12645:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12648:4:18","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"12635:9:18"},"nodeType":"YulFunctionCall","src":"12635:18:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"12627:4:18"}]}]},"name":"array_dataslot_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"12560:3:18","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"12568:4:18","type":""}],"src":"12520:140:18"},{"body":{"nodeType":"YulBlock","src":"12710:49:18","statements":[{"nodeType":"YulAssignment","src":"12720:33:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12738:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"12745:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12734:3:18"},"nodeType":"YulFunctionCall","src":"12734:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"12750:2:18","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12730:3:18"},"nodeType":"YulFunctionCall","src":"12730:23:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12720:6:18"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12693:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"12703:6:18","type":""}],"src":"12666:93:18"},{"body":{"nodeType":"YulBlock","src":"12818:54:18","statements":[{"nodeType":"YulAssignment","src":"12828:37:18","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"12853:4:18"},{"name":"value","nodeType":"YulIdentifier","src":"12859:5:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12849:3:18"},"nodeType":"YulFunctionCall","src":"12849:16:18"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"12828:8:18"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"12793:4:18","type":""},{"name":"value","nodeType":"YulTypedName","src":"12799:5:18","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"12809:8:18","type":""}],"src":"12765:107:18"},{"body":{"nodeType":"YulBlock","src":"12954:317:18","statements":[{"nodeType":"YulVariableDeclaration","src":"12964:35:18","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"12985:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"12997:1:18","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12981:3:18"},"nodeType":"YulFunctionCall","src":"12981:18:18"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"12968:9:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13008:109:18","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"13039:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"13050:66:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"13020:18:18"},"nodeType":"YulFunctionCall","src":"13020:97:18"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"13012:4:18","type":""}]},{"nodeType":"YulAssignment","src":"13126:51:18","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"13157:9:18"},{"name":"toInsert","nodeType":"YulIdentifier","src":"13168:8:18"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"13138:18:18"},"nodeType":"YulFunctionCall","src":"13138:39:18"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"13126:8:18"}]},{"nodeType":"YulAssignment","src":"13186:30:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13199:5:18"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"13210:4:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13206:3:18"},"nodeType":"YulFunctionCall","src":"13206:9:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13195:3:18"},"nodeType":"YulFunctionCall","src":"13195:21:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13186:5:18"}]},{"nodeType":"YulAssignment","src":"13225:40:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13238:5:18"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"13249:8:18"},{"name":"mask","nodeType":"YulIdentifier","src":"13259:4:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13245:3:18"},"nodeType":"YulFunctionCall","src":"13245:19:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"13235:2:18"},"nodeType":"YulFunctionCall","src":"13235:30:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"13225:6:18"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12915:5:18","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"12922:10:18","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"12934:8:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"12947:6:18","type":""}],"src":"12878:393:18"},{"body":{"nodeType":"YulBlock","src":"13322:32:18","statements":[{"nodeType":"YulAssignment","src":"13332:16:18","value":{"name":"value","nodeType":"YulIdentifier","src":"13343:5:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"13332:7:18"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13304:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"13314:7:18","type":""}],"src":"13277:77:18"},{"body":{"nodeType":"YulBlock","src":"13392:28:18","statements":[{"nodeType":"YulAssignment","src":"13402:12:18","value":{"name":"value","nodeType":"YulIdentifier","src":"13409:5:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13402:3:18"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13378:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13388:3:18","type":""}],"src":"13360:60:18"},{"body":{"nodeType":"YulBlock","src":"13486:82:18","statements":[{"nodeType":"YulAssignment","src":"13496:66:18","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13554:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13536:17:18"},"nodeType":"YulFunctionCall","src":"13536:24:18"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"13527:8:18"},"nodeType":"YulFunctionCall","src":"13527:34:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13509:17:18"},"nodeType":"YulFunctionCall","src":"13509:53:18"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"13496:9:18"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13466:5:18","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"13476:9:18","type":""}],"src":"13426:142:18"},{"body":{"nodeType":"YulBlock","src":"13621:28:18","statements":[{"nodeType":"YulAssignment","src":"13631:12:18","value":{"name":"value","nodeType":"YulIdentifier","src":"13638:5:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13631:3:18"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13607:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13617:3:18","type":""}],"src":"13574:75:18"},{"body":{"nodeType":"YulBlock","src":"13731:193:18","statements":[{"nodeType":"YulVariableDeclaration","src":"13741:63:18","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"13796:7:18"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"13765:30:18"},"nodeType":"YulFunctionCall","src":"13765:39:18"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"13745:16:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13820:4:18"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13860:4:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"13854:5:18"},"nodeType":"YulFunctionCall","src":"13854:11:18"},{"name":"offset","nodeType":"YulIdentifier","src":"13867:6:18"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"13899:16:18"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"13875:23:18"},"nodeType":"YulFunctionCall","src":"13875:41:18"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"13826:27:18"},"nodeType":"YulFunctionCall","src":"13826:91:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"13813:6:18"},"nodeType":"YulFunctionCall","src":"13813:105:18"},"nodeType":"YulExpressionStatement","src":"13813:105:18"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"13708:4:18","type":""},{"name":"offset","nodeType":"YulTypedName","src":"13714:6:18","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"13722:7:18","type":""}],"src":"13655:269:18"},{"body":{"nodeType":"YulBlock","src":"13979:24:18","statements":[{"nodeType":"YulAssignment","src":"13989:8:18","value":{"kind":"number","nodeType":"YulLiteral","src":"13996:1:18","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13989:3:18"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13975:3:18","type":""}],"src":"13930:73:18"},{"body":{"nodeType":"YulBlock","src":"14062:136:18","statements":[{"nodeType":"YulVariableDeclaration","src":"14072:46:18","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"14086:30:18"},"nodeType":"YulFunctionCall","src":"14086:32:18"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"14076:6:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"14171:4:18"},{"name":"offset","nodeType":"YulIdentifier","src":"14177:6:18"},{"name":"zero_0","nodeType":"YulIdentifier","src":"14185:6:18"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"14127:43:18"},"nodeType":"YulFunctionCall","src":"14127:65:18"},"nodeType":"YulExpressionStatement","src":"14127:65:18"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"14048:4:18","type":""},{"name":"offset","nodeType":"YulTypedName","src":"14054:6:18","type":""}],"src":"14009:189:18"},{"body":{"nodeType":"YulBlock","src":"14254:136:18","statements":[{"body":{"nodeType":"YulBlock","src":"14321:63:18","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14365:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"14372:1:18","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"14335:29:18"},"nodeType":"YulFunctionCall","src":"14335:39:18"},"nodeType":"YulExpressionStatement","src":"14335:39:18"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14274:5:18"},{"name":"end","nodeType":"YulIdentifier","src":"14281:3:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14271:2:18"},"nodeType":"YulFunctionCall","src":"14271:14:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14286:26:18","statements":[{"nodeType":"YulAssignment","src":"14288:22:18","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14301:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"14308:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14297:3:18"},"nodeType":"YulFunctionCall","src":"14297:13:18"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"14288:5:18"}]}]},"pre":{"nodeType":"YulBlock","src":"14268:2:18","statements":[]},"src":"14264:120:18"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"14242:5:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"14249:3:18","type":""}],"src":"14204:186:18"},{"body":{"nodeType":"YulBlock","src":"14474:463:18","statements":[{"body":{"nodeType":"YulBlock","src":"14500:430:18","statements":[{"nodeType":"YulVariableDeclaration","src":"14514:53:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"14561:5:18"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"14530:30:18"},"nodeType":"YulFunctionCall","src":"14530:37:18"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"14518:8:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14580:63:18","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"14603:8:18"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"14631:10:18"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"14613:17:18"},"nodeType":"YulFunctionCall","src":"14613:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14599:3:18"},"nodeType":"YulFunctionCall","src":"14599:44:18"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"14584:11:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"14800:27:18","statements":[{"nodeType":"YulAssignment","src":"14802:23:18","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"14817:8:18"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"14802:11:18"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"14784:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"14796:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14781:2:18"},"nodeType":"YulFunctionCall","src":"14781:18:18"},"nodeType":"YulIf","src":"14778:49:18"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"14869:11:18"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"14886:8:18"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"14914:3:18"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"14896:17:18"},"nodeType":"YulFunctionCall","src":"14896:22:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14882:3:18"},"nodeType":"YulFunctionCall","src":"14882:37:18"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"14840:28:18"},"nodeType":"YulFunctionCall","src":"14840:80:18"},"nodeType":"YulExpressionStatement","src":"14840:80:18"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"14491:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"14496:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14488:2:18"},"nodeType":"YulFunctionCall","src":"14488:11:18"},"nodeType":"YulIf","src":"14485:445:18"}]},"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"14450:5:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"14457:3:18","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"14462:10:18","type":""}],"src":"14396:541:18"},{"body":{"nodeType":"YulBlock","src":"15006:54:18","statements":[{"nodeType":"YulAssignment","src":"15016:37:18","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"15041:4:18"},{"name":"value","nodeType":"YulIdentifier","src":"15047:5:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15037:3:18"},"nodeType":"YulFunctionCall","src":"15037:16:18"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"15016:8:18"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"14981:4:18","type":""},{"name":"value","nodeType":"YulTypedName","src":"14987:5:18","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"14997:8:18","type":""}],"src":"14943:117:18"},{"body":{"nodeType":"YulBlock","src":"15117:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"15127:68:18","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15176:1:18","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"15179:5:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15172:3:18"},"nodeType":"YulFunctionCall","src":"15172:13:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15191:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15187:3:18"},"nodeType":"YulFunctionCall","src":"15187:6:18"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"15143:28:18"},"nodeType":"YulFunctionCall","src":"15143:51:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15139:3:18"},"nodeType":"YulFunctionCall","src":"15139:56:18"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"15131:4:18","type":""}]},{"nodeType":"YulAssignment","src":"15204:25:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15218:4:18"},{"name":"mask","nodeType":"YulIdentifier","src":"15224:4:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15214:3:18"},"nodeType":"YulFunctionCall","src":"15214:15:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"15204:6:18"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15094:4:18","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"15100:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"15110:6:18","type":""}],"src":"15066:169:18"},{"body":{"nodeType":"YulBlock","src":"15321:214:18","statements":[{"nodeType":"YulAssignment","src":"15454:37:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15481:4:18"},{"name":"len","nodeType":"YulIdentifier","src":"15487:3:18"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"15462:18:18"},"nodeType":"YulFunctionCall","src":"15462:29:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"15454:4:18"}]},{"nodeType":"YulAssignment","src":"15500:29:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15511:4:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15521:1:18","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"15524:3:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15517:3:18"},"nodeType":"YulFunctionCall","src":"15517:11:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"15508:2:18"},"nodeType":"YulFunctionCall","src":"15508:21:18"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"15500:4:18"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15302:4:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"15308:3:18","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"15316:4:18","type":""}],"src":"15240:295:18"},{"body":{"nodeType":"YulBlock","src":"15637:1301:18","statements":[{"nodeType":"YulVariableDeclaration","src":"15648:57:18","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15696:3:18"},{"name":"len","nodeType":"YulIdentifier","src":"15701:3:18"}],"functionName":{"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"15662:33:18"},"nodeType":"YulFunctionCall","src":"15662:43:18"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"15652:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"15790:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"15792:16:18"},"nodeType":"YulFunctionCall","src":"15792:18:18"},"nodeType":"YulExpressionStatement","src":"15792:18:18"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"15762:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"15770:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15759:2:18"},"nodeType":"YulFunctionCall","src":"15759:30:18"},"nodeType":"YulIf","src":"15756:56:18"},{"nodeType":"YulVariableDeclaration","src":"15822:52:18","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15868:4:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"15862:5:18"},"nodeType":"YulFunctionCall","src":"15862:11:18"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"15836:25:18"},"nodeType":"YulFunctionCall","src":"15836:38:18"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"15826:6:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15966:4:18"},{"name":"oldLen","nodeType":"YulIdentifier","src":"15972:6:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"15980:6:18"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulIdentifier","src":"15921:44:18"},"nodeType":"YulFunctionCall","src":"15921:66:18"},"nodeType":"YulExpressionStatement","src":"15921:66:18"},{"nodeType":"YulVariableDeclaration","src":"15997:18:18","value":{"kind":"number","nodeType":"YulLiteral","src":"16014:1:18","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"16001:9:18","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"16062:624:18","statements":[{"nodeType":"YulVariableDeclaration","src":"16076:37:18","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16095:6:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16107:4:18","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16103:3:18"},"nodeType":"YulFunctionCall","src":"16103:9:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16091:3:18"},"nodeType":"YulFunctionCall","src":"16091:22:18"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"16080:7:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16127:50:18","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16172:4:18"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"16141:30:18"},"nodeType":"YulFunctionCall","src":"16141:36:18"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"16131:6:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16190:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"16199:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16194:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"16258:170:18","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16283:6:18"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16308:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16313:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16304:3:18"},"nodeType":"YulFunctionCall","src":"16304:19:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16291:12:18"},"nodeType":"YulFunctionCall","src":"16291:33:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16276:6:18"},"nodeType":"YulFunctionCall","src":"16276:49:18"},"nodeType":"YulExpressionStatement","src":"16276:49:18"},{"nodeType":"YulAssignment","src":"16342:24:18","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16356:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"16364:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16352:3:18"},"nodeType":"YulFunctionCall","src":"16352:14:18"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16342:6:18"}]},{"nodeType":"YulAssignment","src":"16383:31:18","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16400:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"16411:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16396:3:18"},"nodeType":"YulFunctionCall","src":"16396:18:18"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16383:9:18"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16224:1:18"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"16227:7:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16221:2:18"},"nodeType":"YulFunctionCall","src":"16221:14:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16236:21:18","statements":[{"nodeType":"YulAssignment","src":"16238:17:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16247:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"16250:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16243:3:18"},"nodeType":"YulFunctionCall","src":"16243:12:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16238:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"16217:3:18","statements":[]},"src":"16213:215:18"},{"body":{"nodeType":"YulBlock","src":"16464:163:18","statements":[{"nodeType":"YulVariableDeclaration","src":"16482:50:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16516:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16521:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16512:3:18"},"nodeType":"YulFunctionCall","src":"16512:19:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16499:12:18"},"nodeType":"YulFunctionCall","src":"16499:33:18"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"16486:9:18","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16556:6:18"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"16583:9:18"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16598:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"16606:4:18","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16594:3:18"},"nodeType":"YulFunctionCall","src":"16594:17:18"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"16564:18:18"},"nodeType":"YulFunctionCall","src":"16564:48:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16549:6:18"},"nodeType":"YulFunctionCall","src":"16549:64:18"},"nodeType":"YulExpressionStatement","src":"16549:64:18"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"16447:7:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"16456:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16444:2:18"},"nodeType":"YulFunctionCall","src":"16444:19:18"},"nodeType":"YulIf","src":"16441:186:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16647:4:18"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16661:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"16669:1:18","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16657:3:18"},"nodeType":"YulFunctionCall","src":"16657:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"16673:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16653:3:18"},"nodeType":"YulFunctionCall","src":"16653:22:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16640:6:18"},"nodeType":"YulFunctionCall","src":"16640:36:18"},"nodeType":"YulExpressionStatement","src":"16640:36:18"}]},"nodeType":"YulCase","src":"16055:631:18","value":{"kind":"number","nodeType":"YulLiteral","src":"16060:1:18","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"16703:229:18","statements":[{"nodeType":"YulVariableDeclaration","src":"16717:14:18","value":{"kind":"number","nodeType":"YulLiteral","src":"16730:1:18","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"16721:5:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"16754:74:18","statements":[{"nodeType":"YulAssignment","src":"16772:42:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16798:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16803:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16794:3:18"},"nodeType":"YulFunctionCall","src":"16794:19:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16781:12:18"},"nodeType":"YulFunctionCall","src":"16781:33:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16772:5:18"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"16747:6:18"},"nodeType":"YulIf","src":"16744:84:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16848:4:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16907:5:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"16914:6:18"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"16854:52:18"},"nodeType":"YulFunctionCall","src":"16854:67:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16841:6:18"},"nodeType":"YulFunctionCall","src":"16841:81:18"},"nodeType":"YulExpressionStatement","src":"16841:81:18"}]},"nodeType":"YulCase","src":"16695:237:18","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16035:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"16043:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16032:2:18"},"nodeType":"YulFunctionCall","src":"16032:14:18"},"nodeType":"YulSwitch","src":"16025:907:18"}]},"name":"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"15621:4:18","type":""},{"name":"src","nodeType":"YulTypedName","src":"15627:3:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"15632:3:18","type":""}],"src":"15540:1398:18"},{"body":{"nodeType":"YulBlock","src":"17039:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17056:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"17061:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17049:6:18"},"nodeType":"YulFunctionCall","src":"17049:19:18"},"nodeType":"YulExpressionStatement","src":"17049:19:18"},{"nodeType":"YulAssignment","src":"17077:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17096:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"17101:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17092:3:18"},"nodeType":"YulFunctionCall","src":"17092:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17077:11:18"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17011:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"17016:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17027:11:18","type":""}],"src":"16944:168:18"},{"body":{"nodeType":"YulBlock","src":"17182:82:18","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17205:3:18"},{"name":"src","nodeType":"YulIdentifier","src":"17210:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"17215:6:18"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"17192:12:18"},"nodeType":"YulFunctionCall","src":"17192:30:18"},"nodeType":"YulExpressionStatement","src":"17192:30:18"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17242:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"17247:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17238:3:18"},"nodeType":"YulFunctionCall","src":"17238:16:18"},{"kind":"number","nodeType":"YulLiteral","src":"17256:1:18","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17231:6:18"},"nodeType":"YulFunctionCall","src":"17231:27:18"},"nodeType":"YulExpressionStatement","src":"17231:27:18"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"17164:3:18","type":""},{"name":"dst","nodeType":"YulTypedName","src":"17169:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"17174:6:18","type":""}],"src":"17118:146:18"},{"body":{"nodeType":"YulBlock","src":"17392:214:18","statements":[{"nodeType":"YulAssignment","src":"17402:77:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17467:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"17472:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17409:57:18"},"nodeType":"YulFunctionCall","src":"17409:70:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17402:3:18"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17526:5:18"},{"name":"pos","nodeType":"YulIdentifier","src":"17533:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"17538:6:18"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17489:36:18"},"nodeType":"YulFunctionCall","src":"17489:56:18"},"nodeType":"YulExpressionStatement","src":"17489:56:18"},{"nodeType":"YulAssignment","src":"17554:46:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17565:3:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17592:6:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"17570:21:18"},"nodeType":"YulFunctionCall","src":"17570:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17561:3:18"},"nodeType":"YulFunctionCall","src":"17561:39:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17554:3:18"}]}]},"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"17365:5:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"17372:6:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17380:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17388:3:18","type":""}],"src":"17292:314:18"},{"body":{"nodeType":"YulBlock","src":"17738:203:18","statements":[{"nodeType":"YulAssignment","src":"17748:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17760:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"17771:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17756:3:18"},"nodeType":"YulFunctionCall","src":"17756:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17748:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17795:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"17806:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17791:3:18"},"nodeType":"YulFunctionCall","src":"17791:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17814:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"17820:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17810:3:18"},"nodeType":"YulFunctionCall","src":"17810:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17784:6:18"},"nodeType":"YulFunctionCall","src":"17784:47:18"},"nodeType":"YulExpressionStatement","src":"17784:47:18"},{"nodeType":"YulAssignment","src":"17840:94:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17912:6:18"},{"name":"value1","nodeType":"YulIdentifier","src":"17920:6:18"},{"name":"tail","nodeType":"YulIdentifier","src":"17929:4:18"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17848:63:18"},"nodeType":"YulFunctionCall","src":"17848:86:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17840:4:18"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17702:9:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17714:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17722:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17733:4:18","type":""}],"src":"17612:329:18"},{"body":{"nodeType":"YulBlock","src":"18053:119:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18075:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"18083:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18071:3:18"},"nodeType":"YulFunctionCall","src":"18071:14:18"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"18087:34:18","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18064:6:18"},"nodeType":"YulFunctionCall","src":"18064:58:18"},"nodeType":"YulExpressionStatement","src":"18064:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18143:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"18151:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18139:3:18"},"nodeType":"YulFunctionCall","src":"18139:15:18"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"18156:8:18","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18132:6:18"},"nodeType":"YulFunctionCall","src":"18132:33:18"},"nodeType":"YulExpressionStatement","src":"18132:33:18"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18045:6:18","type":""}],"src":"17947:225:18"},{"body":{"nodeType":"YulBlock","src":"18324:220:18","statements":[{"nodeType":"YulAssignment","src":"18334:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18400:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18405:2:18","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18341:58:18"},"nodeType":"YulFunctionCall","src":"18341:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18334:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18506:3:18"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"18417:88:18"},"nodeType":"YulFunctionCall","src":"18417:93:18"},"nodeType":"YulExpressionStatement","src":"18417:93:18"},{"nodeType":"YulAssignment","src":"18519:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18530:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18535:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18526:3:18"},"nodeType":"YulFunctionCall","src":"18526:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18519:3:18"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18312:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18320:3:18","type":""}],"src":"18178:366:18"},{"body":{"nodeType":"YulBlock","src":"18721:248:18","statements":[{"nodeType":"YulAssignment","src":"18731:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18743:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"18754:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18739:3:18"},"nodeType":"YulFunctionCall","src":"18739:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18731:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18778:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"18789:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18774:3:18"},"nodeType":"YulFunctionCall","src":"18774:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18797:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"18803:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18793:3:18"},"nodeType":"YulFunctionCall","src":"18793:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18767:6:18"},"nodeType":"YulFunctionCall","src":"18767:47:18"},"nodeType":"YulExpressionStatement","src":"18767:47:18"},{"nodeType":"YulAssignment","src":"18823:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18957:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18831:124:18"},"nodeType":"YulFunctionCall","src":"18831:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18823:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18701:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18716:4:18","type":""}],"src":"18550:419:18"},{"body":{"nodeType":"YulBlock","src":"19081:76:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19103:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"19111:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19099:3:18"},"nodeType":"YulFunctionCall","src":"19099:14:18"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"19115:34:18","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19092:6:18"},"nodeType":"YulFunctionCall","src":"19092:58:18"},"nodeType":"YulExpressionStatement","src":"19092:58:18"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19073:6:18","type":""}],"src":"18975:182:18"},{"body":{"nodeType":"YulBlock","src":"19309:220:18","statements":[{"nodeType":"YulAssignment","src":"19319:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19385:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"19390:2:18","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19326:58:18"},"nodeType":"YulFunctionCall","src":"19326:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19319:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19491:3:18"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"19402:88:18"},"nodeType":"YulFunctionCall","src":"19402:93:18"},"nodeType":"YulExpressionStatement","src":"19402:93:18"},{"nodeType":"YulAssignment","src":"19504:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19515:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"19520:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19511:3:18"},"nodeType":"YulFunctionCall","src":"19511:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19504:3:18"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19297:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19305:3:18","type":""}],"src":"19163:366:18"},{"body":{"nodeType":"YulBlock","src":"19706:248:18","statements":[{"nodeType":"YulAssignment","src":"19716:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19728:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"19739:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19724:3:18"},"nodeType":"YulFunctionCall","src":"19724:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19716:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19763:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"19774:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19759:3:18"},"nodeType":"YulFunctionCall","src":"19759:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19782:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"19788:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19778:3:18"},"nodeType":"YulFunctionCall","src":"19778:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19752:6:18"},"nodeType":"YulFunctionCall","src":"19752:47:18"},"nodeType":"YulExpressionStatement","src":"19752:47:18"},{"nodeType":"YulAssignment","src":"19808:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19942:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19816:124:18"},"nodeType":"YulFunctionCall","src":"19816:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19808:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19686:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19701:4:18","type":""}],"src":"19535:419:18"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct PaycrestSettingManager.Institution\n    function abi_decode_t_struct$_Institution_$3791_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // code\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // name\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_available_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Institution_$3791_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_struct$_Institution_$3791_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(memPtr) {\n\n        mstore(add(memPtr, 0), \"Paycrest: zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_length_t_bytes_calldata_ptr(value, len) -> length {\n\n        length := len\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_bytes_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_bytes_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_bytes_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage(slot, src, len) {\n\n        let newLen := array_length_t_bytes_calldata_ptr(src, len)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_bytes_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := calldataload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value0, value1,  tail)\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":18,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100eb57806399e3c0b414610109578063cb79455b14610125578063f2fde38b1461014157610088565b8063322008821461008d578063715018a6146100a957806379a0effb146100b357806384630736146100cf575b600080fd5b6100a760048036038101906100a291906109ab565b61015d565b005b6100b1610271565b005b6100cd60048036038101906100c89190610a65565b610285565b005b6100e960048036038101906100e49190610ae5565b6103c2565b005b6100f361042d565b6040516101009190610b21565b60405180910390f35b610123600480360381019061011e9190610b74565b610457565b005b61013f600480360381019061013a9190610c22565b61058d565b005b61015b60048036038101906101569190610c6f565b6105e4565b005b610165610667565b60008151905060005b8181101561026b57609c600085815260200190815260200160002083828151811061019c5761019b610c9c565b5b6020026020010151908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050604051806040016040528084838151811061020157610200610c9c565b5b602002602001015160200151815260200185815250609d600085848151811061022d5761022c610c9c565b5b60200260200101516000015181526020019081526020016000206000820151816000015560208201518160010155905050808060010191505061016e565b50505050565b610279610667565b61028360006106e5565b565b61028d610667565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390610d28565b60405180910390fd5b7f747265617375727900000000000000000000000000000000000000000000000082036103655780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7fd8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516103b69190610b21565b60405180910390a15050565b6103ca610667565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fb94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e26446816040516104229190610d57565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61045f610667565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590610d28565b60405180910390fd5b7f746f6b656e000000000000000000000000000000000000000000000000000000830361054d5780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161058093929190610d90565b60405180910390a1505050565b610595610667565b8181606891826105a6929190610fe8565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef82826040516105d8929190611105565b60405180910390a15050565b6105ec610667565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361065b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106529061119b565b60405180910390fd5b610664816106e5565b50565b61066f6107ab565b73ffffffffffffffffffffffffffffffffffffffff1661068d61042d565b73ffffffffffffffffffffffffffffffffffffffff16146106e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106da90611207565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6107da816107c7565b81146107e557600080fd5b50565b6000813590506107f7816107d1565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61084b82610802565b810181811067ffffffffffffffff8211171561086a57610869610813565b5b80604052505050565b600061087d6107b3565b90506108898282610842565b919050565b600067ffffffffffffffff8211156108a9576108a8610813565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156108da576108d96108bf565b5b6108e46040610873565b905060006108f4848285016107e8565b6000830152506020610908848285016107e8565b60208301525092915050565b60006109276109228461088e565b610873565b9050808382526020820190506040840283018581111561094a576109496108ba565b5b835b81811015610973578061095f88826108c4565b84526020840193505060408101905061094c565b5050509392505050565b600082601f830112610992576109916107fd565b5b81356109a2848260208601610914565b91505092915050565b600080604083850312156109c2576109c16107bd565b5b60006109d0858286016107e8565b925050602083013567ffffffffffffffff8111156109f1576109f06107c2565b5b6109fd8582860161097d565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3282610a07565b9050919050565b610a4281610a27565b8114610a4d57600080fd5b50565b600081359050610a5f81610a39565b92915050565b60008060408385031215610a7c57610a7b6107bd565b5b6000610a8a858286016107e8565b9250506020610a9b85828601610a50565b9150509250929050565b600067ffffffffffffffff82169050919050565b610ac281610aa5565b8114610acd57600080fd5b50565b600081359050610adf81610ab9565b92915050565b600060208284031215610afb57610afa6107bd565b5b6000610b0984828501610ad0565b91505092915050565b610b1b81610a27565b82525050565b6000602082019050610b366000830184610b12565b92915050565b60008115159050919050565b610b5181610b3c565b8114610b5c57600080fd5b50565b600081359050610b6e81610b48565b92915050565b600080600060608486031215610b8d57610b8c6107bd565b5b6000610b9b868287016107e8565b9350506020610bac86828701610a50565b9250506040610bbd86828701610b5f565b9150509250925092565b600080fd5b60008083601f840112610be257610be16107fd565b5b8235905067ffffffffffffffff811115610bff57610bfe610bc7565b5b602083019150836001820283011115610c1b57610c1a6108ba565b5b9250929050565b60008060208385031215610c3957610c386107bd565b5b600083013567ffffffffffffffff811115610c5757610c566107c2565b5b610c6385828601610bcc565b92509250509250929050565b600060208284031215610c8557610c846107bd565b5b6000610c9384828501610a50565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b6000610d12601683610ccb565b9150610d1d82610cdc565b602082019050919050565b60006020820190508181036000830152610d4181610d05565b9050919050565b610d5181610aa5565b82525050565b6000602082019050610d6c6000830184610d48565b92915050565b610d7b816107c7565b82525050565b610d8a81610b3c565b82525050565b6000606082019050610da56000830186610d72565b610db26020830185610b12565b610dbf6040830184610d81565b949350505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e1957607f821691505b602082108103610e2c57610e2b610dd2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610e947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610e57565b610e9e8683610e57565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610ee5610ee0610edb84610eb6565b610ec0565b610eb6565b9050919050565b6000819050919050565b610eff83610eca565b610f13610f0b82610eec565b848454610e64565b825550505050565b600090565b610f28610f1b565b610f33818484610ef6565b505050565b5b81811015610f5757610f4c600082610f20565b600181019050610f39565b5050565b601f821115610f9c57610f6d81610e32565b610f7684610e47565b81016020851015610f85578190505b610f99610f9185610e47565b830182610f38565b50505b505050565b600082821c905092915050565b6000610fbf60001984600802610fa1565b1980831691505092915050565b6000610fd88383610fae565b9150826002028217905092915050565b610ff28383610dc7565b67ffffffffffffffff81111561100b5761100a610813565b5b6110158254610e01565b611020828285610f5b565b6000601f83116001811461104f576000841561103d578287013590505b6110478582610fcc565b8655506110af565b601f19841661105d86610e32565b60005b8281101561108557848901358255600182019150602085019450602081019050611060565b868310156110a2578489013561109e601f891682610fae565b8355505b6001600288020188555050505b50505050505050565b600082825260208201905092915050565b82818337600083830152505050565b60006110e483856110b8565b93506110f18385846110c9565b6110fa83610802565b840190509392505050565b600060208201905081810360008301526111208184866110d8565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611185602683610ccb565b915061119082611129565b604082019050919050565b600060208201905081810360008301526111b481611178565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006111f1602083610ccb565b91506111fc826111bb565b602082019050919050565b60006020820190508181036000830152611220816111e4565b905091905056fea26469706673582212200ac48374db43635dc515d1616cb1293eebaaa8faa4246c902deee08ae6be56f664736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x141 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x32200882 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0xCF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x9AB JUMP JUMPDEST PUSH2 0x15D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB1 PUSH2 0x271 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xA65 JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE4 SWAP2 SWAP1 PUSH2 0xAE5 JUMP JUMPDEST PUSH2 0x3C2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF3 PUSH2 0x42D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0xB21 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x123 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11E SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x457 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x156 SWAP2 SWAP1 PUSH2 0xC6F JUMP JUMPDEST PUSH2 0x5E4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x165 PUSH2 0x667 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x9C PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x19C JUMPI PUSH2 0x19B PUSH2 0xC9C JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x201 JUMPI PUSH2 0x200 PUSH2 0xC9C JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9D PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI PUSH2 0x22C PUSH2 0xC9C JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x16E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x279 PUSH2 0x667 JUMP JUMPDEST PUSH2 0x283 PUSH1 0x0 PUSH2 0x6E5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x28D PUSH2 0x667 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F3 SWAP1 PUSH2 0xD28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x7472656173757279000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x365 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xD8EF77A7D69A6B79F131ECD9AA37060BA0853BBD37CB175EC1ABD05738CE27CB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH2 0x3B6 SWAP2 SWAP1 PUSH2 0xB21 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x3CA PUSH2 0x667 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xB94068A4BD2571ACEE6AC79ACC9DCDCF10C31425D35F09E88F154EC520E26446 DUP2 PUSH1 0x40 MLOAD PUSH2 0x422 SWAP2 SWAP1 PUSH2 0xD57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x45F PUSH2 0x667 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C5 SWAP1 PUSH2 0xD28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x54D JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x580 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD90 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x595 PUSH2 0x667 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x5A6 SWAP3 SWAP2 SWAP1 PUSH2 0xFE8 JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x5D8 SWAP3 SWAP2 SWAP1 PUSH2 0x1105 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x5EC PUSH2 0x667 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x65B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x652 SWAP1 PUSH2 0x119B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x664 DUP2 PUSH2 0x6E5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x66F PUSH2 0x7AB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x68D PUSH2 0x42D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6DA SWAP1 PUSH2 0x1207 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7DA DUP2 PUSH2 0x7C7 JUMP JUMPDEST DUP2 EQ PUSH2 0x7E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x7F7 DUP2 PUSH2 0x7D1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x84B DUP3 PUSH2 0x802 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x86A JUMPI PUSH2 0x869 PUSH2 0x813 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87D PUSH2 0x7B3 JUMP JUMPDEST SWAP1 POP PUSH2 0x889 DUP3 DUP3 PUSH2 0x842 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x8A9 JUMPI PUSH2 0x8A8 PUSH2 0x813 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8DA JUMPI PUSH2 0x8D9 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x8E4 PUSH1 0x40 PUSH2 0x873 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8F4 DUP5 DUP3 DUP6 ADD PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x908 DUP5 DUP3 DUP6 ADD PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x927 PUSH2 0x922 DUP5 PUSH2 0x88E JUMP JUMPDEST PUSH2 0x873 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x94A JUMPI PUSH2 0x949 PUSH2 0x8BA JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x973 JUMPI DUP1 PUSH2 0x95F DUP9 DUP3 PUSH2 0x8C4 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x94C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x992 JUMPI PUSH2 0x991 PUSH2 0x7FD JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9A2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x914 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9C2 JUMPI PUSH2 0x9C1 PUSH2 0x7BD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x9D0 DUP6 DUP3 DUP7 ADD PUSH2 0x7E8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9F1 JUMPI PUSH2 0x9F0 PUSH2 0x7C2 JUMP JUMPDEST JUMPDEST PUSH2 0x9FD DUP6 DUP3 DUP7 ADD PUSH2 0x97D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA32 DUP3 PUSH2 0xA07 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA42 DUP2 PUSH2 0xA27 JUMP JUMPDEST DUP2 EQ PUSH2 0xA4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA5F DUP2 PUSH2 0xA39 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA7C JUMPI PUSH2 0xA7B PUSH2 0x7BD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA8A DUP6 DUP3 DUP7 ADD PUSH2 0x7E8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xA9B DUP6 DUP3 DUP7 ADD PUSH2 0xA50 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAC2 DUP2 PUSH2 0xAA5 JUMP JUMPDEST DUP2 EQ PUSH2 0xACD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xADF DUP2 PUSH2 0xAB9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAFB JUMPI PUSH2 0xAFA PUSH2 0x7BD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB09 DUP5 DUP3 DUP6 ADD PUSH2 0xAD0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB1B DUP2 PUSH2 0xA27 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB36 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB12 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB51 DUP2 PUSH2 0xB3C JUMP JUMPDEST DUP2 EQ PUSH2 0xB5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB6E DUP2 PUSH2 0xB48 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB8D JUMPI PUSH2 0xB8C PUSH2 0x7BD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB9B DUP7 DUP3 DUP8 ADD PUSH2 0x7E8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xBAC DUP7 DUP3 DUP8 ADD PUSH2 0xA50 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xBBD DUP7 DUP3 DUP8 ADD PUSH2 0xB5F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xBE2 JUMPI PUSH2 0xBE1 PUSH2 0x7FD JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBFF JUMPI PUSH2 0xBFE PUSH2 0xBC7 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xC1B JUMPI PUSH2 0xC1A PUSH2 0x8BA JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC39 JUMPI PUSH2 0xC38 PUSH2 0x7BD JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC57 JUMPI PUSH2 0xC56 PUSH2 0x7C2 JUMP JUMPDEST JUMPDEST PUSH2 0xC63 DUP6 DUP3 DUP7 ADD PUSH2 0xBCC JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC85 JUMPI PUSH2 0xC84 PUSH2 0x7BD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC93 DUP5 DUP3 DUP6 ADD PUSH2 0xA50 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD12 PUSH1 0x16 DUP4 PUSH2 0xCCB JUMP JUMPDEST SWAP2 POP PUSH2 0xD1D DUP3 PUSH2 0xCDC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD41 DUP2 PUSH2 0xD05 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD51 DUP2 PUSH2 0xAA5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD6C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD48 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD7B DUP2 PUSH2 0x7C7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xD8A DUP2 PUSH2 0xB3C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xDA5 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xD72 JUMP JUMPDEST PUSH2 0xDB2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xB12 JUMP JUMPDEST PUSH2 0xDBF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xD81 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xE19 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xE2C JUMPI PUSH2 0xE2B PUSH2 0xDD2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0xE94 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0xE57 JUMP JUMPDEST PUSH2 0xE9E DUP7 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEE5 PUSH2 0xEE0 PUSH2 0xEDB DUP5 PUSH2 0xEB6 JUMP JUMPDEST PUSH2 0xEC0 JUMP JUMPDEST PUSH2 0xEB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEFF DUP4 PUSH2 0xECA JUMP JUMPDEST PUSH2 0xF13 PUSH2 0xF0B DUP3 PUSH2 0xEEC JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0xE64 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xF28 PUSH2 0xF1B JUMP JUMPDEST PUSH2 0xF33 DUP2 DUP5 DUP5 PUSH2 0xEF6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF57 JUMPI PUSH2 0xF4C PUSH1 0x0 DUP3 PUSH2 0xF20 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xF39 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xF9C JUMPI PUSH2 0xF6D DUP2 PUSH2 0xE32 JUMP JUMPDEST PUSH2 0xF76 DUP5 PUSH2 0xE47 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0xF85 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0xF99 PUSH2 0xF91 DUP6 PUSH2 0xE47 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0xF38 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBF PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0xFA1 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD8 DUP4 DUP4 PUSH2 0xFAE JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xFF2 DUP4 DUP4 PUSH2 0xDC7 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x100B JUMPI PUSH2 0x100A PUSH2 0x813 JUMP JUMPDEST JUMPDEST PUSH2 0x1015 DUP3 SLOAD PUSH2 0xE01 JUMP JUMPDEST PUSH2 0x1020 DUP3 DUP3 DUP6 PUSH2 0xF5B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x104F JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x103D JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x1047 DUP6 DUP3 PUSH2 0xFCC JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x10AF JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x105D DUP7 PUSH2 0xE32 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1085 JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1060 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x10A2 JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x109E PUSH1 0x1F DUP10 AND DUP3 PUSH2 0xFAE JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E4 DUP4 DUP6 PUSH2 0x10B8 JUMP JUMPDEST SWAP4 POP PUSH2 0x10F1 DUP4 DUP6 DUP5 PUSH2 0x10C9 JUMP JUMPDEST PUSH2 0x10FA DUP4 PUSH2 0x802 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1120 DUP2 DUP5 DUP7 PUSH2 0x10D8 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1185 PUSH1 0x26 DUP4 PUSH2 0xCCB JUMP JUMPDEST SWAP2 POP PUSH2 0x1190 DUP3 PUSH2 0x1129 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11B4 DUP2 PUSH2 0x1178 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11F1 PUSH1 0x20 DUP4 PUSH2 0xCCB JUMP JUMPDEST SWAP2 POP PUSH2 0x11FC DUP3 PUSH2 0x11BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1220 DUP2 PUSH2 0x11E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP 0xC4 DUP4 PUSH21 0xDB43635DC515D1616CB1293EEBAAA8FAA4246C902D 0xEE 0xE0 DUP11 0xE6 0xBE JUMP 0xF6 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"141:2655:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1663:500;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2064:101:0;;;:::i;:::-;;2362:265:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2169:187;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1441:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1378:279:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2633:161;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2314:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1663:500:16;1334:13:0;:11;:13::i;:::-;1780:14:16::1;1797:12;:19;1780:36;;1831:6;1826:331;1847:6;1843:1;:10;1826:331;;;1871:21;:31;1893:8;1871:31;;;;;;;;;;;1908:12;1921:1;1908:15;;;;;;;;:::i;:::-;;;;;;;;1871:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1990:97;;;;;;;;2032:12;2045:1;2032:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;1990:97;;;;2064:8;1990:97;;::::0;1938:27:::1;:49;1966:12;1979:1;1966:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;1938:49;;;;;;;;;;;:149;;;;;;;;;;;;;;;;;;;2129:3;;;;;;;1826:331;;;;1769:394;1663:500:::0;;:::o;2064:101:0:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;2362:265:16:-;1334:13:0;:11;:13::i;:::-;2478:1:16::1;2461:19;;:5;:19;;::::0;2453:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2521:18;:4;:18:::0;2517:47:::1;;2559:5;2541:15;;:23;;;;;;;;;;;;;;;;;;2517:47;2579:41;2604:15;;;;;;;;;;;2579:41;;;;;;:::i;:::-;;;;;;;;2362:265:::0;;:::o;2169:187::-;1334:13:0;:11;:13::i;:::-;2275:19:16::1;2254:18;;:40;;;;;;;;;;;;;;;;;;2309;2329:19;2309:40;;;;;;:::i;:::-;;;;;;;;2169:187:::0;:::o;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;1378:279:16:-;1334:13:0;:11;:13::i;:::-;1502:1:16::1;1485:19;;:5;:19;;::::0;1477:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;1545:15;:4;:15:::0;1541:54:::1;;1589:6;1562:17;:24;1580:5;1562:24;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;1541:54;1611:39;1630:4;1636:5;1643:6;1611:39;;;;;;;;:::i;:::-;;;;;;;;1378:279:::0;;;:::o;2633:161::-;1334:13:0;:11;:13::i;:::-;2737:10:16::1;;2723:11;:24;;;;;;;:::i;:::-;;2762:25;2776:10;;2762:25;;;;;;;:::i;:::-;;;;;;;;2633:161:::0;;:::o;2314:198:0:-;1334:13;:11;:13::i;:::-;2422:1:::1;2402:22;;:8;:22;;::::0;2394:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;1599:130::-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;2666:187::-;2739:16;2758:6;;;;;;;;;;;2739:25;;2783:8;2774:6;;:17;;;;;;;;;;;;;;;;;;2837:8;2806:40;;2827:8;2806:40;;;;;;;;;;;;2729:124;2666:187;:::o;850:96:7:-;903:7;929:10;922:17;;850:96;:::o;7:75:18:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:117::-;799:1;796;789:12;813:102;854:6;905:2;901:7;896:2;889:5;885:14;881:28;871:38;;813:102;;;:::o;921:180::-;969:77;966:1;959:88;1066:4;1063:1;1056:15;1090:4;1087:1;1080:15;1107:281;1190:27;1212:4;1190:27;:::i;:::-;1182:6;1178:40;1320:6;1308:10;1305:22;1284:18;1272:10;1269:34;1266:62;1263:88;;;1331:18;;:::i;:::-;1263:88;1371:10;1367:2;1360:22;1150:238;1107:281;;:::o;1394:129::-;1428:6;1455:20;;:::i;:::-;1445:30;;1484:33;1512:4;1504:6;1484:33;:::i;:::-;1394:129;;;:::o;1529:340::-;1635:4;1725:18;1717:6;1714:30;1711:56;;;1747:18;;:::i;:::-;1711:56;1797:4;1789:6;1785:17;1777:25;;1857:4;1851;1847:15;1839:23;;1529:340;;;:::o;1875:117::-;1984:1;1981;1974:12;1998:117;2107:1;2104;2097:12;2293:578;2371:5;2415:4;2403:9;2398:3;2394:19;2390:30;2387:117;;;2423:79;;:::i;:::-;2387:117;2522:21;2538:4;2522:21;:::i;:::-;2513:30;;2602:1;2642:49;2687:3;2678:6;2667:9;2663:22;2642:49;:::i;:::-;2635:4;2628:5;2624:16;2617:75;2553:150;2762:2;2803:49;2848:3;2839:6;2828:9;2824:22;2803:49;:::i;:::-;2796:4;2789:5;2785:16;2778:75;2713:151;2293:578;;;;:::o;2928:797::-;3053:5;3078:110;3094:93;3180:6;3094:93;:::i;:::-;3078:110;:::i;:::-;3069:119;;3208:5;3237:6;3230:5;3223:21;3271:4;3264:5;3260:16;3253:23;;3324:4;3316:6;3312:17;3304:6;3300:30;3353:3;3345:6;3342:15;3339:122;;;3372:79;;:::i;:::-;3339:122;3487:6;3470:249;3504:6;3499:3;3496:15;3470:249;;;3579:3;3608:66;3670:3;3658:10;3608:66;:::i;:::-;3603:3;3596:79;3704:4;3699:3;3695:14;3688:21;;3546:173;3530:4;3525:3;3521:14;3514:21;;3470:249;;;3474:21;3059:666;;2928:797;;;;;:::o;3782:428::-;3882:5;3931:3;3924:4;3916:6;3912:17;3908:27;3898:122;;3939:79;;:::i;:::-;3898:122;4056:6;4043:20;4081:123;4200:3;4192:6;4185:4;4177:6;4173:17;4081:123;:::i;:::-;4072:132;;3888:322;3782:428;;;;:::o;4216:742::-;4338:6;4346;4395:2;4383:9;4374:7;4370:23;4366:32;4363:119;;;4401:79;;:::i;:::-;4363:119;4521:1;4546:53;4591:7;4582:6;4571:9;4567:22;4546:53;:::i;:::-;4536:63;;4492:117;4676:2;4665:9;4661:18;4648:32;4707:18;4699:6;4696:30;4693:117;;;4729:79;;:::i;:::-;4693:117;4834:107;4933:7;4924:6;4913:9;4909:22;4834:107;:::i;:::-;4824:117;;4619:332;4216:742;;;;;:::o;4964:126::-;5001:7;5041:42;5034:5;5030:54;5019:65;;4964:126;;;:::o;5096:96::-;5133:7;5162:24;5180:5;5162:24;:::i;:::-;5151:35;;5096:96;;;:::o;5198:122::-;5271:24;5289:5;5271:24;:::i;:::-;5264:5;5261:35;5251:63;;5310:1;5307;5300:12;5251:63;5198:122;:::o;5326:139::-;5372:5;5410:6;5397:20;5388:29;;5426:33;5453:5;5426:33;:::i;:::-;5326:139;;;;:::o;5471:474::-;5539:6;5547;5596:2;5584:9;5575:7;5571:23;5567:32;5564:119;;;5602:79;;:::i;:::-;5564:119;5722:1;5747:53;5792:7;5783:6;5772:9;5768:22;5747:53;:::i;:::-;5737:63;;5693:117;5849:2;5875:53;5920:7;5911:6;5900:9;5896:22;5875:53;:::i;:::-;5865:63;;5820:118;5471:474;;;;;:::o;5951:101::-;5987:7;6027:18;6020:5;6016:30;6005:41;;5951:101;;;:::o;6058:120::-;6130:23;6147:5;6130:23;:::i;:::-;6123:5;6120:34;6110:62;;6168:1;6165;6158:12;6110:62;6058:120;:::o;6184:137::-;6229:5;6267:6;6254:20;6245:29;;6283:32;6309:5;6283:32;:::i;:::-;6184:137;;;;:::o;6327:327::-;6385:6;6434:2;6422:9;6413:7;6409:23;6405:32;6402:119;;;6440:79;;:::i;:::-;6402:119;6560:1;6585:52;6629:7;6620:6;6609:9;6605:22;6585:52;:::i;:::-;6575:62;;6531:116;6327:327;;;;:::o;6660:118::-;6747:24;6765:5;6747:24;:::i;:::-;6742:3;6735:37;6660:118;;:::o;6784:222::-;6877:4;6915:2;6904:9;6900:18;6892:26;;6928:71;6996:1;6985:9;6981:17;6972:6;6928:71;:::i;:::-;6784:222;;;;:::o;7012:90::-;7046:7;7089:5;7082:13;7075:21;7064:32;;7012:90;;;:::o;7108:116::-;7178:21;7193:5;7178:21;:::i;:::-;7171:5;7168:32;7158:60;;7214:1;7211;7204:12;7158:60;7108:116;:::o;7230:133::-;7273:5;7311:6;7298:20;7289:29;;7327:30;7351:5;7327:30;:::i;:::-;7230:133;;;;:::o;7369:613::-;7443:6;7451;7459;7508:2;7496:9;7487:7;7483:23;7479:32;7476:119;;;7514:79;;:::i;:::-;7476:119;7634:1;7659:53;7704:7;7695:6;7684:9;7680:22;7659:53;:::i;:::-;7649:63;;7605:117;7761:2;7787:53;7832:7;7823:6;7812:9;7808:22;7787:53;:::i;:::-;7777:63;;7732:118;7889:2;7915:50;7957:7;7948:6;7937:9;7933:22;7915:50;:::i;:::-;7905:60;;7860:115;7369:613;;;;;:::o;7988:117::-;8097:1;8094;8087:12;8124:552;8181:8;8191:6;8241:3;8234:4;8226:6;8222:17;8218:27;8208:122;;8249:79;;:::i;:::-;8208:122;8362:6;8349:20;8339:30;;8392:18;8384:6;8381:30;8378:117;;;8414:79;;:::i;:::-;8378:117;8528:4;8520:6;8516:17;8504:29;;8582:3;8574:4;8566:6;8562:17;8552:8;8548:32;8545:41;8542:128;;;8589:79;;:::i;:::-;8542:128;8124:552;;;;;:::o;8682:527::-;8752:6;8760;8809:2;8797:9;8788:7;8784:23;8780:32;8777:119;;;8815:79;;:::i;:::-;8777:119;8963:1;8952:9;8948:17;8935:31;8993:18;8985:6;8982:30;8979:117;;;9015:79;;:::i;:::-;8979:117;9128:64;9184:7;9175:6;9164:9;9160:22;9128:64;:::i;:::-;9110:82;;;;8906:296;8682:527;;;;;:::o;9215:329::-;9274:6;9323:2;9311:9;9302:7;9298:23;9294:32;9291:119;;;9329:79;;:::i;:::-;9291:119;9449:1;9474:53;9519:7;9510:6;9499:9;9495:22;9474:53;:::i;:::-;9464:63;;9420:117;9215:329;;;;:::o;9550:180::-;9598:77;9595:1;9588:88;9695:4;9692:1;9685:15;9719:4;9716:1;9709:15;9736:169;9820:11;9854:6;9849:3;9842:19;9894:4;9889:3;9885:14;9870:29;;9736:169;;;;:::o;9911:172::-;10051:24;10047:1;10039:6;10035:14;10028:48;9911:172;:::o;10089:366::-;10231:3;10252:67;10316:2;10311:3;10252:67;:::i;:::-;10245:74;;10328:93;10417:3;10328:93;:::i;:::-;10446:2;10441:3;10437:12;10430:19;;10089:366;;;:::o;10461:419::-;10627:4;10665:2;10654:9;10650:18;10642:26;;10714:9;10708:4;10704:20;10700:1;10689:9;10685:17;10678:47;10742:131;10868:4;10742:131;:::i;:::-;10734:139;;10461:419;;;:::o;10886:115::-;10971:23;10988:5;10971:23;:::i;:::-;10966:3;10959:36;10886:115;;:::o;11007:218::-;11098:4;11136:2;11125:9;11121:18;11113:26;;11149:69;11215:1;11204:9;11200:17;11191:6;11149:69;:::i;:::-;11007:218;;;;:::o;11231:118::-;11318:24;11336:5;11318:24;:::i;:::-;11313:3;11306:37;11231:118;;:::o;11355:109::-;11436:21;11451:5;11436:21;:::i;:::-;11431:3;11424:34;11355:109;;:::o;11470:430::-;11613:4;11651:2;11640:9;11636:18;11628:26;;11664:71;11732:1;11721:9;11717:17;11708:6;11664:71;:::i;:::-;11745:72;11813:2;11802:9;11798:18;11789:6;11745:72;:::i;:::-;11827:66;11889:2;11878:9;11874:18;11865:6;11827:66;:::i;:::-;11470:430;;;;;;:::o;11906:96::-;11964:6;11992:3;11982:13;;11906:96;;;;:::o;12008:180::-;12056:77;12053:1;12046:88;12153:4;12150:1;12143:15;12177:4;12174:1;12167:15;12194:320;12238:6;12275:1;12269:4;12265:12;12255:22;;12322:1;12316:4;12312:12;12343:18;12333:81;;12399:4;12391:6;12387:17;12377:27;;12333:81;12461:2;12453:6;12450:14;12430:18;12427:38;12424:84;;12480:18;;:::i;:::-;12424:84;12245:269;12194:320;;;:::o;12520:140::-;12568:4;12591:3;12583:11;;12614:3;12611:1;12604:14;12648:4;12645:1;12635:18;12627:26;;12520:140;;;:::o;12666:93::-;12703:6;12750:2;12745;12738:5;12734:14;12730:23;12720:33;;12666:93;;;:::o;12765:107::-;12809:8;12859:5;12853:4;12849:16;12828:37;;12765:107;;;;:::o;12878:393::-;12947:6;12997:1;12985:10;12981:18;13020:97;13050:66;13039:9;13020:97;:::i;:::-;13138:39;13168:8;13157:9;13138:39;:::i;:::-;13126:51;;13210:4;13206:9;13199:5;13195:21;13186:30;;13259:4;13249:8;13245:19;13238:5;13235:30;13225:40;;12954:317;;12878:393;;;;;:::o;13277:77::-;13314:7;13343:5;13332:16;;13277:77;;;:::o;13360:60::-;13388:3;13409:5;13402:12;;13360:60;;;:::o;13426:142::-;13476:9;13509:53;13527:34;13536:24;13554:5;13536:24;:::i;:::-;13527:34;:::i;:::-;13509:53;:::i;:::-;13496:66;;13426:142;;;:::o;13574:75::-;13617:3;13638:5;13631:12;;13574:75;;;:::o;13655:269::-;13765:39;13796:7;13765:39;:::i;:::-;13826:91;13875:41;13899:16;13875:41;:::i;:::-;13867:6;13860:4;13854:11;13826:91;:::i;:::-;13820:4;13813:105;13731:193;13655:269;;;:::o;13930:73::-;13975:3;13930:73;:::o;14009:189::-;14086:32;;:::i;:::-;14127:65;14185:6;14177;14171:4;14127:65;:::i;:::-;14062:136;14009:189;;:::o;14204:186::-;14264:120;14281:3;14274:5;14271:14;14264:120;;;14335:39;14372:1;14365:5;14335:39;:::i;:::-;14308:1;14301:5;14297:13;14288:22;;14264:120;;;14204:186;;:::o;14396:541::-;14496:2;14491:3;14488:11;14485:445;;;14530:37;14561:5;14530:37;:::i;:::-;14613:29;14631:10;14613:29;:::i;:::-;14603:8;14599:44;14796:2;14784:10;14781:18;14778:49;;;14817:8;14802:23;;14778:49;14840:80;14896:22;14914:3;14896:22;:::i;:::-;14886:8;14882:37;14869:11;14840:80;:::i;:::-;14500:430;;14485:445;14396:541;;;:::o;14943:117::-;14997:8;15047:5;15041:4;15037:16;15016:37;;14943:117;;;;:::o;15066:169::-;15110:6;15143:51;15191:1;15187:6;15179:5;15176:1;15172:13;15143:51;:::i;:::-;15139:56;15224:4;15218;15214:15;15204:25;;15117:118;15066:169;;;;:::o;15240:295::-;15316:4;15462:29;15487:3;15481:4;15462:29;:::i;:::-;15454:37;;15524:3;15521:1;15517:11;15511:4;15508:21;15500:29;;15240:295;;;;:::o;15540:1398::-;15662:43;15701:3;15696;15662:43;:::i;:::-;15770:18;15762:6;15759:30;15756:56;;;15792:18;;:::i;:::-;15756:56;15836:38;15868:4;15862:11;15836:38;:::i;:::-;15921:66;15980:6;15972;15966:4;15921:66;:::i;:::-;16014:1;16043:2;16035:6;16032:14;16060:1;16055:631;;;;16730:1;16747:6;16744:84;;;16803:9;16798:3;16794:19;16781:33;16772:42;;16744:84;16854:67;16914:6;16907:5;16854:67;:::i;:::-;16848:4;16841:81;16703:229;16025:907;;16055:631;16107:4;16103:9;16095:6;16091:22;16141:36;16172:4;16141:36;:::i;:::-;16199:1;16213:215;16227:7;16224:1;16221:14;16213:215;;;16313:9;16308:3;16304:19;16291:33;16283:6;16276:49;16364:1;16356:6;16352:14;16342:24;;16411:2;16400:9;16396:18;16383:31;;16250:4;16247:1;16243:12;16238:17;;16213:215;;;16456:6;16447:7;16444:19;16441:186;;;16521:9;16516:3;16512:19;16499:33;16564:48;16606:4;16598:6;16594:17;16583:9;16564:48;:::i;:::-;16556:6;16549:64;16464:163;16441:186;16673:1;16669;16661:6;16657:14;16653:22;16647:4;16640:36;16062:624;;;16025:907;;15637:1301;;;15540:1398;;;:::o;16944:168::-;17027:11;17061:6;17056:3;17049:19;17101:4;17096:3;17092:14;17077:29;;16944:168;;;;:::o;17118:146::-;17215:6;17210:3;17205;17192:30;17256:1;17247:6;17242:3;17238:16;17231:27;17118:146;;;:::o;17292:314::-;17388:3;17409:70;17472:6;17467:3;17409:70;:::i;:::-;17402:77;;17489:56;17538:6;17533:3;17526:5;17489:56;:::i;:::-;17570:29;17592:6;17570:29;:::i;:::-;17565:3;17561:39;17554:46;;17292:314;;;;;:::o;17612:329::-;17733:4;17771:2;17760:9;17756:18;17748:26;;17820:9;17814:4;17810:20;17806:1;17795:9;17791:17;17784:47;17848:86;17929:4;17920:6;17912;17848:86;:::i;:::-;17840:94;;17612:329;;;;;:::o;17947:225::-;18087:34;18083:1;18075:6;18071:14;18064:58;18156:8;18151:2;18143:6;18139:15;18132:33;17947:225;:::o;18178:366::-;18320:3;18341:67;18405:2;18400:3;18341:67;:::i;:::-;18334:74;;18417:93;18506:3;18417:93;:::i;:::-;18535:2;18530:3;18526:12;18519:19;;18178:366;;;:::o;18550:419::-;18716:4;18754:2;18743:9;18739:18;18731:26;;18803:9;18797:4;18793:20;18789:1;18778:9;18774:17;18767:47;18831:131;18957:4;18831:131;:::i;:::-;18823:139;;18550:419;;;:::o;18975:182::-;19115:34;19111:1;19103:6;19099:14;19092:58;18975:182;:::o;19163:366::-;19305:3;19326:67;19390:2;19385:3;19326:67;:::i;:::-;19319:74;;19402:93;19491:3;19402:93;:::i;:::-;19520:2;19515:3;19511:12;19504:19;;19163:366;;;:::o;19535:419::-;19701:4;19739:2;19728:9;19724:18;19716:26;;19788:9;19782:4;19778:20;19774:1;19763:9;19759:17;19752:47;19816:131;19942:4;19816:131;:::i;:::-;19808:139;;19535:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"940200","executionCost":"975","totalCost":"941175"},"external":{"owner()":"2522","renounceOwnership()":"30421","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"infinite","settingManagerBool(bytes32,address,bool)":"infinite","transferOwnership(address)":"30810","updateProtocolAddresses(bytes32,address)":"infinite","updateProtocolAggregator(bytes)":"infinite","updateProtocolFees(uint64)":"infinite"}},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"32200882","settingManagerBool(bytes32,address,bool)":"99e3c0b4","transferOwnership(address)":"f2fde38b","updateProtocolAddresses(bytes32,address)":"79a0effb","updateProtocolAggregator(bytes)":"cb79455b","updateProtocolFees(uint64)":"84630736"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"ProtocolAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"ProtocolFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"updateProtocolAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaycrestSettingManager.sol\":\"PaycrestSettingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    struct Institution {\\n        bytes32 code;\\n        bytes32 name;\\n    }\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n    uint256 internal MAX_BPS;\\n    uint64 internal protocolFeePercent;\\n    address internal treasuryAddress;\\n    address internal _aggregatorAddress;\\n    bytes internal _aggregator;\\n    \\n    // this should decrease if more slots are needed on this contract to avoid collisions with base contract\\n    uint256[50] private __gap;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n\\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event ProtocolFeesUpdated(uint64 protocolFee);\\n    event ProtocolAddressesUpdated(address treasuryAddress);\\n    event SetAggregator(bytes aggregator);\\n    event SetFeeRecipient(address treasuryAddress);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function updateProtocolFees(uint64 _protocolFeePercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        emit ProtocolFeesUpdated(_protocolFeePercent);\\n    }\\n\\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"treasury\\\") treasuryAddress = value;\\n        emit ProtocolAddressesUpdated(treasuryAddress);\\n    }\\n\\n    function updateProtocolAggregator(bytes calldata aggregator) external onlyOwner {\\n        _aggregator = aggregator;\\n        emit SetAggregator(aggregator);\\n    }\\n}\\n\",\"keccak256\":\"0x8138addd429d835214d4ac4ea0f651cf70efa4d1798592f55478dadf3b9c5a1b\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1288,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3798,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"MAX_BPS","offset":0,"slot":"101","type":"t_uint256"},{"astId":3800,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"protocolFeePercent","offset":0,"slot":"102","type":"t_uint64"},{"astId":3802,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"treasuryAddress","offset":8,"slot":"102","type":"t_address"},{"astId":3804,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_aggregatorAddress","offset":0,"slot":"103","type":"t_address"},{"astId":3806,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_aggregator","offset":0,"slot":"104","type":"t_bytes_storage"},{"astId":3810,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"105","type":"t_array(t_uint256)50_storage"},{"astId":3814,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_isTokenSupported","offset":0,"slot":"155","type":"t_mapping(t_address,t_bool)"},{"astId":3820,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"supportedInstitutions","offset":0,"slot":"156","type":"t_mapping(t_bytes32,t_array(t_struct(Institution)3791_storage)dyn_storage)"},{"astId":3825,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"supportedInstitutionsByCode","offset":0,"slot":"157","type":"t_mapping(t_bytes32,t_struct(InstitutionByCode)3796_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Institution)3791_storage)dyn_storage":{"base":"t_struct(Institution)3791_storage","encoding":"dynamic_array","label":"struct PaycrestSettingManager.Institution[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_array(t_struct(Institution)3791_storage)dyn_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])","numberOfBytes":"32","value":"t_array(t_struct(Institution)3791_storage)dyn_storage"},"t_mapping(t_bytes32,t_struct(InstitutionByCode)3796_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)","numberOfBytes":"32","value":"t_struct(InstitutionByCode)3796_storage"},"t_struct(Institution)3791_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.Institution","members":[{"astId":3788,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"code","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3790,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"name","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(InstitutionByCode)3796_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.InstitutionByCode","members":[{"astId":3793,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3795,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"currency","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interface/IPaycrest.sol":{"IPaycrest":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"institutionCode","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fee","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"}],"name":"Refunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"validator","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardValidator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"Settled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferSenderFee","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_institutionCode","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAggregator","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint64","name":"protocolReward","type":"uint64"},{"internalType":"uint256","name":"max_bps","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPaycrest.Order","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"}],"name":"refund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"address","name":"_liquidityProvider","type":"address"},{"internalType":"uint64","name":"_settlePercent","type":"uint64"},{"internalType":"bool","name":"_isPartner","type":"bool"}],"name":"settle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Paycrest Team Factory and global config params","events":{"Deposit(address,uint256,bytes32,uint256,bytes32,bytes32,string)":{"details":"Emitted when deposit is made."},"Refunded(uint256,bytes32,bytes32)":{"details":"Emitted when aggregator refund transaction."},"RewardValidator(address,uint256)":{"details":"Emitted when primary validator get their rewards."},"Settled(bytes32,bytes32,bytes32,address,uint96)":{"details":"Emitted when aggregator settle transaction."},"TransferSenderFee(address,uint256)":{"details":"Emitted when sender get their rewards."}},"kind":"dev","methods":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":{"details":"See {isTokenSupported}. `amount` must be greater than minimum `_refundable` refundable address must not be zero address","params":{"_amount":"amount in the decimal of `_token` above.","_institutionCode":"institution code of the sender.","_label":"reference of the sender.","_rate":"rate at which sender intended to sell `_amount` of `_token`.","_refundAddress":"address that is going to recieve `_amount` in `_token` when there is a need to refund.","_senderFee":"amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.","_senderFeeRecipient":"address that is going to recieve `_senderFee` in `_token` when there is a need to refund.","_token":"address of the token.","messageHash":"hash must be the result of a hash operation for the verification to be secure. message"},"returns":{"_orderId":"the bytes20 which is the orderId"}},"getAggregator()":{"returns":{"_0":"aggregator public key."}},"getFeeDetails()":{"returns":{"max_bps":"maximum amount in bps \"100% == 100_000\".","protocolReward":"amount that will be taken in percentage on all trade."}},"getOrderInfo(bytes32)":{"params":{"_orderId":"transaction Id."}},"isTokenSupported(address)":{"params":{"_token":"address of the token to check."},"returns":{"_0":"return the status of `_token` {bool}"}},"refund(uint256,bytes32,bytes32)":{"params":{"_fee":"amount to be deducted from the amount to be refunded","_label":"reference of the sender.","_orderId":"transaction Id."},"returns":{"_0":"return the status of transaction {bool}"}},"settle(bytes32,bytes32,bytes32,address,uint64,bool)":{"params":{"_isPartner":"is the liquidity provider a partner.","_label":"reference of the sender.","_liquidityProvider":"address of the liquidity provider.","_orderId":"transaction Id.","_settlePercent":"rate at which the transaction is settled."},"returns":{"_0":"return the status of transaction {bool}"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":"2654ec7e","getAggregator()":"3ad59dbc","getFeeDetails()":"b810c636","getOrderInfo(bytes32)":"768c6ec0","isTokenSupported(address)":"75151b63","refund(uint256,bytes32,bytes32)":"d28a8d32","settle(bytes32,bytes32,bytes32,address,uint64,bool)":"5fe44cac"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolReward\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"max_bps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_isPartner\",\"type\":\"bool\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Paycrest Team Factory and global config params\",\"events\":{\"Deposit(address,uint256,bytes32,uint256,bytes32,bytes32,string)\":{\"details\":\"Emitted when deposit is made.\"},\"Refunded(uint256,bytes32,bytes32)\":{\"details\":\"Emitted when aggregator refund transaction.\"},\"RewardValidator(address,uint256)\":{\"details\":\"Emitted when primary validator get their rewards.\"},\"Settled(bytes32,bytes32,bytes32,address,uint96)\":{\"details\":\"Emitted when aggregator settle transaction.\"},\"TransferSenderFee(address,uint256)\":{\"details\":\"Emitted when sender get their rewards.\"}},\"kind\":\"dev\",\"methods\":{\"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"See {isTokenSupported}. `amount` must be greater than minimum `_refundable` refundable address must not be zero address\",\"params\":{\"_amount\":\"amount in the decimal of `_token` above.\",\"_institutionCode\":\"institution code of the sender.\",\"_label\":\"reference of the sender.\",\"_rate\":\"rate at which sender intended to sell `_amount` of `_token`.\",\"_refundAddress\":\"address that is going to recieve `_amount` in `_token` when there is a need to refund.\",\"_senderFee\":\"amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\",\"_senderFeeRecipient\":\"address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\",\"_token\":\"address of the token.\",\"messageHash\":\"hash must be the result of a hash operation for the verification to be secure. message\"},\"returns\":{\"_orderId\":\"the bytes20 which is the orderId\"}},\"getAggregator()\":{\"returns\":{\"_0\":\"aggregator public key.\"}},\"getFeeDetails()\":{\"returns\":{\"max_bps\":\"maximum amount in bps \\\"100% == 100_000\\\".\",\"protocolReward\":\"amount that will be taken in percentage on all trade.\"}},\"getOrderInfo(bytes32)\":{\"params\":{\"_orderId\":\"transaction Id.\"}},\"isTokenSupported(address)\":{\"params\":{\"_token\":\"address of the token to check.\"},\"returns\":{\"_0\":\"return the status of `_token` {bool}\"}},\"refund(uint256,bytes32,bytes32)\":{\"params\":{\"_fee\":\"amount to be deducted from the amount to be refunded\",\"_label\":\"reference of the sender.\",\"_orderId\":\"transaction Id.\"},\"returns\":{\"_0\":\"return the status of transaction {bool}\"}},\"settle(bytes32,bytes32,bytes32,address,uint64,bool)\":{\"params\":{\"_isPartner\":\"is the liquidity provider a partner.\",\"_label\":\"reference of the sender.\",\"_liquidityProvider\":\"address of the liquidity provider.\",\"_orderId\":\"transaction Id.\",\"_settlePercent\":\"rate at which the transaction is settled.\"},\"returns\":{\"_0\":\"return the status of transaction {bool}\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)\":{\"notice\":\"lock sender `_amount` of `token` into Paycrest. Requirements: `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\"},\"getAggregator()\":{\"notice\":\"get public key of liquidity aggregator.\"},\"getFeeDetails()\":{\"notice\":\"get every rewards and address on Paycrest.\"},\"getOrderInfo(bytes32)\":{\"notice\":\"get order details.\"},\"isTokenSupported(address)\":{\"notice\":\"get supported token from Paycrest.\"},\"refund(uint256,bytes32,bytes32)\":{\"notice\":\"refund to the specified refundable address. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `isFulfilled` must be false.\"},\"settle(bytes32,bytes32,bytes32,address,uint64,bool)\":{\"notice\":\"settle transaction and distribute rewards accordingly. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `_primaryValidator` must have stake on the Paycrest staking platform. `_secondaryValidators` must have stake on the Paycrest staking platform. `amount` must be greater than minimum `_refundable` refundable address must not be zero address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interface/IPaycrest.sol\":\"IPaycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interface/IPaycrest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @author Paycrest Team\\n * Factory and global config params\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /// @dev Emitted when deposit is made.\\n    event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash);\\n    /// @dev Emitted when aggregator settle transaction.\\n    event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent);\\n    /// @dev Emitted when aggregator refund transaction.\\n    event Refunded(uint256 _fee, bytes32 indexed orderId, bytes32 label);\\n    /// @dev Emitted when sender get their rewards.\\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\\n    /// @dev Emitted when primary validator get their rewards.\\n    event RewardValidator(address indexed validator, uint256 indexed amount);\\n\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    struct TransactionMetadata {\\n        bytes8 identifier;                 //                                                                   slot 0\\n        bytes8 institution;                //                                                                   slot 0\\n        bytes8 name;                       //                                                                   slot 0\\n        bytes8 currency;                   //                                                                   slot 0\\n        uint256 liquidityProviderID;       //                                                                   slot 1\\n    }\\n\\n    struct Order {\\n        address seller;                     //                                                                   slot 0\\n        address token;                      //                                                                   slot 1\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint96 rate;                        //                                                                   slot 1\\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\\n        uint96 currentBPS;                  //                                                                   slot 2 {}\\n        uint256 amount;                     //                                                                   slot 3\\n    }\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /// @notice lock sender `_amount` of `token` into Paycrest.\\n    /// Requirements:\\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _token address of the token.\\n    /// @param _amount amount in the decimal of `_token` above.\\n    /// @param _institutionCode institution code of the sender.\\n    /// @param _label reference of the sender.\\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\\n    /// @param _senderFeeRecipient address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\\n    /// @param _senderFee amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\\n    /// @return _orderId the bytes20 which is the orderId\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        bytes32 _label,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash)  external returns(bytes32 _orderId);\\n\\n    /// @notice settle transaction and distribute rewards accordingly.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _orderId transaction Id.\\n    /// @param _label reference of the sender.\\n    /// @param _liquidityProvider address of the liquidity provider.\\n    /// @param _settlePercent rate at which the transaction is settled.\\n    /// @param _isPartner is the liquidity provider a partner.\\n    /// @return return the status of transaction {bool}\\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address _liquidityProvider, uint64 _settlePercent, bool _isPartner)  external returns(bytes32, address);\\n\\n    /// @notice refund to the specified refundable address.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `isFulfilled` must be false.\\n    /// @param _fee amount to be deducted from the amount to be refunded\\n    /// @param _orderId transaction Id.\\n    /// @param _label reference of the sender.\\n    /// @return return the status of transaction {bool}\\n    function refund(uint256 _fee, bytes32 _orderId, bytes32 _label)  external returns(bool);\\n\\n    /// @notice get supported token from Paycrest.\\n    /// @param _token address of the token to check.\\n    /// @return return the status of `_token` {bool}\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /// @notice get order details.\\n    /// @param _orderId transaction Id.\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /// @notice get every rewards and address on Paycrest.\\n    /// @return protocolReward amount that will be taken in percentage on all trade.\\n    /// @return max_bps maximum amount in bps \\\"100% == 100_000\\\".\\n    function getFeeDetails() external view returns(\\n        uint64 protocolReward, \\n        uint256 max_bps\\n    );\\n\\n    /// @notice get public key of liquidity aggregator.\\n    /// @return aggregator public key.\\n    function getAggregator() external view returns(bytes memory);\\n}\\n\",\"keccak256\":\"0x49729590c9029903138bb45f3761bfa26643a9a1c17e2a7eecd46db78602046b\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":{"notice":"lock sender `_amount` of `token` into Paycrest. Requirements: `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call."},"getAggregator()":{"notice":"get public key of liquidity aggregator."},"getFeeDetails()":{"notice":"get every rewards and address on Paycrest."},"getOrderInfo(bytes32)":{"notice":"get order details."},"isTokenSupported(address)":{"notice":"get supported token from Paycrest."},"refund(uint256,bytes32,bytes32)":{"notice":"refund to the specified refundable address. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `isFulfilled` must be false."},"settle(bytes32,bytes32,bytes32,address,uint64,bool)":{"notice":"settle transaction and distribute rewards accordingly. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `_primaryValidator` must have stake on the Paycrest staking platform. `_secondaryValidators` must have stake on the Paycrest staking platform. `amount` must be greater than minimum `_refundable` refundable address must not be zero address"}},"version":1}}}}}}