{"id":"bc58fc995f1f74246591431ac6a0e2ed","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"contracts/interface/IPaycrest.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n/**\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\n * Factory and global config params\n */\ninterface IPaycrest {\n    \n    /* ##################################################################\n                                EVENTS\n    ################################################################## */\n    /// @dev Emitted when deposit is made.\n    event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash);\n    /// @dev Emitted when aggregator settle transaction.\n    event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent);\n    /// @dev Emitted when aggregator refund transaction.\n    event Refunded(bytes32 indexed orderId, bytes32 label);\n    /// @dev Emitted when sender get therir rewards.\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\n    /// @dev Emitted when primary validator get therir rewards.\n    event RewardValidator(address indexed validator, uint256 indexed amount);\n\n    /* ##################################################################\n                                STRUCTS\n    ################################################################## */\n    struct TransactionMetadata {\n        bytes8 identifier;                 //                                                                   slot 0\n        bytes8 institution;                //                                                                   slot 0\n        bytes8 name;                       //                                                                   slot 0\n        bytes8 currency;                   //                                                                   slot 0\n        uint256 liquidityProviderID;       //                                                                   slot 1\n    }\n\n    struct Order {\n        address seller;                     //                                                                   slot 0\n        address token;                      //                                                                   slot 1\n        address senderFeeRecipient;\n        uint256 senderFee;\n        uint96 rate;                        //                                                                   slot 1\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\n        uint96 currentBPS;                  //                                                                   slot 2 {}\n        uint256 amount;                     //                                                                   slot 3\n    }\n\n\n    /* ##################################################################\n                                EXTERNAL CALLS\n    ################################################################## */\n    /// @notice lock sender `_amount` of `token` into Paycrest.\n    /// Requirements:\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\n    /// `amount` must be greater than minimum\n    /// `_refundable` refundable address must not be zero address\n    /// @param _token address of the token.\n    /// @param _amount amount in the decimal of `_token` above.\n    /// @param _institutionCode institution code of the sender.\n    /// @param _label reference of the sender.\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\n    /// @param _senderFeeRecipient address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\n    /// @param _senderFee amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\n    /// @return _orderId the bytes20 which is the orderId\n    function createOrder(\n        address _token, \n        uint256 _amount, \n        bytes32 _institutionCode,\n        bytes32 _label,\n        uint96 _rate, \n        address _senderFeeRecipient,\n        uint256 _senderFee,\n        address _refundAddress, \n        string calldata messageHash)  external returns(bytes32 _orderId);\n\n    /// @notice settle transaction and distribute rewards accordingly.\n    /// Requirements:\n    /// {only aggregators call}.\n    /// `_orderId` it must be less than total ids.\n    /// `_orderId` it must be an open Id.\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\n    /// `amount` must be greater than minimum\n    /// `_refundable` refundable address must not be zero address\n    /// @param _orderId transaction Id.\n    /// @param _label reference of the sender.\n    /// @param _liquidityProvider address of the liquidity provider.\n    /// @param _settlePercent rate at which the transaction is settled.\n    /// @param _isPartner is the liquidity provider a partner.\n    /// @return return the status of transaction {bool}\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address _liquidityProvider, uint64 _settlePercent, bool _isPartner)  external returns(bytes32, address);\n\n    /// @notice refund to the specified refundable address.\n    /// Requirements:\n    /// {only aggregators call}.\n    /// `_orderId` it must be less than total ids.\n    /// `_orderId` it must be an open Id.\n    /// `isFulfilled` must be false.\n    /// @param _orderId transaction Id.\n    /// @param _label reference of the sender.\n    /// @return return the status of transaction {bool}\n    function refund(bytes32 _orderId, bytes32 _label)  external returns(bool);\n\n    /// @notice get supported token from Paycrest.\n    /// @param _token address of the token to check.\n    /// @return return the status of `_token` {bool}\n    function isTokenSupported(address _token) external view returns(bool);\n\n    /// @notice get order details.\n    /// @param _orderId transaction Id.\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\n\n    /// @notice get every rewards and address on Paycrest.\n    /// @return protocolReward amount that will be taken in percentage on all trade.\n    /// @return max_bps maximum amount in bps \"100% == 100_000\".\n    function getFeeDetails() external view returns(\n        uint64 protocolReward, \n        uint256 max_bps\n    );\n\n    /// @notice get address of liquidity aggregator.\n    /// @return address of `Aggregator`.\n    function getAggregatorAddress() external view returns(address);\n\n    /// @notice get aggregator public key.\n    /// @return aggregator public key.\n    function getAggregator() external view returns(bytes memory);\n    \n    /// @notice get address of sender whitelisting status.\n    /// @param sender address of the sender.\n    /// @return address of `status`.\n    function getWhitelistedStatus(address sender) external view returns(bool);\n\n}\n"},"contracts/interface/IPaycrestStake.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\n\n/**\n * @author Chef Photons, Vaultka Team serving high quality drinks; drink responsibly.\n * Factory and global config params\n */\ninterface IPaycrestStake {\n    \n    function rewardValidators(bytes32 orderId, address token, address[] memory validators, uint256 validatorsReward) external returns(bool);\n    \n}\n"},"contracts/mocks/MockUSDC.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/// @dev Mock mintable USDC\ncontract MockUSDC is ERC20 {\n    constructor() ERC20(\"MockUDSC\", \"MUSDC\") {\n        _mint(msg.sender, 1_000_000E18);\n    }\n\n    function mint(uint256 _amount) external {\n        _mint(msg.sender, _amount);\n    }\n\n    function burn(uint256 _amount) external {\n        _burn(msg.sender, _amount);\n    }\n\n    function burnAll() external {\n        uint256 _balanceOf = balanceOf(msg.sender);\n        require(_balanceOf > 0, \"MockUSDC: Nothing to burn\");\n        _burn(msg.sender, _balanceOf);\n    }\n}\n"},"contracts/Paycrest.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport {PaycrestSettingManager} from \"./PaycrestSettingManager.sol\";\nimport {IPaycrest, IERC20} from \"./interface/IPaycrest.sol\";\ncontract Paycrest is IPaycrest, PaycrestSettingManager { \n    using SafeERC20Upgradeable for IERC20;\n    using ECDSAUpgradeable for bytes32;\n    struct fee {\n        uint256 protocolFee;\n        uint256 liquidityProviderAmount;\n    }\n    mapping(bytes32 => Order) private order;\n    mapping(address => uint256) private _nonce;\n    uint256[50] private __gap;\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address _usdc) external initializer {    \n        _isTokenSupported[_usdc] = true;   \n        MAX_BPS = 100_000; \n        protocolFeePercent = 5000; // 5%\n        __Ownable_init();\n    }\n\n    modifier onlyAggregator {\n        require(msg.sender == _aggregatorAddress, \"OnlyAggregator\");\n        _;\n    }\n    \n    /* ##################################################################\n                                USER CALLS\n    ################################################################## */\n    /** @dev See {createOrder-IPaycrest}. */\n    function createOrder(\n        address _token, \n        uint256 _amount, \n        bytes32 _institutionCode,\n        bytes32 _label,\n        uint96 _rate, \n        address _senderFeeRecipient,\n        uint256 _senderFee,\n        address _refundAddress, \n        string calldata messageHash\n    )  external returns(bytes32 orderId) {\n        // checks that are required\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _institutionCode);\n        // require that sender fee is less than protocol fee\n        require(_senderFee <= (_amount * protocolFeePercent) / MAX_BPS, \"SenderFeeTooHigh\");\n        // first transfer token from msg.sender\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n        // increase users nonce to avoid replay attacks\n        _nonce[msg.sender] ++;\n        // @chibie @5ran6\n        // @todo sender fee should have limit, let say the maximum amount of sender fee should be 1% of the amount\n        // generate transaction id for the transaction\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\n        // update transaction\n        order[orderId] = Order({\n            seller: msg.sender,\n            token: _token,\n            senderFeeRecipient: _senderFeeRecipient,\n            senderFee: _senderFee,\n            rate: _rate,\n            isFulfilled: false,\n            refundAddress: _refundAddress,\n            currentBPS: uint64(MAX_BPS),\n            amount: _amount\n        });\n        // emit deposit event\n        emit Deposit(_token, _amount, orderId, _rate, _institutionCode, _label, messageHash);\n    }\n\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, bytes32 _institutionCode) internal view {\n        // use require for all the custom errors\n        require(_isTokenSupported[_token], \"TokenNotSupported\");\n        require(_amount > 0, \"AmountIsZero\");\n        require(_refundAddress != address(0), \"ThrowZeroAddress\");\n        require(_senderFeeRecipient != address(0), \"ThrowZeroAddress\");\n        require(supportedInstitutionsByCode[_institutionCode].name != bytes32(0), \"InvalidInstitutionCode\");\n    }\n\n    /* ##################################################################\n                                AGGREGATOR FUNCTIONS\n    ################################################################## */\n    /** @dev See {settle-IPaycrest}. */\n    function settle(\n        bytes32 _splitOrderId,\n        bytes32 _orderId, \n        bytes32 _label,\n        address _liquidityProvider, \n        uint64 _settlePercent,\n        bool _isPartner\n        )  external onlyAggregator() returns(bytes32, address) {\n        // ensure the transaction has not been fulfilled\n        require(!order[_orderId].isFulfilled, \"OrderFulfilled\");\n        // load the token into memory\n        address token = order[_orderId].token;\n        // substract sum of amount based on the input _settlePercent\n        order[_orderId].currentBPS -= _settlePercent;\n        // if transaction amount is zero\n        // load the fees and transfer associated protocol fees to protocol fee recipient\n        ( fee memory _feeParams  ) = _calculateFees(_orderId, _settlePercent, _isPartner);\n        if(order[_orderId].currentBPS == 0) {\n            // update the transaction to be fulfilled\n            order[_orderId].isFulfilled = true;\n            if (order[_orderId].senderFee > 0) {\n                // transfer sender fee\n                transferSenderFee(_orderId);\n            }\n        }\n        \n        if (_feeParams.protocolFee > 0) {\n            // transfer protocol fee\n            IERC20(token).transfer(feeRecipient, _feeParams.protocolFee);\n        }\n        // // transfer to liquidity provider \n        IERC20(token).transfer(_liquidityProvider, _feeParams.liquidityProviderAmount);\n\n        // emit event\n        emit Settled(_splitOrderId, _orderId, _label,  _liquidityProvider, _settlePercent);\n        return (_orderId, token);\n    }\n\n    function transferSenderFee(bytes32 _orderId) internal {\n        address recipient = order[_orderId].senderFeeRecipient;\n        uint256 _fee = order[_orderId].senderFee;\n        // transfer sender fee\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\n        // emmit event\n        emit TransferSenderFee(recipient, _fee);\n    }\n\n    /** @dev See {refund-IPaycrest}. */\n    function refund(bytes32 _orderId, bytes32 _label)  external onlyAggregator() returns(bool) {\n        // ensure the transaction has not been fulfilled\n        require(!order[_orderId].isFulfilled, \"OrderFulfilled\");\n        // reser state values\n        order[_orderId].isFulfilled = true;\n        order[_orderId].currentBPS = 0;\n        // transfer to seller \n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, order[_orderId].amount);\n        // emit\n        emit Refunded(_orderId, _label);\n        return true;\n    }\n\n    function _calculateFees(bytes32 _orderId, uint96 _settlePercent, bool _isPartner) private view returns(fee memory _feeParams ) {\n        // get the total amount associated with the orderId\n        uint256 amount = order[_orderId].amount;\n        // get sender fee from amount\n        amount = amount - order[_orderId].senderFee;\n        // get the settled percent that is scheduled for this amount\n        _feeParams.liquidityProviderAmount = (amount * _settlePercent) / MAX_BPS;\n        // deduct protocol fees from the new total amount\n        _feeParams.protocolFee = (_feeParams.liquidityProviderAmount * protocolFeePercent) / MAX_BPS; \n        // substract total fees from the new amount after getting the scheduled amount\n        _feeParams.liquidityProviderAmount = (_feeParams.liquidityProviderAmount - _feeParams.protocolFee);\n        // if (_isPartner) protocol fee should be 0, and the whole protocol fee should be added to liquidity provider\n        if (_isPartner) {\n            _feeParams.liquidityProviderAmount += _feeParams.protocolFee;\n            _feeParams.protocolFee = 0;\n        }\n    }\n    \n    /* ##################################################################\n                                VIEW CALLS\n    ################################################################## */\n    /** @dev See {getOrderInfo-IPaycrest}. */\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\n        return order[_orderId];\n    }\n\n    /** @dev See {isTokenSupported-IPaycrest}. */\n    function isTokenSupported(address _token) external view returns(bool) {\n        return _isTokenSupported[_token];\n    }\n\n    /** @dev See {getSupportedInstitutionName-IPaycrest}. */\n    function getSupportedInstitutionName(bytes32 code) external view returns (InstitutionByCode memory) {\n        return supportedInstitutionsByCode[code];\n    }\n\n    function getSupportedInstitutions(bytes32 currency) external view returns (Institution[] memory) {\n        Institution[] memory institutions = supportedInstitutions[currency];\n        uint256 length = institutions.length;\n        Institution[] memory result = new Institution[](length);\n        \n        for (uint256 i = 0; i < length; ) {\n            result[i] = institutions[i];\n            unchecked {\n                i++;\n            }\n        }\n        \n        return result;\n    }\n\n    /** @dev See {getFeeDetails-IPaycrest}. */\n    function getFeeDetails() external view returns(\n        uint64, \n        uint256\n    ) {\n        return(protocolFeePercent, MAX_BPS);\n    }\n\n    /** @dev See {getAggregatorAddress-IPaycrest}. */\n    function getAggregatorAddress() external view returns(address) {\n        return _aggregatorAddress;\n    }\n\n    /** @dev See {getWhitelistedStatus-IPaycrest}. */\n    function getWhitelistedStatus(address sender) external view returns(bool) {\n        return _isWhitelisted[sender];\n    }\n\n    /** @dev See {getAggregator-IPaycrest}. */\n    function getAggregator() external view returns(bytes memory) {\n        return _aggregator;\n    }\n\n\n    // DECLARE A FUNCTION TO WITHDRAW ANY TOKEN FROM CONTRACT CAN ONLY NE CALLED BY OWNER\n    function withdraw(address _token, address _recipient, uint256 _amount) external onlyOwner {\n        IERC20(_token).transfer(_recipient, _amount);\n    }\n\n}\n"},"contracts/PaycrestSettingManager.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract PaycrestSettingManager is OwnableUpgradeable { \n    struct Institution {\n        bytes32 code; // usually not more than 8 letters\n        bytes32 name; // \n    }\n    struct InstitutionByCode {\n        bytes32 name;\n        bytes32 currency;\n    }\n    uint256 internal MAX_BPS;\n    uint64 internal protocolFeePercent; // 5%\n    address internal feeRecipient;\n    address internal _aggregatorAddress;\n    bytes internal _aggregator;\n    \n    // this should decrease if more slots are needed on this contract to avoid collisions with base contract\n    uint256[50] private __gap;\n\n    mapping(address => bool) internal _isTokenSupported;\n    mapping(address => bool) internal _isWhitelisted;\n\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\n\n    event SettingManagerBool(bytes32 what, address value, bool status);\n    event PaycrestFees(uint64 protocolFee);\n    event SetAggregator(bytes aggregator);\n    event SetFeeRecipient(address feeRecipient);\n    \n    /* ##################################################################\n                                OWNER FUNCTIONS\n    ################################################################## */\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\n        require(value != address(0), \"Paycrest: zero address\");\n        if (what == \"token\") _isTokenSupported[value] = status;\n        if (what == \"whitelist\") _isWhitelisted[value] = status;\n\n        emit SettingManagerBool(what, value, status);\n    }\n\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \n        uint256 length = institutions.length;\n        for (uint i = 0; i < length; ) {\n            supportedInstitutions[currency].push(institutions[i]);\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\n                name: institutions[i].name, currency: currency\n            });\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function updateProtocolFees(uint64 _protocolFeePercent) external onlyOwner {\n        protocolFeePercent = _protocolFeePercent;\n        emit PaycrestFees(_protocolFeePercent);\n    }\n\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\n        require(value != address(0), \"Paycrest: zero address\");\n        if (what == \"fee\") feeRecipient = value;\n        if (what == \"aggregator\") _aggregatorAddress = value;\n    }\n\n    function updateProtocolAggregator(bytes calldata aggregator) external onlyOwner {\n        _aggregator = aggregator;\n        emit SetAggregator(aggregator);\n    }\n\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1120],"ContextUpgradeable":[1162],"Initializable":[300],"OwnableUpgradeable":[131]},"id":132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":1163,"src":"127:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":301,"src":"169:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Initializable","nameLocations":["748:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"748:13:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"748:13:0"},{"baseName":{"id":7,"name":"ContextUpgradeable","nameLocations":["763:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":1162,"src":"763:18:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"763:18:0"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"213:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":131,"linearizedBaseContracts":[131,1162,300],"name":"OwnableUpgradeable","nameLocation":"726:18:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":10,"mutability":"mutable","name":"_owner","nameLocation":"804:6:0","nodeType":"VariableDeclaration","scope":131,"src":"788:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":16,"name":"OwnershipTransferred","nameLocation":"823:20:0","nodeType":"EventDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:0","nodeType":"VariableDeclaration","scope":16,"src":"844:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:0","nodeType":"VariableDeclaration","scope":16,"src":"875:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:0"},"src":"817:84:0"},{"body":{"id":25,"nodeType":"Block","src":"1055:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"1065:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"1065:26:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"907:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":26,"implemented":true,"kind":"function","modifiers":[{"id":20,"kind":"modifierInvocation","modifierName":{"id":19,"name":"onlyInitializing","nameLocations":["1038:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1038:16:0"},"nodeType":"ModifierInvocation","src":"1038:16:0"}],"name":"__Ownable_init","nameLocation":"1012:14:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"1026:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"1055:0:0"},"scope":131,"src":"1003:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":36,"nodeType":"Block","src":"1166:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":32,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"1195:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":31,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"1176:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"1176:32:0"}]},"id":37,"implemented":true,"kind":"function","modifiers":[{"id":29,"kind":"modifierInvocation","modifierName":{"id":28,"name":"onlyInitializing","nameLocations":["1149:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1149:16:0"},"nodeType":"ModifierInvocation","src":"1149:16:0"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"1137:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"1166:0:0"},"scope":131,"src":"1104:111:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":44,"nodeType":"Block","src":"1324:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":40,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1334:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"ExpressionStatement","src":"1334:13:0"},{"id":43,"nodeType":"PlaceholderStatement","src":"1357:1:0"}]},"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"1221:77:0","text":" @dev Throws if called by any account other than the owner."},"id":45,"name":"onlyOwner","nameLocation":"1312:9:0","nodeType":"ModifierDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"1321:2:0"},"src":"1303:62:0","virtual":false,"visibility":"internal"},{"body":{"id":53,"nodeType":"Block","src":"1496:30:0","statements":[{"expression":{"id":51,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1513:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":50,"id":52,"nodeType":"Return","src":"1506:13:0"}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1371:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":54,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[],"src":"1455:2:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1487:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:0"},"scope":131,"src":"1441:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":67,"nodeType":"Block","src":"1644:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":59,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1662:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":61,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"1673:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":58,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1654:68:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1532:62:0","text":" @dev Throws if the sender is not the owner."},"id":68,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1619:2:0"},"returnParameters":{"id":57,"nodeType":"ParameterList","parameters":[],"src":"1644:0:0"},"scope":131,"src":"1599:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":81,"nodeType":"Block","src":"2118:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":77,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":76,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2147:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:0","typeDescriptions":{}}},"id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2147:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":74,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2128:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"ExpressionStatement","src":"2128:30:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1735:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":82,"implemented":true,"kind":"function","modifiers":[{"id":72,"kind":"modifierInvocation","modifierName":{"id":71,"name":"onlyOwner","nameLocations":["2108:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2108:9:0"},"nodeType":"ModifierInvocation","src":"2108:9:0"}],"name":"renounceOwnership","nameLocation":"2073:17:0","nodeType":"FunctionDefinition","parameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"2090:2:0"},"returnParameters":{"id":73,"nodeType":"ParameterList","parameters":[],"src":"2118:0:0"},"scope":131,"src":"2064:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":104,"nodeType":"Block","src":"2384:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":91,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2402:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2422:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"2414:7:0","typeDescriptions":{}}},"id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2402:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":97,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":90,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2394:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":99,"nodeType":"ExpressionStatement","src":"2394:73:0"},{"expression":{"arguments":[{"id":101,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2496:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2477:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":103,"nodeType":"ExpressionStatement","src":"2477:28:0"}]},"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"2171:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":105,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2374:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2374:9:0"},"nodeType":"ModifierInvocation","src":"2374:9:0"}],"name":"transferOwnership","nameLocation":"2323:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"newOwner","nameLocation":"2349:8:0","nodeType":"VariableDeclaration","scope":105,"src":"2341:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2340:18:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2384:0:0"},"scope":131,"src":"2314:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":124,"nodeType":"Block","src":"2729:124:0","statements":[{"assignments":[112],"declarations":[{"constant":false,"id":112,"mutability":"mutable","name":"oldOwner","nameLocation":"2747:8:0","nodeType":"VariableDeclaration","scope":124,"src":"2739:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":114,"initialValue":{"id":113,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2758:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2739:25:0"},{"expression":{"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":115,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2774:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":116,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2783:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2774:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":118,"nodeType":"ExpressionStatement","src":"2774:17:0"},{"eventCall":{"arguments":[{"id":120,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"2827:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":121,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2837:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":119,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"2806:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":123,"nodeType":"EmitStatement","src":"2801:45:0"}]},"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2518:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":125,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2675:18:0","nodeType":"FunctionDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"newOwner","nameLocation":"2702:8:0","nodeType":"VariableDeclaration","scope":125,"src":"2694:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:18:0"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[],"src":"2729:0:0"},"scope":131,"src":"2666:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"2859:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":130,"mutability":"mutable","name":"__gap","nameLocation":"3138:5:0","nodeType":"VariableDeclaration","scope":131,"src":"3118:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":129,"length":{"hexValue":"3439","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3126:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3118:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":132,"src":"708:2438:0","usedErrors":[]}],"src":"102:3045:0"},"id":0},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1120],"Initializable":[300]},"id":301,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":133,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":134,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":301,"sourceUnit":1121,"src":"138:44:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"184:2209:1","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":300,"linearizedBaseContracts":[300],"name":"Initializable","nameLocation":"2412:13:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":136,"nodeType":"StructuredDocumentation","src":"2432:109:1","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":138,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:1","nodeType":"VariableDeclaration","scope":300,"src":"2546:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":137,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"2579:91:1","text":" @dev Indicates that the contract is in the process of being initialized."},"id":141,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:1","nodeType":"VariableDeclaration","scope":300,"src":"2675:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":140,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":142,"nodeType":"StructuredDocumentation","src":"2708:90:1","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":146,"name":"Initialized","nameLocation":"2809:11:1","nodeType":"EventDefinition","parameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":144,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:1","nodeType":"VariableDeclaration","scope":146,"src":"2821:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":143,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:1"},"src":"2803:33:1"},{"body":{"id":201,"nodeType":"Block","src":"3269:483:1","statements":[{"assignments":[150],"declarations":[{"constant":false,"id":150,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:1","nodeType":"VariableDeclaration","scope":201,"src":"3279:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":149,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":153,"initialValue":{"id":152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:1","subExpression":{"id":151,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3302:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":155,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3347:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":156,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3365:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":160,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:1","subExpression":{"arguments":[{"arguments":[{"id":165,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$300","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$300","typeString":"contract Initializable"}],"id":164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:1","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":161,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"3388:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1120_$","typeString":"type(library AddressUpgradeable)"}},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:1","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":808,"src":"3388:29:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":169,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3436:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":173,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":154,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":177,"nodeType":"ExpressionStatement","src":"3325:201:1"},{"expression":{"id":180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":178,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3536:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":181,"nodeType":"ExpressionStatement","src":"3536:16:1"},{"condition":{"id":182,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3566:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":188,"nodeType":"IfStatement","src":"3562:65:1","trueBody":{"id":187,"nodeType":"Block","src":"3582:45:1","statements":[{"expression":{"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":183,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3596:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":186,"nodeType":"ExpressionStatement","src":"3596:20:1"}]}},{"id":189,"nodeType":"PlaceholderStatement","src":"3636:1:1"},{"condition":{"id":190,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3651:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":200,"nodeType":"IfStatement","src":"3647:99:1","trueBody":{"id":199,"nodeType":"Block","src":"3667:79:1","statements":[{"expression":{"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":191,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3681:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":194,"nodeType":"ExpressionStatement","src":"3681:21:1"},{"eventCall":{"arguments":[{"hexValue":"31","id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":195,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"3721:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":198,"nodeType":"EmitStatement","src":"3716:19:1"}]}}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"2842:399:1","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":202,"name":"initializer","nameLocation":"3255:11:1","nodeType":"ModifierDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[],"src":"3266:2:1"},"src":"3246:506:1","virtual":false,"visibility":"internal"},{"body":{"id":234,"nodeType":"Block","src":"4863:255:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:1","subExpression":{"id":208,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"4882:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":210,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"4899:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":211,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"4914:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":207,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":216,"nodeType":"ExpressionStatement","src":"4873:99:1"},{"expression":{"id":219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":217,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"4982:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":218,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"4997:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":220,"nodeType":"ExpressionStatement","src":"4982:22:1"},{"expression":{"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":221,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5014:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":224,"nodeType":"ExpressionStatement","src":"5014:20:1"},{"id":225,"nodeType":"PlaceholderStatement","src":"5044:1:1"},{"expression":{"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":226,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5055:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":229,"nodeType":"ExpressionStatement","src":"5055:21:1"},{"eventCall":{"arguments":[{"id":231,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"5103:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":230,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"5091:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":233,"nodeType":"EmitStatement","src":"5086:25:1"}]},"documentation":{"id":203,"nodeType":"StructuredDocumentation","src":"3758:1062:1","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":235,"name":"reinitializer","nameLocation":"4834:13:1","nodeType":"ModifierDefinition","parameters":{"id":206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"version","nameLocation":"4854:7:1","nodeType":"VariableDeclaration","scope":235,"src":"4848:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":204,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:1"},"src":"4825:293:1","virtual":false,"visibility":"internal"},{"body":{"id":244,"nodeType":"Block","src":"5356:97:1","statements":[{"expression":{"arguments":[{"id":239,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5374:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":238,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":242,"nodeType":"ExpressionStatement","src":"5366:69:1"},{"id":243,"nodeType":"PlaceholderStatement","src":"5445:1:1"}]},"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"5124:199:1","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":245,"name":"onlyInitializing","nameLocation":"5337:16:1","nodeType":"ModifierDefinition","parameters":{"id":237,"nodeType":"ParameterList","parameters":[],"src":"5353:2:1"},"src":"5328:125:1","virtual":false,"visibility":"internal"},{"body":{"id":280,"nodeType":"Block","src":"5988:231:1","statements":[{"expression":{"arguments":[{"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:1","subExpression":{"id":250,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"6007:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":249,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"ExpressionStatement","src":"5998:66:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":255,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6078:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":257,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":256,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:1","memberName":"max","nodeType":"MemberAccess","src":"6094:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":279,"nodeType":"IfStatement","src":"6074:139:1","trueBody":{"id":278,"nodeType":"Block","src":"6111:102:1","statements":[{"expression":{"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":262,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6125:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":264,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":263,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:1","memberName":"max","nodeType":"MemberAccess","src":"6140:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":269,"nodeType":"ExpressionStatement","src":"6125:30:1"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":272,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":271,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:1","memberName":"max","nodeType":"MemberAccess","src":"6186:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":270,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"6174:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":277,"nodeType":"EmitStatement","src":"6169:33:1"}]}}]},"documentation":{"id":246,"nodeType":"StructuredDocumentation","src":"5459:475:1","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":281,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:1","nodeType":"FunctionDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[],"src":"5968:2:1"},"returnParameters":{"id":248,"nodeType":"ParameterList","parameters":[],"src":"5988:0:1"},"scope":300,"src":"5939:280:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":289,"nodeType":"Block","src":"6393:36:1","statements":[{"expression":{"id":287,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6410:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":286,"id":288,"nodeType":"Return","src":"6403:19:1"}]},"documentation":{"id":282,"nodeType":"StructuredDocumentation","src":"6225:99:1","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":290,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:1","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[],"src":"6360:2:1"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":290,"src":"6386:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":284,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:1"},"scope":300,"src":"6329:100:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":298,"nodeType":"Block","src":"6601:37:1","statements":[{"expression":{"id":296,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"6618:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":295,"id":297,"nodeType":"Return","src":"6611:20:1"}]},"documentation":{"id":291,"nodeType":"StructuredDocumentation","src":"6435:105:1","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":299,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:1","nodeType":"FunctionDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[],"src":"6569:2:1"},"returnParameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":299,"src":"6595:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":293,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:1"},"scope":300,"src":"6545:93:1","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":301,"src":"2394:4246:1","usedErrors":[]}],"src":"113:6528:1"},"id":1},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[378]},"id":379,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":302,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":303,"nodeType":"StructuredDocumentation","src":"131:70:2","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":378,"linearizedBaseContracts":[378],"name":"IERC20Upgradeable","nameLocation":"212:17:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":304,"nodeType":"StructuredDocumentation","src":"236:158:2","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":312,"name":"Transfer","nameLocation":"405:8:2","nodeType":"EventDefinition","parameters":{"id":311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":306,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:2","nodeType":"VariableDeclaration","scope":312,"src":"414:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":305,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":308,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:2","nodeType":"VariableDeclaration","scope":312,"src":"436:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":307,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":310,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:2","nodeType":"VariableDeclaration","scope":312,"src":"456:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":309,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:2"},"src":"399:72:2"},{"anonymous":false,"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"477:148:2","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":321,"name":"Approval","nameLocation":"636:8:2","nodeType":"EventDefinition","parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:2","nodeType":"VariableDeclaration","scope":321,"src":"645:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":314,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":317,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:2","nodeType":"VariableDeclaration","scope":321,"src":"668:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":316,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":319,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:2","nodeType":"VariableDeclaration","scope":321,"src":"693:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":318,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:2"},"src":"630:78:2"},{"documentation":{"id":322,"nodeType":"StructuredDocumentation","src":"714:66:2","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":327,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:2","nodeType":"FunctionDefinition","parameters":{"id":323,"nodeType":"ParameterList","parameters":[],"src":"805:2:2"},"returnParameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":327,"src":"831:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":324,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:2"},"scope":378,"src":"785:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"846:72:2","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":335,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:2","nodeType":"FunctionDefinition","parameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"account","nameLocation":"950:7:2","nodeType":"VariableDeclaration","scope":335,"src":"942:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":329,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:2"},"returnParameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":335,"src":"982:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":332,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:2"},"scope":378,"src":"923:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":336,"nodeType":"StructuredDocumentation","src":"997:202:2","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":345,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:2","nodeType":"FunctionDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"to","nameLocation":"1230:2:2","nodeType":"VariableDeclaration","scope":345,"src":"1222:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":340,"mutability":"mutable","name":"amount","nameLocation":"1242:6:2","nodeType":"VariableDeclaration","scope":345,"src":"1234:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":339,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:2"},"returnParameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":345,"src":"1268:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":342,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:2"},"scope":378,"src":"1204:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":346,"nodeType":"StructuredDocumentation","src":"1280:264:2","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":355,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:2","nodeType":"FunctionDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"owner","nameLocation":"1576:5:2","nodeType":"VariableDeclaration","scope":355,"src":"1568:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":350,"mutability":"mutable","name":"spender","nameLocation":"1591:7:2","nodeType":"VariableDeclaration","scope":355,"src":"1583:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:2"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":355,"src":"1623:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":352,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:2"},"scope":378,"src":"1549:83:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":356,"nodeType":"StructuredDocumentation","src":"1638:642:2","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":365,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:2","nodeType":"FunctionDefinition","parameters":{"id":361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"spender","nameLocation":"2310:7:2","nodeType":"VariableDeclaration","scope":365,"src":"2302:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":357,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":360,"mutability":"mutable","name":"amount","nameLocation":"2327:6:2","nodeType":"VariableDeclaration","scope":365,"src":"2319:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":359,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:2"},"returnParameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":363,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":365,"src":"2353:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":362,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:2"},"scope":378,"src":"2285:74:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"2365:287:2","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":377,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:2","nodeType":"FunctionDefinition","parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"from","nameLocation":"2687:4:2","nodeType":"VariableDeclaration","scope":377,"src":"2679:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":367,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"to","nameLocation":"2701:2:2","nodeType":"VariableDeclaration","scope":377,"src":"2693:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"2693:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":372,"mutability":"mutable","name":"amount","nameLocation":"2713:6:2","nodeType":"VariableDeclaration","scope":377,"src":"2705:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":371,"name":"uint256","nodeType":"ElementaryTypeName","src":"2705:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:42:2"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":377,"src":"2739:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":374,"name":"bool","nodeType":"ElementaryTypeName","src":"2739:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2738:6:2"},"scope":378,"src":"2657:88:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":379,"src":"202:2545:2","usedErrors":[]}],"src":"106:2642:2"},"id":2},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[414]},"id":415,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":380,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":381,"nodeType":"StructuredDocumentation","src":"148:480:3","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":414,"linearizedBaseContracts":[414],"name":"IERC20PermitUpgradeable","nameLocation":"639:23:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":382,"nodeType":"StructuredDocumentation","src":"669:792:3","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":399,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1475:6:3","nodeType":"FunctionDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"owner","nameLocation":"1499:5:3","nodeType":"VariableDeclaration","scope":399,"src":"1491:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":383,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":386,"mutability":"mutable","name":"spender","nameLocation":"1522:7:3","nodeType":"VariableDeclaration","scope":399,"src":"1514:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":385,"name":"address","nodeType":"ElementaryTypeName","src":"1514:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"value","nameLocation":"1547:5:3","nodeType":"VariableDeclaration","scope":399,"src":"1539:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":387,"name":"uint256","nodeType":"ElementaryTypeName","src":"1539:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":390,"mutability":"mutable","name":"deadline","nameLocation":"1570:8:3","nodeType":"VariableDeclaration","scope":399,"src":"1562:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":389,"name":"uint256","nodeType":"ElementaryTypeName","src":"1562:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"v","nameLocation":"1594:1:3","nodeType":"VariableDeclaration","scope":399,"src":"1588:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":391,"name":"uint8","nodeType":"ElementaryTypeName","src":"1588:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":394,"mutability":"mutable","name":"r","nameLocation":"1613:1:3","nodeType":"VariableDeclaration","scope":399,"src":"1605:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1605:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"s","nameLocation":"1632:1:3","nodeType":"VariableDeclaration","scope":399,"src":"1624:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":395,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1624:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1481:158:3"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[],"src":"1648:0:3"},"scope":414,"src":"1466:183:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"1655:294:3","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":407,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1963:6:3","nodeType":"FunctionDefinition","parameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"owner","nameLocation":"1978:5:3","nodeType":"VariableDeclaration","scope":407,"src":"1970:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"1970:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1969:15:3"},"returnParameters":{"id":406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":405,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":407,"src":"2008:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":404,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2007:9:3"},"scope":414,"src":"1954:63:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":408,"nodeType":"StructuredDocumentation","src":"2023:128:3","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":413,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2218:16:3","nodeType":"FunctionDefinition","parameters":{"id":409,"nodeType":"ParameterList","parameters":[],"src":"2234:2:3"},"returnParameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":413,"src":"2260:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":410,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2260:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2259:9:3"},"scope":414,"src":"2209:60:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":415,"src":"629:1642:3","usedErrors":[]}],"src":"123:2149:3"},"id":3},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1120],"IERC20PermitUpgradeable":[414],"IERC20Upgradeable":[378],"SafeERC20Upgradeable":[790]},"id":791,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":416,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":417,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":791,"sourceUnit":379,"src":"140:34:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","file":"../extensions/IERC20PermitUpgradeable.sol","id":418,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":791,"sourceUnit":415,"src":"175:51:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../../utils/AddressUpgradeable.sol","id":419,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":791,"sourceUnit":1121,"src":"227:47:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20Upgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":420,"nodeType":"StructuredDocumentation","src":"276:457:4","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":790,"linearizedBaseContracts":[790],"name":"SafeERC20Upgradeable","nameLocation":"742:20:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":423,"libraryName":{"id":421,"name":"AddressUpgradeable","nameLocations":["775:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":1120,"src":"775:18:4"},"nodeType":"UsingForDirective","src":"769:37:4","typeName":{"id":422,"name":"address","nodeType":"ElementaryTypeName","src":"798:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":446,"nodeType":"Block","src":"1079:103:4","statements":[{"expression":{"arguments":[{"id":435,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"1109:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":438,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"1139:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1145:8:4","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":345,"src":"1139:14:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1154:8:4","memberName":"selector","nodeType":"MemberAccess","src":"1139:23:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":441,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"1164:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"1168:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":436,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1116:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":437,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1120:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1116:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1116:58:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":434,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"1089:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:86:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":445,"nodeType":"ExpressionStatement","src":"1089:86:4"}]},"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"812:179:4","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":447,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1005:12:4","nodeType":"FunctionDefinition","parameters":{"id":432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"mutability":"mutable","name":"token","nameLocation":"1036:5:4","nodeType":"VariableDeclaration","scope":447,"src":"1018:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":426,"nodeType":"UserDefinedTypeName","pathNode":{"id":425,"name":"IERC20Upgradeable","nameLocations":["1018:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"1018:17:4"},"referencedDeclaration":378,"src":"1018:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":429,"mutability":"mutable","name":"to","nameLocation":"1051:2:4","nodeType":"VariableDeclaration","scope":447,"src":"1043:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":428,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":431,"mutability":"mutable","name":"value","nameLocation":"1063:5:4","nodeType":"VariableDeclaration","scope":447,"src":"1055:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":430,"name":"uint256","nodeType":"ElementaryTypeName","src":"1055:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:52:4"},"returnParameters":{"id":433,"nodeType":"ParameterList","parameters":[],"src":"1079:0:4"},"scope":790,"src":"996:186:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":473,"nodeType":"Block","src":"1522:113:4","statements":[{"expression":{"arguments":[{"id":461,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"1552:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":464,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"1582:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1588:12:4","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":377,"src":"1582:18:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1601:8:4","memberName":"selector","nodeType":"MemberAccess","src":"1582:27:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":467,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"1611:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":468,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"1617:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":469,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"1621:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":462,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1559:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":463,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1563:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1559:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1559:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":460,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"1532:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:96:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":472,"nodeType":"ExpressionStatement","src":"1532:96:4"}]},"documentation":{"id":448,"nodeType":"StructuredDocumentation","src":"1188:228:4","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":474,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1430:16:4","nodeType":"FunctionDefinition","parameters":{"id":458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"token","nameLocation":"1465:5:4","nodeType":"VariableDeclaration","scope":474,"src":"1447:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":450,"nodeType":"UserDefinedTypeName","pathNode":{"id":449,"name":"IERC20Upgradeable","nameLocations":["1447:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"1447:17:4"},"referencedDeclaration":378,"src":"1447:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":453,"mutability":"mutable","name":"from","nameLocation":"1480:4:4","nodeType":"VariableDeclaration","scope":474,"src":"1472:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":452,"name":"address","nodeType":"ElementaryTypeName","src":"1472:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":455,"mutability":"mutable","name":"to","nameLocation":"1494:2:4","nodeType":"VariableDeclaration","scope":474,"src":"1486:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":454,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":457,"mutability":"mutable","name":"value","nameLocation":"1506:5:4","nodeType":"VariableDeclaration","scope":474,"src":"1498:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":456,"name":"uint256","nodeType":"ElementaryTypeName","src":"1498:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1446:66:4"},"returnParameters":{"id":459,"nodeType":"ParameterList","parameters":[],"src":"1522:0:4"},"scope":790,"src":"1421:214:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":517,"nodeType":"Block","src":"1982:497:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":486,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"2231:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2240:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2231:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":489,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2230:12:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":494,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2271:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$790","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$790","typeString":"library SafeERC20Upgradeable"}],"id":493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2263:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"2263:7:4","typeDescriptions":{}}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":496,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2278:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":490,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"2247:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2253:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":355,"src":"2247:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2290:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2247:44:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":500,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2246:46:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2230:62:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2306:56:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":485,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2209:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2209:163:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":504,"nodeType":"ExpressionStatement","src":"2209:163:4"},{"expression":{"arguments":[{"id":506,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"2402:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":509,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"2432:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2438:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":365,"src":"2432:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2446:8:4","memberName":"selector","nodeType":"MemberAccess","src":"2432:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":512,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2456:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"2465:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":507,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2409:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2413:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2409:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2409:62:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":505,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"2382:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:90:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":516,"nodeType":"ExpressionStatement","src":"2382:90:4"}]},"documentation":{"id":475,"nodeType":"StructuredDocumentation","src":"1641:249:4","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":518,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1904:11:4","nodeType":"FunctionDefinition","parameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"mutability":"mutable","name":"token","nameLocation":"1934:5:4","nodeType":"VariableDeclaration","scope":518,"src":"1916:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":477,"nodeType":"UserDefinedTypeName","pathNode":{"id":476,"name":"IERC20Upgradeable","nameLocations":["1916:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"1916:17:4"},"referencedDeclaration":378,"src":"1916:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":480,"mutability":"mutable","name":"spender","nameLocation":"1949:7:4","nodeType":"VariableDeclaration","scope":518,"src":"1941:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":479,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":482,"mutability":"mutable","name":"value","nameLocation":"1966:5:4","nodeType":"VariableDeclaration","scope":518,"src":"1958:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":481,"name":"uint256","nodeType":"ElementaryTypeName","src":"1958:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1915:57:4"},"returnParameters":{"id":484,"nodeType":"ParameterList","parameters":[],"src":"1982:0:4"},"scope":790,"src":"1895:584:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":554,"nodeType":"Block","src":"2767:194:4","statements":[{"assignments":[530],"declarations":[{"constant":false,"id":530,"mutability":"mutable","name":"oldAllowance","nameLocation":"2785:12:4","nodeType":"VariableDeclaration","scope":554,"src":"2777:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"2777:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":539,"initialValue":{"arguments":[{"arguments":[{"id":535,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2824:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$790","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$790","typeString":"library SafeERC20Upgradeable"}],"id":534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2816:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":533,"name":"address","nodeType":"ElementaryTypeName","src":"2816:7:4","typeDescriptions":{}}},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2816:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":537,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"2831:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":531,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"2800:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":355,"src":"2800:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2800:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2777:62:4"},{"expression":{"arguments":[{"id":541,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"2869:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":544,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"2899:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2905:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":365,"src":"2899:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2913:8:4","memberName":"selector","nodeType":"MemberAccess","src":"2899:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":547,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"2923:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":548,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"2932:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":549,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"2947:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2932:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":542,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2876:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2880:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2876:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2876:77:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":540,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"2849:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2849:105:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":553,"nodeType":"ExpressionStatement","src":"2849:105:4"}]},"documentation":{"id":519,"nodeType":"StructuredDocumentation","src":"2485:180:4","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":555,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2679:21:4","nodeType":"FunctionDefinition","parameters":{"id":527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"token","nameLocation":"2719:5:4","nodeType":"VariableDeclaration","scope":555,"src":"2701:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":521,"nodeType":"UserDefinedTypeName","pathNode":{"id":520,"name":"IERC20Upgradeable","nameLocations":["2701:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"2701:17:4"},"referencedDeclaration":378,"src":"2701:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":524,"mutability":"mutable","name":"spender","nameLocation":"2734:7:4","nodeType":"VariableDeclaration","scope":555,"src":"2726:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":523,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":526,"mutability":"mutable","name":"value","nameLocation":"2751:5:4","nodeType":"VariableDeclaration","scope":555,"src":"2743:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":525,"name":"uint256","nodeType":"ElementaryTypeName","src":"2743:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2700:57:4"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"2767:0:4"},"scope":790,"src":"2670:291:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":599,"nodeType":"Block","src":"3249:321:4","statements":[{"id":598,"nodeType":"UncheckedBlock","src":"3259:305:4","statements":[{"assignments":[567],"declarations":[{"constant":false,"id":567,"mutability":"mutable","name":"oldAllowance","nameLocation":"3291:12:4","nodeType":"VariableDeclaration","scope":598,"src":"3283:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":566,"name":"uint256","nodeType":"ElementaryTypeName","src":"3283:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":576,"initialValue":{"arguments":[{"arguments":[{"id":572,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3330:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$790","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$790","typeString":"library SafeERC20Upgradeable"}],"id":571,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3322:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":570,"name":"address","nodeType":"ElementaryTypeName","src":"3322:7:4","typeDescriptions":{}}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3322:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":574,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"3337:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":568,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"3306:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3312:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":355,"src":"3306:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3306:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3283:62:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":578,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"3367:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":579,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"3383:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3367:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3390:43:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":577,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3359:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":583,"nodeType":"ExpressionStatement","src":"3359:75:4"},{"expression":{"arguments":[{"id":585,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"3468:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":588,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"3498:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3504:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":365,"src":"3498:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3512:8:4","memberName":"selector","nodeType":"MemberAccess","src":"3498:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":591,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"3522:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":592,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"3531:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"3546:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3531:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":586,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3475:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3479:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3475:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3475:77:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":584,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"3448:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3448:105:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":597,"nodeType":"ExpressionStatement","src":"3448:105:4"}]}]},"documentation":{"id":556,"nodeType":"StructuredDocumentation","src":"2967:180:4","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":600,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3161:21:4","nodeType":"FunctionDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"token","nameLocation":"3201:5:4","nodeType":"VariableDeclaration","scope":600,"src":"3183:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":558,"nodeType":"UserDefinedTypeName","pathNode":{"id":557,"name":"IERC20Upgradeable","nameLocations":["3183:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"3183:17:4"},"referencedDeclaration":378,"src":"3183:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":561,"mutability":"mutable","name":"spender","nameLocation":"3216:7:4","nodeType":"VariableDeclaration","scope":600,"src":"3208:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":560,"name":"address","nodeType":"ElementaryTypeName","src":"3208:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"value","nameLocation":"3233:5:4","nodeType":"VariableDeclaration","scope":600,"src":"3225:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"3225:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3182:57:4"},"returnParameters":{"id":565,"nodeType":"ParameterList","parameters":[],"src":"3249:0:4"},"scope":790,"src":"3152:418:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":646,"nodeType":"Block","src":"3977:333:4","statements":[{"assignments":[612],"declarations":[{"constant":false,"id":612,"mutability":"mutable","name":"approvalCall","nameLocation":"4000:12:4","nodeType":"VariableDeclaration","scope":646,"src":"3987:25:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":611,"name":"bytes","nodeType":"ElementaryTypeName","src":"3987:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":621,"initialValue":{"arguments":[{"expression":{"expression":{"id":615,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"4038:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4044:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":365,"src":"4038:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4052:8:4","memberName":"selector","nodeType":"MemberAccess","src":"4038:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":618,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"4062:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"4071:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":613,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4015:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4019:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4015:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4015:62:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3987:90:4"},{"condition":{"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4092:45:4","subExpression":{"arguments":[{"id":623,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"4117:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"id":624,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"4124:12:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":622,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"4093:23:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20Upgradeable,bytes memory) returns (bool)"}},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4093:44:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":645,"nodeType":"IfStatement","src":"4088:216:4","trueBody":{"id":644,"nodeType":"Block","src":"4139:165:4","statements":[{"expression":{"arguments":[{"id":628,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"4173:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":631,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"4203:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4209:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":365,"src":"4203:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4217:8:4","memberName":"selector","nodeType":"MemberAccess","src":"4203:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":634,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"4227:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4236:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":629,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4180:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4184:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4180:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4180:58:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":627,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"4153:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4153:86:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":638,"nodeType":"ExpressionStatement","src":"4153:86:4"},{"expression":{"arguments":[{"id":640,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"4273:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"id":641,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"4280:12:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":639,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"4253:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4253:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":643,"nodeType":"ExpressionStatement","src":"4253:40:4"}]}}]},"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"3576:308:4","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":647,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3898:12:4","nodeType":"FunctionDefinition","parameters":{"id":609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"token","nameLocation":"3929:5:4","nodeType":"VariableDeclaration","scope":647,"src":"3911:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":603,"nodeType":"UserDefinedTypeName","pathNode":{"id":602,"name":"IERC20Upgradeable","nameLocations":["3911:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"3911:17:4"},"referencedDeclaration":378,"src":"3911:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"spender","nameLocation":"3944:7:4","nodeType":"VariableDeclaration","scope":647,"src":"3936:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"3936:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":608,"mutability":"mutable","name":"value","nameLocation":"3961:5:4","nodeType":"VariableDeclaration","scope":647,"src":"3953:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":607,"name":"uint256","nodeType":"ElementaryTypeName","src":"3953:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3910:57:4"},"returnParameters":{"id":610,"nodeType":"ParameterList","parameters":[],"src":"3977:0:4"},"scope":790,"src":"3889:421:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":703,"nodeType":"Block","src":"4688:257:4","statements":[{"assignments":[669],"declarations":[{"constant":false,"id":669,"mutability":"mutable","name":"nonceBefore","nameLocation":"4706:11:4","nodeType":"VariableDeclaration","scope":703,"src":"4698:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":668,"name":"uint256","nodeType":"ElementaryTypeName","src":"4698:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":674,"initialValue":{"arguments":[{"id":672,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"4733:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":670,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"4720:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$414","typeString":"contract IERC20PermitUpgradeable"}},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4726:6:4","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":407,"src":"4720:12:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4720:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4698:41:4"},{"expression":{"arguments":[{"id":678,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"4762:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":679,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"4769:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":680,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"4778:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":681,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"4785:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":682,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"4795:1:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":683,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"4798:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":684,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"4801:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":675,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"4749:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$414","typeString":"contract IERC20PermitUpgradeable"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4755:6:4","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":399,"src":"4749:12:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4749:54:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":686,"nodeType":"ExpressionStatement","src":"4749:54:4"},{"assignments":[688],"declarations":[{"constant":false,"id":688,"mutability":"mutable","name":"nonceAfter","nameLocation":"4821:10:4","nodeType":"VariableDeclaration","scope":703,"src":"4813:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":687,"name":"uint256","nodeType":"ElementaryTypeName","src":"4813:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":693,"initialValue":{"arguments":[{"id":691,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"4847:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":689,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"4834:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$414","typeString":"contract IERC20PermitUpgradeable"}},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4840:6:4","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":407,"src":"4834:12:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4813:40:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":695,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4871:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":696,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"4885:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4899:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4885:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4871:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4902:35:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":694,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4863:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4863:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":702,"nodeType":"ExpressionStatement","src":"4863:75:4"}]},"documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"4316:141:4","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":704,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4471:10:4","nodeType":"FunctionDefinition","parameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"mutability":"mutable","name":"token","nameLocation":"4515:5:4","nodeType":"VariableDeclaration","scope":704,"src":"4491:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$414","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":650,"nodeType":"UserDefinedTypeName","pathNode":{"id":649,"name":"IERC20PermitUpgradeable","nameLocations":["4491:23:4"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"4491:23:4"},"referencedDeclaration":414,"src":"4491:23:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$414","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"owner","nameLocation":"4538:5:4","nodeType":"VariableDeclaration","scope":704,"src":"4530:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":652,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":655,"mutability":"mutable","name":"spender","nameLocation":"4561:7:4","nodeType":"VariableDeclaration","scope":704,"src":"4553:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"4553:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":657,"mutability":"mutable","name":"value","nameLocation":"4586:5:4","nodeType":"VariableDeclaration","scope":704,"src":"4578:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":656,"name":"uint256","nodeType":"ElementaryTypeName","src":"4578:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":659,"mutability":"mutable","name":"deadline","nameLocation":"4609:8:4","nodeType":"VariableDeclaration","scope":704,"src":"4601:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":658,"name":"uint256","nodeType":"ElementaryTypeName","src":"4601:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":661,"mutability":"mutable","name":"v","nameLocation":"4633:1:4","nodeType":"VariableDeclaration","scope":704,"src":"4627:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":660,"name":"uint8","nodeType":"ElementaryTypeName","src":"4627:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":663,"mutability":"mutable","name":"r","nameLocation":"4652:1:4","nodeType":"VariableDeclaration","scope":704,"src":"4644:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":662,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"s","nameLocation":"4671:1:4","nodeType":"VariableDeclaration","scope":704,"src":"4663:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":664,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4663:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4481:197:4"},"returnParameters":{"id":667,"nodeType":"ParameterList","parameters":[],"src":"4688:0:4"},"scope":790,"src":"4462:483:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":740,"nodeType":"Block","src":"5409:572:4","statements":[{"assignments":[714],"declarations":[{"constant":false,"id":714,"mutability":"mutable","name":"returndata","nameLocation":"5771:10:4","nodeType":"VariableDeclaration","scope":740,"src":"5758:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":713,"name":"bytes","nodeType":"ElementaryTypeName","src":"5758:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":723,"initialValue":{"arguments":[{"id":720,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"5812:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5818:34:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":717,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"5792:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}],"id":716,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5784:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":715,"name":"address","nodeType":"ElementaryTypeName","src":"5784:7:4","typeDescriptions":{}}},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5799:12:4","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":880,"src":"5784:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5758:95:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":725,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"5871:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5882:6:4","memberName":"length","nodeType":"MemberAccess","src":"5871:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5892:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5871:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":731,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"5908:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5921:4:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":732,"name":"bool","nodeType":"ElementaryTypeName","src":"5921:4:4","typeDescriptions":{}}}],"id":734,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5920:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":729,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5897:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5901:6:4","memberName":"decode","nodeType":"MemberAccess","src":"5897:10:4","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5897:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5871:56:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5929:44:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":724,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5863:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5863:111:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":739,"nodeType":"ExpressionStatement","src":"5863:111:4"}]},"documentation":{"id":705,"nodeType":"StructuredDocumentation","src":"4951:372:4","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":741,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5337:19:4","nodeType":"FunctionDefinition","parameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":708,"mutability":"mutable","name":"token","nameLocation":"5375:5:4","nodeType":"VariableDeclaration","scope":741,"src":"5357:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":707,"nodeType":"UserDefinedTypeName","pathNode":{"id":706,"name":"IERC20Upgradeable","nameLocations":["5357:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"5357:17:4"},"referencedDeclaration":378,"src":"5357:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":710,"mutability":"mutable","name":"data","nameLocation":"5395:4:4","nodeType":"VariableDeclaration","scope":741,"src":"5382:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":709,"name":"bytes","nodeType":"ElementaryTypeName","src":"5382:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5356:44:4"},"returnParameters":{"id":712,"nodeType":"ParameterList","parameters":[],"src":"5409:0:4"},"scope":790,"src":"5328:653:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":788,"nodeType":"Block","src":"6582:516:4","statements":[{"assignments":[753,755],"declarations":[{"constant":false,"id":753,"mutability":"mutable","name":"success","nameLocation":"6883:7:4","nodeType":"VariableDeclaration","scope":788,"src":"6878:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":752,"name":"bool","nodeType":"ElementaryTypeName","src":"6878:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":755,"mutability":"mutable","name":"returndata","nameLocation":"6905:10:4","nodeType":"VariableDeclaration","scope":788,"src":"6892:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":754,"name":"bytes","nodeType":"ElementaryTypeName","src":"6892:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":763,"initialValue":{"arguments":[{"id":761,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"6939:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":758,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"6927:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}],"id":757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6919:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":756,"name":"address","nodeType":"ElementaryTypeName","src":"6919:7:4","typeDescriptions":{}}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6934:4:4","memberName":"call","nodeType":"MemberAccess","src":"6919:19:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6877:67:4"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":764,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"6973:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":765,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"6985:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6996:6:4","memberName":"length","nodeType":"MemberAccess","src":"6985:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7006:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6985:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":771,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"7022:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7035:4:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":772,"name":"bool","nodeType":"ElementaryTypeName","src":"7035:4:4","typeDescriptions":{}}}],"id":774,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7034:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":769,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7011:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7015:6:4","memberName":"decode","nodeType":"MemberAccess","src":"7011:10:4","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7011:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6985:56:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":777,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6984:58:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:69:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":783,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"7084:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}],"id":782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7076:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":781,"name":"address","nodeType":"ElementaryTypeName","src":"7076:7:4","typeDescriptions":{}}},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7076:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":779,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"7046:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1120_$","typeString":"type(library AddressUpgradeable)"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7065:10:4","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":808,"src":"7046:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7046:45:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:118:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":751,"id":787,"nodeType":"Return","src":"6954:137:4"}]},"documentation":{"id":742,"nodeType":"StructuredDocumentation","src":"5987:490:4","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":789,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6491:23:4","nodeType":"FunctionDefinition","parameters":{"id":748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":745,"mutability":"mutable","name":"token","nameLocation":"6533:5:4","nodeType":"VariableDeclaration","scope":789,"src":"6515:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":744,"nodeType":"UserDefinedTypeName","pathNode":{"id":743,"name":"IERC20Upgradeable","nameLocations":["6515:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"6515:17:4"},"referencedDeclaration":378,"src":"6515:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":747,"mutability":"mutable","name":"data","nameLocation":"6553:4:4","nodeType":"VariableDeclaration","scope":789,"src":"6540:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":746,"name":"bytes","nodeType":"ElementaryTypeName","src":"6540:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6514:44:4"},"returnParameters":{"id":751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":789,"src":"6576:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":749,"name":"bool","nodeType":"ElementaryTypeName","src":"6576:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6575:6:4"},"scope":790,"src":"6482:616:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":791,"src":"734:6366:4","usedErrors":[]}],"src":"115:6986:4"},"id":4},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1120]},"id":1121,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":792,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":793,"nodeType":"StructuredDocumentation","src":"126:67:5","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1120,"linearizedBaseContracts":[1120],"name":"AddressUpgradeable","nameLocation":"202:18:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":807,"nodeType":"Block","src":"1489:254:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":801,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"1713:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:5","memberName":"code","nodeType":"MemberAccess","src":"1713:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:5","memberName":"length","nodeType":"MemberAccess","src":"1713:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":800,"id":806,"nodeType":"Return","src":"1706:30:5"}]},"documentation":{"id":794,"nodeType":"StructuredDocumentation","src":"227:1191:5","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":808,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:5","nodeType":"FunctionDefinition","parameters":{"id":797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":796,"mutability":"mutable","name":"account","nameLocation":"1451:7:5","nodeType":"VariableDeclaration","scope":808,"src":"1443:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":795,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:5"},"returnParameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":799,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":808,"src":"1483:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":798,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:5"},"scope":1120,"src":"1423:320:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":841,"nodeType":"Block","src":"2729:241:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":819,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1120","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1120","typeString":"library AddressUpgradeable"}],"id":818,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":817,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:5","typeDescriptions":{}}},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:5","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":822,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"2772:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":816,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":826,"nodeType":"ExpressionStatement","src":"2739:73:5"},{"assignments":[828,null],"declarations":[{"constant":false,"id":828,"mutability":"mutable","name":"success","nameLocation":"2829:7:5","nodeType":"VariableDeclaration","scope":841,"src":"2824:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":827,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":835,"initialValue":{"arguments":[{"hexValue":"","id":833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":829,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"2842:9:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:5","memberName":"call","nodeType":"MemberAccess","src":"2842:14:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":831,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"2864:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:5"},{"expression":{"arguments":[{"id":837,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"2893:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":836,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":840,"nodeType":"ExpressionStatement","src":"2885:78:5"}]},"documentation":{"id":809,"nodeType":"StructuredDocumentation","src":"1749:904:5","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":842,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:5","nodeType":"FunctionDefinition","parameters":{"id":814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:5","nodeType":"VariableDeclaration","scope":842,"src":"2677:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":810,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":813,"mutability":"mutable","name":"amount","nameLocation":"2712:6:5","nodeType":"VariableDeclaration","scope":842,"src":"2704:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":812,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:5"},"returnParameters":{"id":815,"nodeType":"ParameterList","parameters":[],"src":"2729:0:5"},"scope":1120,"src":"2658:312:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":859,"nodeType":"Block","src":"3801:96:5","statements":[{"expression":{"arguments":[{"id":853,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"3840:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":854,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"3848:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":852,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[900,944],"referencedDeclaration":944,"src":"3818:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":851,"id":858,"nodeType":"Return","src":"3811:79:5"}]},"documentation":{"id":843,"nodeType":"StructuredDocumentation","src":"2976:731:5","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":860,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:5","nodeType":"FunctionDefinition","parameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":845,"mutability":"mutable","name":"target","nameLocation":"3742:6:5","nodeType":"VariableDeclaration","scope":860,"src":"3734:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":844,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":847,"mutability":"mutable","name":"data","nameLocation":"3763:4:5","nodeType":"VariableDeclaration","scope":860,"src":"3750:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":846,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:5"},"returnParameters":{"id":851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":850,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":860,"src":"3787:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":849,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:5"},"scope":1120,"src":"3712:185:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":879,"nodeType":"Block","src":"4266:76:5","statements":[{"expression":{"arguments":[{"id":873,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"4305:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":874,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4313:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":876,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"4322:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":872,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[900,944],"referencedDeclaration":944,"src":"4283:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":871,"id":878,"nodeType":"Return","src":"4276:59:5"}]},"documentation":{"id":861,"nodeType":"StructuredDocumentation","src":"3903:211:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":880,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:5","nodeType":"FunctionDefinition","parameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":863,"mutability":"mutable","name":"target","nameLocation":"4158:6:5","nodeType":"VariableDeclaration","scope":880,"src":"4150:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":862,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":865,"mutability":"mutable","name":"data","nameLocation":"4187:4:5","nodeType":"VariableDeclaration","scope":880,"src":"4174:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":864,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":867,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:5","nodeType":"VariableDeclaration","scope":880,"src":"4201:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":866,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:5"},"returnParameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":880,"src":"4252:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":869,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:5"},"scope":1120,"src":"4119:223:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":899,"nodeType":"Block","src":"4817:111:5","statements":[{"expression":{"arguments":[{"id":893,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"4856:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":894,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"4864:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":895,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"4870:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":892,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[900,944],"referencedDeclaration":944,"src":"4834:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":891,"id":898,"nodeType":"Return","src":"4827:94:5"}]},"documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"4348:351:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":900,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:5","nodeType":"FunctionDefinition","parameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"target","nameLocation":"4743:6:5","nodeType":"VariableDeclaration","scope":900,"src":"4735:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":885,"mutability":"mutable","name":"data","nameLocation":"4764:4:5","nodeType":"VariableDeclaration","scope":900,"src":"4751:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":884,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":887,"mutability":"mutable","name":"value","nameLocation":"4778:5:5","nodeType":"VariableDeclaration","scope":900,"src":"4770:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":886,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:5"},"returnParameters":{"id":891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":900,"src":"4803:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":889,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:5"},"scope":1120,"src":"4704:224:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":943,"nodeType":"Block","src":"5355:267:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":917,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1120","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1120","typeString":"library AddressUpgradeable"}],"id":916,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":915,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:5","typeDescriptions":{}}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:5","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":920,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"5398:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":914,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":924,"nodeType":"ExpressionStatement","src":"5365:81:5"},{"assignments":[926,928],"declarations":[{"constant":false,"id":926,"mutability":"mutable","name":"success","nameLocation":"5462:7:5","nodeType":"VariableDeclaration","scope":943,"src":"5457:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":925,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":928,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:5","nodeType":"VariableDeclaration","scope":943,"src":"5471:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":927,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":935,"initialValue":{"arguments":[{"id":933,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"5524:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":929,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"5498:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:5","memberName":"call","nodeType":"MemberAccess","src":"5498:11:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":931,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"5517:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:5"},{"expression":{"arguments":[{"id":937,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"5573:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":938,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"5581:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":939,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"5590:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":940,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"5602:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":936,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"5546:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":913,"id":942,"nodeType":"Return","src":"5539:76:5"}]},"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"4934:237:5","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":944,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:5","nodeType":"FunctionDefinition","parameters":{"id":910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"target","nameLocation":"5224:6:5","nodeType":"VariableDeclaration","scope":944,"src":"5216:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":902,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":905,"mutability":"mutable","name":"data","nameLocation":"5253:4:5","nodeType":"VariableDeclaration","scope":944,"src":"5240:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":904,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":907,"mutability":"mutable","name":"value","nameLocation":"5275:5:5","nodeType":"VariableDeclaration","scope":944,"src":"5267:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":906,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":909,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:5","nodeType":"VariableDeclaration","scope":944,"src":"5290:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":908,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:5"},"returnParameters":{"id":913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":912,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":944,"src":"5341:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":911,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:5"},"scope":1120,"src":"5176:446:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":960,"nodeType":"Block","src":"5899:97:5","statements":[{"expression":{"arguments":[{"id":955,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"5935:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":956,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"5943:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":954,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[961,990],"referencedDeclaration":990,"src":"5916:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":953,"id":959,"nodeType":"Return","src":"5909:80:5"}]},"documentation":{"id":945,"nodeType":"StructuredDocumentation","src":"5628:166:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":961,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:5","nodeType":"FunctionDefinition","parameters":{"id":950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"target","nameLocation":"5835:6:5","nodeType":"VariableDeclaration","scope":961,"src":"5827:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":946,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":949,"mutability":"mutable","name":"data","nameLocation":"5856:4:5","nodeType":"VariableDeclaration","scope":961,"src":"5843:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":948,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:5"},"returnParameters":{"id":953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":952,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":961,"src":"5885:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":951,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:5"},"scope":1120,"src":"5799:197:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":989,"nodeType":"Block","src":"6338:168:5","statements":[{"assignments":[974,976],"declarations":[{"constant":false,"id":974,"mutability":"mutable","name":"success","nameLocation":"6354:7:5","nodeType":"VariableDeclaration","scope":989,"src":"6349:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":973,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":976,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:5","nodeType":"VariableDeclaration","scope":989,"src":"6363:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":975,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":981,"initialValue":{"arguments":[{"id":979,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":966,"src":"6408:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":977,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"6390:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:5","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:5","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:5"},{"expression":{"arguments":[{"id":983,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"6457:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":984,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"6465:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":985,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"6474:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":986,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"6486:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":982,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"6430:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":972,"id":988,"nodeType":"Return","src":"6423:76:5"}]},"documentation":{"id":962,"nodeType":"StructuredDocumentation","src":"6002:173:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":990,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:5","nodeType":"FunctionDefinition","parameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":964,"mutability":"mutable","name":"target","nameLocation":"6225:6:5","nodeType":"VariableDeclaration","scope":990,"src":"6217:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":963,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":966,"mutability":"mutable","name":"data","nameLocation":"6254:4:5","nodeType":"VariableDeclaration","scope":990,"src":"6241:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":965,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":968,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:5","nodeType":"VariableDeclaration","scope":990,"src":"6268:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":967,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:5"},"returnParameters":{"id":972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":971,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":990,"src":"6324:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":970,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:5"},"scope":1120,"src":"6180:326:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1006,"nodeType":"Block","src":"6782:101:5","statements":[{"expression":{"arguments":[{"id":1001,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"6820:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1002,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"6828:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1000,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1007,1036],"referencedDeclaration":1036,"src":"6799:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":999,"id":1005,"nodeType":"Return","src":"6792:84:5"}]},"documentation":{"id":991,"nodeType":"StructuredDocumentation","src":"6512:168:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1007,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:5","nodeType":"FunctionDefinition","parameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":993,"mutability":"mutable","name":"target","nameLocation":"6723:6:5","nodeType":"VariableDeclaration","scope":1007,"src":"6715:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":992,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":995,"mutability":"mutable","name":"data","nameLocation":"6744:4:5","nodeType":"VariableDeclaration","scope":1007,"src":"6731:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":994,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:5"},"returnParameters":{"id":999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":998,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1007,"src":"6768:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":997,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:5"},"scope":1120,"src":"6685:198:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1035,"nodeType":"Block","src":"7224:170:5","statements":[{"assignments":[1020,1022],"declarations":[{"constant":false,"id":1020,"mutability":"mutable","name":"success","nameLocation":"7240:7:5","nodeType":"VariableDeclaration","scope":1035,"src":"7235:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1019,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1022,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:5","nodeType":"VariableDeclaration","scope":1035,"src":"7249:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1021,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1027,"initialValue":{"arguments":[{"id":1025,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"7296:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1023,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"7276:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:5","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:5","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:5"},{"expression":{"arguments":[{"id":1029,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"7345:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1030,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"7353:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1031,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"7362:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1032,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"7374:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1028,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"7318:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1018,"id":1034,"nodeType":"Return","src":"7311:76:5"}]},"documentation":{"id":1008,"nodeType":"StructuredDocumentation","src":"6889:175:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1036,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:5","nodeType":"FunctionDefinition","parameters":{"id":1015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1010,"mutability":"mutable","name":"target","nameLocation":"7116:6:5","nodeType":"VariableDeclaration","scope":1036,"src":"7108:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1009,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1012,"mutability":"mutable","name":"data","nameLocation":"7145:4:5","nodeType":"VariableDeclaration","scope":1036,"src":"7132:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1011,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1014,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:5","nodeType":"VariableDeclaration","scope":1036,"src":"7159:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1013,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:5"},"returnParameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1036,"src":"7210:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1016,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:5"},"scope":1120,"src":"7069:325:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1074,"nodeType":"Block","src":"7876:434:5","statements":[{"condition":{"id":1050,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"7890:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1072,"nodeType":"Block","src":"8246:58:5","statements":[{"expression":{"arguments":[{"id":1068,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"8268:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1069,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"8280:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1067,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"8260:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1071,"nodeType":"ExpressionStatement","src":"8260:33:5"}]},"id":1073,"nodeType":"IfStatement","src":"7886:418:5","trueBody":{"id":1066,"nodeType":"Block","src":"7899:341:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1051,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"7917:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:5","memberName":"length","nodeType":"MemberAccess","src":"7917:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1063,"nodeType":"IfStatement","src":"7913:286:5","trueBody":{"id":1062,"nodeType":"Block","src":"7941:258:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1057,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"8143:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1056,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"8132:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1055,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1061,"nodeType":"ExpressionStatement","src":"8124:60:5"}]}},{"expression":{"id":1064,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"8219:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1049,"id":1065,"nodeType":"Return","src":"8212:17:5"}]}}]},"documentation":{"id":1037,"nodeType":"StructuredDocumentation","src":"7400:277:5","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1075,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:5","nodeType":"FunctionDefinition","parameters":{"id":1046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1039,"mutability":"mutable","name":"target","nameLocation":"7735:6:5","nodeType":"VariableDeclaration","scope":1075,"src":"7727:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1038,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1041,"mutability":"mutable","name":"success","nameLocation":"7756:7:5","nodeType":"VariableDeclaration","scope":1075,"src":"7751:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1040,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1043,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:5","nodeType":"VariableDeclaration","scope":1075,"src":"7773:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1042,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1045,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:5","nodeType":"VariableDeclaration","scope":1075,"src":"7806:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1044,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:5"},"returnParameters":{"id":1049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1048,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1075,"src":"7862:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1047,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:5"},"scope":1120,"src":"7682:628:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1098,"nodeType":"Block","src":"8691:135:5","statements":[{"condition":{"id":1087,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"8705:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1096,"nodeType":"Block","src":"8762:58:5","statements":[{"expression":{"arguments":[{"id":1092,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"8784:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1093,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"8796:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1091,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"8776:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1095,"nodeType":"ExpressionStatement","src":"8776:33:5"}]},"id":1097,"nodeType":"IfStatement","src":"8701:119:5","trueBody":{"id":1090,"nodeType":"Block","src":"8714:42:5","statements":[{"expression":{"id":1088,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"8735:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1086,"id":1089,"nodeType":"Return","src":"8728:17:5"}]}}]},"documentation":{"id":1076,"nodeType":"StructuredDocumentation","src":"8316:210:5","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1099,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:5","nodeType":"FunctionDefinition","parameters":{"id":1083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1078,"mutability":"mutable","name":"success","nameLocation":"8571:7:5","nodeType":"VariableDeclaration","scope":1099,"src":"8566:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1077,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1080,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:5","nodeType":"VariableDeclaration","scope":1099,"src":"8588:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1079,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1082,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:5","nodeType":"VariableDeclaration","scope":1099,"src":"8621:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1081,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:5"},"returnParameters":{"id":1086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1085,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1099,"src":"8677:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1084,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:5"},"scope":1120,"src":"8531:295:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1118,"nodeType":"Block","src":"8915:457:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1106,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"8991:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:5","memberName":"length","nodeType":"MemberAccess","src":"8991:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1116,"nodeType":"Block","src":"9321:45:5","statements":[{"expression":{"arguments":[{"id":1113,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"9342:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1112,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1115,"nodeType":"ExpressionStatement","src":"9335:20:5"}]},"id":1117,"nodeType":"IfStatement","src":"8987:379:5","trueBody":{"id":1111,"nodeType":"Block","src":"9014:301:5","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:5","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:5","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:5"},"nodeType":"YulFunctionCall","src":"9213:17:5"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:5","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:5","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:5"},"nodeType":"YulFunctionCall","src":"9254:19:5"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:5"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:5"},"nodeType":"YulFunctionCall","src":"9247:44:5"},"nodeType":"YulExpressionStatement","src":"9247:44:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1101,"isOffset":false,"isSlot":false,"src":"9219:10:5","valueSize":1},{"declaration":1101,"isOffset":false,"isSlot":false,"src":"9262:10:5","valueSize":1}],"id":1110,"nodeType":"InlineAssembly","src":"9163:142:5"}]}}]},"id":1119,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:5","nodeType":"FunctionDefinition","parameters":{"id":1104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:5","nodeType":"VariableDeclaration","scope":1119,"src":"8849:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1100,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1103,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:5","nodeType":"VariableDeclaration","scope":1119,"src":"8874:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1102,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:5"},"returnParameters":{"id":1105,"nodeType":"ParameterList","parameters":[],"src":"8915:0:5"},"scope":1120,"src":"8832:540:5","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1121,"src":"194:9180:5","usedErrors":[]}],"src":"101:9274:5"},"id":5},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1120],"ContextUpgradeable":[1162],"Initializable":[300]},"id":1163,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1122,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1123,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1163,"sourceUnit":301,"src":"110:42:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1125,"name":"Initializable","nameLocations":["691:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"691:13:6"},"id":1126,"nodeType":"InheritanceSpecifier","src":"691:13:6"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1124,"nodeType":"StructuredDocumentation","src":"154:496:6","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1162,"linearizedBaseContracts":[1162,300],"name":"ContextUpgradeable","nameLocation":"669:18:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1131,"nodeType":"Block","src":"763:7:6","statements":[]},"id":1132,"implemented":true,"kind":"function","modifiers":[{"id":1129,"kind":"modifierInvocation","modifierName":{"id":1128,"name":"onlyInitializing","nameLocations":["746:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"746:16:6"},"nodeType":"ModifierInvocation","src":"746:16:6"}],"name":"__Context_init","nameLocation":"720:14:6","nodeType":"FunctionDefinition","parameters":{"id":1127,"nodeType":"ParameterList","parameters":[],"src":"734:2:6"},"returnParameters":{"id":1130,"nodeType":"ParameterList","parameters":[],"src":"763:0:6"},"scope":1162,"src":"711:59:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1137,"nodeType":"Block","src":"838:7:6","statements":[]},"id":1138,"implemented":true,"kind":"function","modifiers":[{"id":1135,"kind":"modifierInvocation","modifierName":{"id":1134,"name":"onlyInitializing","nameLocations":["821:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"821:16:6"},"nodeType":"ModifierInvocation","src":"821:16:6"}],"name":"__Context_init_unchained","nameLocation":"785:24:6","nodeType":"FunctionDefinition","parameters":{"id":1133,"nodeType":"ParameterList","parameters":[],"src":"809:2:6"},"returnParameters":{"id":1136,"nodeType":"ParameterList","parameters":[],"src":"838:0:6"},"scope":1162,"src":"776:69:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1146,"nodeType":"Block","src":"912:34:6","statements":[{"expression":{"expression":{"id":1143,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:6","memberName":"sender","nodeType":"MemberAccess","src":"929:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1142,"id":1145,"nodeType":"Return","src":"922:17:6"}]},"id":1147,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:6","nodeType":"FunctionDefinition","parameters":{"id":1139,"nodeType":"ParameterList","parameters":[],"src":"869:2:6"},"returnParameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1147,"src":"903:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:6"},"scope":1162,"src":"850:96:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1155,"nodeType":"Block","src":"1019:32:6","statements":[{"expression":{"expression":{"id":1152,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:6","memberName":"data","nodeType":"MemberAccess","src":"1036:8:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1151,"id":1154,"nodeType":"Return","src":"1029:15:6"}]},"id":1156,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:6","nodeType":"FunctionDefinition","parameters":{"id":1148,"nodeType":"ParameterList","parameters":[],"src":"969:2:6"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1156,"src":"1003:14:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1149,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:6"},"scope":1162,"src":"952:99:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1157,"nodeType":"StructuredDocumentation","src":"1057:254:6","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1161,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:6","nodeType":"VariableDeclaration","scope":1162,"src":"1316:25:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1158,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1160,"length":{"hexValue":"3530","id":1159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:6","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1163,"src":"651:693:6","usedErrors":[]}],"src":"86:1259:6"},"id":6},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2623],"SignedMathUpgradeable":[2728],"StringsUpgradeable":[1391]},"id":1392,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1164,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1165,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1392,"sourceUnit":2624,"src":"126:36:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":1166,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1392,"sourceUnit":2729,"src":"163:42:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1167,"nodeType":"StructuredDocumentation","src":"207:34:7","text":" @dev String operations."},"fullyImplemented":true,"id":1391,"linearizedBaseContracts":[1391],"name":"StringsUpgradeable","nameLocation":"250:18:7","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1170,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:7","nodeType":"VariableDeclaration","scope":1391,"src":"275:54:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1168,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1173,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:7","nodeType":"VariableDeclaration","scope":1391,"src":"335:43:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1171,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:7","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1220,"nodeType":"Block","src":"551:636:7","statements":[{"id":1219,"nodeType":"UncheckedBlock","src":"561:620:7","statements":[{"assignments":[1182],"declarations":[{"constant":false,"id":1182,"mutability":"mutable","name":"length","nameLocation":"593:6:7","nodeType":"VariableDeclaration","scope":1219,"src":"585:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1181,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1189,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1185,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"624:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1183,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"602:15:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2623_$","typeString":"type(library MathUpgradeable)"}},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"618:5:7","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2460,"src":"602:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:7"},{"assignments":[1191],"declarations":[{"constant":false,"id":1191,"mutability":"mutable","name":"buffer","nameLocation":"662:6:7","nodeType":"VariableDeclaration","scope":1219,"src":"648:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1190,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1196,"initialValue":{"arguments":[{"id":1194,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"682:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1193,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1192,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"671:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:7"},{"assignments":[1198],"declarations":[{"constant":false,"id":1198,"mutability":"mutable","name":"ptr","nameLocation":"711:3:7","nodeType":"VariableDeclaration","scope":1219,"src":"703:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1197,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1199,"nodeType":"VariableDeclarationStatement","src":"703:11:7"},{"AST":{"nodeType":"YulBlock","src":"784:67:7","statements":[{"nodeType":"YulAssignment","src":"802:35:7","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"813:6:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:2:7","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"829:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"821:3:7"},"nodeType":"YulFunctionCall","src":"821:15:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"809:3:7"},"nodeType":"YulFunctionCall","src":"809:28:7"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"802:3:7"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1191,"isOffset":false,"isSlot":false,"src":"813:6:7","valueSize":1},{"declaration":1182,"isOffset":false,"isSlot":false,"src":"829:6:7","valueSize":1},{"declaration":1198,"isOffset":false,"isSlot":false,"src":"802:3:7","valueSize":1}],"id":1200,"nodeType":"InlineAssembly","src":"775:76:7"},{"body":{"id":1215,"nodeType":"Block","src":"877:267:7","statements":[{"expression":{"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:7","subExpression":{"id":1202,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"895:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1204,"nodeType":"ExpressionStatement","src":"895:5:7"},{"AST":{"nodeType":"YulBlock","src":"978:84:7","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1008:3:7"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1022:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"1029:2:7","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1018:3:7"},"nodeType":"YulFunctionCall","src":"1018:14:7"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"1034:8:7"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1013:4:7"},"nodeType":"YulFunctionCall","src":"1013:30:7"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1000:7:7"},"nodeType":"YulFunctionCall","src":"1000:44:7"},"nodeType":"YulExpressionStatement","src":"1000:44:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1170,"isOffset":false,"isSlot":false,"src":"1034:8:7","valueSize":1},{"declaration":1198,"isOffset":false,"isSlot":false,"src":"1008:3:7","valueSize":1},{"declaration":1176,"isOffset":false,"isSlot":false,"src":"1022:5:7","valueSize":1}],"id":1205,"nodeType":"InlineAssembly","src":"969:93:7"},{"expression":{"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1206,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"1079:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1209,"nodeType":"ExpressionStatement","src":"1079:11:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"1112:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1214,"nodeType":"IfStatement","src":"1108:21:7","trueBody":{"id":1213,"nodeType":"Break","src":"1124:5:7"}}]},"condition":{"hexValue":"74727565","id":1201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1216,"nodeType":"WhileStatement","src":"864:280:7"},{"expression":{"id":1217,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"1164:6:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1180,"id":1218,"nodeType":"Return","src":"1157:13:7"}]}]},"documentation":{"id":1174,"nodeType":"StructuredDocumentation","src":"385:90:7","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1221,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:7","nodeType":"FunctionDefinition","parameters":{"id":1177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1176,"mutability":"mutable","name":"value","nameLocation":"506:5:7","nodeType":"VariableDeclaration","scope":1221,"src":"498:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1175,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:7"},"returnParameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1221,"src":"536:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1178,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:7"},"scope":1391,"src":"480:707:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1248,"nodeType":"Block","src":"1357:114:7","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1233,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"1398:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:7","trueExpression":{"hexValue":"2d","id":1236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1242,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"1455:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1240,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1429:21:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$2728_$","typeString":"type(library SignedMathUpgradeable)"}},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:3:7","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2727,"src":"1429:25:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1239,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1221,1249],"referencedDeclaration":1221,"src":"1420:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1420:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1231,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1385:12:7","memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1381:82:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1229,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:7","typeDescriptions":{}}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:90:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1228,"id":1247,"nodeType":"Return","src":"1367:97:7"}]},"documentation":{"id":1222,"nodeType":"StructuredDocumentation","src":"1193:89:7","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1249,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:7","nodeType":"FunctionDefinition","parameters":{"id":1225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1224,"mutability":"mutable","name":"value","nameLocation":"1312:5:7","nodeType":"VariableDeclaration","scope":1249,"src":"1305:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1223,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:7"},"returnParameters":{"id":1228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1249,"src":"1342:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1226,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:7"},"scope":1391,"src":"1287:184:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1268,"nodeType":"Block","src":"1650:111:7","statements":[{"id":1267,"nodeType":"UncheckedBlock","src":"1660:95:7","statements":[{"expression":{"arguments":[{"id":1258,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"1703:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1261,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"1733:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1259,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"1710:15:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2623_$","typeString":"type(library MathUpgradeable)"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:7","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2583,"src":"1710:22:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:29:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1257,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1269,1345,1365],"referencedDeclaration":1345,"src":"1691:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1256,"id":1266,"nodeType":"Return","src":"1684:60:7"}]}]},"documentation":{"id":1250,"nodeType":"StructuredDocumentation","src":"1477:94:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1269,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:7","nodeType":"FunctionDefinition","parameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1252,"mutability":"mutable","name":"value","nameLocation":"1605:5:7","nodeType":"VariableDeclaration","scope":1269,"src":"1597:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1251,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:7"},"returnParameters":{"id":1256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1269,"src":"1635:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1254,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:7"},"scope":1391,"src":"1576:185:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1344,"nodeType":"Block","src":"1974:347:7","statements":[{"assignments":[1280],"declarations":[{"constant":false,"id":1280,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:7","nodeType":"VariableDeclaration","scope":1344,"src":"1984:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1279,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1289,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1284,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"2020:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1281,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2006:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:7"},{"expression":{"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1290,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2041:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1292,"indexExpression":{"hexValue":"30","id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1295,"nodeType":"ExpressionStatement","src":"2041:15:7"},{"expression":{"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1296,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2066:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1298,"indexExpression":{"hexValue":"31","id":1297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1301,"nodeType":"ExpressionStatement","src":"2066:15:7"},{"body":{"id":1330,"nodeType":"Block","src":"2136:83:7","statements":[{"expression":{"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1316,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2150:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1318,"indexExpression":{"id":1317,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"2157:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1319,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"2162:8:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1323,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1320,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"2171:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:7","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1325,"nodeType":"ExpressionStatement","src":"2150:33:7"},{"expression":{"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1326,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"2197:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1329,"nodeType":"ExpressionStatement","src":"2197:11:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1310,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"2124:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1331,"initializationExpression":{"assignments":[1303],"declarations":[{"constant":false,"id":1303,"mutability":"mutable","name":"i","nameLocation":"2104:1:7","nodeType":"VariableDeclaration","scope":1331,"src":"2096:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1302,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1309,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1305,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"2112:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:7"},"loopExpression":{"expression":{"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:7","subExpression":{"id":1313,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"2133:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1315,"nodeType":"ExpressionStatement","src":"2131:3:7"},"nodeType":"ForStatement","src":"2091:128:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1333,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"2236:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1332,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1338,"nodeType":"ExpressionStatement","src":"2228:55:7"},{"expression":{"arguments":[{"id":1341,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2307:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1339,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:7","typeDescriptions":{}}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1278,"id":1343,"nodeType":"Return","src":"2293:21:7"}]},"documentation":{"id":1270,"nodeType":"StructuredDocumentation","src":"1767:112:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1345,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:7","nodeType":"FunctionDefinition","parameters":{"id":1275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1272,"mutability":"mutable","name":"value","nameLocation":"1913:5:7","nodeType":"VariableDeclaration","scope":1345,"src":"1905:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1271,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1274,"mutability":"mutable","name":"length","nameLocation":"1928:6:7","nodeType":"VariableDeclaration","scope":1345,"src":"1920:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1273,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:7"},"returnParameters":{"id":1278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1345,"src":"1959:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1276,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:7"},"scope":1391,"src":"1884:437:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1364,"nodeType":"Block","src":"2546:76:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1358,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"2591:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1356,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:7","typeDescriptions":{}}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1354,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:7","typeDescriptions":{}}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1361,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"2599:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1353,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1269,1345,1365],"referencedDeclaration":1345,"src":"2563:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1352,"id":1363,"nodeType":"Return","src":"2556:59:7"}]},"documentation":{"id":1346,"nodeType":"StructuredDocumentation","src":"2327:141:7","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1365,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:7","nodeType":"FunctionDefinition","parameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"mutability":"mutable","name":"addr","nameLocation":"2502:4:7","nodeType":"VariableDeclaration","scope":1365,"src":"2494:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:7"},"returnParameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1365,"src":"2531:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1350,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:7"},"scope":1391,"src":"2473:149:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1389,"nodeType":"Block","src":"2777:66:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1378,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"2810:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1376,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:7","typeDescriptions":{}}},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1375,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1384,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"2833:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1382,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:7","typeDescriptions":{}}},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1381,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1374,"id":1388,"nodeType":"Return","src":"2787:49:7"}]},"documentation":{"id":1366,"nodeType":"StructuredDocumentation","src":"2628:66:7","text":" @dev Returns true if the two strings are equal."},"id":1390,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:7","nodeType":"FunctionDefinition","parameters":{"id":1371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1368,"mutability":"mutable","name":"a","nameLocation":"2728:1:7","nodeType":"VariableDeclaration","scope":1390,"src":"2714:15:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1367,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1370,"mutability":"mutable","name":"b","nameLocation":"2745:1:7","nodeType":"VariableDeclaration","scope":1390,"src":"2731:15:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1369,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:7"},"returnParameters":{"id":1374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1390,"src":"2771:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1372,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:7"},"scope":1391,"src":"2699:144:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1392,"src":"242:2603:7","usedErrors":[]}],"src":"101:2745:7"},"id":7},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[1757],"MathUpgradeable":[2623],"SignedMathUpgradeable":[2728],"StringsUpgradeable":[1391]},"id":1758,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1393,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":1394,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1758,"sourceUnit":1392,"src":"137:35:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1395,"nodeType":"StructuredDocumentation","src":"174:205:8","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":1757,"linearizedBaseContracts":[1757],"name":"ECDSAUpgradeable","nameLocation":"388:16:8","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":1401,"members":[{"id":1396,"name":"NoError","nameLocation":"439:7:8","nodeType":"EnumValue","src":"439:7:8"},{"id":1397,"name":"InvalidSignature","nameLocation":"456:16:8","nodeType":"EnumValue","src":"456:16:8"},{"id":1398,"name":"InvalidSignatureLength","nameLocation":"482:22:8","nodeType":"EnumValue","src":"482:22:8"},{"id":1399,"name":"InvalidSignatureS","nameLocation":"514:17:8","nodeType":"EnumValue","src":"514:17:8"},{"id":1400,"name":"InvalidSignatureV","nameLocation":"541:17:8","nodeType":"EnumValue","src":"541:17:8"}],"name":"RecoverError","nameLocation":"416:12:8","nodeType":"EnumDefinition","src":"411:175:8"},{"body":{"id":1444,"nodeType":"Block","src":"646:457:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1407,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"660:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1408,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"669:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"682:7:8","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"669:20:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1413,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"756:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1414,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"765:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"778:16:8","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1397,"src":"765:29:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1422,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"865:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1423,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"874:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"887:22:8","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1398,"src":"874:35:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1431,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"987:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1432,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"996:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1433,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:17:8","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"996:30:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1440,"nodeType":"IfStatement","src":"983:114:8","trueBody":{"id":1439,"nodeType":"Block","src":"1028:69:8","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":1436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":1435,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:44:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1438,"nodeType":"ExpressionStatement","src":"1042:44:8"}]}},"id":1441,"nodeType":"IfStatement","src":"861:236:8","trueBody":{"id":1430,"nodeType":"Block","src":"911:66:8","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":1427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":1426,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:41:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1429,"nodeType":"ExpressionStatement","src":"925:41:8"}]}},"id":1442,"nodeType":"IfStatement","src":"752:345:8","trueBody":{"id":1421,"nodeType":"Block","src":"796:59:8","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":1417,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1420,"nodeType":"ExpressionStatement","src":"810:34:8"}]}},"id":1443,"nodeType":"IfStatement","src":"656:441:8","trueBody":{"id":1412,"nodeType":"Block","src":"691:55:8","statements":[{"functionReturnParameters":1406,"id":1411,"nodeType":"Return","src":"705:7:8"}]}}]},"id":1445,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:8","nodeType":"FunctionDefinition","parameters":{"id":1405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1404,"mutability":"mutable","name":"error","nameLocation":"626:5:8","nodeType":"VariableDeclaration","scope":1445,"src":"613:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1403,"nodeType":"UserDefinedTypeName","pathNode":{"id":1402,"name":"RecoverError","nameLocations":["613:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"613:12:8"},"referencedDeclaration":1401,"src":"613:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:8"},"returnParameters":{"id":1406,"nodeType":"ParameterList","parameters":[],"src":"646:0:8"},"scope":1757,"src":"592:511:8","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1490,"nodeType":"Block","src":"2271:626:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1458,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"2285:9:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:8","memberName":"length","nodeType":"MemberAccess","src":"2285:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:8","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1488,"nodeType":"Block","src":"2810:81:8","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1480,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:8","typeDescriptions":{}}},"id":1483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1484,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"2844:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2857:22:8","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1398,"src":"2844:35:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1486,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1457,"id":1487,"nodeType":"Return","src":"2824:56:8"}]},"id":1489,"nodeType":"IfStatement","src":"2281:610:8","trueBody":{"id":1479,"nodeType":"Block","src":"2309:495:8","statements":[{"assignments":[1463],"declarations":[{"constant":false,"id":1463,"mutability":"mutable","name":"r","nameLocation":"2331:1:8","nodeType":"VariableDeclaration","scope":1479,"src":"2323:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1464,"nodeType":"VariableDeclarationStatement","src":"2323:9:8"},{"assignments":[1466],"declarations":[{"constant":false,"id":1466,"mutability":"mutable","name":"s","nameLocation":"2354:1:8","nodeType":"VariableDeclaration","scope":1479,"src":"2346:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1467,"nodeType":"VariableDeclarationStatement","src":"2346:9:8"},{"assignments":[1469],"declarations":[{"constant":false,"id":1469,"mutability":"mutable","name":"v","nameLocation":"2375:1:8","nodeType":"VariableDeclaration","scope":1479,"src":"2369:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1468,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1470,"nodeType":"VariableDeclarationStatement","src":"2369:7:8"},{"AST":{"nodeType":"YulBlock","src":"2577:171:8","statements":[{"nodeType":"YulAssignment","src":"2595:32:8","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2610:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2621:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:8"},"nodeType":"YulFunctionCall","src":"2606:20:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:8"},"nodeType":"YulFunctionCall","src":"2600:27:8"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2595:1:8"}]},{"nodeType":"YulAssignment","src":"2644:32:8","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2659:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2670:4:8","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2655:3:8"},"nodeType":"YulFunctionCall","src":"2655:20:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2649:5:8"},"nodeType":"YulFunctionCall","src":"2649:27:8"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2644:1:8"}]},{"nodeType":"YulAssignment","src":"2693:41:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:8","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2716:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2727:4:8","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:8"},"nodeType":"YulFunctionCall","src":"2712:20:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2706:5:8"},"nodeType":"YulFunctionCall","src":"2706:27:8"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2698:4:8"},"nodeType":"YulFunctionCall","src":"2698:36:8"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2693:1:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1463,"isOffset":false,"isSlot":false,"src":"2595:1:8","valueSize":1},{"declaration":1466,"isOffset":false,"isSlot":false,"src":"2644:1:8","valueSize":1},{"declaration":1450,"isOffset":false,"isSlot":false,"src":"2610:9:8","valueSize":1},{"declaration":1450,"isOffset":false,"isSlot":false,"src":"2659:9:8","valueSize":1},{"declaration":1450,"isOffset":false,"isSlot":false,"src":"2716:9:8","valueSize":1},{"declaration":1469,"isOffset":false,"isSlot":false,"src":"2693:1:8","valueSize":1}],"id":1471,"nodeType":"InlineAssembly","src":"2568:180:8"},{"expression":{"arguments":[{"id":1473,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"2779:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1474,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"2785:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1475,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"2788:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1476,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"2791:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1472,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1491,1565,1659],"referencedDeclaration":1659,"src":"2768:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1457,"id":1478,"nodeType":"Return","src":"2761:32:8"}]}}]},"documentation":{"id":1446,"nodeType":"StructuredDocumentation","src":"1109:1053:8","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":1491,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:8","nodeType":"FunctionDefinition","parameters":{"id":1451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1448,"mutability":"mutable","name":"hash","nameLocation":"2195:4:8","nodeType":"VariableDeclaration","scope":1491,"src":"2187:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1447,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1450,"mutability":"mutable","name":"signature","nameLocation":"2214:9:8","nodeType":"VariableDeclaration","scope":1491,"src":"2201:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1449,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:8"},"returnParameters":{"id":1457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1453,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1491,"src":"2248:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1452,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1491,"src":"2257:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1455,"nodeType":"UserDefinedTypeName","pathNode":{"id":1454,"name":"RecoverError","nameLocations":["2257:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"2257:12:8"},"referencedDeclaration":1401,"src":"2257:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:8"},"scope":1757,"src":"2167:730:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1517,"nodeType":"Block","src":"3770:140:8","statements":[{"assignments":[1502,1505],"declarations":[{"constant":false,"id":1502,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:8","nodeType":"VariableDeclaration","scope":1517,"src":"3781:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1501,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1505,"mutability":"mutable","name":"error","nameLocation":"3813:5:8","nodeType":"VariableDeclaration","scope":1517,"src":"3800:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1504,"nodeType":"UserDefinedTypeName","pathNode":{"id":1503,"name":"RecoverError","nameLocations":["3800:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"3800:12:8"},"referencedDeclaration":1401,"src":"3800:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1510,"initialValue":{"arguments":[{"id":1507,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"3833:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1508,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"3839:9:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1506,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1491,1565,1659],"referencedDeclaration":1491,"src":"3822:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:8"},{"expression":{"arguments":[{"id":1512,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"3871:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1511,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"3859:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1401_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1514,"nodeType":"ExpressionStatement","src":"3859:18:8"},{"expression":{"id":1515,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"3894:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1500,"id":1516,"nodeType":"Return","src":"3887:16:8"}]},"documentation":{"id":1492,"nodeType":"StructuredDocumentation","src":"2903:775:8","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":1518,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:8","nodeType":"FunctionDefinition","parameters":{"id":1497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1494,"mutability":"mutable","name":"hash","nameLocation":"3708:4:8","nodeType":"VariableDeclaration","scope":1518,"src":"3700:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1493,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1496,"mutability":"mutable","name":"signature","nameLocation":"3727:9:8","nodeType":"VariableDeclaration","scope":1518,"src":"3714:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1495,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:8"},"returnParameters":{"id":1500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1499,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1518,"src":"3761:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1498,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:8"},"scope":1757,"src":"3683:227:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1564,"nodeType":"Block","src":"4267:203:8","statements":[{"assignments":[1534],"declarations":[{"constant":false,"id":1534,"mutability":"mutable","name":"s","nameLocation":"4285:1:8","nodeType":"VariableDeclaration","scope":1564,"src":"4277:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1533,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4277:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1541,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1535,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"4289:2:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4302:66:8","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4294:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1536,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4294:7:8","typeDescriptions":{}}},"id":1539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4294:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4289:80:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4277:92:8"},{"assignments":[1543],"declarations":[{"constant":false,"id":1543,"mutability":"mutable","name":"v","nameLocation":"4385:1:8","nodeType":"VariableDeclaration","scope":1564,"src":"4379:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1542,"name":"uint8","nodeType":"ElementaryTypeName","src":"4379:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1556,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1548,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"4404:2:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4396:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1546,"name":"uint256","nodeType":"ElementaryTypeName","src":"4396:7:8","typeDescriptions":{}}},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4396:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4411:3:8","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4396:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1552,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4395:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4418:2:8","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4395:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4389:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1544,"name":"uint8","nodeType":"ElementaryTypeName","src":"4389:5:8","typeDescriptions":{}}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4389:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4379:42:8"},{"expression":{"arguments":[{"id":1558,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"4449:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1559,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"4455:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1560,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"4458:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1561,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"4461:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1557,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1491,1565,1659],"referencedDeclaration":1659,"src":"4438:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1532,"id":1563,"nodeType":"Return","src":"4431:32:8"}]},"documentation":{"id":1519,"nodeType":"StructuredDocumentation","src":"3916:243:8","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":1565,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:8","nodeType":"FunctionDefinition","parameters":{"id":1526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1521,"mutability":"mutable","name":"hash","nameLocation":"4192:4:8","nodeType":"VariableDeclaration","scope":1565,"src":"4184:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1520,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4184:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1523,"mutability":"mutable","name":"r","nameLocation":"4206:1:8","nodeType":"VariableDeclaration","scope":1565,"src":"4198:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1522,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4198:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1525,"mutability":"mutable","name":"vs","nameLocation":"4217:2:8","nodeType":"VariableDeclaration","scope":1565,"src":"4209:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1524,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4209:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:37:8"},"returnParameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1565,"src":"4244:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1527,"name":"address","nodeType":"ElementaryTypeName","src":"4244:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1565,"src":"4253:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1530,"nodeType":"UserDefinedTypeName","pathNode":{"id":1529,"name":"RecoverError","nameLocations":["4253:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"4253:12:8"},"referencedDeclaration":1401,"src":"4253:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4243:23:8"},"scope":1757,"src":"4164:306:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1594,"nodeType":"Block","src":"4721:136:8","statements":[{"assignments":[1578,1581],"declarations":[{"constant":false,"id":1578,"mutability":"mutable","name":"recovered","nameLocation":"4740:9:8","nodeType":"VariableDeclaration","scope":1594,"src":"4732:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1577,"name":"address","nodeType":"ElementaryTypeName","src":"4732:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1581,"mutability":"mutable","name":"error","nameLocation":"4764:5:8","nodeType":"VariableDeclaration","scope":1594,"src":"4751:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1580,"nodeType":"UserDefinedTypeName","pathNode":{"id":1579,"name":"RecoverError","nameLocations":["4751:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"4751:12:8"},"referencedDeclaration":1401,"src":"4751:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1587,"initialValue":{"arguments":[{"id":1583,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"4784:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1584,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"4790:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1585,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"4793:2:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1582,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1491,1565,1659],"referencedDeclaration":1565,"src":"4773:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4773:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4731:65:8"},{"expression":{"arguments":[{"id":1589,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"4818:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1588,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"4806:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1401_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1591,"nodeType":"ExpressionStatement","src":"4806:18:8"},{"expression":{"id":1592,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"4841:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1576,"id":1593,"nodeType":"Return","src":"4834:16:8"}]},"documentation":{"id":1566,"nodeType":"StructuredDocumentation","src":"4476:154:8","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":1595,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4644:7:8","nodeType":"FunctionDefinition","parameters":{"id":1573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1568,"mutability":"mutable","name":"hash","nameLocation":"4660:4:8","nodeType":"VariableDeclaration","scope":1595,"src":"4652:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1567,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4652:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1570,"mutability":"mutable","name":"r","nameLocation":"4674:1:8","nodeType":"VariableDeclaration","scope":1595,"src":"4666:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4666:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1572,"mutability":"mutable","name":"vs","nameLocation":"4685:2:8","nodeType":"VariableDeclaration","scope":1595,"src":"4677:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4677:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4651:37:8"},"returnParameters":{"id":1576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1575,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1595,"src":"4712:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1574,"name":"address","nodeType":"ElementaryTypeName","src":"4712:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4711:9:8"},"scope":1757,"src":"4635:222:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1658,"nodeType":"Block","src":"5142:1345:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1614,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"6038:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6030:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"6030:7:8","typeDescriptions":{}}},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6030:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6043:66:8","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6030:79:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1627,"nodeType":"IfStatement","src":"6026:161:8","trueBody":{"id":1626,"nodeType":"Block","src":"6111:76:8","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1618,"name":"address","nodeType":"ElementaryTypeName","src":"6133:7:8","typeDescriptions":{}}},"id":1621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6133:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1622,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"6145:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6158:17:8","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"6145:30:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1624,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6132:44:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1611,"id":1625,"nodeType":"Return","src":"6125:51:8"}]}},{"assignments":[1629],"declarations":[{"constant":false,"id":1629,"mutability":"mutable","name":"signer","nameLocation":"6289:6:8","nodeType":"VariableDeclaration","scope":1658,"src":"6281:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1628,"name":"address","nodeType":"ElementaryTypeName","src":"6281:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1636,"initialValue":{"arguments":[{"id":1631,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"6308:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1632,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"6314:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1633,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"6317:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1634,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"6320:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1630,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6298:9:8","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6281:41:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1637,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"6336:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6354:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6346:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1638,"name":"address","nodeType":"ElementaryTypeName","src":"6346:7:8","typeDescriptions":{}}},"id":1641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6336:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1652,"nodeType":"IfStatement","src":"6332:101:8","trueBody":{"id":1651,"nodeType":"Block","src":"6358:75:8","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6388:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1644,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6380:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1643,"name":"address","nodeType":"ElementaryTypeName","src":"6380:7:8","typeDescriptions":{}}},"id":1646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6380:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1647,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"6392:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6405:16:8","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1397,"src":"6392:29:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1649,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6379:43:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1611,"id":1650,"nodeType":"Return","src":"6372:50:8"}]}},{"expression":{"components":[{"id":1653,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"6451:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1654,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"6459:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6472:7:8","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"6459:20:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1656,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6450:30:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1611,"id":1657,"nodeType":"Return","src":"6443:37:8"}]},"documentation":{"id":1596,"nodeType":"StructuredDocumentation","src":"4863:163:8","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":1659,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5040:10:8","nodeType":"FunctionDefinition","parameters":{"id":1605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1598,"mutability":"mutable","name":"hash","nameLocation":"5059:4:8","nodeType":"VariableDeclaration","scope":1659,"src":"5051:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5051:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1600,"mutability":"mutable","name":"v","nameLocation":"5071:1:8","nodeType":"VariableDeclaration","scope":1659,"src":"5065:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1599,"name":"uint8","nodeType":"ElementaryTypeName","src":"5065:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1602,"mutability":"mutable","name":"r","nameLocation":"5082:1:8","nodeType":"VariableDeclaration","scope":1659,"src":"5074:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1601,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5074:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1604,"mutability":"mutable","name":"s","nameLocation":"5093:1:8","nodeType":"VariableDeclaration","scope":1659,"src":"5085:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1603,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5085:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5050:45:8"},"returnParameters":{"id":1611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1659,"src":"5119:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1606,"name":"address","nodeType":"ElementaryTypeName","src":"5119:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1659,"src":"5128:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1609,"nodeType":"UserDefinedTypeName","pathNode":{"id":1608,"name":"RecoverError","nameLocations":["5128:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"5128:12:8"},"referencedDeclaration":1401,"src":"5128:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5118:23:8"},"scope":1757,"src":"5031:1456:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1691,"nodeType":"Block","src":"6714:138:8","statements":[{"assignments":[1674,1677],"declarations":[{"constant":false,"id":1674,"mutability":"mutable","name":"recovered","nameLocation":"6733:9:8","nodeType":"VariableDeclaration","scope":1691,"src":"6725:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1673,"name":"address","nodeType":"ElementaryTypeName","src":"6725:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1677,"mutability":"mutable","name":"error","nameLocation":"6757:5:8","nodeType":"VariableDeclaration","scope":1691,"src":"6744:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1676,"nodeType":"UserDefinedTypeName","pathNode":{"id":1675,"name":"RecoverError","nameLocations":["6744:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"6744:12:8"},"referencedDeclaration":1401,"src":"6744:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1684,"initialValue":{"arguments":[{"id":1679,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"6777:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1680,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"6783:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1681,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"6786:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1682,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1668,"src":"6789:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1678,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1491,1565,1659],"referencedDeclaration":1659,"src":"6766:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6724:67:8"},{"expression":{"arguments":[{"id":1686,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"6813:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1685,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"6801:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1401_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1688,"nodeType":"ExpressionStatement","src":"6801:18:8"},{"expression":{"id":1689,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"6836:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1672,"id":1690,"nodeType":"Return","src":"6829:16:8"}]},"documentation":{"id":1660,"nodeType":"StructuredDocumentation","src":"6493:122:8","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1692,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6629:7:8","nodeType":"FunctionDefinition","parameters":{"id":1669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1662,"mutability":"mutable","name":"hash","nameLocation":"6645:4:8","nodeType":"VariableDeclaration","scope":1692,"src":"6637:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1661,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6637:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1664,"mutability":"mutable","name":"v","nameLocation":"6657:1:8","nodeType":"VariableDeclaration","scope":1692,"src":"6651:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1663,"name":"uint8","nodeType":"ElementaryTypeName","src":"6651:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1666,"mutability":"mutable","name":"r","nameLocation":"6668:1:8","nodeType":"VariableDeclaration","scope":1692,"src":"6660:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1665,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6660:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1668,"mutability":"mutable","name":"s","nameLocation":"6679:1:8","nodeType":"VariableDeclaration","scope":1692,"src":"6671:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1667,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6671:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6636:45:8"},"returnParameters":{"id":1672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1671,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1692,"src":"6705:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1670,"name":"address","nodeType":"ElementaryTypeName","src":"6705:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6704:9:8"},"scope":1757,"src":"6620:232:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1701,"nodeType":"Block","src":"7228:310:8","statements":[{"AST":{"nodeType":"YulBlock","src":"7384:148:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7405:4:8","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7411:34:8","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7398:6:8"},"nodeType":"YulFunctionCall","src":"7398:48:8"},"nodeType":"YulExpressionStatement","src":"7398:48:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7466:4:8","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7472:4:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7459:6:8"},"nodeType":"YulFunctionCall","src":"7459:18:8"},"nodeType":"YulExpressionStatement","src":"7459:18:8"},{"nodeType":"YulAssignment","src":"7490:32:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7511:4:8","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7517:4:8","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7501:9:8"},"nodeType":"YulFunctionCall","src":"7501:21:8"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7490:7:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1695,"isOffset":false,"isSlot":false,"src":"7472:4:8","valueSize":1},{"declaration":1698,"isOffset":false,"isSlot":false,"src":"7490:7:8","valueSize":1}],"id":1700,"nodeType":"InlineAssembly","src":"7375:157:8"}]},"documentation":{"id":1693,"nodeType":"StructuredDocumentation","src":"6858:279:8","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1702,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7151:22:8","nodeType":"FunctionDefinition","parameters":{"id":1696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1695,"mutability":"mutable","name":"hash","nameLocation":"7182:4:8","nodeType":"VariableDeclaration","scope":1702,"src":"7174:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7174:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7173:14:8"},"returnParameters":{"id":1699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1698,"mutability":"mutable","name":"message","nameLocation":"7219:7:8","nodeType":"VariableDeclaration","scope":1702,"src":"7211:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1697,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7211:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7210:17:8"},"scope":1757,"src":"7142:396:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1723,"nodeType":"Block","src":"7903:127:8","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7947:32:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":1716,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"8009:1:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8011:6:8","memberName":"length","nodeType":"MemberAccess","src":"8009:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1714,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"7981:18:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1391_$","typeString":"type(library StringsUpgradeable)"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8000:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1221,"src":"7981:27:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7981:37:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1719,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"8020:1:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1711,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7930:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7934:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"7930:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7930:92:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1710,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7920:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7920:103:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1709,"id":1722,"nodeType":"Return","src":"7913:110:8"}]},"documentation":{"id":1703,"nodeType":"StructuredDocumentation","src":"7544:274:8","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1724,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7832:22:8","nodeType":"FunctionDefinition","parameters":{"id":1706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1705,"mutability":"mutable","name":"s","nameLocation":"7868:1:8","nodeType":"VariableDeclaration","scope":1724,"src":"7855:14:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1704,"name":"bytes","nodeType":"ElementaryTypeName","src":"7855:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7854:16:8"},"returnParameters":{"id":1709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1724,"src":"7894:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7894:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7893:9:8"},"scope":1757,"src":"7823:207:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1735,"nodeType":"Block","src":"8476:290:8","statements":[{"AST":{"nodeType":"YulBlock","src":"8538:222:8","statements":[{"nodeType":"YulVariableDeclaration","src":"8552:22:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8569:4:8","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8563:5:8"},"nodeType":"YulFunctionCall","src":"8563:11:8"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8556:3:8","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8594:3:8"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8599:10:8","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8587:6:8"},"nodeType":"YulFunctionCall","src":"8587:23:8"},"nodeType":"YulExpressionStatement","src":"8587:23:8"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8634:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"8639:4:8","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8630:3:8"},"nodeType":"YulFunctionCall","src":"8630:14:8"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8646:15:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8623:6:8"},"nodeType":"YulFunctionCall","src":"8623:39:8"},"nodeType":"YulExpressionStatement","src":"8623:39:8"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8686:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"8691:4:8","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8682:3:8"},"nodeType":"YulFunctionCall","src":"8682:14:8"},{"name":"structHash","nodeType":"YulIdentifier","src":"8698:10:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8675:6:8"},"nodeType":"YulFunctionCall","src":"8675:34:8"},"nodeType":"YulExpressionStatement","src":"8675:34:8"},{"nodeType":"YulAssignment","src":"8722:28:8","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8740:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"8745:4:8","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8730:9:8"},"nodeType":"YulFunctionCall","src":"8730:20:8"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8722:4:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1732,"isOffset":false,"isSlot":false,"src":"8722:4:8","valueSize":1},{"declaration":1727,"isOffset":false,"isSlot":false,"src":"8646:15:8","valueSize":1},{"declaration":1729,"isOffset":false,"isSlot":false,"src":"8698:10:8","valueSize":1}],"id":1734,"nodeType":"InlineAssembly","src":"8529:231:8"}]},"documentation":{"id":1725,"nodeType":"StructuredDocumentation","src":"8036:328:8","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":1736,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8378:15:8","nodeType":"FunctionDefinition","parameters":{"id":1730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1727,"mutability":"mutable","name":"domainSeparator","nameLocation":"8402:15:8","nodeType":"VariableDeclaration","scope":1736,"src":"8394:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1726,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8394:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1729,"mutability":"mutable","name":"structHash","nameLocation":"8427:10:8","nodeType":"VariableDeclaration","scope":1736,"src":"8419:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1728,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8419:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8393:45:8"},"returnParameters":{"id":1733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1732,"mutability":"mutable","name":"data","nameLocation":"8470:4:8","nodeType":"VariableDeclaration","scope":1736,"src":"8462:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1731,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8462:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8461:14:8"},"scope":1757,"src":"8369:397:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1755,"nodeType":"Block","src":"9081:80:8","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":1749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9125:10:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":1750,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"9137:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1751,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"9148:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1747,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9108:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1748,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9112:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"9108:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9108:45:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1746,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9098:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9098:56:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1745,"id":1754,"nodeType":"Return","src":"9091:63:8"}]},"documentation":{"id":1737,"nodeType":"StructuredDocumentation","src":"8772:193:8","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":1756,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8979:31:8","nodeType":"FunctionDefinition","parameters":{"id":1742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1739,"mutability":"mutable","name":"validator","nameLocation":"9019:9:8","nodeType":"VariableDeclaration","scope":1756,"src":"9011:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1738,"name":"address","nodeType":"ElementaryTypeName","src":"9011:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1741,"mutability":"mutable","name":"data","nameLocation":"9043:4:8","nodeType":"VariableDeclaration","scope":1756,"src":"9030:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1740,"name":"bytes","nodeType":"ElementaryTypeName","src":"9030:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9010:38:8"},"returnParameters":{"id":1745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1744,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1756,"src":"9072:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1743,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9072:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9071:9:8"},"scope":1757,"src":"8970:191:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1758,"src":"380:8783:8","usedErrors":[]}],"src":"112:9052:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2623]},"id":2624,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1759,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1760,"nodeType":"StructuredDocumentation","src":"128:73:9","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2623,"linearizedBaseContracts":[2623],"name":"MathUpgradeable","nameLocation":"210:15:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":1764,"members":[{"id":1761,"name":"Down","nameLocation":"256:4:9","nodeType":"EnumValue","src":"256:4:9"},{"id":1762,"name":"Up","nameLocation":"298:2:9","nodeType":"EnumValue","src":"298:2:9"},{"id":1763,"name":"Zero","nameLocation":"329:4:9","nodeType":"EnumValue","src":"329:4:9"}],"name":"Rounding","nameLocation":"237:8:9","nodeType":"EnumDefinition","src":"232:122:9"},{"body":{"id":1781,"nodeType":"Block","src":"491:37:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1774,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"508:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1775,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"512:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1778,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"520:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:9","trueExpression":{"id":1777,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"516:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1773,"id":1780,"nodeType":"Return","src":"501:20:9"}]},"documentation":{"id":1765,"nodeType":"StructuredDocumentation","src":"360:59:9","text":" @dev Returns the largest of two numbers."},"id":1782,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:9","nodeType":"FunctionDefinition","parameters":{"id":1770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1767,"mutability":"mutable","name":"a","nameLocation":"445:1:9","nodeType":"VariableDeclaration","scope":1782,"src":"437:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1766,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1769,"mutability":"mutable","name":"b","nameLocation":"456:1:9","nodeType":"VariableDeclaration","scope":1782,"src":"448:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1768,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:9"},"returnParameters":{"id":1773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1782,"src":"482:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1771,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:9"},"scope":2623,"src":"424:104:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1799,"nodeType":"Block","src":"666:37:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1792,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"683:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1793,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"687:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1796,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"695:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:9","trueExpression":{"id":1795,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"691:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1791,"id":1798,"nodeType":"Return","src":"676:20:9"}]},"documentation":{"id":1783,"nodeType":"StructuredDocumentation","src":"534:60:9","text":" @dev Returns the smallest of two numbers."},"id":1800,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:9","nodeType":"FunctionDefinition","parameters":{"id":1788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1785,"mutability":"mutable","name":"a","nameLocation":"620:1:9","nodeType":"VariableDeclaration","scope":1800,"src":"612:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1784,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1787,"mutability":"mutable","name":"b","nameLocation":"631:1:9","nodeType":"VariableDeclaration","scope":1800,"src":"623:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1786,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:9"},"returnParameters":{"id":1791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1790,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1800,"src":"657:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1789,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:9"},"scope":2623,"src":"599:104:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1822,"nodeType":"Block","src":"887:82:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1810,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"942:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1811,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"946:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1813,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1814,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"952:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1815,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"956:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1817,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1809,"id":1821,"nodeType":"Return","src":"934:28:9"}]},"documentation":{"id":1801,"nodeType":"StructuredDocumentation","src":"709:102:9","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1823,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:9","nodeType":"FunctionDefinition","parameters":{"id":1806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1803,"mutability":"mutable","name":"a","nameLocation":"841:1:9","nodeType":"VariableDeclaration","scope":1823,"src":"833:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1802,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1805,"mutability":"mutable","name":"b","nameLocation":"852:1:9","nodeType":"VariableDeclaration","scope":1823,"src":"844:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1804,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:9"},"returnParameters":{"id":1809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1808,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1823,"src":"878:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1807,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:9"},"scope":2623,"src":"816:153:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1847,"nodeType":"Block","src":"1239:123:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1833,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"1327:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1837,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"1341:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1840,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1841,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"1350:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:9","trueExpression":{"hexValue":"30","id":1836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1832,"id":1846,"nodeType":"Return","src":"1320:35:9"}]},"documentation":{"id":1824,"nodeType":"StructuredDocumentation","src":"975:188:9","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1848,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:9","nodeType":"FunctionDefinition","parameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"a","nameLocation":"1193:1:9","nodeType":"VariableDeclaration","scope":1848,"src":"1185:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1825,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1828,"mutability":"mutable","name":"b","nameLocation":"1204:1:9","nodeType":"VariableDeclaration","scope":1848,"src":"1196:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1827,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:9"},"returnParameters":{"id":1832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1831,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1848,"src":"1230:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1830,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:9"},"scope":2623,"src":"1168:194:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1970,"nodeType":"Block","src":"1776:4115:9","statements":[{"id":1969,"nodeType":"UncheckedBlock","src":"1786:4099:9","statements":[{"assignments":[1861],"declarations":[{"constant":false,"id":1861,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:9","nodeType":"VariableDeclaration","scope":1969,"src":"2107:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1860,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1862,"nodeType":"VariableDeclarationStatement","src":"2107:13:9"},{"assignments":[1864],"declarations":[{"constant":false,"id":1864,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:9","nodeType":"VariableDeclaration","scope":1969,"src":"2179:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1863,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1865,"nodeType":"VariableDeclarationStatement","src":"2179:13:9"},{"AST":{"nodeType":"YulBlock","src":"2259:157:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2277:30:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2294:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"2297:1:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2304:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2300:3:9"},"nodeType":"YulFunctionCall","src":"2300:6:9"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2287:6:9"},"nodeType":"YulFunctionCall","src":"2287:20:9"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2281:2:9","type":""}]},{"nodeType":"YulAssignment","src":"2324:18:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2337:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"2340:1:9"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2333:3:9"},"nodeType":"YulFunctionCall","src":"2333:9:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2324:5:9"}]},{"nodeType":"YulAssignment","src":"2359:43:9","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2376:2:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"2380:5:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2372:3:9"},"nodeType":"YulFunctionCall","src":"2372:14:9"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2391:2:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"2395:5:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2388:2:9"},"nodeType":"YulFunctionCall","src":"2388:13:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2368:3:9"},"nodeType":"YulFunctionCall","src":"2368:34:9"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2359:5:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1861,"isOffset":false,"isSlot":false,"src":"2324:5:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"2380:5:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"2395:5:9","valueSize":1},{"declaration":1864,"isOffset":false,"isSlot":false,"src":"2359:5:9","valueSize":1},{"declaration":1851,"isOffset":false,"isSlot":false,"src":"2294:1:9","valueSize":1},{"declaration":1851,"isOffset":false,"isSlot":false,"src":"2337:1:9","valueSize":1},{"declaration":1853,"isOffset":false,"isSlot":false,"src":"2297:1:9","valueSize":1},{"declaration":1853,"isOffset":false,"isSlot":false,"src":"2340:1:9","valueSize":1}],"id":1866,"nodeType":"InlineAssembly","src":"2250:166:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1867,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"2497:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1875,"nodeType":"IfStatement","src":"2493:368:9","trueBody":{"id":1874,"nodeType":"Block","src":"2509:352:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1870,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"2827:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1871,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"2835:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1859,"id":1873,"nodeType":"Return","src":"2820:26:9"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1877,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"2971:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1878,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"2985:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":1876,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:53:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1882,"nodeType":"ExpressionStatement","src":"2963:53:9"},{"assignments":[1884],"declarations":[{"constant":false,"id":1884,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:9","nodeType":"VariableDeclaration","scope":1969,"src":"3272:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1883,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1885,"nodeType":"VariableDeclarationStatement","src":"3272:17:9"},{"AST":{"nodeType":"YulBlock","src":"3312:291:9","statements":[{"nodeType":"YulAssignment","src":"3381:38:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3401:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"3404:1:9"},{"name":"denominator","nodeType":"YulIdentifier","src":"3407:11:9"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3394:6:9"},"nodeType":"YulFunctionCall","src":"3394:25:9"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3381:9:9"}]},{"nodeType":"YulAssignment","src":"3501:41:9","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3514:5:9"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3524:9:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"3535:5:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3521:2:9"},"nodeType":"YulFunctionCall","src":"3521:20:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:9"},"nodeType":"YulFunctionCall","src":"3510:32:9"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3501:5:9"}]},{"nodeType":"YulAssignment","src":"3559:30:9","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3572:5:9"},{"name":"remainder","nodeType":"YulIdentifier","src":"3579:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3568:3:9"},"nodeType":"YulFunctionCall","src":"3568:21:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3559:5:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1855,"isOffset":false,"isSlot":false,"src":"3407:11:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"3535:5:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"3559:5:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"3572:5:9","valueSize":1},{"declaration":1864,"isOffset":false,"isSlot":false,"src":"3501:5:9","valueSize":1},{"declaration":1864,"isOffset":false,"isSlot":false,"src":"3514:5:9","valueSize":1},{"declaration":1884,"isOffset":false,"isSlot":false,"src":"3381:9:9","valueSize":1},{"declaration":1884,"isOffset":false,"isSlot":false,"src":"3524:9:9","valueSize":1},{"declaration":1884,"isOffset":false,"isSlot":false,"src":"3579:9:9","valueSize":1},{"declaration":1851,"isOffset":false,"isSlot":false,"src":"3401:1:9","valueSize":1},{"declaration":1853,"isOffset":false,"isSlot":false,"src":"3404:1:9","valueSize":1}],"id":1886,"nodeType":"InlineAssembly","src":"3303:300:9"},{"assignments":[1888],"declarations":[{"constant":false,"id":1888,"mutability":"mutable","name":"twos","nameLocation":"3918:4:9","nodeType":"VariableDeclaration","scope":1969,"src":"3910:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1896,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1889,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"3925:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:9","subExpression":{"id":1890,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"3941:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1894,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:9"},{"AST":{"nodeType":"YulBlock","src":"3980:362:9","statements":[{"nodeType":"YulAssignment","src":"4045:37:9","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4064:11:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4077:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4060:3:9"},"nodeType":"YulFunctionCall","src":"4060:22:9"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4045:11:9"}]},{"nodeType":"YulAssignment","src":"4149:25:9","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4162:5:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4169:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4158:3:9"},"nodeType":"YulFunctionCall","src":"4158:16:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4149:5:9"}]},{"nodeType":"YulAssignment","src":"4289:39:9","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4309:1:9","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4312:4:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4305:3:9"},"nodeType":"YulFunctionCall","src":"4305:12:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4319:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4301:3:9"},"nodeType":"YulFunctionCall","src":"4301:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"4326:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:9"},"nodeType":"YulFunctionCall","src":"4297:31:9"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4289:4:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1855,"isOffset":false,"isSlot":false,"src":"4045:11:9","valueSize":1},{"declaration":1855,"isOffset":false,"isSlot":false,"src":"4064:11:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"4149:5:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"4162:5:9","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"4077:4:9","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"4169:4:9","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"4289:4:9","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"4312:4:9","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"4319:4:9","valueSize":1}],"id":1897,"nodeType":"InlineAssembly","src":"3971:371:9"},{"expression":{"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1898,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"4408:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1899,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"4417:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1900,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"4425:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1903,"nodeType":"ExpressionStatement","src":"4408:21:9"},{"assignments":[1905],"declarations":[{"constant":false,"id":1905,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:9","nodeType":"VariableDeclaration","scope":1969,"src":"4747:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1904,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1912,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1907,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"4770:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1909,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:9"},{"expression":{"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1913,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5003:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1915,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"5018:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1916,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5032:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1920,"nodeType":"ExpressionStatement","src":"5003:36:9"},{"expression":{"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1921,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5072:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1923,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"5087:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1924,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5101:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1928,"nodeType":"ExpressionStatement","src":"5072:36:9"},{"expression":{"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1929,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5142:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1931,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"5157:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1932,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5171:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1936,"nodeType":"ExpressionStatement","src":"5142:36:9"},{"expression":{"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1937,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5212:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1939,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"5227:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1940,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5241:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1944,"nodeType":"ExpressionStatement","src":"5212:36:9"},{"expression":{"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1945,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5282:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1947,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"5297:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1948,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5311:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1952,"nodeType":"ExpressionStatement","src":"5282:36:9"},{"expression":{"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1953,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5353:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1955,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"5368:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1956,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5382:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1960,"nodeType":"ExpressionStatement","src":"5353:36:9"},{"expression":{"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1961,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"5823:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1962,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"5832:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1963,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5840:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1966,"nodeType":"ExpressionStatement","src":"5823:24:9"},{"expression":{"id":1967,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"5868:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1859,"id":1968,"nodeType":"Return","src":"5861:13:9"}]}]},"documentation":{"id":1849,"nodeType":"StructuredDocumentation","src":"1368:305:9","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1971,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:9","nodeType":"FunctionDefinition","parameters":{"id":1856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1851,"mutability":"mutable","name":"x","nameLocation":"1702:1:9","nodeType":"VariableDeclaration","scope":1971,"src":"1694:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1850,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1853,"mutability":"mutable","name":"y","nameLocation":"1713:1:9","nodeType":"VariableDeclaration","scope":1971,"src":"1705:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1852,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1855,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:9","nodeType":"VariableDeclaration","scope":1971,"src":"1716:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1854,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:9"},"returnParameters":{"id":1859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1858,"mutability":"mutable","name":"result","nameLocation":"1768:6:9","nodeType":"VariableDeclaration","scope":1971,"src":"1760:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1857,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:9"},"scope":2623,"src":"1678:4213:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2014,"nodeType":"Block","src":"6133:189:9","statements":[{"assignments":[1987],"declarations":[{"constant":false,"id":1987,"mutability":"mutable","name":"result","nameLocation":"6151:6:9","nodeType":"VariableDeclaration","scope":2014,"src":"6143:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1986,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1993,"initialValue":{"arguments":[{"id":1989,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"6167:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1990,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"6170:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1991,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"6173:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1988,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1971,2015],"referencedDeclaration":1971,"src":"6160:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6160:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:9"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1994,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"6199:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1995,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"6211:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1764_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":1996,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6220:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1762,"src":"6211:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1999,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"6233:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2000,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"6236:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2001,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"6239:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1998,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:9","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6226:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2011,"nodeType":"IfStatement","src":"6195:98:9","trueBody":{"id":2010,"nodeType":"Block","src":"6257:36:9","statements":[{"expression":{"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2006,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"6271:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2009,"nodeType":"ExpressionStatement","src":"6271:11:9"}]}},{"expression":{"id":2012,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"6309:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1985,"id":2013,"nodeType":"Return","src":"6302:13:9"}]},"documentation":{"id":1972,"nodeType":"StructuredDocumentation","src":"5897:121:9","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2015,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:9","nodeType":"FunctionDefinition","parameters":{"id":1982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1974,"mutability":"mutable","name":"x","nameLocation":"6047:1:9","nodeType":"VariableDeclaration","scope":2015,"src":"6039:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1973,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1976,"mutability":"mutable","name":"y","nameLocation":"6058:1:9","nodeType":"VariableDeclaration","scope":2015,"src":"6050:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1975,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1978,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:9","nodeType":"VariableDeclaration","scope":2015,"src":"6061:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1977,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1981,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:9","nodeType":"VariableDeclaration","scope":2015,"src":"6082:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":1980,"nodeType":"UserDefinedTypeName","pathNode":{"id":1979,"name":"Rounding","nameLocations":["6082:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1764,"src":"6082:8:9"},"referencedDeclaration":1764,"src":"6082:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:9"},"returnParameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2015,"src":"6124:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1983,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:9"},"scope":2623,"src":"6023:299:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2126,"nodeType":"Block","src":"6598:1585:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2023,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"6612:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2029,"nodeType":"IfStatement","src":"6608:45:9","trueBody":{"id":2028,"nodeType":"Block","src":"6620:33:9","statements":[{"expression":{"hexValue":"30","id":2026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2022,"id":2027,"nodeType":"Return","src":"6634:8:9"}]}},{"assignments":[2031],"declarations":[{"constant":false,"id":2031,"mutability":"mutable","name":"result","nameLocation":"7340:6:9","nodeType":"VariableDeclaration","scope":2126,"src":"7332:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2030,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2040,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2034,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7360:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2033,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2295,2331],"referencedDeclaration":2295,"src":"7355:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:7:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2038,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:9"},{"id":2125,"nodeType":"UncheckedBlock","src":"7769:408:9","statements":[{"expression":{"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2041,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7793:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2042,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7803:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2043,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7812:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2044,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7816:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2047,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2051,"nodeType":"ExpressionStatement","src":"7793:35:9"},{"expression":{"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2052,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7842:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2053,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7852:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2054,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7861:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2055,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7865:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2058,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2062,"nodeType":"ExpressionStatement","src":"7842:35:9"},{"expression":{"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2063,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7891:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2064,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7901:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2065,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7910:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2066,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7914:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2069,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2073,"nodeType":"ExpressionStatement","src":"7891:35:9"},{"expression":{"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2074,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7940:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2075,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7950:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2076,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7959:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2077,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7963:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2080,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2084,"nodeType":"ExpressionStatement","src":"7940:35:9"},{"expression":{"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2085,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7989:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2086,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7999:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2087,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"8008:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2088,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8012:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2091,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2095,"nodeType":"ExpressionStatement","src":"7989:35:9"},{"expression":{"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2096,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8038:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2097,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8048:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2098,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"8057:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2099,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8061:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2102,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2106,"nodeType":"ExpressionStatement","src":"8038:35:9"},{"expression":{"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2107,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8087:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2108,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8097:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2109,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"8106:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2110,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8110:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2113,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2117,"nodeType":"ExpressionStatement","src":"8087:35:9"},{"expression":{"arguments":[{"id":2119,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8147:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2120,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"8155:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2121,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8159:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2118,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"8143:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2022,"id":2124,"nodeType":"Return","src":"8136:30:9"}]}]},"documentation":{"id":2016,"nodeType":"StructuredDocumentation","src":"6328:208:9","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2127,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:9","nodeType":"FunctionDefinition","parameters":{"id":2019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2018,"mutability":"mutable","name":"a","nameLocation":"6563:1:9","nodeType":"VariableDeclaration","scope":2127,"src":"6555:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2017,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:9"},"returnParameters":{"id":2022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2021,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2127,"src":"6589:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2020,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:9"},"scope":2623,"src":"6541:1642:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2162,"nodeType":"Block","src":"8359:161:9","statements":[{"id":2161,"nodeType":"UncheckedBlock","src":"8369:145:9","statements":[{"assignments":[2139],"declarations":[{"constant":false,"id":2139,"mutability":"mutable","name":"result","nameLocation":"8401:6:9","nodeType":"VariableDeclaration","scope":2161,"src":"8393:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2138,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2143,"initialValue":{"arguments":[{"id":2141,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"8415:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2140,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2127,2163],"referencedDeclaration":2127,"src":"8410:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8410:7:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2144,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"8438:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2145,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"8448:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2146,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"8460:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1764_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8469:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1762,"src":"8460:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2149,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"8475:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2150,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"8484:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2152,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"8493:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:9","trueExpression":{"hexValue":"31","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2158,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2137,"id":2160,"nodeType":"Return","src":"8431:72:9"}]}]},"documentation":{"id":2128,"nodeType":"StructuredDocumentation","src":"8189:89:9","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2163,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:9","nodeType":"FunctionDefinition","parameters":{"id":2134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2130,"mutability":"mutable","name":"a","nameLocation":"8305:1:9","nodeType":"VariableDeclaration","scope":2163,"src":"8297:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2129,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2133,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:9","nodeType":"VariableDeclaration","scope":2163,"src":"8308:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2132,"nodeType":"UserDefinedTypeName","pathNode":{"id":2131,"name":"Rounding","nameLocations":["8308:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1764,"src":"8308:8:9"},"referencedDeclaration":1764,"src":"8308:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:9"},"returnParameters":{"id":2137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2163,"src":"8350:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2135,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:9"},"scope":2623,"src":"8283:237:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2294,"nodeType":"Block","src":"8705:922:9","statements":[{"assignments":[2172],"declarations":[{"constant":false,"id":2172,"mutability":"mutable","name":"result","nameLocation":"8723:6:9","nodeType":"VariableDeclaration","scope":2294,"src":"8715:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2171,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2174,"initialValue":{"hexValue":"30","id":2173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:9"},{"id":2291,"nodeType":"UncheckedBlock","src":"8743:855:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2175,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"8771:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2189,"nodeType":"IfStatement","src":"8767:99:9","trueBody":{"id":2188,"nodeType":"Block","src":"8789:77:9","statements":[{"expression":{"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2180,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"8807:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2183,"nodeType":"ExpressionStatement","src":"8807:13:9"},{"expression":{"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2184,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"8838:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2187,"nodeType":"ExpressionStatement","src":"8838:13:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2190,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"8883:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2204,"nodeType":"IfStatement","src":"8879:96:9","trueBody":{"id":2203,"nodeType":"Block","src":"8900:75:9","statements":[{"expression":{"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"8918:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2198,"nodeType":"ExpressionStatement","src":"8918:12:9"},{"expression":{"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2199,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"8948:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2202,"nodeType":"ExpressionStatement","src":"8948:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2205,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"8992:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2219,"nodeType":"IfStatement","src":"8988:96:9","trueBody":{"id":2218,"nodeType":"Block","src":"9009:75:9","statements":[{"expression":{"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9027:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2213,"nodeType":"ExpressionStatement","src":"9027:12:9"},{"expression":{"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2214,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9057:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2217,"nodeType":"ExpressionStatement","src":"9057:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2220,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9101:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2234,"nodeType":"IfStatement","src":"9097:96:9","trueBody":{"id":2233,"nodeType":"Block","src":"9118:75:9","statements":[{"expression":{"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9136:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2228,"nodeType":"ExpressionStatement","src":"9136:12:9"},{"expression":{"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2229,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9166:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2232,"nodeType":"ExpressionStatement","src":"9166:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2235,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9210:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2249,"nodeType":"IfStatement","src":"9206:93:9","trueBody":{"id":2248,"nodeType":"Block","src":"9226:73:9","statements":[{"expression":{"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2240,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9244:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2243,"nodeType":"ExpressionStatement","src":"9244:11:9"},{"expression":{"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2244,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9273:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2247,"nodeType":"ExpressionStatement","src":"9273:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9316:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2264,"nodeType":"IfStatement","src":"9312:93:9","trueBody":{"id":2263,"nodeType":"Block","src":"9332:73:9","statements":[{"expression":{"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9350:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2258,"nodeType":"ExpressionStatement","src":"9350:11:9"},{"expression":{"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2259,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9379:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2262,"nodeType":"ExpressionStatement","src":"9379:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2265,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9422:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2279,"nodeType":"IfStatement","src":"9418:93:9","trueBody":{"id":2278,"nodeType":"Block","src":"9438:73:9","statements":[{"expression":{"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2270,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9456:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2273,"nodeType":"ExpressionStatement","src":"9456:11:9"},{"expression":{"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2274,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9485:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2277,"nodeType":"ExpressionStatement","src":"9485:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2280,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9528:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2290,"nodeType":"IfStatement","src":"9524:64:9","trueBody":{"id":2289,"nodeType":"Block","src":"9544:44:9","statements":[{"expression":{"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2285,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9562:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2288,"nodeType":"ExpressionStatement","src":"9562:11:9"}]}}]},{"expression":{"id":2292,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9614:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2170,"id":2293,"nodeType":"Return","src":"9607:13:9"}]},"documentation":{"id":2164,"nodeType":"StructuredDocumentation","src":"8526:113:9","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2295,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:9","nodeType":"FunctionDefinition","parameters":{"id":2167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2166,"mutability":"mutable","name":"value","nameLocation":"8666:5:9","nodeType":"VariableDeclaration","scope":2295,"src":"8658:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2165,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:9"},"returnParameters":{"id":2170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2169,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2295,"src":"8696:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2168,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:9"},"scope":2623,"src":"8644:983:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2330,"nodeType":"Block","src":"9860:165:9","statements":[{"id":2329,"nodeType":"UncheckedBlock","src":"9870:149:9","statements":[{"assignments":[2307],"declarations":[{"constant":false,"id":2307,"mutability":"mutable","name":"result","nameLocation":"9902:6:9","nodeType":"VariableDeclaration","scope":2329,"src":"9894:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2306,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2311,"initialValue":{"arguments":[{"id":2309,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"9916:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2308,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2295,2331],"referencedDeclaration":2295,"src":"9911:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:11:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2312,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"9943:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"9953:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2314,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"9965:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1764_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9974:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1762,"src":"9965:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2318,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"9985:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2320,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"9994:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:9","trueExpression":{"hexValue":"31","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2326,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2305,"id":2328,"nodeType":"Return","src":"9936:72:9"}]}]},"documentation":{"id":2296,"nodeType":"StructuredDocumentation","src":"9633:142:9","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2331,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:9","nodeType":"FunctionDefinition","parameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2298,"mutability":"mutable","name":"value","nameLocation":"9802:5:9","nodeType":"VariableDeclaration","scope":2331,"src":"9794:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2297,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2301,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:9","nodeType":"VariableDeclaration","scope":2331,"src":"9809:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2300,"nodeType":"UserDefinedTypeName","pathNode":{"id":2299,"name":"Rounding","nameLocations":["9809:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1764,"src":"9809:8:9"},"referencedDeclaration":1764,"src":"9809:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:9"},"returnParameters":{"id":2305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2331,"src":"9851:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2303,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:9"},"scope":2623,"src":"9780:245:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2459,"nodeType":"Block","src":"10212:854:9","statements":[{"assignments":[2340],"declarations":[{"constant":false,"id":2340,"mutability":"mutable","name":"result","nameLocation":"10230:6:9","nodeType":"VariableDeclaration","scope":2459,"src":"10222:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2339,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2342,"initialValue":{"hexValue":"30","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:9"},{"id":2456,"nodeType":"UncheckedBlock","src":"10250:787:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2343,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10278:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2359,"nodeType":"IfStatement","src":"10274:103:9","trueBody":{"id":2358,"nodeType":"Block","src":"10297:80:9","statements":[{"expression":{"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10315:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2353,"nodeType":"ExpressionStatement","src":"10315:17:9"},{"expression":{"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2354,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"10350:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2357,"nodeType":"ExpressionStatement","src":"10350:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10394:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2376,"nodeType":"IfStatement","src":"10390:103:9","trueBody":{"id":2375,"nodeType":"Block","src":"10413:80:9","statements":[{"expression":{"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2365,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10431:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2370,"nodeType":"ExpressionStatement","src":"10431:17:9"},{"expression":{"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"10466:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2374,"nodeType":"ExpressionStatement","src":"10466:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2377,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10510:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2393,"nodeType":"IfStatement","src":"10506:103:9","trueBody":{"id":2392,"nodeType":"Block","src":"10529:80:9","statements":[{"expression":{"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10547:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2387,"nodeType":"ExpressionStatement","src":"10547:17:9"},{"expression":{"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2388,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"10582:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2391,"nodeType":"ExpressionStatement","src":"10582:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2394,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10626:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2410,"nodeType":"IfStatement","src":"10622:100:9","trueBody":{"id":2409,"nodeType":"Block","src":"10644:78:9","statements":[{"expression":{"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10662:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2404,"nodeType":"ExpressionStatement","src":"10662:16:9"},{"expression":{"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2405,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"10696:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2408,"nodeType":"ExpressionStatement","src":"10696:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2411,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10739:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:9","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2427,"nodeType":"IfStatement","src":"10735:100:9","trueBody":{"id":2426,"nodeType":"Block","src":"10757:78:9","statements":[{"expression":{"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2416,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10775:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:9","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2421,"nodeType":"ExpressionStatement","src":"10775:16:9"},{"expression":{"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2422,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"10809:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2425,"nodeType":"ExpressionStatement","src":"10809:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2428,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10852:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2444,"nodeType":"IfStatement","src":"10848:100:9","trueBody":{"id":2443,"nodeType":"Block","src":"10870:78:9","statements":[{"expression":{"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10888:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2438,"nodeType":"ExpressionStatement","src":"10888:16:9"},{"expression":{"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2439,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"10922:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2442,"nodeType":"ExpressionStatement","src":"10922:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2445,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10965:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2455,"nodeType":"IfStatement","src":"10961:66:9","trueBody":{"id":2454,"nodeType":"Block","src":"10983:44:9","statements":[{"expression":{"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2450,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"11001:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2453,"nodeType":"ExpressionStatement","src":"11001:11:9"}]}}]},{"expression":{"id":2457,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"11053:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2338,"id":2458,"nodeType":"Return","src":"11046:13:9"}]},"documentation":{"id":2332,"nodeType":"StructuredDocumentation","src":"10031:114:9","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2460,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:9","nodeType":"FunctionDefinition","parameters":{"id":2335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2334,"mutability":"mutable","name":"value","nameLocation":"10173:5:9","nodeType":"VariableDeclaration","scope":2460,"src":"10165:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2333,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:9"},"returnParameters":{"id":2338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2460,"src":"10203:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2336,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:9"},"scope":2623,"src":"10150:916:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2495,"nodeType":"Block","src":"11301:167:9","statements":[{"id":2494,"nodeType":"UncheckedBlock","src":"11311:151:9","statements":[{"assignments":[2472],"declarations":[{"constant":false,"id":2472,"mutability":"mutable","name":"result","nameLocation":"11343:6:9","nodeType":"VariableDeclaration","scope":2494,"src":"11335:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2471,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2476,"initialValue":{"arguments":[{"id":2474,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"11358:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2473,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2460,2496],"referencedDeclaration":2460,"src":"11352:5:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11352:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2477,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"11385:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2478,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"11395:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2479,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"11407:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1764_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11416:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1762,"src":"11407:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2483,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"11428:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"11437:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:9","trueExpression":{"hexValue":"31","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2491,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2470,"id":2493,"nodeType":"Return","src":"11378:73:9"}]}]},"documentation":{"id":2461,"nodeType":"StructuredDocumentation","src":"11072:143:9","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2496,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:9","nodeType":"FunctionDefinition","parameters":{"id":2467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2463,"mutability":"mutable","name":"value","nameLocation":"11243:5:9","nodeType":"VariableDeclaration","scope":2496,"src":"11235:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2462,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2466,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:9","nodeType":"VariableDeclaration","scope":2496,"src":"11250:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2465,"nodeType":"UserDefinedTypeName","pathNode":{"id":2464,"name":"Rounding","nameLocations":["11250:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1764,"src":"11250:8:9"},"referencedDeclaration":1764,"src":"11250:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:9"},"returnParameters":{"id":2470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2496,"src":"11292:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2468,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:9"},"scope":2623,"src":"11220:248:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2582,"nodeType":"Block","src":"11782:600:9","statements":[{"assignments":[2505],"declarations":[{"constant":false,"id":2505,"mutability":"mutable","name":"result","nameLocation":"11800:6:9","nodeType":"VariableDeclaration","scope":2582,"src":"11792:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2504,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2507,"initialValue":{"hexValue":"30","id":2506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:9"},{"id":2579,"nodeType":"UncheckedBlock","src":"11820:533:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"11848:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2522,"nodeType":"IfStatement","src":"11844:98:9","trueBody":{"id":2521,"nodeType":"Block","src":"11866:76:9","statements":[{"expression":{"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"11884:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2516,"nodeType":"ExpressionStatement","src":"11884:13:9"},{"expression":{"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2517,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"11915:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2520,"nodeType":"ExpressionStatement","src":"11915:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2523,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"11959:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2537,"nodeType":"IfStatement","src":"11955:95:9","trueBody":{"id":2536,"nodeType":"Block","src":"11976:74:9","statements":[{"expression":{"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2528,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"11994:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2531,"nodeType":"ExpressionStatement","src":"11994:12:9"},{"expression":{"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2532,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"12024:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2535,"nodeType":"ExpressionStatement","src":"12024:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"12067:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2552,"nodeType":"IfStatement","src":"12063:95:9","trueBody":{"id":2551,"nodeType":"Block","src":"12084:74:9","statements":[{"expression":{"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2543,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"12102:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2546,"nodeType":"ExpressionStatement","src":"12102:12:9"},{"expression":{"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"12132:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2550,"nodeType":"ExpressionStatement","src":"12132:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2553,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"12175:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2567,"nodeType":"IfStatement","src":"12171:95:9","trueBody":{"id":2566,"nodeType":"Block","src":"12192:74:9","statements":[{"expression":{"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"12210:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2561,"nodeType":"ExpressionStatement","src":"12210:12:9"},{"expression":{"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2562,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"12240:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2565,"nodeType":"ExpressionStatement","src":"12240:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2568,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"12283:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2578,"nodeType":"IfStatement","src":"12279:64:9","trueBody":{"id":2577,"nodeType":"Block","src":"12299:44:9","statements":[{"expression":{"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2573,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"12317:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2576,"nodeType":"ExpressionStatement","src":"12317:11:9"}]}}]},{"expression":{"id":2580,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"12369:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2503,"id":2581,"nodeType":"Return","src":"12362:13:9"}]},"documentation":{"id":2497,"nodeType":"StructuredDocumentation","src":"11474:240:9","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2583,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:9","nodeType":"FunctionDefinition","parameters":{"id":2500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2499,"mutability":"mutable","name":"value","nameLocation":"11743:5:9","nodeType":"VariableDeclaration","scope":2583,"src":"11735:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2498,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:9"},"returnParameters":{"id":2503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2583,"src":"11773:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2501,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:9"},"scope":2623,"src":"11719:663:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2621,"nodeType":"Block","src":"12619:174:9","statements":[{"id":2620,"nodeType":"UncheckedBlock","src":"12629:158:9","statements":[{"assignments":[2595],"declarations":[{"constant":false,"id":2595,"mutability":"mutable","name":"result","nameLocation":"12661:6:9","nodeType":"VariableDeclaration","scope":2620,"src":"12653:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2594,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2599,"initialValue":{"arguments":[{"id":2597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"12677:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2596,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2583,2622],"referencedDeclaration":2583,"src":"12670:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12670:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2600,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"12704:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2601,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"12714:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2602,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"12726:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1764_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2603,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12735:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1762,"src":"12726:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2606,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"12747:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2609,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2611,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"12762:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:9","trueExpression":{"hexValue":"31","id":2614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2617,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2593,"id":2619,"nodeType":"Return","src":"12697:79:9"}]}]},"documentation":{"id":2584,"nodeType":"StructuredDocumentation","src":"12388:144:9","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2622,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:9","nodeType":"FunctionDefinition","parameters":{"id":2590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2586,"mutability":"mutable","name":"value","nameLocation":"12561:5:9","nodeType":"VariableDeclaration","scope":2622,"src":"12553:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2585,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2589,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:9","nodeType":"VariableDeclaration","scope":2622,"src":"12568:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2588,"nodeType":"UserDefinedTypeName","pathNode":{"id":2587,"name":"Rounding","nameLocations":["12568:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1764,"src":"12568:8:9"},"referencedDeclaration":1764,"src":"12568:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:9"},"returnParameters":{"id":2593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2592,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2622,"src":"12610:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2591,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:9"},"scope":2623,"src":"12537:256:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2624,"src":"202:12593:9","usedErrors":[]}],"src":"103:12693:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[2728]},"id":2729,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2625,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2626,"nodeType":"StructuredDocumentation","src":"134:80:10","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2728,"linearizedBaseContracts":[2728],"name":"SignedMathUpgradeable","nameLocation":"223:21:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":2643,"nodeType":"Block","src":"386:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2636,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"403:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2637,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"407:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2640,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"415:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:10","trueExpression":{"id":2639,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"411:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2635,"id":2642,"nodeType":"Return","src":"396:20:10"}]},"documentation":{"id":2627,"nodeType":"StructuredDocumentation","src":"251:66:10","text":" @dev Returns the largest of two signed numbers."},"id":2644,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:10","nodeType":"FunctionDefinition","parameters":{"id":2632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2629,"mutability":"mutable","name":"a","nameLocation":"342:1:10","nodeType":"VariableDeclaration","scope":2644,"src":"335:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2628,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2631,"mutability":"mutable","name":"b","nameLocation":"352:1:10","nodeType":"VariableDeclaration","scope":2644,"src":"345:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2630,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:10"},"returnParameters":{"id":2635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2644,"src":"378:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2633,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:10"},"scope":2728,"src":"322:101:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2661,"nodeType":"Block","src":"565:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2654,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"582:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2655,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"586:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2658,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"594:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:10","trueExpression":{"id":2657,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"590:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2653,"id":2660,"nodeType":"Return","src":"575:20:10"}]},"documentation":{"id":2645,"nodeType":"StructuredDocumentation","src":"429:67:10","text":" @dev Returns the smallest of two signed numbers."},"id":2662,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:10","nodeType":"FunctionDefinition","parameters":{"id":2650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2647,"mutability":"mutable","name":"a","nameLocation":"521:1:10","nodeType":"VariableDeclaration","scope":2662,"src":"514:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2646,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2649,"mutability":"mutable","name":"b","nameLocation":"531:1:10","nodeType":"VariableDeclaration","scope":2662,"src":"524:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2648,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:10"},"returnParameters":{"id":2653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2652,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2662,"src":"557:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2651,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:10"},"scope":2728,"src":"501:101:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2705,"nodeType":"Block","src":"807:162:10","statements":[{"assignments":[2673],"declarations":[{"constant":false,"id":2673,"mutability":"mutable","name":"x","nameLocation":"876:1:10","nodeType":"VariableDeclaration","scope":2705,"src":"869:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2672,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2686,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2674,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"881:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2675,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"885:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2677,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2678,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"892:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2679,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"896:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2681,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2684,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:10"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2687,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"921:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2692,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"941:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:10","typeDescriptions":{}}},"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:10","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2688,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:10","typeDescriptions":{}}},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2697,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"955:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2698,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"959:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2700,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2702,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2671,"id":2704,"nodeType":"Return","src":"914:48:10"}]},"documentation":{"id":2663,"nodeType":"StructuredDocumentation","src":"608:126:10","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2706,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:10","nodeType":"FunctionDefinition","parameters":{"id":2668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2665,"mutability":"mutable","name":"a","nameLocation":"763:1:10","nodeType":"VariableDeclaration","scope":2706,"src":"756:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2664,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2667,"mutability":"mutable","name":"b","nameLocation":"773:1:10","nodeType":"VariableDeclaration","scope":2706,"src":"766:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2666,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:10"},"returnParameters":{"id":2671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2706,"src":"799:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2669,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:10"},"scope":2728,"src":"739:230:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2726,"nodeType":"Block","src":"1113:158:10","statements":[{"id":2725,"nodeType":"UncheckedBlock","src":"1123:142:10","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2716,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"1238:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:10","subExpression":{"id":2720,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"1252:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:10","trueExpression":{"id":2719,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"1247:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2715,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2714,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:10","typeDescriptions":{}}},"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2713,"id":2724,"nodeType":"Return","src":"1223:31:10"}]}]},"documentation":{"id":2707,"nodeType":"StructuredDocumentation","src":"975:78:10","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2727,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:10","nodeType":"FunctionDefinition","parameters":{"id":2710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2709,"mutability":"mutable","name":"n","nameLocation":"1078:1:10","nodeType":"VariableDeclaration","scope":2727,"src":"1071:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2708,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:10"},"returnParameters":{"id":2713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2727,"src":"1104:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2711,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:10"},"scope":2728,"src":"1058:213:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2729,"src":"215:1058:10","usedErrors":[]}],"src":"109:1165:10"},"id":10},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[3440],"ERC20":[3315],"IERC20":[3393],"IERC20Metadata":[3418]},"id":3316,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2730,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:11"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":2731,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3316,"sourceUnit":3394,"src":"130:22:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":2732,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3316,"sourceUnit":3419,"src":"153:41:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":2733,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3316,"sourceUnit":3441,"src":"195:33:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2735,"name":"Context","nameLocations":["1419:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":3440,"src":"1419:7:11"},"id":2736,"nodeType":"InheritanceSpecifier","src":"1419:7:11"},{"baseName":{"id":2737,"name":"IERC20","nameLocations":["1428:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":3393,"src":"1428:6:11"},"id":2738,"nodeType":"InheritanceSpecifier","src":"1428:6:11"},{"baseName":{"id":2739,"name":"IERC20Metadata","nameLocations":["1436:14:11"],"nodeType":"IdentifierPath","referencedDeclaration":3418,"src":"1436:14:11"},"id":2740,"nodeType":"InheritanceSpecifier","src":"1436:14:11"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":2734,"nodeType":"StructuredDocumentation","src":"230:1170:11","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":3315,"linearizedBaseContracts":[3315,3418,3393,3440],"name":"ERC20","nameLocation":"1410:5:11","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2744,"mutability":"mutable","name":"_balances","nameLocation":"1493:9:11","nodeType":"VariableDeclaration","scope":3315,"src":"1457:45:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2743,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2741,"name":"address","nodeType":"ElementaryTypeName","src":"1465:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1457:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2742,"name":"uint256","nodeType":"ElementaryTypeName","src":"1476:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":2750,"mutability":"mutable","name":"_allowances","nameLocation":"1565:11:11","nodeType":"VariableDeclaration","scope":3315,"src":"1509:67:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":2749,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2745,"name":"address","nodeType":"ElementaryTypeName","src":"1517:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1509:47:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2748,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2746,"name":"address","nodeType":"ElementaryTypeName","src":"1536:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1528:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2747,"name":"uint256","nodeType":"ElementaryTypeName","src":"1547:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":2752,"mutability":"mutable","name":"_totalSupply","nameLocation":"1599:12:11","nodeType":"VariableDeclaration","scope":3315,"src":"1583:28:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2751,"name":"uint256","nodeType":"ElementaryTypeName","src":"1583:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2754,"mutability":"mutable","name":"_name","nameLocation":"1633:5:11","nodeType":"VariableDeclaration","scope":3315,"src":"1618:20:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2753,"name":"string","nodeType":"ElementaryTypeName","src":"1618:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2756,"mutability":"mutable","name":"_symbol","nameLocation":"1659:7:11","nodeType":"VariableDeclaration","scope":3315,"src":"1644:22:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2755,"name":"string","nodeType":"ElementaryTypeName","src":"1644:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":2772,"nodeType":"Block","src":"2032:57:11","statements":[{"expression":{"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2764,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"2042:5:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2765,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"2050:5:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2042:13:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2767,"nodeType":"ExpressionStatement","src":"2042:13:11"},{"expression":{"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2768,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"2065:7:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2769,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"2075:7:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2065:17:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2771,"nodeType":"ExpressionStatement","src":"2065:17:11"}]},"documentation":{"id":2757,"nodeType":"StructuredDocumentation","src":"1673:298:11","text":" @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."},"id":2773,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2759,"mutability":"mutable","name":"name_","nameLocation":"2002:5:11","nodeType":"VariableDeclaration","scope":2773,"src":"1988:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2758,"name":"string","nodeType":"ElementaryTypeName","src":"1988:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2761,"mutability":"mutable","name":"symbol_","nameLocation":"2023:7:11","nodeType":"VariableDeclaration","scope":2773,"src":"2009:21:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2760,"name":"string","nodeType":"ElementaryTypeName","src":"2009:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1987:44:11"},"returnParameters":{"id":2763,"nodeType":"ParameterList","parameters":[],"src":"2032:0:11"},"scope":3315,"src":"1976:113:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3405],"body":{"id":2782,"nodeType":"Block","src":"2223:29:11","statements":[{"expression":{"id":2780,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"2240:5:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2779,"id":2781,"nodeType":"Return","src":"2233:12:11"}]},"documentation":{"id":2774,"nodeType":"StructuredDocumentation","src":"2095:54:11","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":2783,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2163:4:11","nodeType":"FunctionDefinition","overrides":{"id":2776,"nodeType":"OverrideSpecifier","overrides":[],"src":"2190:8:11"},"parameters":{"id":2775,"nodeType":"ParameterList","parameters":[],"src":"2167:2:11"},"returnParameters":{"id":2779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2783,"src":"2208:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2777,"name":"string","nodeType":"ElementaryTypeName","src":"2208:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2207:15:11"},"scope":3315,"src":"2154:98:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3411],"body":{"id":2792,"nodeType":"Block","src":"2436:31:11","statements":[{"expression":{"id":2790,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"2453:7:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2789,"id":2791,"nodeType":"Return","src":"2446:14:11"}]},"documentation":{"id":2784,"nodeType":"StructuredDocumentation","src":"2258:102:11","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":2793,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2374:6:11","nodeType":"FunctionDefinition","overrides":{"id":2786,"nodeType":"OverrideSpecifier","overrides":[],"src":"2403:8:11"},"parameters":{"id":2785,"nodeType":"ParameterList","parameters":[],"src":"2380:2:11"},"returnParameters":{"id":2789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2788,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2793,"src":"2421:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2787,"name":"string","nodeType":"ElementaryTypeName","src":"2421:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2420:15:11"},"scope":3315,"src":"2365:102:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3417],"body":{"id":2802,"nodeType":"Block","src":"3156:26:11","statements":[{"expression":{"hexValue":"3138","id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3173:2:11","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":2799,"id":2801,"nodeType":"Return","src":"3166:9:11"}]},"documentation":{"id":2794,"nodeType":"StructuredDocumentation","src":"2473:613:11","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":2803,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3100:8:11","nodeType":"FunctionDefinition","overrides":{"id":2796,"nodeType":"OverrideSpecifier","overrides":[],"src":"3131:8:11"},"parameters":{"id":2795,"nodeType":"ParameterList","parameters":[],"src":"3108:2:11"},"returnParameters":{"id":2799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2803,"src":"3149:5:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2797,"name":"uint8","nodeType":"ElementaryTypeName","src":"3149:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3148:7:11"},"scope":3315,"src":"3091:91:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3342],"body":{"id":2812,"nodeType":"Block","src":"3312:36:11","statements":[{"expression":{"id":2810,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"3329:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2809,"id":2811,"nodeType":"Return","src":"3322:19:11"}]},"documentation":{"id":2804,"nodeType":"StructuredDocumentation","src":"3188:49:11","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":2813,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3251:11:11","nodeType":"FunctionDefinition","overrides":{"id":2806,"nodeType":"OverrideSpecifier","overrides":[],"src":"3285:8:11"},"parameters":{"id":2805,"nodeType":"ParameterList","parameters":[],"src":"3262:2:11"},"returnParameters":{"id":2809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2808,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2813,"src":"3303:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2807,"name":"uint256","nodeType":"ElementaryTypeName","src":"3303:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3302:9:11"},"scope":3315,"src":"3242:106:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3350],"body":{"id":2826,"nodeType":"Block","src":"3489:42:11","statements":[{"expression":{"baseExpression":{"id":2822,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"3506:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2824,"indexExpression":{"id":2823,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"3516:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3506:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2821,"id":2825,"nodeType":"Return","src":"3499:25:11"}]},"documentation":{"id":2814,"nodeType":"StructuredDocumentation","src":"3354:47:11","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":2827,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3415:9:11","nodeType":"FunctionDefinition","overrides":{"id":2818,"nodeType":"OverrideSpecifier","overrides":[],"src":"3462:8:11"},"parameters":{"id":2817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2816,"mutability":"mutable","name":"account","nameLocation":"3433:7:11","nodeType":"VariableDeclaration","scope":2827,"src":"3425:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2815,"name":"address","nodeType":"ElementaryTypeName","src":"3425:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3424:17:11"},"returnParameters":{"id":2821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2820,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2827,"src":"3480:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2819,"name":"uint256","nodeType":"ElementaryTypeName","src":"3480:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3479:9:11"},"scope":3315,"src":"3406:125:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3360],"body":{"id":2851,"nodeType":"Block","src":"3812:104:11","statements":[{"assignments":[2839],"declarations":[{"constant":false,"id":2839,"mutability":"mutable","name":"owner","nameLocation":"3830:5:11","nodeType":"VariableDeclaration","scope":2851,"src":"3822:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2838,"name":"address","nodeType":"ElementaryTypeName","src":"3822:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2842,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2840,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"3838:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3838:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3822:28:11"},{"expression":{"arguments":[{"id":2844,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"3870:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2845,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"3877:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2846,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"3881:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2843,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"3860:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3860:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2848,"nodeType":"ExpressionStatement","src":"3860:28:11"},{"expression":{"hexValue":"74727565","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3905:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2837,"id":2850,"nodeType":"Return","src":"3898:11:11"}]},"documentation":{"id":2828,"nodeType":"StructuredDocumentation","src":"3537:185:11","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":2852,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3736:8:11","nodeType":"FunctionDefinition","overrides":{"id":2834,"nodeType":"OverrideSpecifier","overrides":[],"src":"3788:8:11"},"parameters":{"id":2833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2830,"mutability":"mutable","name":"to","nameLocation":"3753:2:11","nodeType":"VariableDeclaration","scope":2852,"src":"3745:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2829,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2832,"mutability":"mutable","name":"amount","nameLocation":"3765:6:11","nodeType":"VariableDeclaration","scope":2852,"src":"3757:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2831,"name":"uint256","nodeType":"ElementaryTypeName","src":"3757:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3744:28:11"},"returnParameters":{"id":2837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2836,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2852,"src":"3806:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2835,"name":"bool","nodeType":"ElementaryTypeName","src":"3806:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3805:6:11"},"scope":3315,"src":"3727:189:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3370],"body":{"id":2869,"nodeType":"Block","src":"4072:51:11","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":2863,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"4089:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":2865,"indexExpression":{"id":2864,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"4101:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4089:18:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2867,"indexExpression":{"id":2866,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2857,"src":"4108:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4089:27:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2862,"id":2868,"nodeType":"Return","src":"4082:34:11"}]},"documentation":{"id":2853,"nodeType":"StructuredDocumentation","src":"3922:47:11","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":2870,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3983:9:11","nodeType":"FunctionDefinition","overrides":{"id":2859,"nodeType":"OverrideSpecifier","overrides":[],"src":"4045:8:11"},"parameters":{"id":2858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2855,"mutability":"mutable","name":"owner","nameLocation":"4001:5:11","nodeType":"VariableDeclaration","scope":2870,"src":"3993:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2854,"name":"address","nodeType":"ElementaryTypeName","src":"3993:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2857,"mutability":"mutable","name":"spender","nameLocation":"4016:7:11","nodeType":"VariableDeclaration","scope":2870,"src":"4008:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2856,"name":"address","nodeType":"ElementaryTypeName","src":"4008:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3992:32:11"},"returnParameters":{"id":2862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2870,"src":"4063:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2860,"name":"uint256","nodeType":"ElementaryTypeName","src":"4063:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4062:9:11"},"scope":3315,"src":"3974:149:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3380],"body":{"id":2894,"nodeType":"Block","src":"4520:108:11","statements":[{"assignments":[2882],"declarations":[{"constant":false,"id":2882,"mutability":"mutable","name":"owner","nameLocation":"4538:5:11","nodeType":"VariableDeclaration","scope":2894,"src":"4530:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2881,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2885,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2883,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"4546:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4546:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4530:28:11"},{"expression":{"arguments":[{"id":2887,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2882,"src":"4577:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2888,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"4584:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2889,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"4593:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2886,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"4568:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4568:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2891,"nodeType":"ExpressionStatement","src":"4568:32:11"},{"expression":{"hexValue":"74727565","id":2892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4617:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2880,"id":2893,"nodeType":"Return","src":"4610:11:11"}]},"documentation":{"id":2871,"nodeType":"StructuredDocumentation","src":"4129:297:11","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":2895,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4440:7:11","nodeType":"FunctionDefinition","overrides":{"id":2877,"nodeType":"OverrideSpecifier","overrides":[],"src":"4496:8:11"},"parameters":{"id":2876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2873,"mutability":"mutable","name":"spender","nameLocation":"4456:7:11","nodeType":"VariableDeclaration","scope":2895,"src":"4448:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2872,"name":"address","nodeType":"ElementaryTypeName","src":"4448:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2875,"mutability":"mutable","name":"amount","nameLocation":"4473:6:11","nodeType":"VariableDeclaration","scope":2895,"src":"4465:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2874,"name":"uint256","nodeType":"ElementaryTypeName","src":"4465:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4447:33:11"},"returnParameters":{"id":2880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2879,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2895,"src":"4514:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2878,"name":"bool","nodeType":"ElementaryTypeName","src":"4514:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4513:6:11"},"scope":3315,"src":"4431:197:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3392],"body":{"id":2927,"nodeType":"Block","src":"5323:153:11","statements":[{"assignments":[2909],"declarations":[{"constant":false,"id":2909,"mutability":"mutable","name":"spender","nameLocation":"5341:7:11","nodeType":"VariableDeclaration","scope":2927,"src":"5333:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2908,"name":"address","nodeType":"ElementaryTypeName","src":"5333:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2912,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2910,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"5351:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5351:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5333:30:11"},{"expression":{"arguments":[{"id":2914,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"5389:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2915,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"5395:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2916,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"5404:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2913,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"5373:15:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:38:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2918,"nodeType":"ExpressionStatement","src":"5373:38:11"},{"expression":{"arguments":[{"id":2920,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"5431:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2921,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"5437:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2922,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"5441:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2919,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"5421:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5421:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2924,"nodeType":"ExpressionStatement","src":"5421:27:11"},{"expression":{"hexValue":"74727565","id":2925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5465:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2907,"id":2926,"nodeType":"Return","src":"5458:11:11"}]},"documentation":{"id":2896,"nodeType":"StructuredDocumentation","src":"4634:551:11","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":2928,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5199:12:11","nodeType":"FunctionDefinition","overrides":{"id":2904,"nodeType":"OverrideSpecifier","overrides":[],"src":"5299:8:11"},"parameters":{"id":2903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2898,"mutability":"mutable","name":"from","nameLocation":"5229:4:11","nodeType":"VariableDeclaration","scope":2928,"src":"5221:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2897,"name":"address","nodeType":"ElementaryTypeName","src":"5221:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2900,"mutability":"mutable","name":"to","nameLocation":"5251:2:11","nodeType":"VariableDeclaration","scope":2928,"src":"5243:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2899,"name":"address","nodeType":"ElementaryTypeName","src":"5243:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2902,"mutability":"mutable","name":"amount","nameLocation":"5271:6:11","nodeType":"VariableDeclaration","scope":2928,"src":"5263:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2901,"name":"uint256","nodeType":"ElementaryTypeName","src":"5263:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5211:72:11"},"returnParameters":{"id":2907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2928,"src":"5317:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2905,"name":"bool","nodeType":"ElementaryTypeName","src":"5317:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5316:6:11"},"scope":3315,"src":"5190:286:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2956,"nodeType":"Block","src":"5965:140:11","statements":[{"assignments":[2939],"declarations":[{"constant":false,"id":2939,"mutability":"mutable","name":"owner","nameLocation":"5983:5:11","nodeType":"VariableDeclaration","scope":2956,"src":"5975:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2938,"name":"address","nodeType":"ElementaryTypeName","src":"5975:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2942,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2940,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"5991:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5991:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5975:28:11"},{"expression":{"arguments":[{"id":2944,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"6022:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2945,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"6029:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2947,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"6048:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2948,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"6055:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2946,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"6038:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6038:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2950,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"6066:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6038:38:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2943,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"6013:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6013:64:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2953,"nodeType":"ExpressionStatement","src":"6013:64:11"},{"expression":{"hexValue":"74727565","id":2954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6094:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2937,"id":2955,"nodeType":"Return","src":"6087:11:11"}]},"documentation":{"id":2929,"nodeType":"StructuredDocumentation","src":"5482:384:11","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":2957,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"5880:17:11","nodeType":"FunctionDefinition","parameters":{"id":2934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2931,"mutability":"mutable","name":"spender","nameLocation":"5906:7:11","nodeType":"VariableDeclaration","scope":2957,"src":"5898:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2930,"name":"address","nodeType":"ElementaryTypeName","src":"5898:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2933,"mutability":"mutable","name":"addedValue","nameLocation":"5923:10:11","nodeType":"VariableDeclaration","scope":2957,"src":"5915:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2932,"name":"uint256","nodeType":"ElementaryTypeName","src":"5915:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5897:37:11"},"returnParameters":{"id":2937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2957,"src":"5959:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2935,"name":"bool","nodeType":"ElementaryTypeName","src":"5959:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5958:6:11"},"scope":3315,"src":"5871:234:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2997,"nodeType":"Block","src":"6691:328:11","statements":[{"assignments":[2968],"declarations":[{"constant":false,"id":2968,"mutability":"mutable","name":"owner","nameLocation":"6709:5:11","nodeType":"VariableDeclaration","scope":2997,"src":"6701:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2967,"name":"address","nodeType":"ElementaryTypeName","src":"6701:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2971,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2969,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"6717:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6717:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6701:28:11"},{"assignments":[2973],"declarations":[{"constant":false,"id":2973,"mutability":"mutable","name":"currentAllowance","nameLocation":"6747:16:11","nodeType":"VariableDeclaration","scope":2997,"src":"6739:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2972,"name":"uint256","nodeType":"ElementaryTypeName","src":"6739:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2978,"initialValue":{"arguments":[{"id":2975,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"6776:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2976,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"6783:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2974,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"6766:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6739:52:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2980,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"6809:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2981,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2962,"src":"6829:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6809:35:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":2983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6846:39:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":2979,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6801:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:85:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2985,"nodeType":"ExpressionStatement","src":"6801:85:11"},{"id":2994,"nodeType":"UncheckedBlock","src":"6896:95:11","statements":[{"expression":{"arguments":[{"id":2987,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"6929:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2988,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"6936:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2989,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"6945:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2990,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2962,"src":"6964:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6945:34:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2986,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"6920:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6920:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2993,"nodeType":"ExpressionStatement","src":"6920:60:11"}]},{"expression":{"hexValue":"74727565","id":2995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7008:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2966,"id":2996,"nodeType":"Return","src":"7001:11:11"}]},"documentation":{"id":2958,"nodeType":"StructuredDocumentation","src":"6111:476:11","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":2998,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6601:17:11","nodeType":"FunctionDefinition","parameters":{"id":2963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2960,"mutability":"mutable","name":"spender","nameLocation":"6627:7:11","nodeType":"VariableDeclaration","scope":2998,"src":"6619:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2959,"name":"address","nodeType":"ElementaryTypeName","src":"6619:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2962,"mutability":"mutable","name":"subtractedValue","nameLocation":"6644:15:11","nodeType":"VariableDeclaration","scope":2998,"src":"6636:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2961,"name":"uint256","nodeType":"ElementaryTypeName","src":"6636:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6618:42:11"},"returnParameters":{"id":2966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2998,"src":"6685:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2964,"name":"bool","nodeType":"ElementaryTypeName","src":"6685:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6684:6:11"},"scope":3315,"src":"6592:427:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3074,"nodeType":"Block","src":"7581:710:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3009,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"7599:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7607:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3010,"name":"address","nodeType":"ElementaryTypeName","src":"7607:7:11","typeDescriptions":{}}},"id":3013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7607:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7599:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7619:39:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":3008,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7591:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7591:68:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3017,"nodeType":"ExpressionStatement","src":"7591:68:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3019,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"7677:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7691:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7683:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3020,"name":"address","nodeType":"ElementaryTypeName","src":"7683:7:11","typeDescriptions":{}}},"id":3023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7683:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7677:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":3025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7695:37:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":3018,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7669:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7669:64:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3027,"nodeType":"ExpressionStatement","src":"7669:64:11"},{"expression":{"arguments":[{"id":3029,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"7765:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3030,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"7771:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3031,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"7775:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3028,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3303,"src":"7744:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7744:38:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3033,"nodeType":"ExpressionStatement","src":"7744:38:11"},{"assignments":[3035],"declarations":[{"constant":false,"id":3035,"mutability":"mutable","name":"fromBalance","nameLocation":"7801:11:11","nodeType":"VariableDeclaration","scope":3074,"src":"7793:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3034,"name":"uint256","nodeType":"ElementaryTypeName","src":"7793:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3039,"initialValue":{"baseExpression":{"id":3036,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"7815:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3038,"indexExpression":{"id":3037,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"7825:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7815:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7793:37:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3041,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"7848:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3042,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"7863:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7848:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":3044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7871:40:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":3040,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7840:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7840:72:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3046,"nodeType":"ExpressionStatement","src":"7840:72:11"},{"id":3061,"nodeType":"UncheckedBlock","src":"7922:273:11","statements":[{"expression":{"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3047,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"7946:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3049,"indexExpression":{"id":3048,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"7956:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7946:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3050,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"7964:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3051,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"7978:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7964:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7946:38:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3054,"nodeType":"ExpressionStatement","src":"7946:38:11"},{"expression":{"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3055,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"8161:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3057,"indexExpression":{"id":3056,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"8171:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8161:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3058,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"8178:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8161:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3060,"nodeType":"ExpressionStatement","src":"8161:23:11"}]},{"eventCall":{"arguments":[{"id":3063,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"8219:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3064,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"8225:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3065,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"8229:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3062,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3327,"src":"8210:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8210:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3067,"nodeType":"EmitStatement","src":"8205:31:11"},{"expression":{"arguments":[{"id":3069,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"8267:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3070,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"8273:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3071,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"8277:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3068,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3314,"src":"8247:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8247:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3073,"nodeType":"ExpressionStatement","src":"8247:37:11"}]},"documentation":{"id":2999,"nodeType":"StructuredDocumentation","src":"7025:443:11","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":3075,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7482:9:11","nodeType":"FunctionDefinition","parameters":{"id":3006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3001,"mutability":"mutable","name":"from","nameLocation":"7509:4:11","nodeType":"VariableDeclaration","scope":3075,"src":"7501:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3000,"name":"address","nodeType":"ElementaryTypeName","src":"7501:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3003,"mutability":"mutable","name":"to","nameLocation":"7531:2:11","nodeType":"VariableDeclaration","scope":3075,"src":"7523:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3002,"name":"address","nodeType":"ElementaryTypeName","src":"7523:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3005,"mutability":"mutable","name":"amount","nameLocation":"7551:6:11","nodeType":"VariableDeclaration","scope":3075,"src":"7543:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3004,"name":"uint256","nodeType":"ElementaryTypeName","src":"7543:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7491:72:11"},"returnParameters":{"id":3007,"nodeType":"ParameterList","parameters":[],"src":"7581:0:11"},"scope":3315,"src":"7473:818:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3131,"nodeType":"Block","src":"8632:470:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3084,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"8650:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8669:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8661:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3085,"name":"address","nodeType":"ElementaryTypeName","src":"8661:7:11","typeDescriptions":{}}},"id":3088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8661:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8650:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":3090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8673:33:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":3083,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8642:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8642:65:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3092,"nodeType":"ExpressionStatement","src":"8642:65:11"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8747:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3095,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8739:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3094,"name":"address","nodeType":"ElementaryTypeName","src":"8739:7:11","typeDescriptions":{}}},"id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8739:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3098,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"8751:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3099,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"8760:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3093,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3303,"src":"8718:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8718:49:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3101,"nodeType":"ExpressionStatement","src":"8718:49:11"},{"expression":{"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3102,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"8778:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3103,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"8794:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8778:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3105,"nodeType":"ExpressionStatement","src":"8778:22:11"},{"id":3112,"nodeType":"UncheckedBlock","src":"8810:175:11","statements":[{"expression":{"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3106,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"8946:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3108,"indexExpression":{"id":3107,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"8956:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8946:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3109,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"8968:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8946:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3111,"nodeType":"ExpressionStatement","src":"8946:28:11"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9016:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9008:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3114,"name":"address","nodeType":"ElementaryTypeName","src":"9008:7:11","typeDescriptions":{}}},"id":3117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9008:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3118,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"9020:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3119,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"9029:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3113,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3327,"src":"8999:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3121,"nodeType":"EmitStatement","src":"8994:42:11"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9067:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3123,"name":"address","nodeType":"ElementaryTypeName","src":"9067:7:11","typeDescriptions":{}}},"id":3126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9067:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3127,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"9079:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3128,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"9088:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3122,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3314,"src":"9047:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9047:48:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3130,"nodeType":"ExpressionStatement","src":"9047:48:11"}]},"documentation":{"id":3076,"nodeType":"StructuredDocumentation","src":"8297:265:11","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":3132,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8576:5:11","nodeType":"FunctionDefinition","parameters":{"id":3081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3078,"mutability":"mutable","name":"account","nameLocation":"8590:7:11","nodeType":"VariableDeclaration","scope":3132,"src":"8582:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3077,"name":"address","nodeType":"ElementaryTypeName","src":"8582:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3080,"mutability":"mutable","name":"amount","nameLocation":"8607:6:11","nodeType":"VariableDeclaration","scope":3132,"src":"8599:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3079,"name":"uint256","nodeType":"ElementaryTypeName","src":"8599:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8581:33:11"},"returnParameters":{"id":3082,"nodeType":"ParameterList","parameters":[],"src":"8632:0:11"},"scope":3315,"src":"8567:535:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3203,"nodeType":"Block","src":"9487:594:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3141,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"9505:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9524:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9516:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3142,"name":"address","nodeType":"ElementaryTypeName","src":"9516:7:11","typeDescriptions":{}}},"id":3145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9516:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9505:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":3147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9528:35:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":3140,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9497:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9497:67:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3149,"nodeType":"ExpressionStatement","src":"9497:67:11"},{"expression":{"arguments":[{"id":3151,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"9596:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9613:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3153,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9605:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3152,"name":"address","nodeType":"ElementaryTypeName","src":"9605:7:11","typeDescriptions":{}}},"id":3155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9605:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3156,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"9617:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3150,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3303,"src":"9575:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9575:49:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3158,"nodeType":"ExpressionStatement","src":"9575:49:11"},{"assignments":[3160],"declarations":[{"constant":false,"id":3160,"mutability":"mutable","name":"accountBalance","nameLocation":"9643:14:11","nodeType":"VariableDeclaration","scope":3203,"src":"9635:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3159,"name":"uint256","nodeType":"ElementaryTypeName","src":"9635:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3164,"initialValue":{"baseExpression":{"id":3161,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"9660:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3163,"indexExpression":{"id":3162,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"9670:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9660:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9635:43:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3166,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"9696:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3167,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"9714:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9696:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":3169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9722:36:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":3165,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9688:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9688:71:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3171,"nodeType":"ExpressionStatement","src":"9688:71:11"},{"id":3184,"nodeType":"UncheckedBlock","src":"9769:194:11","statements":[{"expression":{"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3172,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"9793:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3174,"indexExpression":{"id":3173,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"9803:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9793:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3175,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"9814:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3176,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"9831:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9814:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9793:44:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3179,"nodeType":"ExpressionStatement","src":"9793:44:11"},{"expression":{"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3180,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"9930:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3181,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"9946:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9930:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3183,"nodeType":"ExpressionStatement","src":"9930:22:11"}]},{"eventCall":{"arguments":[{"id":3186,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"9987:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10004:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9996:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3187,"name":"address","nodeType":"ElementaryTypeName","src":"9996:7:11","typeDescriptions":{}}},"id":3190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9996:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3191,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"10008:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3185,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3327,"src":"9978:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9978:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3193,"nodeType":"EmitStatement","src":"9973:42:11"},{"expression":{"arguments":[{"id":3195,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"10046:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10063:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10055:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3196,"name":"address","nodeType":"ElementaryTypeName","src":"10055:7:11","typeDescriptions":{}}},"id":3199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10055:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3200,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"10067:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3194,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3314,"src":"10026:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10026:48:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3202,"nodeType":"ExpressionStatement","src":"10026:48:11"}]},"documentation":{"id":3133,"nodeType":"StructuredDocumentation","src":"9108:309:11","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":3204,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9431:5:11","nodeType":"FunctionDefinition","parameters":{"id":3138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3135,"mutability":"mutable","name":"account","nameLocation":"9445:7:11","nodeType":"VariableDeclaration","scope":3204,"src":"9437:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3134,"name":"address","nodeType":"ElementaryTypeName","src":"9437:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3137,"mutability":"mutable","name":"amount","nameLocation":"9462:6:11","nodeType":"VariableDeclaration","scope":3204,"src":"9454:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3136,"name":"uint256","nodeType":"ElementaryTypeName","src":"9454:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9436:33:11"},"returnParameters":{"id":3139,"nodeType":"ParameterList","parameters":[],"src":"9487:0:11"},"scope":3315,"src":"9422:659:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3248,"nodeType":"Block","src":"10617:257:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3215,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"10635:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10652:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10644:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3216,"name":"address","nodeType":"ElementaryTypeName","src":"10644:7:11","typeDescriptions":{}}},"id":3219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10644:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10635:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":3221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10656:38:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":3214,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10627:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10627:68:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3223,"nodeType":"ExpressionStatement","src":"10627:68:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3225,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"10713:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10732:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3227,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10724:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3226,"name":"address","nodeType":"ElementaryTypeName","src":"10724:7:11","typeDescriptions":{}}},"id":3229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10724:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10713:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":3231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10736:36:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":3224,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10705:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10705:68:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3233,"nodeType":"ExpressionStatement","src":"10705:68:11"},{"expression":{"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3234,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"10784:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":3237,"indexExpression":{"id":3235,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"10796:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10784:18:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3238,"indexExpression":{"id":3236,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"10803:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10784:27:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3239,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"10814:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10784:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3241,"nodeType":"ExpressionStatement","src":"10784:36:11"},{"eventCall":{"arguments":[{"id":3243,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"10844:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3244,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"10851:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3245,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"10860:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3242,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"10835:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10835:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3247,"nodeType":"EmitStatement","src":"10830:37:11"}]},"documentation":{"id":3205,"nodeType":"StructuredDocumentation","src":"10087:412:11","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":3249,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10513:8:11","nodeType":"FunctionDefinition","parameters":{"id":3212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3207,"mutability":"mutable","name":"owner","nameLocation":"10539:5:11","nodeType":"VariableDeclaration","scope":3249,"src":"10531:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3206,"name":"address","nodeType":"ElementaryTypeName","src":"10531:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3209,"mutability":"mutable","name":"spender","nameLocation":"10562:7:11","nodeType":"VariableDeclaration","scope":3249,"src":"10554:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3208,"name":"address","nodeType":"ElementaryTypeName","src":"10554:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3211,"mutability":"mutable","name":"amount","nameLocation":"10587:6:11","nodeType":"VariableDeclaration","scope":3249,"src":"10579:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3210,"name":"uint256","nodeType":"ElementaryTypeName","src":"10579:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10521:78:11"},"returnParameters":{"id":3213,"nodeType":"ParameterList","parameters":[],"src":"10617:0:11"},"scope":3315,"src":"10504:370:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3291,"nodeType":"Block","src":"11275:321:11","statements":[{"assignments":[3260],"declarations":[{"constant":false,"id":3260,"mutability":"mutable","name":"currentAllowance","nameLocation":"11293:16:11","nodeType":"VariableDeclaration","scope":3291,"src":"11285:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3259,"name":"uint256","nodeType":"ElementaryTypeName","src":"11285:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3265,"initialValue":{"arguments":[{"id":3262,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"11322:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3263,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"11329:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3261,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"11312:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11312:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11285:52:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3266,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3260,"src":"11351:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":3269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11376:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3268,"name":"uint256","nodeType":"ElementaryTypeName","src":"11376:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":3267,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11371:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11371:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":3271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11385:3:11","memberName":"max","nodeType":"MemberAccess","src":"11371:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11351:37:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3290,"nodeType":"IfStatement","src":"11347:243:11","trueBody":{"id":3289,"nodeType":"Block","src":"11390:200:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3274,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3260,"src":"11412:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3275,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"11432:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11412:26:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":3277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11440:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":3273,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11404:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11404:68:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3279,"nodeType":"ExpressionStatement","src":"11404:68:11"},{"id":3288,"nodeType":"UncheckedBlock","src":"11486:94:11","statements":[{"expression":{"arguments":[{"id":3281,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"11523:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3282,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"11530:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3283,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3260,"src":"11539:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3284,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"11558:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11539:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3280,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"11514:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11514:51:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3287,"nodeType":"ExpressionStatement","src":"11514:51:11"}]}]}}]},"documentation":{"id":3250,"nodeType":"StructuredDocumentation","src":"10880:270:11","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":3292,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11164:15:11","nodeType":"FunctionDefinition","parameters":{"id":3257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3252,"mutability":"mutable","name":"owner","nameLocation":"11197:5:11","nodeType":"VariableDeclaration","scope":3292,"src":"11189:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3251,"name":"address","nodeType":"ElementaryTypeName","src":"11189:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3254,"mutability":"mutable","name":"spender","nameLocation":"11220:7:11","nodeType":"VariableDeclaration","scope":3292,"src":"11212:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3253,"name":"address","nodeType":"ElementaryTypeName","src":"11212:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3256,"mutability":"mutable","name":"amount","nameLocation":"11245:6:11","nodeType":"VariableDeclaration","scope":3292,"src":"11237:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3255,"name":"uint256","nodeType":"ElementaryTypeName","src":"11237:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11179:78:11"},"returnParameters":{"id":3258,"nodeType":"ParameterList","parameters":[],"src":"11275:0:11"},"scope":3315,"src":"11155:441:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3302,"nodeType":"Block","src":"12299:2:11","statements":[]},"documentation":{"id":3293,"nodeType":"StructuredDocumentation","src":"11602:573:11","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":3303,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12189:20:11","nodeType":"FunctionDefinition","parameters":{"id":3300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3295,"mutability":"mutable","name":"from","nameLocation":"12227:4:11","nodeType":"VariableDeclaration","scope":3303,"src":"12219:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3294,"name":"address","nodeType":"ElementaryTypeName","src":"12219:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3297,"mutability":"mutable","name":"to","nameLocation":"12249:2:11","nodeType":"VariableDeclaration","scope":3303,"src":"12241:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3296,"name":"address","nodeType":"ElementaryTypeName","src":"12241:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3299,"mutability":"mutable","name":"amount","nameLocation":"12269:6:11","nodeType":"VariableDeclaration","scope":3303,"src":"12261:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3298,"name":"uint256","nodeType":"ElementaryTypeName","src":"12261:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12209:72:11"},"returnParameters":{"id":3301,"nodeType":"ParameterList","parameters":[],"src":"12299:0:11"},"scope":3315,"src":"12180:121:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3313,"nodeType":"Block","src":"13007:2:11","statements":[]},"documentation":{"id":3304,"nodeType":"StructuredDocumentation","src":"12307:577:11","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":3314,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"12898:19:11","nodeType":"FunctionDefinition","parameters":{"id":3311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3306,"mutability":"mutable","name":"from","nameLocation":"12935:4:11","nodeType":"VariableDeclaration","scope":3314,"src":"12927:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3305,"name":"address","nodeType":"ElementaryTypeName","src":"12927:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3308,"mutability":"mutable","name":"to","nameLocation":"12957:2:11","nodeType":"VariableDeclaration","scope":3314,"src":"12949:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3307,"name":"address","nodeType":"ElementaryTypeName","src":"12949:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3310,"mutability":"mutable","name":"amount","nameLocation":"12977:6:11","nodeType":"VariableDeclaration","scope":3314,"src":"12969:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3309,"name":"uint256","nodeType":"ElementaryTypeName","src":"12969:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12917:72:11"},"returnParameters":{"id":3312,"nodeType":"ParameterList","parameters":[],"src":"13007:0:11"},"scope":3315,"src":"12889:120:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3316,"src":"1401:11610:11","usedErrors":[]}],"src":"105:12907:11"},"id":11},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[3393]},"id":3394,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3317,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":3318,"nodeType":"StructuredDocumentation","src":"131:70:12","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":3393,"linearizedBaseContracts":[3393],"name":"IERC20","nameLocation":"212:6:12","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3319,"nodeType":"StructuredDocumentation","src":"225:158:12","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3327,"name":"Transfer","nameLocation":"394:8:12","nodeType":"EventDefinition","parameters":{"id":3326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3321,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:12","nodeType":"VariableDeclaration","scope":3327,"src":"403:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3320,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3323,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:12","nodeType":"VariableDeclaration","scope":3327,"src":"425:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3322,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3325,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:12","nodeType":"VariableDeclaration","scope":3327,"src":"445:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3324,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:12"},"src":"388:72:12"},{"anonymous":false,"documentation":{"id":3328,"nodeType":"StructuredDocumentation","src":"466:148:12","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3336,"name":"Approval","nameLocation":"625:8:12","nodeType":"EventDefinition","parameters":{"id":3335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3330,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:12","nodeType":"VariableDeclaration","scope":3336,"src":"634:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3329,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3332,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:12","nodeType":"VariableDeclaration","scope":3336,"src":"657:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3331,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3334,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:12","nodeType":"VariableDeclaration","scope":3336,"src":"682:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3333,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:12"},"src":"619:78:12"},{"documentation":{"id":3337,"nodeType":"StructuredDocumentation","src":"703:66:12","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":3342,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:12","nodeType":"FunctionDefinition","parameters":{"id":3338,"nodeType":"ParameterList","parameters":[],"src":"794:2:12"},"returnParameters":{"id":3341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3340,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3342,"src":"820:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3339,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:12"},"scope":3393,"src":"774:55:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3343,"nodeType":"StructuredDocumentation","src":"835:72:12","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":3350,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:12","nodeType":"FunctionDefinition","parameters":{"id":3346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3345,"mutability":"mutable","name":"account","nameLocation":"939:7:12","nodeType":"VariableDeclaration","scope":3350,"src":"931:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3344,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:12"},"returnParameters":{"id":3349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3350,"src":"971:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3347,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:12"},"scope":3393,"src":"912:68:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3351,"nodeType":"StructuredDocumentation","src":"986:202:12","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":3360,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:12","nodeType":"FunctionDefinition","parameters":{"id":3356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3353,"mutability":"mutable","name":"to","nameLocation":"1219:2:12","nodeType":"VariableDeclaration","scope":3360,"src":"1211:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3352,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3355,"mutability":"mutable","name":"amount","nameLocation":"1231:6:12","nodeType":"VariableDeclaration","scope":3360,"src":"1223:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3354,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:12"},"returnParameters":{"id":3359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3360,"src":"1257:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3357,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:12"},"scope":3393,"src":"1193:70:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3361,"nodeType":"StructuredDocumentation","src":"1269:264:12","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":3370,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:12","nodeType":"FunctionDefinition","parameters":{"id":3366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3363,"mutability":"mutable","name":"owner","nameLocation":"1565:5:12","nodeType":"VariableDeclaration","scope":3370,"src":"1557:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3362,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3365,"mutability":"mutable","name":"spender","nameLocation":"1580:7:12","nodeType":"VariableDeclaration","scope":3370,"src":"1572:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3364,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:12"},"returnParameters":{"id":3369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3370,"src":"1612:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3367,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:12"},"scope":3393,"src":"1538:83:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3371,"nodeType":"StructuredDocumentation","src":"1627:642:12","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3380,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:12","nodeType":"FunctionDefinition","parameters":{"id":3376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3373,"mutability":"mutable","name":"spender","nameLocation":"2299:7:12","nodeType":"VariableDeclaration","scope":3380,"src":"2291:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3372,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3375,"mutability":"mutable","name":"amount","nameLocation":"2316:6:12","nodeType":"VariableDeclaration","scope":3380,"src":"2308:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3374,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:12"},"returnParameters":{"id":3379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3378,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3380,"src":"2342:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3377,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:12"},"scope":3393,"src":"2274:74:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3381,"nodeType":"StructuredDocumentation","src":"2354:287:12","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3392,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:12","nodeType":"FunctionDefinition","parameters":{"id":3388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3383,"mutability":"mutable","name":"from","nameLocation":"2685:4:12","nodeType":"VariableDeclaration","scope":3392,"src":"2677:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3382,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3385,"mutability":"mutable","name":"to","nameLocation":"2707:2:12","nodeType":"VariableDeclaration","scope":3392,"src":"2699:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3384,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3387,"mutability":"mutable","name":"amount","nameLocation":"2727:6:12","nodeType":"VariableDeclaration","scope":3392,"src":"2719:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3386,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:12"},"returnParameters":{"id":3391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3390,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3392,"src":"2758:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3389,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:12"},"scope":3393,"src":"2646:118:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3394,"src":"202:2564:12","usedErrors":[]}],"src":"106:2661:12"},"id":12},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[3393],"IERC20Metadata":[3418]},"id":3419,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3395,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":3396,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3419,"sourceUnit":3394,"src":"135:23:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3398,"name":"IERC20","nameLocations":["305:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":3393,"src":"305:6:13"},"id":3399,"nodeType":"InheritanceSpecifier","src":"305:6:13"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":3397,"nodeType":"StructuredDocumentation","src":"160:116:13","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":3418,"linearizedBaseContracts":[3418,3393],"name":"IERC20Metadata","nameLocation":"287:14:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3400,"nodeType":"StructuredDocumentation","src":"318:54:13","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":3405,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:13","nodeType":"FunctionDefinition","parameters":{"id":3401,"nodeType":"ParameterList","parameters":[],"src":"390:2:13"},"returnParameters":{"id":3404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3405,"src":"416:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3402,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:13"},"scope":3418,"src":"377:54:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3406,"nodeType":"StructuredDocumentation","src":"437:56:13","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":3411,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:13","nodeType":"FunctionDefinition","parameters":{"id":3407,"nodeType":"ParameterList","parameters":[],"src":"513:2:13"},"returnParameters":{"id":3410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3411,"src":"539:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3408,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:13"},"scope":3418,"src":"498:56:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3412,"nodeType":"StructuredDocumentation","src":"560:65:13","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":3417,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:13","nodeType":"FunctionDefinition","parameters":{"id":3413,"nodeType":"ParameterList","parameters":[],"src":"647:2:13"},"returnParameters":{"id":3416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3415,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3417,"src":"673:5:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3414,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:13"},"scope":3418,"src":"630:50:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3419,"src":"277:405:13","usedErrors":[]}],"src":"110:573:13"},"id":13},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3440]},"id":3441,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3420,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:14"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":3421,"nodeType":"StructuredDocumentation","src":"111:496:14","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3440,"linearizedBaseContracts":[3440],"name":"Context","nameLocation":"626:7:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":3429,"nodeType":"Block","src":"702:34:14","statements":[{"expression":{"expression":{"id":3426,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:14","memberName":"sender","nodeType":"MemberAccess","src":"719:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3425,"id":3428,"nodeType":"Return","src":"712:17:14"}]},"id":3430,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:14","nodeType":"FunctionDefinition","parameters":{"id":3422,"nodeType":"ParameterList","parameters":[],"src":"659:2:14"},"returnParameters":{"id":3425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3430,"src":"693:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3423,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:14"},"scope":3440,"src":"640:96:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3438,"nodeType":"Block","src":"809:32:14","statements":[{"expression":{"expression":{"id":3435,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:14","memberName":"data","nodeType":"MemberAccess","src":"826:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3434,"id":3437,"nodeType":"Return","src":"819:15:14"}]},"id":3439,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:14","nodeType":"FunctionDefinition","parameters":{"id":3431,"nodeType":"ParameterList","parameters":[],"src":"759:2:14"},"returnParameters":{"id":3434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3439,"src":"793:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3432,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:14"},"scope":3440,"src":"742:99:14","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3441,"src":"608:235:14","usedErrors":[]}],"src":"86:758:14"},"id":14},"contracts/Paycrest.sol":{"ast":{"absolutePath":"contracts/Paycrest.sol","exportedSymbols":{"AddressUpgradeable":[1120],"ECDSAUpgradeable":[1757],"IERC20":[3393],"IERC20PermitUpgradeable":[414],"IERC20Upgradeable":[378],"IPaycrest":[4575],"MathUpgradeable":[2623],"Paycrest":[4150],"PaycrestSettingManager":[4389],"SafeERC20Upgradeable":[790],"SignedMathUpgradeable":[2728],"StringsUpgradeable":[1391]},"id":4151,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3442,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:15"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","id":3443,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4151,"sourceUnit":1758,"src":"62:85:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":3444,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4151,"sourceUnit":791,"src":"148:88:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/PaycrestSettingManager.sol","file":"./PaycrestSettingManager.sol","id":3446,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4151,"sourceUnit":4390,"src":"237:68:15","symbolAliases":[{"foreign":{"id":3445,"name":"PaycrestSettingManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"245:22:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interface/IPaycrest.sol","file":"./interface/IPaycrest.sol","id":3449,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4151,"sourceUnit":4576,"src":"306:60:15","symbolAliases":[{"foreign":{"id":3447,"name":"IPaycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4575,"src":"314:9:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3448,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"325:6:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3450,"name":"IPaycrest","nameLocations":["388:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":4575,"src":"388:9:15"},"id":3451,"nodeType":"InheritanceSpecifier","src":"388:9:15"},{"baseName":{"id":3452,"name":"PaycrestSettingManager","nameLocations":["399:22:15"],"nodeType":"IdentifierPath","referencedDeclaration":4389,"src":"399:22:15"},"id":3453,"nodeType":"InheritanceSpecifier","src":"399:22:15"}],"canonicalName":"Paycrest","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4150,"linearizedBaseContracts":[4150,4389,131,1162,300,4575],"name":"Paycrest","nameLocation":"376:8:15","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3457,"libraryName":{"id":3454,"name":"SafeERC20Upgradeable","nameLocations":["435:20:15"],"nodeType":"IdentifierPath","referencedDeclaration":790,"src":"435:20:15"},"nodeType":"UsingForDirective","src":"429:38:15","typeName":{"id":3456,"nodeType":"UserDefinedTypeName","pathNode":{"id":3455,"name":"IERC20","nameLocations":["460:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":3393,"src":"460:6:15"},"referencedDeclaration":3393,"src":"460:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3393","typeString":"contract IERC20"}}},{"global":false,"id":3460,"libraryName":{"id":3458,"name":"ECDSAUpgradeable","nameLocations":["478:16:15"],"nodeType":"IdentifierPath","referencedDeclaration":1757,"src":"478:16:15"},"nodeType":"UsingForDirective","src":"472:35:15","typeName":{"id":3459,"name":"bytes32","nodeType":"ElementaryTypeName","src":"499:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"canonicalName":"Paycrest.fee","id":3465,"members":[{"constant":false,"id":3462,"mutability":"mutable","name":"protocolFee","nameLocation":"541:11:15","nodeType":"VariableDeclaration","scope":3465,"src":"533:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3461,"name":"uint256","nodeType":"ElementaryTypeName","src":"533:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3464,"mutability":"mutable","name":"liquidityProviderAmount","nameLocation":"570:23:15","nodeType":"VariableDeclaration","scope":3465,"src":"562:31:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3463,"name":"uint256","nodeType":"ElementaryTypeName","src":"562:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"fee","nameLocation":"519:3:15","nodeType":"StructDefinition","scope":4150,"src":"512:88:15","visibility":"public"},{"constant":false,"id":3470,"mutability":"mutable","name":"order","nameLocation":"639:5:15","nodeType":"VariableDeclaration","scope":4150,"src":"605:39:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order)"},"typeName":{"id":3469,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3466,"name":"bytes32","nodeType":"ElementaryTypeName","src":"613:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"605:25:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3468,"nodeType":"UserDefinedTypeName","pathNode":{"id":3467,"name":"Order","nameLocations":["624:5:15"],"nodeType":"IdentifierPath","referencedDeclaration":4475,"src":"624:5:15"},"referencedDeclaration":4475,"src":"624:5:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage_ptr","typeString":"struct IPaycrest.Order"}}},"visibility":"private"},{"constant":false,"id":3474,"mutability":"mutable","name":"_nonce","nameLocation":"686:6:15","nodeType":"VariableDeclaration","scope":4150,"src":"650:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3473,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3471,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"650:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3472,"name":"uint256","nodeType":"ElementaryTypeName","src":"669:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":3478,"mutability":"mutable","name":"__gap","nameLocation":"718:5:15","nodeType":"VariableDeclaration","scope":4150,"src":"698:25:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3475,"name":"uint256","nodeType":"ElementaryTypeName","src":"698:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3477,"length":{"hexValue":"3530","id":3476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"706:2:15","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"698:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"},{"body":{"id":3485,"nodeType":"Block","src":"796:39:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3482,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"806:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"806:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3484,"nodeType":"ExpressionStatement","src":"806:22:15"}]},"documentation":{"id":3479,"nodeType":"StructuredDocumentation","src":"729:48:15","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":3486,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3480,"nodeType":"ParameterList","parameters":[],"src":"793:2:15"},"returnParameters":{"id":3481,"nodeType":"ParameterList","parameters":[],"src":"796:0:15"},"scope":4150,"src":"782:53:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3510,"nodeType":"Block","src":"897:150:15","statements":[{"expression":{"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3493,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"911:17:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3495,"indexExpression":{"id":3494,"name":"_usdc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3488,"src":"929:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"911:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"938:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"911:31:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3498,"nodeType":"ExpressionStatement","src":"911:31:15"},{"expression":{"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3499,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"955:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3130305f303030","id":3500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"965:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100_000"},"src":"955:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3502,"nodeType":"ExpressionStatement","src":"955:17:15"},{"expression":{"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3503,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"983:18:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"35303030","id":3504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1004:4:15","typeDescriptions":{"typeIdentifier":"t_rational_5000_by_1","typeString":"int_const 5000"},"value":"5000"},"src":"983:25:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":3506,"nodeType":"ExpressionStatement","src":"983:25:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3507,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"1024:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1024:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3509,"nodeType":"ExpressionStatement","src":"1024:16:15"}]},"functionSelector":"c4d66de8","id":3511,"implemented":true,"kind":"function","modifiers":[{"id":3491,"kind":"modifierInvocation","modifierName":{"id":3490,"name":"initializer","nameLocations":["885:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":202,"src":"885:11:15"},"nodeType":"ModifierInvocation","src":"885:11:15"}],"name":"initialize","nameLocation":"850:10:15","nodeType":"FunctionDefinition","parameters":{"id":3489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3488,"mutability":"mutable","name":"_usdc","nameLocation":"869:5:15","nodeType":"VariableDeclaration","scope":3511,"src":"861:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3487,"name":"address","nodeType":"ElementaryTypeName","src":"861:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"860:15:15"},"returnParameters":{"id":3492,"nodeType":"ParameterList","parameters":[],"src":"897:0:15"},"scope":4150,"src":"841:206:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3522,"nodeType":"Block","src":"1077:87:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3514,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1095:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1099:6:15","memberName":"sender","nodeType":"MemberAccess","src":"1095:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3516,"name":"_aggregatorAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4173,"src":"1109:18:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1095:32:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c7941676772656761746f72","id":3518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1129:16:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","typeString":"literal_string \"OnlyAggregator\""},"value":"OnlyAggregator"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","typeString":"literal_string \"OnlyAggregator\""}],"id":3513,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1087:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1087:59:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3520,"nodeType":"ExpressionStatement","src":"1087:59:15"},{"id":3521,"nodeType":"PlaceholderStatement","src":"1156:1:15"}]},"id":3523,"name":"onlyAggregator","nameLocation":"1062:14:15","nodeType":"ModifierDefinition","parameters":{"id":3512,"nodeType":"ParameterList","parameters":[],"src":"1077:0:15"},"src":"1053:111:15","virtual":false,"visibility":"internal"},{"baseFunctions":[4499],"body":{"id":3630,"nodeType":"Block","src":"1739:1279:15","statements":[{"expression":{"arguments":[{"id":3548,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1794:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3549,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"1802:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3550,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"1811:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3551,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"1827:19:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3552,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"1848:16:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3547,"name":"_handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3692,"src":"1785:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_address_$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,uint256,address,address,bytes32) view"}},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1785:80:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3554,"nodeType":"ExpressionStatement","src":"1785:80:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3556,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"1944:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3557,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"1959:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3558,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"1969:18:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"1959:28:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3560,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1958:30:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3561,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"1991:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1958:40:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1944:54:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53656e646572466565546f6f48696768","id":3564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2000:18:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4","typeString":"literal_string \"SenderFeeTooHigh\""},"value":"SenderFeeTooHigh"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4","typeString":"literal_string \"SenderFeeTooHigh\""}],"id":3555,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1936:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1936:83:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3566,"nodeType":"ExpressionStatement","src":"1936:83:15"},{"expression":{"arguments":[{"expression":{"id":3571,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2105:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2109:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2105:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3575,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2125:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_Paycrest_$4150","typeString":"contract Paycrest"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Paycrest_$4150","typeString":"contract Paycrest"}],"id":3574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2117:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3573,"name":"address","nodeType":"ElementaryTypeName","src":"2117:7:15","typeDescriptions":{}}},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2117:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3577,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"2132:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3568,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2084:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3567,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"2077:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3393_$","typeString":"type(contract IERC20)"}},"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2077:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3393","typeString":"contract IERC20"}},"id":3570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2092:12:15","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3392,"src":"2077:27:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2077:63:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3579,"nodeType":"ExpressionStatement","src":"2077:63:15"},{"expression":{"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2206:21:15","subExpression":{"baseExpression":{"id":3580,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"2206:6:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3583,"indexExpression":{"expression":{"id":3581,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2213:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2217:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2213:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2206:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3585,"nodeType":"ExpressionStatement","src":"2206:21:15"},{"expression":{"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3586,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"2433:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"id":3590,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2464:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2468:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2464:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3592,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"2476:6:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3595,"indexExpression":{"expression":{"id":3593,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2483:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2487:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2483:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2476:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3588,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2453:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3589,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2457:6:15","memberName":"encode","nodeType":"MemberAccess","src":"2453:10:15","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2453:42:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3587,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2443:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2443:53:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2433:63:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3599,"nodeType":"ExpressionStatement","src":"2433:63:15"},{"expression":{"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3600,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"2536:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3602,"indexExpression":{"id":3601,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"2542:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2536:14:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3604,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2581:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2585:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2581:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3606,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2612:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3607,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"2652:19:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3608,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"2696:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3609,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"2726:5:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"hexValue":"66616c7365","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2758:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":3611,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"2792:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3614,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"2839:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":3612,"name":"uint64","nodeType":"ElementaryTypeName","src":"2832:6:15","typeDescriptions":{}}},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":3616,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"2869:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3603,"name":"Order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4475,"src":"2553:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Order_$4475_storage_ptr_$","typeString":"type(struct IPaycrest.Order storage pointer)"}},"id":3617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2573:6:15","2605:5:15","2632:18:15","2685:9:15","2720:4:15","2745:11:15","2777:13:15","2820:10:15","2861:6:15"],"names":["seller","token","senderFeeRecipient","senderFee","rate","isFulfilled","refundAddress","currentBPS","amount"],"nodeType":"FunctionCall","src":"2553:334:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_memory_ptr","typeString":"struct IPaycrest.Order memory"}},"src":"2536:351:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3619,"nodeType":"ExpressionStatement","src":"2536:351:15"},{"eventCall":{"arguments":[{"id":3621,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2940:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3622,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"2948:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3623,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"2957:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3624,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"2966:5:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":3625,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"2973:16:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3626,"name":"_label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"2991:6:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3627,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"2999:11:15","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":3620,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4411,"src":"2932:7:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$_t_uint256_$_t_bytes32_$_t_bytes32_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes32,uint256,bytes32,bytes32,string memory)"}},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2932:79:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3629,"nodeType":"EmitStatement","src":"2927:84:15"}]},"documentation":{"id":3524,"nodeType":"StructuredDocumentation","src":"1365:40:15","text":"@dev See {createOrder-IPaycrest}. "},"functionSelector":"2654ec7e","id":3631,"implemented":true,"kind":"function","modifiers":[],"name":"createOrder","nameLocation":"1419:11:15","nodeType":"FunctionDefinition","parameters":{"id":3543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3526,"mutability":"mutable","name":"_token","nameLocation":"1448:6:15","nodeType":"VariableDeclaration","scope":3631,"src":"1440:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3525,"name":"address","nodeType":"ElementaryTypeName","src":"1440:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3528,"mutability":"mutable","name":"_amount","nameLocation":"1473:7:15","nodeType":"VariableDeclaration","scope":3631,"src":"1465:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3527,"name":"uint256","nodeType":"ElementaryTypeName","src":"1465:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3530,"mutability":"mutable","name":"_institutionCode","nameLocation":"1499:16:15","nodeType":"VariableDeclaration","scope":3631,"src":"1491:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3529,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1491:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3532,"mutability":"mutable","name":"_label","nameLocation":"1533:6:15","nodeType":"VariableDeclaration","scope":3631,"src":"1525:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3531,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1525:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3534,"mutability":"mutable","name":"_rate","nameLocation":"1556:5:15","nodeType":"VariableDeclaration","scope":3631,"src":"1549:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3533,"name":"uint96","nodeType":"ElementaryTypeName","src":"1549:6:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3536,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"1580:19:15","nodeType":"VariableDeclaration","scope":3631,"src":"1572:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3535,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3538,"mutability":"mutable","name":"_senderFee","nameLocation":"1617:10:15","nodeType":"VariableDeclaration","scope":3631,"src":"1609:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3537,"name":"uint256","nodeType":"ElementaryTypeName","src":"1609:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3540,"mutability":"mutable","name":"_refundAddress","nameLocation":"1645:14:15","nodeType":"VariableDeclaration","scope":3631,"src":"1637:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3539,"name":"address","nodeType":"ElementaryTypeName","src":"1637:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3542,"mutability":"mutable","name":"messageHash","nameLocation":"1686:11:15","nodeType":"VariableDeclaration","scope":3631,"src":"1670:27:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3541,"name":"string","nodeType":"ElementaryTypeName","src":"1670:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1430:273:15"},"returnParameters":{"id":3546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3545,"mutability":"mutable","name":"orderId","nameLocation":"1730:7:15","nodeType":"VariableDeclaration","scope":3631,"src":"1722:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3544,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1722:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1721:17:15"},"scope":4150,"src":"1410:1608:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3691,"nodeType":"Block","src":"3168:415:15","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3645,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"3235:17:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3647,"indexExpression":{"id":3646,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"3253:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3235:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e4e6f74537570706f72746564","id":3648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3262:19:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","typeString":"literal_string \"TokenNotSupported\""},"value":"TokenNotSupported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","typeString":"literal_string \"TokenNotSupported\""}],"id":3644,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3227:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3227:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3650,"nodeType":"ExpressionStatement","src":"3227:55:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3652,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"3300:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3310:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3300:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e7449735a65726f","id":3655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3313:14:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","typeString":"literal_string \"AmountIsZero\""},"value":"AmountIsZero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","typeString":"literal_string \"AmountIsZero\""}],"id":3651,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3292:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3292:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3657,"nodeType":"ExpressionStatement","src":"3292:36:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3659,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"3346:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3372:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3364:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3660,"name":"address","nodeType":"ElementaryTypeName","src":"3364:7:15","typeDescriptions":{}}},"id":3663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3364:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3346:28:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468726f775a65726f41646472657373","id":3665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3376:18:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""},"value":"ThrowZeroAddress"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""}],"id":3658,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3338:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:57:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3667,"nodeType":"ExpressionStatement","src":"3338:57:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3669,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3639,"src":"3413:19:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3444:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3436:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3670,"name":"address","nodeType":"ElementaryTypeName","src":"3436:7:15","typeDescriptions":{}}},"id":3673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3436:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3413:33:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468726f775a65726f41646472657373","id":3675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3448:18:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""},"value":"ThrowZeroAddress"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""}],"id":3668,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3405:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3405:62:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3677,"nodeType":"ExpressionStatement","src":"3405:62:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3679,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4198,"src":"3485:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4165_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":3681,"indexExpression":{"id":3680,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"3513:16:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3485:45:15","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4165_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"id":3682,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3531:4:15","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":4162,"src":"3485:50:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3547:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3539:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3683,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3539:7:15","typeDescriptions":{}}},"id":3686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3539:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3485:64:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964496e737469747574696f6e436f6465","id":3688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3551:24:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","typeString":"literal_string \"InvalidInstitutionCode\""},"value":"InvalidInstitutionCode"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","typeString":"literal_string \"InvalidInstitutionCode\""}],"id":3678,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3477:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3477:99:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3690,"nodeType":"ExpressionStatement","src":"3477:99:15"}]},"id":3692,"implemented":true,"kind":"function","modifiers":[],"name":"_handler","nameLocation":"3033:8:15","nodeType":"FunctionDefinition","parameters":{"id":3642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3633,"mutability":"mutable","name":"_token","nameLocation":"3050:6:15","nodeType":"VariableDeclaration","scope":3692,"src":"3042:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3632,"name":"address","nodeType":"ElementaryTypeName","src":"3042:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3635,"mutability":"mutable","name":"_amount","nameLocation":"3066:7:15","nodeType":"VariableDeclaration","scope":3692,"src":"3058:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3634,"name":"uint256","nodeType":"ElementaryTypeName","src":"3058:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3637,"mutability":"mutable","name":"_refundAddress","nameLocation":"3083:14:15","nodeType":"VariableDeclaration","scope":3692,"src":"3075:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3636,"name":"address","nodeType":"ElementaryTypeName","src":"3075:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3639,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"3107:19:15","nodeType":"VariableDeclaration","scope":3692,"src":"3099:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3638,"name":"address","nodeType":"ElementaryTypeName","src":"3099:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3641,"mutability":"mutable","name":"_institutionCode","nameLocation":"3136:16:15","nodeType":"VariableDeclaration","scope":3692,"src":"3128:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3640,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3128:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3041:112:15"},"returnParameters":{"id":3643,"nodeType":"ParameterList","parameters":[],"src":"3168:0:15"},"scope":4150,"src":"3024:559:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[4519],"body":{"id":3809,"nodeType":"Block","src":"4084:1318:15","statements":[{"expression":{"arguments":[{"id":3719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4159:28:15","subExpression":{"expression":{"baseExpression":{"id":3715,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4160:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3717,"indexExpression":{"id":3716,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"4166:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4160:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3718,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4176:11:15","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":4468,"src":"4160:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7264657246756c66696c6c6564","id":3720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4189:16:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""},"value":"OrderFulfilled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""}],"id":3714,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4151:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4151:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3722,"nodeType":"ExpressionStatement","src":"4151:55:15"},{"assignments":[3724],"declarations":[{"constant":false,"id":3724,"mutability":"mutable","name":"token","nameLocation":"4262:5:15","nodeType":"VariableDeclaration","scope":3809,"src":"4254:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3723,"name":"address","nodeType":"ElementaryTypeName","src":"4254:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3729,"initialValue":{"expression":{"baseExpression":{"id":3725,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4270:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3727,"indexExpression":{"id":3726,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"4276:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4270:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3728,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4286:5:15","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4460,"src":"4270:21:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4254:37:15"},{"expression":{"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3730,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4370:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3732,"indexExpression":{"id":3731,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"4376:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4370:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3733,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4386:10:15","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":4472,"src":"4370:26:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3734,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"4400:14:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"4370:44:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3736,"nodeType":"ExpressionStatement","src":"4370:44:15"},{"assignments":[3739],"declarations":[{"constant":false,"id":3739,"mutability":"mutable","name":"_feeParams","nameLocation":"4567:10:15","nodeType":"VariableDeclaration","scope":3809,"src":"4556:21:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee"},"typeName":{"id":3738,"nodeType":"UserDefinedTypeName","pathNode":{"id":3737,"name":"fee","nameLocations":["4556:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":3465,"src":"4556:3:15"},"referencedDeclaration":3465,"src":"4556:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_storage_ptr","typeString":"struct Paycrest.fee"}},"visibility":"internal"}],"id":3745,"initialValue":{"arguments":[{"id":3741,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"4598:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3742,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"4608:14:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":3743,"name":"_isPartner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"4624:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3740,"name":"_calculateFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"4583:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_uint96_$_t_bool_$returns$_t_struct$_fee_$3465_memory_ptr_$","typeString":"function (bytes32,uint96,bool) view returns (struct Paycrest.fee memory)"}},"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:52:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"nodeType":"VariableDeclarationStatement","src":"4554:81:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":3751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3746,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4648:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3748,"indexExpression":{"id":3747,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"4654:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4648:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3749,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4664:10:15","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":4472,"src":"4648:26:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4678:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4648:31:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3772,"nodeType":"IfStatement","src":"4645:296:15","trueBody":{"id":3771,"nodeType":"Block","src":"4681:260:15","statements":[{"expression":{"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3752,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4749:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3754,"indexExpression":{"id":3753,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"4755:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4749:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3755,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4765:11:15","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":4468,"src":"4749:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4779:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4749:34:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3758,"nodeType":"ExpressionStatement","src":"4749:34:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3759,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4801:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3761,"indexExpression":{"id":3760,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"4807:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4801:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3762,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4817:9:15","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":4464,"src":"4801:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4829:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4801:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3770,"nodeType":"IfStatement","src":"4797:134:15","trueBody":{"id":3769,"nodeType":"Block","src":"4832:99:15","statements":[{"expression":{"arguments":[{"id":3766,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"4907:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3765,"name":"transferSenderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"4889:17:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4889:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3768,"nodeType":"ExpressionStatement","src":"4889:27:15"}]}}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3773,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"4963:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3774,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4974:11:15","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3462,"src":"4963:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4988:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4963:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3787,"nodeType":"IfStatement","src":"4959:154:15","trueBody":{"id":3786,"nodeType":"Block","src":"4991:122:15","statements":[{"expression":{"arguments":[{"id":3781,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"5065:12:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3782,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"5079:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3783,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5090:11:15","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3462,"src":"5079:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3778,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"5049:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3777,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"5042:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3393_$","typeString":"type(contract IERC20)"}},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5042:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3393","typeString":"contract IERC20"}},"id":3780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5056:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3360,"src":"5042:22:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5042:60:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3785,"nodeType":"ExpressionStatement","src":"5042:60:15"}]}},{"expression":{"arguments":[{"id":3792,"name":"_liquidityProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"5191:18:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3793,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"5211:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3794,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5222:23:15","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3464,"src":"5211:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3789,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"5175:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3788,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"5168:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3393_$","typeString":"type(contract IERC20)"}},"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5168:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3393","typeString":"contract IERC20"}},"id":3791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5182:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3360,"src":"5168:22:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5168:78:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3796,"nodeType":"ExpressionStatement","src":"5168:78:15"},{"eventCall":{"arguments":[{"id":3798,"name":"_splitOrderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"5292:13:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3799,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"5307:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3800,"name":"_label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3699,"src":"5317:6:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3801,"name":"_liquidityProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"5326:18:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3802,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"5346:14:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":3797,"name":"Settled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4424,"src":"5284:7:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_address_$_t_uint96_$returns$__$","typeString":"function (bytes32,bytes32,bytes32,address,uint96)"}},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5284:77:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3804,"nodeType":"EmitStatement","src":"5279:82:15"},{"expression":{"components":[{"id":3805,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"5379:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3806,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"5389:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3807,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5378:17:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_address_$","typeString":"tuple(bytes32,address)"}},"functionReturnParameters":3713,"id":3808,"nodeType":"Return","src":"5371:24:15"}]},"documentation":{"id":3693,"nodeType":"StructuredDocumentation","src":"3790:35:15","text":"@dev See {settle-IPaycrest}. "},"functionSelector":"5fe44cac","id":3810,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3708,"kind":"modifierInvocation","modifierName":{"id":3707,"name":"onlyAggregator","nameLocations":["4041:14:15"],"nodeType":"IdentifierPath","referencedDeclaration":3523,"src":"4041:14:15"},"nodeType":"ModifierInvocation","src":"4041:16:15"}],"name":"settle","nameLocation":"3839:6:15","nodeType":"FunctionDefinition","parameters":{"id":3706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3695,"mutability":"mutable","name":"_splitOrderId","nameLocation":"3863:13:15","nodeType":"VariableDeclaration","scope":3810,"src":"3855:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3855:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3697,"mutability":"mutable","name":"_orderId","nameLocation":"3894:8:15","nodeType":"VariableDeclaration","scope":3810,"src":"3886:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3696,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3886:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3699,"mutability":"mutable","name":"_label","nameLocation":"3921:6:15","nodeType":"VariableDeclaration","scope":3810,"src":"3913:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3698,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3913:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3701,"mutability":"mutable","name":"_liquidityProvider","nameLocation":"3945:18:15","nodeType":"VariableDeclaration","scope":3810,"src":"3937:26:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3700,"name":"address","nodeType":"ElementaryTypeName","src":"3937:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3703,"mutability":"mutable","name":"_settlePercent","nameLocation":"3981:14:15","nodeType":"VariableDeclaration","scope":3810,"src":"3974:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3702,"name":"uint64","nodeType":"ElementaryTypeName","src":"3974:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3705,"mutability":"mutable","name":"_isPartner","nameLocation":"4010:10:15","nodeType":"VariableDeclaration","scope":3810,"src":"4005:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3704,"name":"bool","nodeType":"ElementaryTypeName","src":"4005:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3845:185:15"},"returnParameters":{"id":3713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3810,"src":"4066:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3709,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4066:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3810,"src":"4075:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3711,"name":"address","nodeType":"ElementaryTypeName","src":"4075:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4065:18:15"},"scope":4150,"src":"3830:1572:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3845,"nodeType":"Block","src":"5462:289:15","statements":[{"assignments":[3816],"declarations":[{"constant":false,"id":3816,"mutability":"mutable","name":"recipient","nameLocation":"5480:9:15","nodeType":"VariableDeclaration","scope":3845,"src":"5472:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3815,"name":"address","nodeType":"ElementaryTypeName","src":"5472:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3821,"initialValue":{"expression":{"baseExpression":{"id":3817,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"5492:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3819,"indexExpression":{"id":3818,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3812,"src":"5498:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5492:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3820,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5508:18:15","memberName":"senderFeeRecipient","nodeType":"MemberAccess","referencedDeclaration":4462,"src":"5492:34:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5472:54:15"},{"assignments":[3823],"declarations":[{"constant":false,"id":3823,"mutability":"mutable","name":"_fee","nameLocation":"5544:4:15","nodeType":"VariableDeclaration","scope":3845,"src":"5536:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3822,"name":"uint256","nodeType":"ElementaryTypeName","src":"5536:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3828,"initialValue":{"expression":{"baseExpression":{"id":3824,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"5551:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3826,"indexExpression":{"id":3825,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3812,"src":"5557:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5551:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3827,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5567:9:15","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":4464,"src":"5551:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5536:40:15"},{"expression":{"arguments":[{"id":3836,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"5656:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3837,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3823,"src":"5667:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3830,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"5624:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3832,"indexExpression":{"id":3831,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3812,"src":"5630:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5624:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3833,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5640:5:15","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4460,"src":"5624:21:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3829,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"5617:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3393_$","typeString":"type(contract IERC20)"}},"id":3834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5617:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3393","typeString":"contract IERC20"}},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5647:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3360,"src":"5617:38:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5617:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3839,"nodeType":"ExpressionStatement","src":"5617:55:15"},{"eventCall":{"arguments":[{"id":3841,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"5728:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3842,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3823,"src":"5739:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3840,"name":"TransferSenderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4438,"src":"5710:17:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5710:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3844,"nodeType":"EmitStatement","src":"5705:39:15"}]},"id":3846,"implemented":true,"kind":"function","modifiers":[],"name":"transferSenderFee","nameLocation":"5417:17:15","nodeType":"FunctionDefinition","parameters":{"id":3813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3812,"mutability":"mutable","name":"_orderId","nameLocation":"5443:8:15","nodeType":"VariableDeclaration","scope":3846,"src":"5435:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3811,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5435:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5434:18:15"},"returnParameters":{"id":3814,"nodeType":"ParameterList","parameters":[],"src":"5462:0:15"},"scope":4150,"src":"5408:343:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[4529],"body":{"id":3905,"nodeType":"Block","src":"5888:455:15","statements":[{"expression":{"arguments":[{"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5963:28:15","subExpression":{"expression":{"baseExpression":{"id":3859,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"5964:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3861,"indexExpression":{"id":3860,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"5970:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5964:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3862,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5980:11:15","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":4468,"src":"5964:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7264657246756c66696c6c6564","id":3864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5993:16:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""},"value":"OrderFulfilled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""}],"id":3858,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5955:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5955:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3866,"nodeType":"ExpressionStatement","src":"5955:55:15"},{"expression":{"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3867,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"6050:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3869,"indexExpression":{"id":3868,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"6056:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6050:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3870,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6066:11:15","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":4468,"src":"6050:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6080:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6050:34:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3873,"nodeType":"ExpressionStatement","src":"6050:34:15"},{"expression":{"id":3879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3874,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"6094:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3876,"indexExpression":{"id":3875,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"6100:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6094:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3877,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6110:10:15","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":4472,"src":"6094:26:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6123:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6094:30:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3880,"nodeType":"ExpressionStatement","src":"6094:30:15"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3888,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"6204:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3890,"indexExpression":{"id":3889,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"6210:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6204:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3891,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6220:13:15","memberName":"refundAddress","nodeType":"MemberAccess","referencedDeclaration":4470,"src":"6204:29:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3892,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"6235:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3894,"indexExpression":{"id":3893,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"6241:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6235:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3895,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6251:6:15","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"6235:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3882,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"6172:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3884,"indexExpression":{"id":3883,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"6178:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6172:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3885,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6188:5:15","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4460,"src":"6172:21:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3881,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"6165:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3393_$","typeString":"type(contract IERC20)"}},"id":3886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6165:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3393","typeString":"contract IERC20"}},"id":3887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6195:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3360,"src":"6165:38:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6165:93:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3897,"nodeType":"ExpressionStatement","src":"6165:93:15"},{"eventCall":{"arguments":[{"id":3899,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"6298:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3900,"name":"_label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"6308:6:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3898,"name":"Refunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4431,"src":"6289:8:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":3901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6289:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3902,"nodeType":"EmitStatement","src":"6284:31:15"},{"expression":{"hexValue":"74727565","id":3903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6332:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3857,"id":3904,"nodeType":"Return","src":"6325:11:15"}]},"documentation":{"id":3847,"nodeType":"StructuredDocumentation","src":"5757:35:15","text":"@dev See {refund-IPaycrest}. "},"functionSelector":"e4683a79","id":3906,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3854,"kind":"modifierInvocation","modifierName":{"id":3853,"name":"onlyAggregator","nameLocations":["5857:14:15"],"nodeType":"IdentifierPath","referencedDeclaration":3523,"src":"5857:14:15"},"nodeType":"ModifierInvocation","src":"5857:16:15"}],"name":"refund","nameLocation":"5806:6:15","nodeType":"FunctionDefinition","parameters":{"id":3852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3849,"mutability":"mutable","name":"_orderId","nameLocation":"5821:8:15","nodeType":"VariableDeclaration","scope":3906,"src":"5813:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3848,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5813:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3851,"mutability":"mutable","name":"_label","nameLocation":"5839:6:15","nodeType":"VariableDeclaration","scope":3906,"src":"5831:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3850,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5831:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5812:34:15"},"returnParameters":{"id":3857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3906,"src":"5882:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3855,"name":"bool","nodeType":"ElementaryTypeName","src":"5882:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5881:6:15"},"scope":4150,"src":"5797:546:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3984,"nodeType":"Block","src":"6476:982:15","statements":[{"assignments":[3919],"declarations":[{"constant":false,"id":3919,"mutability":"mutable","name":"amount","nameLocation":"6554:6:15","nodeType":"VariableDeclaration","scope":3984,"src":"6546:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3918,"name":"uint256","nodeType":"ElementaryTypeName","src":"6546:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3924,"initialValue":{"expression":{"baseExpression":{"id":3920,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"6563:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3922,"indexExpression":{"id":3921,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"6569:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6563:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3923,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6579:6:15","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"6563:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6546:39:15"},{"expression":{"id":3932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3925,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"6633:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3926,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"6642:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"baseExpression":{"id":3927,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"6651:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3929,"indexExpression":{"id":3928,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"6657:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6651:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3930,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6667:9:15","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":4464,"src":"6651:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6642:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6633:43:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3933,"nodeType":"ExpressionStatement","src":"6633:43:15"},{"expression":{"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3934,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"6755:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3936,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6766:23:15","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3464,"src":"6755:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3937,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"6793:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3938,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"6802:14:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"6793:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3940,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6792:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3941,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"6820:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6792:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6755:72:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3944,"nodeType":"ExpressionStatement","src":"6755:72:15"},{"expression":{"id":3955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3945,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"6895:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3947,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6906:11:15","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3462,"src":"6895:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3948,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"6921:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3949,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6932:23:15","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3464,"src":"6921:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3950,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"6958:18:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6921:55:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3952,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6920:57:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3953,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"6980:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6920:67:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6895:92:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3956,"nodeType":"ExpressionStatement","src":"6895:92:15"},{"expression":{"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3957,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"7085:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3959,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7096:23:15","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3464,"src":"7085:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3960,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"7123:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3961,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7134:23:15","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3464,"src":"7123:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":3962,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"7160:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3963,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7171:11:15","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3462,"src":"7160:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7123:59:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3965,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7122:61:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7085:98:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3967,"nodeType":"ExpressionStatement","src":"7085:98:15"},{"condition":{"id":3968,"name":"_isPartner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"7315:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3983,"nodeType":"IfStatement","src":"7311:141:15","trueBody":{"id":3982,"nodeType":"Block","src":"7327:125:15","statements":[{"expression":{"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3969,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"7341:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3971,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7352:23:15","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3464,"src":"7341:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":3972,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"7379:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3973,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7390:11:15","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3462,"src":"7379:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7341:60:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3975,"nodeType":"ExpressionStatement","src":"7341:60:15"},{"expression":{"id":3980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3976,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"7415:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3978,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7426:11:15","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3462,"src":"7415:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7440:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7415:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3981,"nodeType":"ExpressionStatement","src":"7415:26:15"}]}}]},"id":3985,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateFees","nameLocation":"6358:14:15","nodeType":"FunctionDefinition","parameters":{"id":3913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3908,"mutability":"mutable","name":"_orderId","nameLocation":"6381:8:15","nodeType":"VariableDeclaration","scope":3985,"src":"6373:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3907,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6373:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3910,"mutability":"mutable","name":"_settlePercent","nameLocation":"6398:14:15","nodeType":"VariableDeclaration","scope":3985,"src":"6391:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3909,"name":"uint96","nodeType":"ElementaryTypeName","src":"6391:6:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3912,"mutability":"mutable","name":"_isPartner","nameLocation":"6419:10:15","nodeType":"VariableDeclaration","scope":3985,"src":"6414:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3911,"name":"bool","nodeType":"ElementaryTypeName","src":"6414:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6372:58:15"},"returnParameters":{"id":3917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"mutability":"mutable","name":"_feeParams","nameLocation":"6463:10:15","nodeType":"VariableDeclaration","scope":3985,"src":"6452:21:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_memory_ptr","typeString":"struct Paycrest.fee"},"typeName":{"id":3915,"nodeType":"UserDefinedTypeName","pathNode":{"id":3914,"name":"fee","nameLocations":["6452:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":3465,"src":"6452:3:15"},"referencedDeclaration":3465,"src":"6452:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3465_storage_ptr","typeString":"struct Paycrest.fee"}},"visibility":"internal"}],"src":"6451:24:15"},"scope":4150,"src":"6349:1109:15","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[4546],"body":{"id":3998,"nodeType":"Block","src":"7781:39:15","statements":[{"expression":{"baseExpression":{"id":3994,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"7798:5:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4475_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3996,"indexExpression":{"id":3995,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"7804:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7798:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage","typeString":"struct IPaycrest.Order storage ref"}},"functionReturnParameters":3993,"id":3997,"nodeType":"Return","src":"7791:22:15"}]},"documentation":{"id":3986,"nodeType":"StructuredDocumentation","src":"7659:41:15","text":"@dev See {getOrderInfo-IPaycrest}. "},"functionSelector":"768c6ec0","id":3999,"implemented":true,"kind":"function","modifiers":[],"name":"getOrderInfo","nameLocation":"7714:12:15","nodeType":"FunctionDefinition","parameters":{"id":3989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3988,"mutability":"mutable","name":"_orderId","nameLocation":"7735:8:15","nodeType":"VariableDeclaration","scope":3999,"src":"7727:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3987,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7727:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7726:18:15"},"returnParameters":{"id":3993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3992,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3999,"src":"7767:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_memory_ptr","typeString":"struct IPaycrest.Order"},"typeName":{"id":3991,"nodeType":"UserDefinedTypeName","pathNode":{"id":3990,"name":"Order","nameLocations":["7767:5:15"],"nodeType":"IdentifierPath","referencedDeclaration":4475,"src":"7767:5:15"},"referencedDeclaration":4475,"src":"7767:5:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage_ptr","typeString":"struct IPaycrest.Order"}},"visibility":"internal"}],"src":"7766:14:15"},"scope":4150,"src":"7705:115:15","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4537],"body":{"id":4011,"nodeType":"Block","src":"7946:49:15","statements":[{"expression":{"baseExpression":{"id":4007,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"7963:17:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4009,"indexExpression":{"id":4008,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"7981:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7963:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4006,"id":4010,"nodeType":"Return","src":"7956:32:15"}]},"documentation":{"id":4000,"nodeType":"StructuredDocumentation","src":"7826:45:15","text":"@dev See {isTokenSupported-IPaycrest}. "},"functionSelector":"75151b63","id":4012,"implemented":true,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"7885:16:15","nodeType":"FunctionDefinition","parameters":{"id":4003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4002,"mutability":"mutable","name":"_token","nameLocation":"7910:6:15","nodeType":"VariableDeclaration","scope":4012,"src":"7902:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4001,"name":"address","nodeType":"ElementaryTypeName","src":"7902:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7901:16:15"},"returnParameters":{"id":4006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4005,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4012,"src":"7940:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4004,"name":"bool","nodeType":"ElementaryTypeName","src":"7940:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7939:6:15"},"scope":4150,"src":"7876:119:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4025,"nodeType":"Block","src":"8162:57:15","statements":[{"expression":{"baseExpression":{"id":4021,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4198,"src":"8179:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4165_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":4023,"indexExpression":{"id":4022,"name":"code","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4015,"src":"8207:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8179:33:15","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4165_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"functionReturnParameters":4020,"id":4024,"nodeType":"Return","src":"8172:40:15"}]},"documentation":{"id":4013,"nodeType":"StructuredDocumentation","src":"8001:56:15","text":"@dev See {getSupportedInstitutionName-IPaycrest}. "},"functionSelector":"87490d86","id":4026,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInstitutionName","nameLocation":"8071:27:15","nodeType":"FunctionDefinition","parameters":{"id":4016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4015,"mutability":"mutable","name":"code","nameLocation":"8107:4:15","nodeType":"VariableDeclaration","scope":4026,"src":"8099:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4014,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8099:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8098:14:15"},"returnParameters":{"id":4020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4026,"src":"8136:24:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4165_memory_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"},"typeName":{"id":4018,"nodeType":"UserDefinedTypeName","pathNode":{"id":4017,"name":"InstitutionByCode","nameLocations":["8136:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":4165,"src":"8136:17:15"},"referencedDeclaration":4165,"src":"8136:17:15","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4165_storage_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"}},"visibility":"internal"}],"src":"8135:26:15"},"scope":4150,"src":"8062:157:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4084,"nodeType":"Block","src":"8322:390:15","statements":[{"assignments":[4039],"declarations":[{"constant":false,"id":4039,"mutability":"mutable","name":"institutions","nameLocation":"8353:12:15","nodeType":"VariableDeclaration","scope":4084,"src":"8332:33:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":4037,"nodeType":"UserDefinedTypeName","pathNode":{"id":4036,"name":"Institution","nameLocations":["8332:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":4160,"src":"8332:11:15"},"referencedDeclaration":4160,"src":"8332:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4160_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":4038,"nodeType":"ArrayTypeName","src":"8332:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"id":4043,"initialValue":{"baseExpression":{"id":4040,"name":"supportedInstitutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"8368:21:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$4160_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution storage ref[] storage ref)"}},"id":4042,"indexExpression":{"id":4041,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"8390:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8368:31:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_storage_$dyn_storage","typeString":"struct PaycrestSettingManager.Institution storage ref[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8332:67:15"},{"assignments":[4045],"declarations":[{"constant":false,"id":4045,"mutability":"mutable","name":"length","nameLocation":"8417:6:15","nodeType":"VariableDeclaration","scope":4084,"src":"8409:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4044,"name":"uint256","nodeType":"ElementaryTypeName","src":"8409:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4048,"initialValue":{"expression":{"id":4046,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"8426:12:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8439:6:15","memberName":"length","nodeType":"MemberAccess","src":"8426:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8409:36:15"},{"assignments":[4053],"declarations":[{"constant":false,"id":4053,"mutability":"mutable","name":"result","nameLocation":"8476:6:15","nodeType":"VariableDeclaration","scope":4084,"src":"8455:27:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":4051,"nodeType":"UserDefinedTypeName","pathNode":{"id":4050,"name":"Institution","nameLocations":["8455:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":4160,"src":"8455:11:15"},"referencedDeclaration":4160,"src":"8455:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4160_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":4052,"nodeType":"ArrayTypeName","src":"8455:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"id":4060,"initialValue":{"arguments":[{"id":4058,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4045,"src":"8503:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8485:17:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct PaycrestSettingManager.Institution memory[] memory)"},"typeName":{"baseType":{"id":4055,"nodeType":"UserDefinedTypeName","pathNode":{"id":4054,"name":"Institution","nameLocations":["8489:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":4160,"src":"8489:11:15"},"referencedDeclaration":4160,"src":"8489:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4160_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":4056,"nodeType":"ArrayTypeName","src":"8489:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}}},"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8485:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8455:55:15"},{"body":{"id":4080,"nodeType":"Block","src":"8563:111:15","statements":[{"expression":{"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4068,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"8577:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4070,"indexExpression":{"id":4069,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"8584:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8577:9:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4160_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4071,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"8589:12:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4073,"indexExpression":{"id":4072,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"8602:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8589:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4160_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"src":"8577:27:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4160_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":4075,"nodeType":"ExpressionStatement","src":"8577:27:15"},{"id":4079,"nodeType":"UncheckedBlock","src":"8618:46:15","statements":[{"expression":{"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8646:3:15","subExpression":{"id":4076,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"8646:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4078,"nodeType":"ExpressionStatement","src":"8646:3:15"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4065,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"8549:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4066,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4045,"src":"8553:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8549:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4081,"initializationExpression":{"assignments":[4062],"declarations":[{"constant":false,"id":4062,"mutability":"mutable","name":"i","nameLocation":"8542:1:15","nodeType":"VariableDeclaration","scope":4081,"src":"8534:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4061,"name":"uint256","nodeType":"ElementaryTypeName","src":"8534:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4064,"initialValue":{"hexValue":"30","id":4063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8546:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8534:13:15"},"nodeType":"ForStatement","src":"8529:145:15"},{"expression":{"id":4082,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"8699:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"functionReturnParameters":4034,"id":4083,"nodeType":"Return","src":"8692:13:15"}]},"functionSelector":"02621338","id":4085,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInstitutions","nameLocation":"8234:24:15","nodeType":"FunctionDefinition","parameters":{"id":4029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4028,"mutability":"mutable","name":"currency","nameLocation":"8267:8:15","nodeType":"VariableDeclaration","scope":4085,"src":"8259:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4027,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8259:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8258:18:15"},"returnParameters":{"id":4034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4033,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4085,"src":"8300:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":4031,"nodeType":"UserDefinedTypeName","pathNode":{"id":4030,"name":"Institution","nameLocations":["8300:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":4160,"src":"8300:11:15"},"referencedDeclaration":4160,"src":"8300:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4160_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":4032,"nodeType":"ArrayTypeName","src":"8300:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"src":"8299:22:15"},"scope":4150,"src":"8225:487:15","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4554],"body":{"id":4097,"nodeType":"Block","src":"8852:52:15","statements":[{"expression":{"components":[{"id":4093,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"8869:18:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4094,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"8889:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4095,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8868:29:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_uint256_$","typeString":"tuple(uint64,uint256)"}},"functionReturnParameters":4092,"id":4096,"nodeType":"Return","src":"8862:35:15"}]},"documentation":{"id":4086,"nodeType":"StructuredDocumentation","src":"8718:42:15","text":"@dev See {getFeeDetails-IPaycrest}. "},"functionSelector":"b810c636","id":4098,"implemented":true,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"8774:13:15","nodeType":"FunctionDefinition","parameters":{"id":4087,"nodeType":"ParameterList","parameters":[],"src":"8787:2:15"},"returnParameters":{"id":4092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4089,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4098,"src":"8821:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4088,"name":"uint64","nodeType":"ElementaryTypeName","src":"8821:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4091,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4098,"src":"8838:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4090,"name":"uint256","nodeType":"ElementaryTypeName","src":"8838:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8811:40:15"},"scope":4150,"src":"8765:139:15","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4560],"body":{"id":4106,"nodeType":"Block","src":"9027:42:15","statements":[{"expression":{"id":4104,"name":"_aggregatorAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4173,"src":"9044:18:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4103,"id":4105,"nodeType":"Return","src":"9037:25:15"}]},"documentation":{"id":4099,"nodeType":"StructuredDocumentation","src":"8910:49:15","text":"@dev See {getAggregatorAddress-IPaycrest}. "},"functionSelector":"e8d6e0de","id":4107,"implemented":true,"kind":"function","modifiers":[],"name":"getAggregatorAddress","nameLocation":"8973:20:15","nodeType":"FunctionDefinition","parameters":{"id":4100,"nodeType":"ParameterList","parameters":[],"src":"8993:2:15"},"returnParameters":{"id":4103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4102,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4107,"src":"9018:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4101,"name":"address","nodeType":"ElementaryTypeName","src":"9018:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9017:9:15"},"scope":4150,"src":"8964:105:15","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4574],"body":{"id":4119,"nodeType":"Block","src":"9203:46:15","statements":[{"expression":{"baseExpression":{"id":4115,"name":"_isWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"9220:14:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4117,"indexExpression":{"id":4116,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"9235:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9220:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4114,"id":4118,"nodeType":"Return","src":"9213:29:15"}]},"documentation":{"id":4108,"nodeType":"StructuredDocumentation","src":"9075:49:15","text":"@dev See {getWhitelistedStatus-IPaycrest}. "},"functionSelector":"d8e8de34","id":4120,"implemented":true,"kind":"function","modifiers":[],"name":"getWhitelistedStatus","nameLocation":"9138:20:15","nodeType":"FunctionDefinition","parameters":{"id":4111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4110,"mutability":"mutable","name":"sender","nameLocation":"9167:6:15","nodeType":"VariableDeclaration","scope":4120,"src":"9159:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4109,"name":"address","nodeType":"ElementaryTypeName","src":"9159:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9158:16:15"},"returnParameters":{"id":4114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4113,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4120,"src":"9197:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4112,"name":"bool","nodeType":"ElementaryTypeName","src":"9197:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9196:6:15"},"scope":4150,"src":"9129:120:15","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4566],"body":{"id":4128,"nodeType":"Block","src":"9363:35:15","statements":[{"expression":{"id":4126,"name":"_aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4175,"src":"9380:11:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":4125,"id":4127,"nodeType":"Return","src":"9373:18:15"}]},"documentation":{"id":4121,"nodeType":"StructuredDocumentation","src":"9255:42:15","text":"@dev See {getAggregator-IPaycrest}. "},"functionSelector":"3ad59dbc","id":4129,"implemented":true,"kind":"function","modifiers":[],"name":"getAggregator","nameLocation":"9311:13:15","nodeType":"FunctionDefinition","parameters":{"id":4122,"nodeType":"ParameterList","parameters":[],"src":"9324:2:15"},"returnParameters":{"id":4125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4129,"src":"9349:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4123,"name":"bytes","nodeType":"ElementaryTypeName","src":"9349:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9348:14:15"},"scope":4150,"src":"9302:96:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4148,"nodeType":"Block","src":"9585:61:15","statements":[{"expression":{"arguments":[{"id":4144,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4133,"src":"9619:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4145,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4135,"src":"9631:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4141,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4131,"src":"9602:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4140,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"9595:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3393_$","typeString":"type(contract IERC20)"}},"id":4142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9595:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3393","typeString":"contract IERC20"}},"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9610:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3360,"src":"9595:23:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9595:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4147,"nodeType":"ExpressionStatement","src":"9595:44:15"}]},"functionSelector":"d9caed12","id":4149,"implemented":true,"kind":"function","modifiers":[{"id":4138,"kind":"modifierInvocation","modifierName":{"id":4137,"name":"onlyOwner","nameLocations":["9575:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"9575:9:15"},"nodeType":"ModifierInvocation","src":"9575:9:15"}],"name":"withdraw","nameLocation":"9504:8:15","nodeType":"FunctionDefinition","parameters":{"id":4136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4131,"mutability":"mutable","name":"_token","nameLocation":"9521:6:15","nodeType":"VariableDeclaration","scope":4149,"src":"9513:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4130,"name":"address","nodeType":"ElementaryTypeName","src":"9513:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4133,"mutability":"mutable","name":"_recipient","nameLocation":"9537:10:15","nodeType":"VariableDeclaration","scope":4149,"src":"9529:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4132,"name":"address","nodeType":"ElementaryTypeName","src":"9529:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4135,"mutability":"mutable","name":"_amount","nameLocation":"9557:7:15","nodeType":"VariableDeclaration","scope":4149,"src":"9549:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4134,"name":"uint256","nodeType":"ElementaryTypeName","src":"9549:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9512:53:15"},"returnParameters":{"id":4139,"nodeType":"ParameterList","parameters":[],"src":"9585:0:15"},"scope":4150,"src":"9495:151:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4151,"src":"367:9282:15","usedErrors":[]}],"src":"38:9612:15"},"id":15},"contracts/PaycrestSettingManager.sol":{"ast":{"absolutePath":"contracts/PaycrestSettingManager.sol","exportedSymbols":{"AddressUpgradeable":[1120],"ContextUpgradeable":[1162],"Initializable":[300],"OwnableUpgradeable":[131],"PaycrestSettingManager":[4389]},"id":4390,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4152,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:16"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":4153,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4390,"sourceUnit":132,"src":"62:75:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4154,"name":"OwnableUpgradeable","nameLocations":["174:18:16"],"nodeType":"IdentifierPath","referencedDeclaration":131,"src":"174:18:16"},"id":4155,"nodeType":"InheritanceSpecifier","src":"174:18:16"}],"canonicalName":"PaycrestSettingManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4389,"linearizedBaseContracts":[4389,131,1162,300],"name":"PaycrestSettingManager","nameLocation":"148:22:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"PaycrestSettingManager.Institution","id":4160,"members":[{"constant":false,"id":4157,"mutability":"mutable","name":"code","nameLocation":"237:4:16","nodeType":"VariableDeclaration","scope":4160,"src":"229:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4156,"name":"bytes32","nodeType":"ElementaryTypeName","src":"229:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4159,"mutability":"mutable","name":"name","nameLocation":"294:4:16","nodeType":"VariableDeclaration","scope":4160,"src":"286:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"286:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Institution","nameLocation":"207:11:16","nodeType":"StructDefinition","scope":4389,"src":"200:109:16","visibility":"public"},{"canonicalName":"PaycrestSettingManager.InstitutionByCode","id":4165,"members":[{"constant":false,"id":4162,"mutability":"mutable","name":"name","nameLocation":"357:4:16","nodeType":"VariableDeclaration","scope":4165,"src":"349:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"349:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4164,"mutability":"mutable","name":"currency","nameLocation":"379:8:16","nodeType":"VariableDeclaration","scope":4165,"src":"371:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"371:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"InstitutionByCode","nameLocation":"321:17:16","nodeType":"StructDefinition","scope":4389,"src":"314:80:16","visibility":"public"},{"constant":false,"id":4167,"mutability":"mutable","name":"MAX_BPS","nameLocation":"416:7:16","nodeType":"VariableDeclaration","scope":4389,"src":"399:24:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4166,"name":"uint256","nodeType":"ElementaryTypeName","src":"399:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4169,"mutability":"mutable","name":"protocolFeePercent","nameLocation":"445:18:16","nodeType":"VariableDeclaration","scope":4389,"src":"429:34:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4168,"name":"uint64","nodeType":"ElementaryTypeName","src":"429:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4171,"mutability":"mutable","name":"feeRecipient","nameLocation":"492:12:16","nodeType":"VariableDeclaration","scope":4389,"src":"475:29:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4170,"name":"address","nodeType":"ElementaryTypeName","src":"475:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4173,"mutability":"mutable","name":"_aggregatorAddress","nameLocation":"527:18:16","nodeType":"VariableDeclaration","scope":4389,"src":"510:35:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4172,"name":"address","nodeType":"ElementaryTypeName","src":"510:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4175,"mutability":"mutable","name":"_aggregator","nameLocation":"566:11:16","nodeType":"VariableDeclaration","scope":4389,"src":"551:26:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes"},"typeName":{"id":4174,"name":"bytes","nodeType":"ElementaryTypeName","src":"551:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4179,"mutability":"mutable","name":"__gap","nameLocation":"717:5:16","nodeType":"VariableDeclaration","scope":4389,"src":"697:25:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":4176,"name":"uint256","nodeType":"ElementaryTypeName","src":"697:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4178,"length":{"hexValue":"3530","id":4177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"705:2:16","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"697:11:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"},{"constant":false,"id":4183,"mutability":"mutable","name":"_isTokenSupported","nameLocation":"763:17:16","nodeType":"VariableDeclaration","scope":4389,"src":"729:51:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4182,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4180,"name":"address","nodeType":"ElementaryTypeName","src":"737:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"729:24:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4181,"name":"bool","nodeType":"ElementaryTypeName","src":"748:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":4187,"mutability":"mutable","name":"_isWhitelisted","nameLocation":"820:14:16","nodeType":"VariableDeclaration","scope":4389,"src":"786:48:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4186,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4184,"name":"address","nodeType":"ElementaryTypeName","src":"794:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"786:24:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4185,"name":"bool","nodeType":"ElementaryTypeName","src":"805:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":4193,"mutability":"mutable","name":"supportedInstitutions","nameLocation":"884:21:16","nodeType":"VariableDeclaration","scope":4389,"src":"841:64:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$4160_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])"},"typeName":{"id":4192,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4188,"name":"bytes32","nodeType":"ElementaryTypeName","src":"849:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"841:33:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$4160_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":4190,"nodeType":"UserDefinedTypeName","pathNode":{"id":4189,"name":"Institution","nameLocations":["860:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":4160,"src":"860:11:16"},"referencedDeclaration":4160,"src":"860:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4160_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":4191,"nodeType":"ArrayTypeName","src":"860:13:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}}},"visibility":"internal"},{"constant":false,"id":4198,"mutability":"mutable","name":"supportedInstitutionsByCode","nameLocation":"958:27:16","nodeType":"VariableDeclaration","scope":4389,"src":"911:74:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4165_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)"},"typeName":{"id":4197,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"919:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"911:37:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4165_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4196,"nodeType":"UserDefinedTypeName","pathNode":{"id":4195,"name":"InstitutionByCode","nameLocations":["930:17:16"],"nodeType":"IdentifierPath","referencedDeclaration":4165,"src":"930:17:16"},"referencedDeclaration":4165,"src":"930:17:16","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4165_storage_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"}}},"visibility":"internal"},{"anonymous":false,"eventSelector":"e22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930","id":4206,"name":"SettingManagerBool","nameLocation":"998:18:16","nodeType":"EventDefinition","parameters":{"id":4205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4200,"indexed":false,"mutability":"mutable","name":"what","nameLocation":"1025:4:16","nodeType":"VariableDeclaration","scope":4206,"src":"1017:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4199,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1017:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4202,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1039:5:16","nodeType":"VariableDeclaration","scope":4206,"src":"1031:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4201,"name":"address","nodeType":"ElementaryTypeName","src":"1031:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4204,"indexed":false,"mutability":"mutable","name":"status","nameLocation":"1051:6:16","nodeType":"VariableDeclaration","scope":4206,"src":"1046:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4203,"name":"bool","nodeType":"ElementaryTypeName","src":"1046:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1016:42:16"},"src":"992:67:16"},{"anonymous":false,"eventSelector":"c8ca786c100bc62a0dffbe768b5f0b770d84e8604c5de54b54197b9066bb42a9","id":4210,"name":"PaycrestFees","nameLocation":"1070:12:16","nodeType":"EventDefinition","parameters":{"id":4209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4208,"indexed":false,"mutability":"mutable","name":"protocolFee","nameLocation":"1090:11:16","nodeType":"VariableDeclaration","scope":4210,"src":"1083:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4207,"name":"uint64","nodeType":"ElementaryTypeName","src":"1083:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1082:20:16"},"src":"1064:39:16"},{"anonymous":false,"eventSelector":"6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef","id":4214,"name":"SetAggregator","nameLocation":"1114:13:16","nodeType":"EventDefinition","parameters":{"id":4213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4212,"indexed":false,"mutability":"mutable","name":"aggregator","nameLocation":"1134:10:16","nodeType":"VariableDeclaration","scope":4214,"src":"1128:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4211,"name":"bytes","nodeType":"ElementaryTypeName","src":"1128:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1127:18:16"},"src":"1108:38:16"},{"anonymous":false,"eventSelector":"2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73","id":4218,"name":"SetFeeRecipient","nameLocation":"1157:15:16","nodeType":"EventDefinition","parameters":{"id":4217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4216,"indexed":false,"mutability":"mutable","name":"feeRecipient","nameLocation":"1181:12:16","nodeType":"VariableDeclaration","scope":4218,"src":"1173:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4215,"name":"address","nodeType":"ElementaryTypeName","src":"1173:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1172:22:16"},"src":"1151:44:16"},{"body":{"id":4265,"nodeType":"Block","src":"1490:255:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4230,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"1508:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1525:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1517:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4231,"name":"address","nodeType":"ElementaryTypeName","src":"1517:7:16","typeDescriptions":{}}},"id":4234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1517:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1508:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50617963726573743a207a65726f2061646472657373","id":4236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1529:24:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""},"value":"Paycrest: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""}],"id":4229,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1500:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1500:54:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4238,"nodeType":"ExpressionStatement","src":"1500:54:16"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4239,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4220,"src":"1568:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"746f6b656e","id":4240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1576:7:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_9b9b0454cadcb5884dd3faa6ba975da4d2459aa3f11d31291a25a8358f84946d","typeString":"literal_string \"token\""},"value":"token"},"src":"1568:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4248,"nodeType":"IfStatement","src":"1564:54:16","trueBody":{"expression":{"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4242,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"1585:17:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4244,"indexExpression":{"id":4243,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"1603:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1585:24:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4245,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"1612:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1585:33:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4247,"nodeType":"ExpressionStatement","src":"1585:33:16"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4249,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4220,"src":"1632:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"77686974656c697374","id":4250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1640:11:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_54c80de7e611b57d6d38523e3c0c59a6a3e72cddf62c95cf51a204e52c1a86ad","typeString":"literal_string \"whitelist\""},"value":"whitelist"},"src":"1632:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4258,"nodeType":"IfStatement","src":"1628:55:16","trueBody":{"expression":{"id":4256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4252,"name":"_isWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"1653:14:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4254,"indexExpression":{"id":4253,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"1668:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1653:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4255,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"1677:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1653:30:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4257,"nodeType":"ExpressionStatement","src":"1653:30:16"}},{"eventCall":{"arguments":[{"id":4260,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4220,"src":"1718:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4261,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"1724:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4262,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"1731:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4259,"name":"SettingManagerBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4206,"src":"1699:18:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_bool_$returns$__$","typeString":"function (bytes32,address,bool)"}},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1699:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4264,"nodeType":"EmitStatement","src":"1694:44:16"}]},"functionSelector":"99e3c0b4","id":4266,"implemented":true,"kind":"function","modifiers":[{"id":4227,"kind":"modifierInvocation","modifierName":{"id":4226,"name":"onlyOwner","nameLocations":["1480:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1480:9:16"},"nodeType":"ModifierInvocation","src":"1480:9:16"}],"name":"settingManagerBool","nameLocation":"1410:18:16","nodeType":"FunctionDefinition","parameters":{"id":4225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4220,"mutability":"mutable","name":"what","nameLocation":"1437:4:16","nodeType":"VariableDeclaration","scope":4266,"src":"1429:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1429:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4222,"mutability":"mutable","name":"value","nameLocation":"1451:5:16","nodeType":"VariableDeclaration","scope":4266,"src":"1443:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4221,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4224,"mutability":"mutable","name":"status","nameLocation":"1463:6:16","nodeType":"VariableDeclaration","scope":4266,"src":"1458:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4223,"name":"bool","nodeType":"ElementaryTypeName","src":"1458:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1428:42:16"},"returnParameters":{"id":4228,"nodeType":"ParameterList","parameters":[],"src":"1490:0:16"},"scope":4389,"src":"1401:344:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4319,"nodeType":"Block","src":"1857:394:16","statements":[{"assignments":[4278],"declarations":[{"constant":false,"id":4278,"mutability":"mutable","name":"length","nameLocation":"1876:6:16","nodeType":"VariableDeclaration","scope":4319,"src":"1868:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4277,"name":"uint256","nodeType":"ElementaryTypeName","src":"1868:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4281,"initialValue":{"expression":{"id":4279,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4272,"src":"1885:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1898:6:16","memberName":"length","nodeType":"MemberAccess","src":"1885:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1868:36:16"},{"body":{"id":4317,"nodeType":"Block","src":"1945:300:16","statements":[{"expression":{"arguments":[{"baseExpression":{"id":4293,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4272,"src":"1996:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4295,"indexExpression":{"id":4294,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4283,"src":"2009:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1996:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4160_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Institution_$4160_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}],"expression":{"baseExpression":{"id":4289,"name":"supportedInstitutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"1959:21:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$4160_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution storage ref[] storage ref)"}},"id":4291,"indexExpression":{"id":4290,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"1981:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1959:31:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_storage_$dyn_storage","typeString":"struct PaycrestSettingManager.Institution storage ref[] storage ref"}},"id":4292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1991:4:16","memberName":"push","nodeType":"MemberAccess","src":"1959:36:16","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Institution_$4160_storage_$dyn_storage_ptr_$_t_struct$_Institution_$4160_storage_$returns$__$attached_to$_t_array$_t_struct$_Institution_$4160_storage_$dyn_storage_ptr_$","typeString":"function (struct PaycrestSettingManager.Institution storage ref[] storage pointer,struct PaycrestSettingManager.Institution storage ref)"}},"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1959:53:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4297,"nodeType":"ExpressionStatement","src":"1959:53:16"},{"expression":{"id":4311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4298,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4198,"src":"2026:27:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4165_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":4303,"indexExpression":{"expression":{"baseExpression":{"id":4299,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4272,"src":"2054:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4301,"indexExpression":{"id":4300,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4283,"src":"2067:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2054:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4160_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":4302,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2070:4:16","memberName":"code","nodeType":"MemberAccess","referencedDeclaration":4157,"src":"2054:20:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2026:49:16","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4165_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":4305,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4272,"src":"2120:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4307,"indexExpression":{"id":4306,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4283,"src":"2133:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2120:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4160_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":4308,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2136:4:16","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":4159,"src":"2120:20:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4309,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"2152:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4304,"name":"InstitutionByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4165,"src":"2078:17:16","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_InstitutionByCode_$4165_storage_ptr_$","typeString":"type(struct PaycrestSettingManager.InstitutionByCode storage pointer)"}},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2114:4:16","2142:8:16"],"names":["name","currency"],"nodeType":"FunctionCall","src":"2078:97:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4165_memory_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode memory"}},"src":"2026:149:16","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4165_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"id":4312,"nodeType":"ExpressionStatement","src":"2026:149:16"},{"id":4316,"nodeType":"UncheckedBlock","src":"2189:46:16","statements":[{"expression":{"id":4314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2217:3:16","subExpression":{"id":4313,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4283,"src":"2217:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4315,"nodeType":"ExpressionStatement","src":"2217:3:16"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4286,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4283,"src":"1931:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4287,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"1935:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1931:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4318,"initializationExpression":{"assignments":[4283],"declarations":[{"constant":false,"id":4283,"mutability":"mutable","name":"i","nameLocation":"1924:1:16","nodeType":"VariableDeclaration","scope":4318,"src":"1919:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4282,"name":"uint","nodeType":"ElementaryTypeName","src":"1919:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4285,"initialValue":{"hexValue":"30","id":4284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1928:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1919:10:16"},"nodeType":"ForStatement","src":"1914:331:16"}]},"functionSelector":"32200882","id":4320,"implemented":true,"kind":"function","modifiers":[{"id":4275,"kind":"modifierInvocation","modifierName":{"id":4274,"name":"onlyOwner","nameLocations":["1847:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1847:9:16"},"nodeType":"ModifierInvocation","src":"1847:9:16"}],"name":"setSupportedInstitutions","nameLocation":"1760:24:16","nodeType":"FunctionDefinition","parameters":{"id":4273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4268,"mutability":"mutable","name":"currency","nameLocation":"1793:8:16","nodeType":"VariableDeclaration","scope":4320,"src":"1785:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4267,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1785:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4272,"mutability":"mutable","name":"institutions","nameLocation":"1824:12:16","nodeType":"VariableDeclaration","scope":4320,"src":"1803:33:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":4270,"nodeType":"UserDefinedTypeName","pathNode":{"id":4269,"name":"Institution","nameLocations":["1803:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":4160,"src":"1803:11:16"},"referencedDeclaration":4160,"src":"1803:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4160_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":4271,"nodeType":"ArrayTypeName","src":"1803:13:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4160_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"src":"1784:53:16"},"returnParameters":{"id":4276,"nodeType":"ParameterList","parameters":[],"src":"1857:0:16"},"scope":4389,"src":"1751:500:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4335,"nodeType":"Block","src":"2332:105:16","statements":[{"expression":{"id":4329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4327,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"2342:18:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4328,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"2363:19:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2342:40:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":4330,"nodeType":"ExpressionStatement","src":"2342:40:16"},{"eventCall":{"arguments":[{"id":4332,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"2410:19:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":4331,"name":"PaycrestFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4210,"src":"2397:12:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":4333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2397:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4334,"nodeType":"EmitStatement","src":"2392:38:16"}]},"functionSelector":"84630736","id":4336,"implemented":true,"kind":"function","modifiers":[{"id":4325,"kind":"modifierInvocation","modifierName":{"id":4324,"name":"onlyOwner","nameLocations":["2322:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2322:9:16"},"nodeType":"ModifierInvocation","src":"2322:9:16"}],"name":"updateProtocolFees","nameLocation":"2266:18:16","nodeType":"FunctionDefinition","parameters":{"id":4323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4322,"mutability":"mutable","name":"_protocolFeePercent","nameLocation":"2292:19:16","nodeType":"VariableDeclaration","scope":4336,"src":"2285:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4321,"name":"uint64","nodeType":"ElementaryTypeName","src":"2285:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2284:28:16"},"returnParameters":{"id":4326,"nodeType":"ParameterList","parameters":[],"src":"2332:0:16"},"scope":4389,"src":"2257:180:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4371,"nodeType":"Block","src":"2524:182:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4346,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4340,"src":"2542:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2559:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2551:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4347,"name":"address","nodeType":"ElementaryTypeName","src":"2551:7:16","typeDescriptions":{}}},"id":4350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2551:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2542:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50617963726573743a207a65726f2061646472657373","id":4352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2563:24:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""},"value":"Paycrest: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""}],"id":4345,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2534:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2534:54:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4354,"nodeType":"ExpressionStatement","src":"2534:54:16"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4355,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"2602:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"666565","id":4356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2610:5:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02","typeString":"literal_string \"fee\""},"value":"fee"},"src":"2602:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4362,"nodeType":"IfStatement","src":"2598:39:16","trueBody":{"expression":{"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4358,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"2617:12:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4340,"src":"2632:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2617:20:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4361,"nodeType":"ExpressionStatement","src":"2617:20:16"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4363,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"2651:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"61676772656761746f72","id":4364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2659:12:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_e124d7cc79a19705865fa21b784ba187cd393559e960c0c071132cb60354d1a3","typeString":"literal_string \"aggregator\""},"value":"aggregator"},"src":"2651:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4370,"nodeType":"IfStatement","src":"2647:52:16","trueBody":{"expression":{"id":4368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4366,"name":"_aggregatorAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4173,"src":"2673:18:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4367,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4340,"src":"2694:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2673:26:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4369,"nodeType":"ExpressionStatement","src":"2673:26:16"}}]},"functionSelector":"79a0effb","id":4372,"implemented":true,"kind":"function","modifiers":[{"id":4343,"kind":"modifierInvocation","modifierName":{"id":4342,"name":"onlyOwner","nameLocations":["2514:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2514:9:16"},"nodeType":"ModifierInvocation","src":"2514:9:16"}],"name":"updateProtocolAddresses","nameLocation":"2452:23:16","nodeType":"FunctionDefinition","parameters":{"id":4341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4338,"mutability":"mutable","name":"what","nameLocation":"2484:4:16","nodeType":"VariableDeclaration","scope":4372,"src":"2476:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2476:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4340,"mutability":"mutable","name":"value","nameLocation":"2498:5:16","nodeType":"VariableDeclaration","scope":4372,"src":"2490:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4339,"name":"address","nodeType":"ElementaryTypeName","src":"2490:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2475:29:16"},"returnParameters":{"id":4344,"nodeType":"ParameterList","parameters":[],"src":"2524:0:16"},"scope":4389,"src":"2443:263:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4387,"nodeType":"Block","src":"2792:81:16","statements":[{"expression":{"id":4381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4379,"name":"_aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4175,"src":"2802:11:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4380,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"2816:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"src":"2802:24:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4382,"nodeType":"ExpressionStatement","src":"2802:24:16"},{"eventCall":{"arguments":[{"id":4384,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"2855:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4383,"name":"SetAggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4214,"src":"2841:13:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2841:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4386,"nodeType":"EmitStatement","src":"2836:30:16"}]},"functionSelector":"cb79455b","id":4388,"implemented":true,"kind":"function","modifiers":[{"id":4377,"kind":"modifierInvocation","modifierName":{"id":4376,"name":"onlyOwner","nameLocations":["2782:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2782:9:16"},"nodeType":"ModifierInvocation","src":"2782:9:16"}],"name":"updateProtocolAggregator","nameLocation":"2721:24:16","nodeType":"FunctionDefinition","parameters":{"id":4375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4374,"mutability":"mutable","name":"aggregator","nameLocation":"2761:10:16","nodeType":"VariableDeclaration","scope":4388,"src":"2746:25:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4373,"name":"bytes","nodeType":"ElementaryTypeName","src":"2746:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2745:27:16"},"returnParameters":{"id":4378,"nodeType":"ParameterList","parameters":[],"src":"2792:0:16"},"scope":4389,"src":"2712:161:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4390,"src":"139:2737:16","usedErrors":[]}],"src":"38:2839:16"},"id":16},"contracts/interface/IPaycrest.sol":{"ast":{"absolutePath":"contracts/interface/IPaycrest.sol","exportedSymbols":{"IERC20":[3393],"IPaycrest":[4575]},"id":4576,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4391,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:17"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":4393,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4576,"sourceUnit":3394,"src":"63:70:17","symbolAliases":[{"foreign":{"id":4392,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"71:6:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IPaycrest","contractDependencies":[],"contractKind":"interface","documentation":{"id":4394,"nodeType":"StructuredDocumentation","src":"134:130:17","text":" @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\n Factory and global config params"},"fullyImplemented":false,"id":4575,"linearizedBaseContracts":[4575],"name":"IPaycrest","nameLocation":"275:9:17","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":4395,"nodeType":"StructuredDocumentation","src":"483:38:17","text":"@dev Emitted when deposit is made."},"eventSelector":"2c205f90c01160d42994a0eb521810056d94bb82a1fcb038d7179c4158a1f15b","id":4411,"name":"Deposit","nameLocation":"532:7:17","nodeType":"EventDefinition","parameters":{"id":4410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4397,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"556:5:17","nodeType":"VariableDeclaration","scope":4411,"src":"540:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4396,"name":"address","nodeType":"ElementaryTypeName","src":"540:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4399,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"579:6:17","nodeType":"VariableDeclaration","scope":4411,"src":"563:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4398,"name":"uint256","nodeType":"ElementaryTypeName","src":"563:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4401,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"603:7:17","nodeType":"VariableDeclaration","scope":4411,"src":"587:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4400,"name":"bytes32","nodeType":"ElementaryTypeName","src":"587:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4403,"indexed":false,"mutability":"mutable","name":"rate","nameLocation":"620:4:17","nodeType":"VariableDeclaration","scope":4411,"src":"612:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4402,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4405,"indexed":false,"mutability":"mutable","name":"institutionCode","nameLocation":"634:15:17","nodeType":"VariableDeclaration","scope":4411,"src":"626:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4404,"name":"bytes32","nodeType":"ElementaryTypeName","src":"626:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4407,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"659:5:17","nodeType":"VariableDeclaration","scope":4411,"src":"651:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"651:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4409,"indexed":false,"mutability":"mutable","name":"messageHash","nameLocation":"673:11:17","nodeType":"VariableDeclaration","scope":4411,"src":"666:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4408,"name":"string","nodeType":"ElementaryTypeName","src":"666:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"539:146:17"},"src":"526:160:17"},{"anonymous":false,"documentation":{"id":4412,"nodeType":"StructuredDocumentation","src":"691:52:17","text":"@dev Emitted when aggregator settle transaction."},"eventSelector":"f26de978cbaea68ea699627155a10ad53df3321b0f95a08264c0cfd6d4c05326","id":4424,"name":"Settled","nameLocation":"754:7:17","nodeType":"EventDefinition","parameters":{"id":4423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4414,"indexed":false,"mutability":"mutable","name":"_splitOrderId","nameLocation":"770:13:17","nodeType":"VariableDeclaration","scope":4424,"src":"762:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4413,"name":"bytes32","nodeType":"ElementaryTypeName","src":"762:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4416,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"801:7:17","nodeType":"VariableDeclaration","scope":4424,"src":"785:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4415,"name":"bytes32","nodeType":"ElementaryTypeName","src":"785:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4418,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"818:5:17","nodeType":"VariableDeclaration","scope":4424,"src":"810:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4417,"name":"bytes32","nodeType":"ElementaryTypeName","src":"810:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4420,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"841:17:17","nodeType":"VariableDeclaration","scope":4424,"src":"825:33:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4419,"name":"address","nodeType":"ElementaryTypeName","src":"825:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4422,"indexed":false,"mutability":"mutable","name":"settlePercent","nameLocation":"867:13:17","nodeType":"VariableDeclaration","scope":4424,"src":"860:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4421,"name":"uint96","nodeType":"ElementaryTypeName","src":"860:6:17","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"761:120:17"},"src":"748:134:17"},{"anonymous":false,"documentation":{"id":4425,"nodeType":"StructuredDocumentation","src":"887:52:17","text":"@dev Emitted when aggregator refund transaction."},"eventSelector":"007c875846b687732a7579c19bb1dade66cd14e9f4f809565e2b2b5e76c72b4f","id":4431,"name":"Refunded","nameLocation":"950:8:17","nodeType":"EventDefinition","parameters":{"id":4430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4427,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"975:7:17","nodeType":"VariableDeclaration","scope":4431,"src":"959:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4426,"name":"bytes32","nodeType":"ElementaryTypeName","src":"959:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4429,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"992:5:17","nodeType":"VariableDeclaration","scope":4431,"src":"984:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4428,"name":"bytes32","nodeType":"ElementaryTypeName","src":"984:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"958:40:17"},"src":"944:55:17"},{"anonymous":false,"documentation":{"id":4432,"nodeType":"StructuredDocumentation","src":"1004:48:17","text":"@dev Emitted when sender get therir rewards."},"eventSelector":"96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2","id":4438,"name":"TransferSenderFee","nameLocation":"1063:17:17","nodeType":"EventDefinition","parameters":{"id":4437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4434,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1097:6:17","nodeType":"VariableDeclaration","scope":4438,"src":"1081:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4433,"name":"address","nodeType":"ElementaryTypeName","src":"1081:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4436,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1121:6:17","nodeType":"VariableDeclaration","scope":4438,"src":"1105:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4435,"name":"uint256","nodeType":"ElementaryTypeName","src":"1105:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1080:48:17"},"src":"1057:72:17"},{"anonymous":false,"documentation":{"id":4439,"nodeType":"StructuredDocumentation","src":"1134:59:17","text":"@dev Emitted when primary validator get therir rewards."},"eventSelector":"61dceb70b8f97239c33a3f9c0d0efc6c8759c7e9a808f75dd42b3a0f213186c2","id":4445,"name":"RewardValidator","nameLocation":"1204:15:17","nodeType":"EventDefinition","parameters":{"id":4444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4441,"indexed":true,"mutability":"mutable","name":"validator","nameLocation":"1236:9:17","nodeType":"VariableDeclaration","scope":4445,"src":"1220:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4440,"name":"address","nodeType":"ElementaryTypeName","src":"1220:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4443,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1263:6:17","nodeType":"VariableDeclaration","scope":4445,"src":"1247:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4442,"name":"uint256","nodeType":"ElementaryTypeName","src":"1247:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1219:51:17"},"src":"1198:73:17"},{"canonicalName":"IPaycrest.TransactionMetadata","id":4456,"members":[{"constant":false,"id":4447,"mutability":"mutable","name":"identifier","nameLocation":"1509:10:17","nodeType":"VariableDeclaration","scope":4456,"src":"1502:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4446,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1502:6:17","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4449,"mutability":"mutable","name":"institution","nameLocation":"1628:11:17","nodeType":"VariableDeclaration","scope":4456,"src":"1621:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4448,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1621:6:17","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4451,"mutability":"mutable","name":"name","nameLocation":"1747:4:17","nodeType":"VariableDeclaration","scope":4456,"src":"1740:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4450,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1740:6:17","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4453,"mutability":"mutable","name":"currency","nameLocation":"1866:8:17","nodeType":"VariableDeclaration","scope":4456,"src":"1859:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4452,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1859:6:17","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4455,"mutability":"mutable","name":"liquidityProviderID","nameLocation":"1986:19:17","nodeType":"VariableDeclaration","scope":4456,"src":"1978:27:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4454,"name":"uint256","nodeType":"ElementaryTypeName","src":"1978:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"TransactionMetadata","nameLocation":"1472:19:17","nodeType":"StructDefinition","scope":4575,"src":"1465:629:17","visibility":"public"},{"canonicalName":"IPaycrest.Order","id":4475,"members":[{"constant":false,"id":4458,"mutability":"mutable","name":"seller","nameLocation":"2131:6:17","nodeType":"VariableDeclaration","scope":4475,"src":"2123:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4457,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4460,"mutability":"mutable","name":"token","nameLocation":"2251:5:17","nodeType":"VariableDeclaration","scope":4475,"src":"2243:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4459,"name":"address","nodeType":"ElementaryTypeName","src":"2243:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4462,"mutability":"mutable","name":"senderFeeRecipient","nameLocation":"2371:18:17","nodeType":"VariableDeclaration","scope":4475,"src":"2363:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4461,"name":"address","nodeType":"ElementaryTypeName","src":"2363:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4464,"mutability":"mutable","name":"senderFee","nameLocation":"2407:9:17","nodeType":"VariableDeclaration","scope":4475,"src":"2399:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4463,"name":"uint256","nodeType":"ElementaryTypeName","src":"2399:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4466,"mutability":"mutable","name":"rate","nameLocation":"2433:4:17","nodeType":"VariableDeclaration","scope":4475,"src":"2426:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4465,"name":"uint96","nodeType":"ElementaryTypeName","src":"2426:6:17","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":4468,"mutability":"mutable","name":"isFulfilled","nameLocation":"2551:11:17","nodeType":"VariableDeclaration","scope":4475,"src":"2546:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4467,"name":"bool","nodeType":"ElementaryTypeName","src":"2546:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4470,"mutability":"mutable","name":"refundAddress","nameLocation":"2695:13:17","nodeType":"VariableDeclaration","scope":4475,"src":"2687:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4469,"name":"address","nodeType":"ElementaryTypeName","src":"2687:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4472,"mutability":"mutable","name":"currentBPS","nameLocation":"2835:10:17","nodeType":"VariableDeclaration","scope":4475,"src":"2828:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4471,"name":"uint96","nodeType":"ElementaryTypeName","src":"2828:6:17","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":4474,"mutability":"mutable","name":"amount","nameLocation":"2959:6:17","nodeType":"VariableDeclaration","scope":4475,"src":"2951:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4473,"name":"uint256","nodeType":"ElementaryTypeName","src":"2951:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Order","nameLocation":"2107:5:17","nodeType":"StructDefinition","scope":4575,"src":"2100:968:17","visibility":"public"},{"documentation":{"id":4476,"nodeType":"StructuredDocumentation","src":"3270:1232:17","text":"@notice lock sender `_amount` of `token` into Paycrest.\n Requirements:\n `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\n `_token` must be an acceptable token. @dev See {isTokenSupported}.\n `amount` must be greater than minimum\n `_refundable` refundable address must not be zero address\n @param _token address of the token.\n @param _amount amount in the decimal of `_token` above.\n @param _institutionCode institution code of the sender.\n @param _label reference of the sender.\n @param _rate rate at which sender intended to sell `_amount` of `_token`.\n @param _senderFeeRecipient address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\n @param _senderFee amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\n @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\n @param messageHash hash must be the result of a hash operation for the verification to be secure. message\n @return _orderId the bytes20 which is the orderId"},"functionSelector":"2654ec7e","id":4499,"implemented":false,"kind":"function","modifiers":[],"name":"createOrder","nameLocation":"4516:11:17","nodeType":"FunctionDefinition","parameters":{"id":4495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4478,"mutability":"mutable","name":"_token","nameLocation":"4545:6:17","nodeType":"VariableDeclaration","scope":4499,"src":"4537:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4477,"name":"address","nodeType":"ElementaryTypeName","src":"4537:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4480,"mutability":"mutable","name":"_amount","nameLocation":"4570:7:17","nodeType":"VariableDeclaration","scope":4499,"src":"4562:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4479,"name":"uint256","nodeType":"ElementaryTypeName","src":"4562:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4482,"mutability":"mutable","name":"_institutionCode","nameLocation":"4596:16:17","nodeType":"VariableDeclaration","scope":4499,"src":"4588:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4481,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4588:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4484,"mutability":"mutable","name":"_label","nameLocation":"4630:6:17","nodeType":"VariableDeclaration","scope":4499,"src":"4622:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4483,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4622:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4486,"mutability":"mutable","name":"_rate","nameLocation":"4653:5:17","nodeType":"VariableDeclaration","scope":4499,"src":"4646:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4485,"name":"uint96","nodeType":"ElementaryTypeName","src":"4646:6:17","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":4488,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"4677:19:17","nodeType":"VariableDeclaration","scope":4499,"src":"4669:27:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4487,"name":"address","nodeType":"ElementaryTypeName","src":"4669:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4490,"mutability":"mutable","name":"_senderFee","nameLocation":"4714:10:17","nodeType":"VariableDeclaration","scope":4499,"src":"4706:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4489,"name":"uint256","nodeType":"ElementaryTypeName","src":"4706:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4492,"mutability":"mutable","name":"_refundAddress","nameLocation":"4742:14:17","nodeType":"VariableDeclaration","scope":4499,"src":"4734:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4491,"name":"address","nodeType":"ElementaryTypeName","src":"4734:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4494,"mutability":"mutable","name":"messageHash","nameLocation":"4783:11:17","nodeType":"VariableDeclaration","scope":4499,"src":"4767:27:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4493,"name":"string","nodeType":"ElementaryTypeName","src":"4767:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4527:268:17"},"returnParameters":{"id":4498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4497,"mutability":"mutable","name":"_orderId","nameLocation":"4822:8:17","nodeType":"VariableDeclaration","scope":4499,"src":"4814:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4496,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4814:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4813:18:17"},"scope":4575,"src":"4507:325:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4500,"nodeType":"StructuredDocumentation","src":"4838:832:17","text":"@notice settle transaction and distribute rewards accordingly.\n Requirements:\n {only aggregators call}.\n `_orderId` it must be less than total ids.\n `_orderId` it must be an open Id.\n `_primaryValidator` must have stake on the Paycrest staking platform.\n `_secondaryValidators` must have stake on the Paycrest staking platform.\n `amount` must be greater than minimum\n `_refundable` refundable address must not be zero address\n @param _orderId transaction Id.\n @param _label reference of the sender.\n @param _liquidityProvider address of the liquidity provider.\n @param _settlePercent rate at which the transaction is settled.\n @param _isPartner is the liquidity provider a partner.\n @return return the status of transaction {bool}"},"functionSelector":"5fe44cac","id":4519,"implemented":false,"kind":"function","modifiers":[],"name":"settle","nameLocation":"5684:6:17","nodeType":"FunctionDefinition","parameters":{"id":4513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4502,"mutability":"mutable","name":"_splitOrderId","nameLocation":"5699:13:17","nodeType":"VariableDeclaration","scope":4519,"src":"5691:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5691:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4504,"mutability":"mutable","name":"_orderId","nameLocation":"5722:8:17","nodeType":"VariableDeclaration","scope":4519,"src":"5714:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4503,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5714:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4506,"mutability":"mutable","name":"_label","nameLocation":"5740:6:17","nodeType":"VariableDeclaration","scope":4519,"src":"5732:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4505,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5732:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4508,"mutability":"mutable","name":"_liquidityProvider","nameLocation":"5756:18:17","nodeType":"VariableDeclaration","scope":4519,"src":"5748:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4507,"name":"address","nodeType":"ElementaryTypeName","src":"5748:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4510,"mutability":"mutable","name":"_settlePercent","nameLocation":"5783:14:17","nodeType":"VariableDeclaration","scope":4519,"src":"5776:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4509,"name":"uint64","nodeType":"ElementaryTypeName","src":"5776:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4512,"mutability":"mutable","name":"_isPartner","nameLocation":"5804:10:17","nodeType":"VariableDeclaration","scope":4519,"src":"5799:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4511,"name":"bool","nodeType":"ElementaryTypeName","src":"5799:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5690:125:17"},"returnParameters":{"id":4518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4519,"src":"5834:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4514,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5834:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4519,"src":"5843:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4516,"name":"address","nodeType":"ElementaryTypeName","src":"5843:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5833:18:17"},"scope":4575,"src":"5675:177:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4520,"nodeType":"StructuredDocumentation","src":"5858:383:17","text":"@notice refund to the specified refundable address.\n Requirements:\n {only aggregators call}.\n `_orderId` it must be less than total ids.\n `_orderId` it must be an open Id.\n `isFulfilled` must be false.\n @param _orderId transaction Id.\n @param _label reference of the sender.\n @return return the status of transaction {bool}"},"functionSelector":"e4683a79","id":4529,"implemented":false,"kind":"function","modifiers":[],"name":"refund","nameLocation":"6255:6:17","nodeType":"FunctionDefinition","parameters":{"id":4525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4522,"mutability":"mutable","name":"_orderId","nameLocation":"6270:8:17","nodeType":"VariableDeclaration","scope":4529,"src":"6262:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6262:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4524,"mutability":"mutable","name":"_label","nameLocation":"6288:6:17","nodeType":"VariableDeclaration","scope":4529,"src":"6280:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6280:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6261:34:17"},"returnParameters":{"id":4528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4527,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4529,"src":"6314:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4526,"name":"bool","nodeType":"ElementaryTypeName","src":"6314:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6313:6:17"},"scope":4575,"src":"6246:74:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4530,"nodeType":"StructuredDocumentation","src":"6326:152:17","text":"@notice get supported token from Paycrest.\n @param _token address of the token to check.\n @return return the status of `_token` {bool}"},"functionSelector":"75151b63","id":4537,"implemented":false,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"6492:16:17","nodeType":"FunctionDefinition","parameters":{"id":4533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4532,"mutability":"mutable","name":"_token","nameLocation":"6517:6:17","nodeType":"VariableDeclaration","scope":4537,"src":"6509:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4531,"name":"address","nodeType":"ElementaryTypeName","src":"6509:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6508:16:17"},"returnParameters":{"id":4536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4535,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4537,"src":"6547:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4534,"name":"bool","nodeType":"ElementaryTypeName","src":"6547:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6546:6:17"},"scope":4575,"src":"6483:70:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4538,"nodeType":"StructuredDocumentation","src":"6559:70:17","text":"@notice get order details.\n @param _orderId transaction Id."},"functionSelector":"768c6ec0","id":4546,"implemented":false,"kind":"function","modifiers":[],"name":"getOrderInfo","nameLocation":"6643:12:17","nodeType":"FunctionDefinition","parameters":{"id":4541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4540,"mutability":"mutable","name":"_orderId","nameLocation":"6664:8:17","nodeType":"VariableDeclaration","scope":4546,"src":"6656:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4539,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6656:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6655:18:17"},"returnParameters":{"id":4545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4544,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4546,"src":"6696:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_memory_ptr","typeString":"struct IPaycrest.Order"},"typeName":{"id":4543,"nodeType":"UserDefinedTypeName","pathNode":{"id":4542,"name":"Order","nameLocations":["6696:5:17"],"nodeType":"IdentifierPath","referencedDeclaration":4475,"src":"6696:5:17"},"referencedDeclaration":4475,"src":"6696:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4475_storage_ptr","typeString":"struct IPaycrest.Order"}},"visibility":"internal"}],"src":"6695:14:17"},"scope":4575,"src":"6634:76:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4547,"nodeType":"StructuredDocumentation","src":"6716:204:17","text":"@notice get every rewards and address on Paycrest.\n @return protocolReward amount that will be taken in percentage on all trade.\n @return max_bps maximum amount in bps \"100% == 100_000\"."},"functionSelector":"b810c636","id":4554,"implemented":false,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"6934:13:17","nodeType":"FunctionDefinition","parameters":{"id":4548,"nodeType":"ParameterList","parameters":[],"src":"6947:2:17"},"returnParameters":{"id":4553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4550,"mutability":"mutable","name":"protocolReward","nameLocation":"6988:14:17","nodeType":"VariableDeclaration","scope":4554,"src":"6981:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4549,"name":"uint64","nodeType":"ElementaryTypeName","src":"6981:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4552,"mutability":"mutable","name":"max_bps","nameLocation":"7021:7:17","nodeType":"VariableDeclaration","scope":4554,"src":"7013:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4551,"name":"uint256","nodeType":"ElementaryTypeName","src":"7013:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6971:63:17"},"scope":4575,"src":"6925:110:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4555,"nodeType":"StructuredDocumentation","src":"7041:89:17","text":"@notice get address of liquidity aggregator.\n @return address of `Aggregator`."},"functionSelector":"e8d6e0de","id":4560,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregatorAddress","nameLocation":"7144:20:17","nodeType":"FunctionDefinition","parameters":{"id":4556,"nodeType":"ParameterList","parameters":[],"src":"7164:2:17"},"returnParameters":{"id":4559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4560,"src":"7189:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4557,"name":"address","nodeType":"ElementaryTypeName","src":"7189:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7188:9:17"},"scope":4575,"src":"7135:63:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4561,"nodeType":"StructuredDocumentation","src":"7204:77:17","text":"@notice get aggregator public key.\n @return aggregator public key."},"functionSelector":"3ad59dbc","id":4566,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregator","nameLocation":"7295:13:17","nodeType":"FunctionDefinition","parameters":{"id":4562,"nodeType":"ParameterList","parameters":[],"src":"7308:2:17"},"returnParameters":{"id":4565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4566,"src":"7333:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4563,"name":"bytes","nodeType":"ElementaryTypeName","src":"7333:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7332:14:17"},"scope":4575,"src":"7286:61:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4567,"nodeType":"StructuredDocumentation","src":"7357:136:17","text":"@notice get address of sender whitelisting status.\n @param sender address of the sender.\n @return address of `status`."},"functionSelector":"d8e8de34","id":4574,"implemented":false,"kind":"function","modifiers":[],"name":"getWhitelistedStatus","nameLocation":"7507:20:17","nodeType":"FunctionDefinition","parameters":{"id":4570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4569,"mutability":"mutable","name":"sender","nameLocation":"7536:6:17","nodeType":"VariableDeclaration","scope":4574,"src":"7528:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4568,"name":"address","nodeType":"ElementaryTypeName","src":"7528:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7527:16:17"},"returnParameters":{"id":4573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4574,"src":"7566:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4571,"name":"bool","nodeType":"ElementaryTypeName","src":"7566:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7565:6:17"},"scope":4575,"src":"7498:74:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4576,"src":"265:7310:17","usedErrors":[]}],"src":"38:7538:17"},"id":17},"contracts/interface/IPaycrestStake.sol":{"ast":{"absolutePath":"contracts/interface/IPaycrestStake.sol","exportedSymbols":{"IPaycrestStake":[4593]},"id":4594,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4577,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IPaycrestStake","contractDependencies":[],"contractKind":"interface","documentation":{"id":4578,"nodeType":"StructuredDocumentation","src":"63:129:18","text":" @author Chef Photons, Vaultka Team serving high quality drinks; drink responsibly.\n Factory and global config params"},"fullyImplemented":false,"id":4593,"linearizedBaseContracts":[4593],"name":"IPaycrestStake","nameLocation":"203:14:18","nodeType":"ContractDefinition","nodes":[{"functionSelector":"d0e02d3a","id":4592,"implemented":false,"kind":"function","modifiers":[],"name":"rewardValidators","nameLocation":"238:16:18","nodeType":"FunctionDefinition","parameters":{"id":4588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4580,"mutability":"mutable","name":"orderId","nameLocation":"263:7:18","nodeType":"VariableDeclaration","scope":4592,"src":"255:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4579,"name":"bytes32","nodeType":"ElementaryTypeName","src":"255:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4582,"mutability":"mutable","name":"token","nameLocation":"280:5:18","nodeType":"VariableDeclaration","scope":4592,"src":"272:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4581,"name":"address","nodeType":"ElementaryTypeName","src":"272:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4585,"mutability":"mutable","name":"validators","nameLocation":"304:10:18","nodeType":"VariableDeclaration","scope":4592,"src":"287:27:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4583,"name":"address","nodeType":"ElementaryTypeName","src":"287:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4584,"nodeType":"ArrayTypeName","src":"287:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4587,"mutability":"mutable","name":"validatorsReward","nameLocation":"324:16:18","nodeType":"VariableDeclaration","scope":4592,"src":"316:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4586,"name":"uint256","nodeType":"ElementaryTypeName","src":"316:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"254:87:18"},"returnParameters":{"id":4591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4590,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4592,"src":"359:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4589,"name":"bool","nodeType":"ElementaryTypeName","src":"359:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"358:6:18"},"scope":4593,"src":"229:136:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4594,"src":"193:179:18","usedErrors":[]}],"src":"38:335:18"},"id":18},"contracts/mocks/MockUSDC.sol":{"ast":{"absolutePath":"contracts/mocks/MockUSDC.sol","exportedSymbols":{"ERC20":[3315],"MockUSDC":[4663]},"id":4664,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4595,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:19"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":4597,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4664,"sourceUnit":3316,"src":"63:68:19","symbolAliases":[{"foreign":{"id":4596,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3315,"src":"71:5:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4599,"name":"ERC20","nameLocations":["182:5:19"],"nodeType":"IdentifierPath","referencedDeclaration":3315,"src":"182:5:19"},"id":4600,"nodeType":"InheritanceSpecifier","src":"182:5:19"}],"canonicalName":"MockUSDC","contractDependencies":[],"contractKind":"contract","documentation":{"id":4598,"nodeType":"StructuredDocumentation","src":"133:28:19","text":"@dev Mock mintable USDC"},"fullyImplemented":true,"id":4663,"linearizedBaseContracts":[4663,3315,3418,3393,3440],"name":"MockUSDC","nameLocation":"170:8:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":4613,"nodeType":"Block","src":"235:48:19","statements":[{"expression":{"arguments":[{"expression":{"id":4608,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"251:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"255:6:19","memberName":"sender","nodeType":"MemberAccess","src":"251:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"315f3030305f303030453138","id":4610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"263:12:19","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000000000_by_1","typeString":"int_const 1000000000000000000000000"},"value":"1_000_000E18"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_1000000000000000000000000_by_1","typeString":"int_const 1000000000000000000000000"}],"id":4607,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"245:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"245:31:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4612,"nodeType":"ExpressionStatement","src":"245:31:19"}]},"id":4614,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"4d6f636b55445343","id":4603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"214:10:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_94e1f9c6f37f68c7fbe9a402bd5dbcd03f36019e7e48bd72249c8c505bfa86d6","typeString":"literal_string \"MockUDSC\""},"value":"MockUDSC"},{"hexValue":"4d55534443","id":4604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"226:7:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_0b881b1a06d818eb813952573bf9829bb21a81b032d939e3244337841a6fff45","typeString":"literal_string \"MUSDC\""},"value":"MUSDC"}],"id":4605,"kind":"baseConstructorSpecifier","modifierName":{"id":4602,"name":"ERC20","nameLocations":["208:5:19"],"nodeType":"IdentifierPath","referencedDeclaration":3315,"src":"208:5:19"},"nodeType":"ModifierInvocation","src":"208:26:19"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4601,"nodeType":"ParameterList","parameters":[],"src":"205:2:19"},"returnParameters":{"id":4606,"nodeType":"ParameterList","parameters":[],"src":"235:0:19"},"scope":4663,"src":"194:89:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4625,"nodeType":"Block","src":"329:43:19","statements":[{"expression":{"arguments":[{"expression":{"id":4620,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"345:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"349:6:19","memberName":"sender","nodeType":"MemberAccess","src":"345:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4622,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4616,"src":"357:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4619,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"339:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"339:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4624,"nodeType":"ExpressionStatement","src":"339:26:19"}]},"functionSelector":"a0712d68","id":4626,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"298:4:19","nodeType":"FunctionDefinition","parameters":{"id":4617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4616,"mutability":"mutable","name":"_amount","nameLocation":"311:7:19","nodeType":"VariableDeclaration","scope":4626,"src":"303:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4615,"name":"uint256","nodeType":"ElementaryTypeName","src":"303:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"302:17:19"},"returnParameters":{"id":4618,"nodeType":"ParameterList","parameters":[],"src":"329:0:19"},"scope":4663,"src":"289:83:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4637,"nodeType":"Block","src":"418:43:19","statements":[{"expression":{"arguments":[{"expression":{"id":4632,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"434:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"438:6:19","memberName":"sender","nodeType":"MemberAccess","src":"434:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4634,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"446:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4631,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"428:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"428:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4636,"nodeType":"ExpressionStatement","src":"428:26:19"}]},"functionSelector":"42966c68","id":4638,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"387:4:19","nodeType":"FunctionDefinition","parameters":{"id":4629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4628,"mutability":"mutable","name":"_amount","nameLocation":"400:7:19","nodeType":"VariableDeclaration","scope":4638,"src":"392:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4627,"name":"uint256","nodeType":"ElementaryTypeName","src":"392:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"391:17:19"},"returnParameters":{"id":4630,"nodeType":"ParameterList","parameters":[],"src":"418:0:19"},"scope":4663,"src":"378:83:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4661,"nodeType":"Block","src":"495:160:19","statements":[{"assignments":[4642],"declarations":[{"constant":false,"id":4642,"mutability":"mutable","name":"_balanceOf","nameLocation":"513:10:19","nodeType":"VariableDeclaration","scope":4661,"src":"505:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4641,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4647,"initialValue":{"arguments":[{"expression":{"id":4644,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"536:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"540:6:19","memberName":"sender","nodeType":"MemberAccess","src":"536:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4643,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"526:9:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":4646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"526:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"505:42:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4649,"name":"_balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4642,"src":"565:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"578:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"565:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6f636b555344433a204e6f7468696e6720746f206275726e","id":4652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"581:27:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98","typeString":"literal_string \"MockUSDC: Nothing to burn\""},"value":"MockUSDC: Nothing to burn"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98","typeString":"literal_string \"MockUSDC: Nothing to burn\""}],"id":4648,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"557:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"557:52:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4654,"nodeType":"ExpressionStatement","src":"557:52:19"},{"expression":{"arguments":[{"expression":{"id":4656,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"625:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"629:6:19","memberName":"sender","nodeType":"MemberAccess","src":"625:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4658,"name":"_balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4642,"src":"637:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4655,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"619:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"619:29:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4660,"nodeType":"ExpressionStatement","src":"619:29:19"}]},"functionSelector":"9975038c","id":4662,"implemented":true,"kind":"function","modifiers":[],"name":"burnAll","nameLocation":"476:7:19","nodeType":"FunctionDefinition","parameters":{"id":4639,"nodeType":"ParameterList","parameters":[],"src":"483:2:19"},"returnParameters":{"id":4640,"nodeType":"ParameterList","parameters":[],"src":"495:0:19"},"scope":4663,"src":"467:188:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4664,"src":"161:496:19","usedErrors":[]}],"src":"38:620:19"},"id":19}},"contracts":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1161,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"SafeERC20Upgradeable":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220127eb4d243173cf9ac6ea39f737ccd926bf8210c3a138b2e7d70f40b43f8204564736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT PUSH31 0xB4D243173CF9AC6EA39F737CCD926BF8210C3A138B2E7D70F40B43F8204564 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"734:6366:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220127eb4d243173cf9ac6ea39f737ccd926bf8210c3a138b2e7d70f40b43f8204564736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT PUSH31 0xB4D243173CF9AC6EA39F737CCD926BF8210C3A138B2E7D70F40B43F8204564 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"734:6366:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20Upgradeable,bytes memory)":"infinite","forceApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20Upgradeable,address,uint256)":"infinite","safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df70283ff728a1a88debad8b56cd6b31b858a143aff601e8f42a16699317e70d64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF PUSH17 0x283FF728A1A88DEBAD8B56CD6B31B858A1 NUMBER 0xAF 0xF6 ADD 0xE8 DELEGATECALL 0x2A AND PUSH10 0x9317E70D64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df70283ff728a1a88debad8b56cd6b31b858a143aff601e8f42a16699317e70d64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF PUSH17 0x283FF728A1A88DEBAD8B56CD6B31B858A1 NUMBER 0xAF 0xF6 ADD 0xE8 DELEGATECALL 0x2A AND PUSH10 0x9317E70D64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1161,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fb710f8a96e0067535a9f765fa3f89f59b6e06ba7186e35593d35f029926fa64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xFB PUSH18 0xF8A96E0067535A9F765FA3F89F59B6E06BA PUSH18 0x86E35593D35F029926FA64736F6C63430008 SLT STOP CALLER ","sourceMap":"242:2603:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fb710f8a96e0067535a9f765fa3f89f59b6e06ba7186e35593d35f029926fa64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xFB PUSH18 0xF8A96E0067535A9F765FA3F89F59B6E06BA PUSH18 0x86E35593D35F029926FA64736F6C63430008 SLT STOP CALLER ","sourceMap":"242:2603:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220717bce4509ab3c6d09fb52c5b26660a25a99945b32e0484c654da9bebac1986064736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x7BCE4509AB3C6D09FB52C5B26660A25A9994 JUMPDEST ORIGIN 0xE0 BASEFEE 0x4C PUSH6 0x4DA9BEBAC198 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"380:8783:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220717bce4509ab3c6d09fb52c5b26660a25a99945b32e0484c654da9bebac1986064736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x7BCE4509AB3C6D09FB52C5B26660A25A9994 JUMPDEST ORIGIN 0xE0 BASEFEE 0x4C PUSH6 0x4DA9BEBAC198 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"380:8783:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b19238f22d888be15246afd45704547bf692f3a8d19f34db13095fb48eddd5264736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x19238F22D888BE15246AFD45 PUSH17 0x4547BF692F3A8D19F34DB13095FB48EDDD MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12593:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b19238f22d888be15246afd45704547bf692f3a8d19f34db13095fb48eddd5264736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x19238F22D888BE15246AFD45 PUSH17 0x4547BF692F3A8D19F34DB13095FB48EDDD MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12593:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e70ce3cff074bb9f2b399f4851e008094b94d7fe429bd3afbf9c6f170d3375ce64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC 0xE3 0xCF CREATE PUSH21 0xBB9F2B399F4851E008094B94D7FE429BD3AFBF9C6F OR 0xD CALLER PUSH22 0xCE64736F6C6343000812003300000000000000000000 ","sourceMap":"215:1058:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e70ce3cff074bb9f2b399f4851e008094b94d7fe429bd3afbf9c6f170d3375ce64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC 0xE3 0xCF CREATE PUSH21 0xBB9F2B399F4851E008094B94D7FE429BD3AFBF9C6F OR 0xD CALLER PUSH22 0xCE64736F6C6343000812003300000000000000000000 ","sourceMap":"215:1058:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2773":{"entryPoint":null,"id":2773,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":376,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":451,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":502,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":247,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":99,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":278,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":746,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":635,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1067,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":882,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1028,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":902,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1222,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":332,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":767,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":693,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1192,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":193,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":892,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1160,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":646,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":146,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":942,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":119,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":124,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":114,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":109,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":129,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":783,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1147,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":1000,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":796,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":952,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":995,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8574:20","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:20","statements":[{"nodeType":"YulAssignment","src":"57:19:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:20"},"nodeType":"YulFunctionCall","src":"67:9:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:20"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:20","type":""}],"src":"7:75:20"},{"body":{"nodeType":"YulBlock","src":"177:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:20"},"nodeType":"YulFunctionCall","src":"187:12:20"},"nodeType":"YulExpressionStatement","src":"187:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:20"},{"body":{"nodeType":"YulBlock","src":"300:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:20"},"nodeType":"YulFunctionCall","src":"310:12:20"},"nodeType":"YulExpressionStatement","src":"310:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:20"},{"body":{"nodeType":"YulBlock","src":"423:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:20"},"nodeType":"YulFunctionCall","src":"433:12:20"},"nodeType":"YulExpressionStatement","src":"433:12:20"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:20"},{"body":{"nodeType":"YulBlock","src":"546:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:20"},"nodeType":"YulFunctionCall","src":"556:12:20"},"nodeType":"YulExpressionStatement","src":"556:12:20"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:20"},{"body":{"nodeType":"YulBlock","src":"628:54:20","statements":[{"nodeType":"YulAssignment","src":"638:38:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:20"},"nodeType":"YulFunctionCall","src":"652:14:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:20","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:20"},"nodeType":"YulFunctionCall","src":"668:7:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:20"},"nodeType":"YulFunctionCall","src":"648:28:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:20"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:20","type":""}],"src":"580:102:20"},{"body":{"nodeType":"YulBlock","src":"716:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:20"},"nodeType":"YulFunctionCall","src":"726:88:20"},"nodeType":"YulExpressionStatement","src":"726:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:20","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:20"},"nodeType":"YulFunctionCall","src":"823:15:20"},"nodeType":"YulExpressionStatement","src":"823:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:20"},"nodeType":"YulFunctionCall","src":"847:15:20"},"nodeType":"YulExpressionStatement","src":"847:15:20"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:20"},{"body":{"nodeType":"YulBlock","src":"917:238:20","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:20","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:20"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:20"},"nodeType":"YulFunctionCall","src":"957:27:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:20"},"nodeType":"YulFunctionCall","src":"945:40:20"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:20"},"nodeType":"YulFunctionCall","src":"1098:18:20"},"nodeType":"YulExpressionStatement","src":"1098:18:20"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:20"},"nodeType":"YulFunctionCall","src":"1036:34:20"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:20"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:20"},"nodeType":"YulFunctionCall","src":"1072:22:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:20"},"nodeType":"YulFunctionCall","src":"1033:62:20"},"nodeType":"YulIf","src":"1030:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:20","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:20"},"nodeType":"YulFunctionCall","src":"1127:22:20"},"nodeType":"YulExpressionStatement","src":"1127:22:20"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:20","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:20","type":""}],"src":"874:281:20"},{"body":{"nodeType":"YulBlock","src":"1202:88:20","statements":[{"nodeType":"YulAssignment","src":"1212:30:20","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:20"},"nodeType":"YulFunctionCall","src":"1222:20:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:20"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:20"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:20"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:20"},"nodeType":"YulFunctionCall","src":"1251:33:20"},"nodeType":"YulExpressionStatement","src":"1251:33:20"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:20","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:20","type":""}],"src":"1161:129:20"},{"body":{"nodeType":"YulBlock","src":"1363:241:20","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:20"},"nodeType":"YulFunctionCall","src":"1470:18:20"},"nodeType":"YulExpressionStatement","src":"1470:18:20"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:20"},"nodeType":"YulFunctionCall","src":"1437:30:20"},"nodeType":"YulIf","src":"1434:56:20"},{"nodeType":"YulAssignment","src":"1500:37:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:20"},"nodeType":"YulFunctionCall","src":"1508:29:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:20"}]},{"nodeType":"YulAssignment","src":"1574:23:20","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:20"},"nodeType":"YulFunctionCall","src":"1582:15:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:20"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:20","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:20","type":""}],"src":"1296:308:20"},{"body":{"nodeType":"YulBlock","src":"1672:184:20","statements":[{"nodeType":"YulVariableDeclaration","src":"1682:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"1691:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1686:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"1751:63:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1776:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"1781:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:20"},"nodeType":"YulFunctionCall","src":"1772:11:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1795:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"1800:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1791:3:20"},"nodeType":"YulFunctionCall","src":"1791:11:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1785:5:20"},"nodeType":"YulFunctionCall","src":"1785:18:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1765:6:20"},"nodeType":"YulFunctionCall","src":"1765:39:20"},"nodeType":"YulExpressionStatement","src":"1765:39:20"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"1715:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1709:2:20"},"nodeType":"YulFunctionCall","src":"1709:13:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1723:19:20","statements":[{"nodeType":"YulAssignment","src":"1725:15:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1734:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"1737:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1730:3:20"},"nodeType":"YulFunctionCall","src":"1730:10:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1725:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"1705:3:20","statements":[]},"src":"1701:113:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1834:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"1839:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1830:3:20"},"nodeType":"YulFunctionCall","src":"1830:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"1848:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1823:6:20"},"nodeType":"YulFunctionCall","src":"1823:27:20"},"nodeType":"YulExpressionStatement","src":"1823:27:20"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1654:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1659:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"1664:6:20","type":""}],"src":"1610:246:20"},{"body":{"nodeType":"YulBlock","src":"1957:339:20","statements":[{"nodeType":"YulAssignment","src":"1967:75:20","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2034:6:20"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1992:41:20"},"nodeType":"YulFunctionCall","src":"1992:49:20"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1976:15:20"},"nodeType":"YulFunctionCall","src":"1976:66:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1967:5:20"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2058:5:20"},{"name":"length","nodeType":"YulIdentifier","src":"2065:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2051:6:20"},"nodeType":"YulFunctionCall","src":"2051:21:20"},"nodeType":"YulExpressionStatement","src":"2051:21:20"},{"nodeType":"YulVariableDeclaration","src":"2081:27:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2096:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"2103:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2092:3:20"},"nodeType":"YulFunctionCall","src":"2092:16:20"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2085:3:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"2146:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2148:77:20"},"nodeType":"YulFunctionCall","src":"2148:79:20"},"nodeType":"YulExpressionStatement","src":"2148:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2127:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"2132:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2123:3:20"},"nodeType":"YulFunctionCall","src":"2123:16:20"},{"name":"end","nodeType":"YulIdentifier","src":"2141:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2120:2:20"},"nodeType":"YulFunctionCall","src":"2120:25:20"},"nodeType":"YulIf","src":"2117:112:20"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2273:3:20"},{"name":"dst","nodeType":"YulIdentifier","src":"2278:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"2283:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2238:34:20"},"nodeType":"YulFunctionCall","src":"2238:52:20"},"nodeType":"YulExpressionStatement","src":"2238:52:20"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1930:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"1935:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"1943:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1951:5:20","type":""}],"src":"1862:434:20"},{"body":{"nodeType":"YulBlock","src":"2389:282:20","statements":[{"body":{"nodeType":"YulBlock","src":"2438:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2440:77:20"},"nodeType":"YulFunctionCall","src":"2440:79:20"},"nodeType":"YulExpressionStatement","src":"2440:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2417:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"2425:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2413:3:20"},"nodeType":"YulFunctionCall","src":"2413:17:20"},{"name":"end","nodeType":"YulIdentifier","src":"2432:3:20"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2409:3:20"},"nodeType":"YulFunctionCall","src":"2409:27:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2402:6:20"},"nodeType":"YulFunctionCall","src":"2402:35:20"},"nodeType":"YulIf","src":"2399:122:20"},{"nodeType":"YulVariableDeclaration","src":"2530:27:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2550:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2544:5:20"},"nodeType":"YulFunctionCall","src":"2544:13:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2534:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2566:99:20","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2638:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"2646:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2634:3:20"},"nodeType":"YulFunctionCall","src":"2634:17:20"},{"name":"length","nodeType":"YulIdentifier","src":"2653:6:20"},{"name":"end","nodeType":"YulIdentifier","src":"2661:3:20"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2575:58:20"},"nodeType":"YulFunctionCall","src":"2575:90:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2566:5:20"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2367:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2375:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2383:5:20","type":""}],"src":"2316:355:20"},{"body":{"nodeType":"YulBlock","src":"2791:739:20","statements":[{"body":{"nodeType":"YulBlock","src":"2837:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2839:77:20"},"nodeType":"YulFunctionCall","src":"2839:79:20"},"nodeType":"YulExpressionStatement","src":"2839:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2812:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"2821:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2808:3:20"},"nodeType":"YulFunctionCall","src":"2808:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"2833:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2804:3:20"},"nodeType":"YulFunctionCall","src":"2804:32:20"},"nodeType":"YulIf","src":"2801:119:20"},{"nodeType":"YulBlock","src":"2930:291:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2945:38:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2969:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2980:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2965:3:20"},"nodeType":"YulFunctionCall","src":"2965:17:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2959:5:20"},"nodeType":"YulFunctionCall","src":"2959:24:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2949:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"3030:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3032:77:20"},"nodeType":"YulFunctionCall","src":"3032:79:20"},"nodeType":"YulExpressionStatement","src":"3032:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3002:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"3010:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2999:2:20"},"nodeType":"YulFunctionCall","src":"2999:30:20"},"nodeType":"YulIf","src":"2996:117:20"},{"nodeType":"YulAssignment","src":"3127:84:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3183:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"3194:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3179:3:20"},"nodeType":"YulFunctionCall","src":"3179:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3203:7:20"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3137:41:20"},"nodeType":"YulFunctionCall","src":"3137:74:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3127:6:20"}]}]},{"nodeType":"YulBlock","src":"3231:292:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3246:39:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3270:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3281:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3266:3:20"},"nodeType":"YulFunctionCall","src":"3266:18:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3260:5:20"},"nodeType":"YulFunctionCall","src":"3260:25:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3250:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"3332:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3334:77:20"},"nodeType":"YulFunctionCall","src":"3334:79:20"},"nodeType":"YulExpressionStatement","src":"3334:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3304:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"3312:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3301:2:20"},"nodeType":"YulFunctionCall","src":"3301:30:20"},"nodeType":"YulIf","src":"3298:117:20"},{"nodeType":"YulAssignment","src":"3429:84:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3485:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"3496:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3481:3:20"},"nodeType":"YulFunctionCall","src":"3481:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3505:7:20"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3439:41:20"},"nodeType":"YulFunctionCall","src":"3439:74:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3429:6:20"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2753:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2764:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2776:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2784:6:20","type":""}],"src":"2677:853:20"},{"body":{"nodeType":"YulBlock","src":"3595:40:20","statements":[{"nodeType":"YulAssignment","src":"3606:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3622:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3616:5:20"},"nodeType":"YulFunctionCall","src":"3616:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3606:6:20"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3588:6:20","type":""}],"src":"3536:99:20"},{"body":{"nodeType":"YulBlock","src":"3669:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3686:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3689:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3679:6:20"},"nodeType":"YulFunctionCall","src":"3679:88:20"},"nodeType":"YulExpressionStatement","src":"3679:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3783:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3786:4:20","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3776:6:20"},"nodeType":"YulFunctionCall","src":"3776:15:20"},"nodeType":"YulExpressionStatement","src":"3776:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3807:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3810:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3800:6:20"},"nodeType":"YulFunctionCall","src":"3800:15:20"},"nodeType":"YulExpressionStatement","src":"3800:15:20"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3641:180:20"},{"body":{"nodeType":"YulBlock","src":"3878:269:20","statements":[{"nodeType":"YulAssignment","src":"3888:22:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3902:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"3908:1:20","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3898:3:20"},"nodeType":"YulFunctionCall","src":"3898:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3888:6:20"}]},{"nodeType":"YulVariableDeclaration","src":"3919:38:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3949:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"3955:1:20","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3945:3:20"},"nodeType":"YulFunctionCall","src":"3945:12:20"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3923:18:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"3996:51:20","statements":[{"nodeType":"YulAssignment","src":"4010:27:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4024:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"4032:4:20","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4020:3:20"},"nodeType":"YulFunctionCall","src":"4020:17:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4010:6:20"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3976:18:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3969:6:20"},"nodeType":"YulFunctionCall","src":"3969:26:20"},"nodeType":"YulIf","src":"3966:81:20"},{"body":{"nodeType":"YulBlock","src":"4099:42:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4113:16:20"},"nodeType":"YulFunctionCall","src":"4113:18:20"},"nodeType":"YulExpressionStatement","src":"4113:18:20"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4063:18:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4086:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"4094:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4083:2:20"},"nodeType":"YulFunctionCall","src":"4083:14:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4060:2:20"},"nodeType":"YulFunctionCall","src":"4060:38:20"},"nodeType":"YulIf","src":"4057:84:20"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3862:4:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3871:6:20","type":""}],"src":"3827:320:20"},{"body":{"nodeType":"YulBlock","src":"4207:87:20","statements":[{"nodeType":"YulAssignment","src":"4217:11:20","value":{"name":"ptr","nodeType":"YulIdentifier","src":"4225:3:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4217:4:20"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4245:1:20","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"4248:3:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4238:6:20"},"nodeType":"YulFunctionCall","src":"4238:14:20"},"nodeType":"YulExpressionStatement","src":"4238:14:20"},{"nodeType":"YulAssignment","src":"4261:26:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4279:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4282:4:20","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"4269:9:20"},"nodeType":"YulFunctionCall","src":"4269:18:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4261:4:20"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"4194:3:20","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"4202:4:20","type":""}],"src":"4153:141:20"},{"body":{"nodeType":"YulBlock","src":"4344:49:20","statements":[{"nodeType":"YulAssignment","src":"4354:33:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4372:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"4379:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4368:3:20"},"nodeType":"YulFunctionCall","src":"4368:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"4384:2:20","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4364:3:20"},"nodeType":"YulFunctionCall","src":"4364:23:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4354:6:20"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4327:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4337:6:20","type":""}],"src":"4300:93:20"},{"body":{"nodeType":"YulBlock","src":"4452:54:20","statements":[{"nodeType":"YulAssignment","src":"4462:37:20","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"4487:4:20"},{"name":"value","nodeType":"YulIdentifier","src":"4493:5:20"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4483:3:20"},"nodeType":"YulFunctionCall","src":"4483:16:20"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"4462:8:20"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"4427:4:20","type":""},{"name":"value","nodeType":"YulTypedName","src":"4433:5:20","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"4443:8:20","type":""}],"src":"4399:107:20"},{"body":{"nodeType":"YulBlock","src":"4588:317:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4598:35:20","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"4619:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"4631:1:20","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4615:3:20"},"nodeType":"YulFunctionCall","src":"4615:18:20"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"4602:9:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4642:109:20","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"4673:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4684:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"4654:18:20"},"nodeType":"YulFunctionCall","src":"4654:97:20"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"4646:4:20","type":""}]},{"nodeType":"YulAssignment","src":"4760:51:20","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"4791:9:20"},{"name":"toInsert","nodeType":"YulIdentifier","src":"4802:8:20"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"4772:18:20"},"nodeType":"YulFunctionCall","src":"4772:39:20"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"4760:8:20"}]},{"nodeType":"YulAssignment","src":"4820:30:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4833:5:20"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"4844:4:20"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4840:3:20"},"nodeType":"YulFunctionCall","src":"4840:9:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4829:3:20"},"nodeType":"YulFunctionCall","src":"4829:21:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4820:5:20"}]},{"nodeType":"YulAssignment","src":"4859:40:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4872:5:20"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"4883:8:20"},{"name":"mask","nodeType":"YulIdentifier","src":"4893:4:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4879:3:20"},"nodeType":"YulFunctionCall","src":"4879:19:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4869:2:20"},"nodeType":"YulFunctionCall","src":"4869:30:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4859:6:20"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4549:5:20","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"4556:10:20","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"4568:8:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4581:6:20","type":""}],"src":"4512:393:20"},{"body":{"nodeType":"YulBlock","src":"4956:32:20","statements":[{"nodeType":"YulAssignment","src":"4966:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"4977:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4966:7:20"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4938:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4948:7:20","type":""}],"src":"4911:77:20"},{"body":{"nodeType":"YulBlock","src":"5026:28:20","statements":[{"nodeType":"YulAssignment","src":"5036:12:20","value":{"name":"value","nodeType":"YulIdentifier","src":"5043:5:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5036:3:20"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5012:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5022:3:20","type":""}],"src":"4994:60:20"},{"body":{"nodeType":"YulBlock","src":"5120:82:20","statements":[{"nodeType":"YulAssignment","src":"5130:66:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5188:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5170:17:20"},"nodeType":"YulFunctionCall","src":"5170:24:20"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"5161:8:20"},"nodeType":"YulFunctionCall","src":"5161:34:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5143:17:20"},"nodeType":"YulFunctionCall","src":"5143:53:20"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"5130:9:20"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5100:5:20","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"5110:9:20","type":""}],"src":"5060:142:20"},{"body":{"nodeType":"YulBlock","src":"5255:28:20","statements":[{"nodeType":"YulAssignment","src":"5265:12:20","value":{"name":"value","nodeType":"YulIdentifier","src":"5272:5:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5265:3:20"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5241:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5251:3:20","type":""}],"src":"5208:75:20"},{"body":{"nodeType":"YulBlock","src":"5365:193:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5375:63:20","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"5430:7:20"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"5399:30:20"},"nodeType":"YulFunctionCall","src":"5399:39:20"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"5379:16:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5454:4:20"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5494:4:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"5488:5:20"},"nodeType":"YulFunctionCall","src":"5488:11:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5501:6:20"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"5533:16:20"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"5509:23:20"},"nodeType":"YulFunctionCall","src":"5509:41:20"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"5460:27:20"},"nodeType":"YulFunctionCall","src":"5460:91:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5447:6:20"},"nodeType":"YulFunctionCall","src":"5447:105:20"},"nodeType":"YulExpressionStatement","src":"5447:105:20"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5342:4:20","type":""},{"name":"offset","nodeType":"YulTypedName","src":"5348:6:20","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"5356:7:20","type":""}],"src":"5289:269:20"},{"body":{"nodeType":"YulBlock","src":"5613:24:20","statements":[{"nodeType":"YulAssignment","src":"5623:8:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5630:1:20","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5623:3:20"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5609:3:20","type":""}],"src":"5564:73:20"},{"body":{"nodeType":"YulBlock","src":"5696:136:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5706:46:20","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"5720:30:20"},"nodeType":"YulFunctionCall","src":"5720:32:20"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"5710:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5805:4:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5811:6:20"},{"name":"zero_0","nodeType":"YulIdentifier","src":"5819:6:20"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"5761:43:20"},"nodeType":"YulFunctionCall","src":"5761:65:20"},"nodeType":"YulExpressionStatement","src":"5761:65:20"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5682:4:20","type":""},{"name":"offset","nodeType":"YulTypedName","src":"5688:6:20","type":""}],"src":"5643:189:20"},{"body":{"nodeType":"YulBlock","src":"5888:136:20","statements":[{"body":{"nodeType":"YulBlock","src":"5955:63:20","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5999:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"6006:1:20","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"5969:29:20"},"nodeType":"YulFunctionCall","src":"5969:39:20"},"nodeType":"YulExpressionStatement","src":"5969:39:20"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5908:5:20"},{"name":"end","nodeType":"YulIdentifier","src":"5915:3:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5905:2:20"},"nodeType":"YulFunctionCall","src":"5905:14:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5920:26:20","statements":[{"nodeType":"YulAssignment","src":"5922:22:20","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5935:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"5942:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5931:3:20"},"nodeType":"YulFunctionCall","src":"5931:13:20"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"5922:5:20"}]}]},"pre":{"nodeType":"YulBlock","src":"5902:2:20","statements":[]},"src":"5898:120:20"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"5876:5:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"5883:3:20","type":""}],"src":"5838:186:20"},{"body":{"nodeType":"YulBlock","src":"6109:464:20","statements":[{"body":{"nodeType":"YulBlock","src":"6135:431:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6149:54:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6197:5:20"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"6165:31:20"},"nodeType":"YulFunctionCall","src":"6165:38:20"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"6153:8:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6216:63:20","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"6239:8:20"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6267:10:20"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"6249:17:20"},"nodeType":"YulFunctionCall","src":"6249:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6235:3:20"},"nodeType":"YulFunctionCall","src":"6235:44:20"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"6220:11:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"6436:27:20","statements":[{"nodeType":"YulAssignment","src":"6438:23:20","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"6453:8:20"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6438:11:20"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6420:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"6432:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6417:2:20"},"nodeType":"YulFunctionCall","src":"6417:18:20"},"nodeType":"YulIf","src":"6414:49:20"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6505:11:20"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"6522:8:20"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6550:3:20"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"6532:17:20"},"nodeType":"YulFunctionCall","src":"6532:22:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6518:3:20"},"nodeType":"YulFunctionCall","src":"6518:37:20"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"6476:28:20"},"nodeType":"YulFunctionCall","src":"6476:80:20"},"nodeType":"YulExpressionStatement","src":"6476:80:20"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6126:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"6131:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6123:2:20"},"nodeType":"YulFunctionCall","src":"6123:11:20"},"nodeType":"YulIf","src":"6120:446:20"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"6085:5:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"6092:3:20","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"6097:10:20","type":""}],"src":"6030:543:20"},{"body":{"nodeType":"YulBlock","src":"6642:54:20","statements":[{"nodeType":"YulAssignment","src":"6652:37:20","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"6677:4:20"},{"name":"value","nodeType":"YulIdentifier","src":"6683:5:20"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6673:3:20"},"nodeType":"YulFunctionCall","src":"6673:16:20"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"6652:8:20"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"6617:4:20","type":""},{"name":"value","nodeType":"YulTypedName","src":"6623:5:20","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"6633:8:20","type":""}],"src":"6579:117:20"},{"body":{"nodeType":"YulBlock","src":"6753:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6763:68:20","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6812:1:20","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"6815:5:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6808:3:20"},"nodeType":"YulFunctionCall","src":"6808:13:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6827:1:20","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6823:3:20"},"nodeType":"YulFunctionCall","src":"6823:6:20"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"6779:28:20"},"nodeType":"YulFunctionCall","src":"6779:51:20"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6775:3:20"},"nodeType":"YulFunctionCall","src":"6775:56:20"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"6767:4:20","type":""}]},{"nodeType":"YulAssignment","src":"6840:25:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6854:4:20"},{"name":"mask","nodeType":"YulIdentifier","src":"6860:4:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6850:3:20"},"nodeType":"YulFunctionCall","src":"6850:15:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"6840:6:20"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6730:4:20","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"6736:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"6746:6:20","type":""}],"src":"6702:169:20"},{"body":{"nodeType":"YulBlock","src":"6957:214:20","statements":[{"nodeType":"YulAssignment","src":"7090:37:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7117:4:20"},{"name":"len","nodeType":"YulIdentifier","src":"7123:3:20"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"7098:18:20"},"nodeType":"YulFunctionCall","src":"7098:29:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"7090:4:20"}]},{"nodeType":"YulAssignment","src":"7136:29:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7147:4:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7157:1:20","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"7160:3:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7153:3:20"},"nodeType":"YulFunctionCall","src":"7153:11:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7144:2:20"},"nodeType":"YulFunctionCall","src":"7144:21:20"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"7136:4:20"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6938:4:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"6944:3:20","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"6952:4:20","type":""}],"src":"6876:295:20"},{"body":{"nodeType":"YulBlock","src":"7268:1303:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7279:51:20","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7326:3:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7293:32:20"},"nodeType":"YulFunctionCall","src":"7293:37:20"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"7283:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"7415:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7417:16:20"},"nodeType":"YulFunctionCall","src":"7417:18:20"},"nodeType":"YulExpressionStatement","src":"7417:18:20"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7387:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"7395:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7384:2:20"},"nodeType":"YulFunctionCall","src":"7384:30:20"},"nodeType":"YulIf","src":"7381:56:20"},{"nodeType":"YulVariableDeclaration","src":"7447:52:20","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7493:4:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"7487:5:20"},"nodeType":"YulFunctionCall","src":"7487:11:20"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"7461:25:20"},"nodeType":"YulFunctionCall","src":"7461:38:20"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"7451:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7592:4:20"},{"name":"oldLen","nodeType":"YulIdentifier","src":"7598:6:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"7606:6:20"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"7546:45:20"},"nodeType":"YulFunctionCall","src":"7546:67:20"},"nodeType":"YulExpressionStatement","src":"7546:67:20"},{"nodeType":"YulVariableDeclaration","src":"7623:18:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7640:1:20","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"7627:9:20","type":""}]},{"nodeType":"YulAssignment","src":"7651:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7664:4:20","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"7651:9:20"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"7715:611:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7729:37:20","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7748:6:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7760:4:20","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7756:3:20"},"nodeType":"YulFunctionCall","src":"7756:9:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7744:3:20"},"nodeType":"YulFunctionCall","src":"7744:22:20"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"7733:7:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7780:51:20","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7826:4:20"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"7794:31:20"},"nodeType":"YulFunctionCall","src":"7794:37:20"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"7784:6:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7844:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7853:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7848:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"7912:163:20","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7937:6:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7955:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"7960:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7951:3:20"},"nodeType":"YulFunctionCall","src":"7951:19:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7945:5:20"},"nodeType":"YulFunctionCall","src":"7945:26:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7930:6:20"},"nodeType":"YulFunctionCall","src":"7930:42:20"},"nodeType":"YulExpressionStatement","src":"7930:42:20"},{"nodeType":"YulAssignment","src":"7989:24:20","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8003:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8011:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7999:3:20"},"nodeType":"YulFunctionCall","src":"7999:14:20"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7989:6:20"}]},{"nodeType":"YulAssignment","src":"8030:31:20","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8047:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"8058:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8043:3:20"},"nodeType":"YulFunctionCall","src":"8043:18:20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8030:9:20"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7878:1:20"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"7881:7:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7875:2:20"},"nodeType":"YulFunctionCall","src":"7875:14:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7890:21:20","statements":[{"nodeType":"YulAssignment","src":"7892:17:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7901:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"7904:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7897:3:20"},"nodeType":"YulFunctionCall","src":"7897:12:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7892:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"7871:3:20","statements":[]},"src":"7867:208:20"},{"body":{"nodeType":"YulBlock","src":"8111:156:20","statements":[{"nodeType":"YulVariableDeclaration","src":"8129:43:20","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8156:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8161:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8152:3:20"},"nodeType":"YulFunctionCall","src":"8152:19:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8146:5:20"},"nodeType":"YulFunctionCall","src":"8146:26:20"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"8133:9:20","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8196:6:20"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"8223:9:20"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8238:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8246:4:20","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8234:3:20"},"nodeType":"YulFunctionCall","src":"8234:17:20"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"8204:18:20"},"nodeType":"YulFunctionCall","src":"8204:48:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8189:6:20"},"nodeType":"YulFunctionCall","src":"8189:64:20"},"nodeType":"YulExpressionStatement","src":"8189:64:20"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"8094:7:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"8103:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8091:2:20"},"nodeType":"YulFunctionCall","src":"8091:19:20"},"nodeType":"YulIf","src":"8088:179:20"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8287:4:20"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8301:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8309:1:20","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8297:3:20"},"nodeType":"YulFunctionCall","src":"8297:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"8313:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8293:3:20"},"nodeType":"YulFunctionCall","src":"8293:22:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8280:6:20"},"nodeType":"YulFunctionCall","src":"8280:36:20"},"nodeType":"YulExpressionStatement","src":"8280:36:20"}]},"nodeType":"YulCase","src":"7708:618:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7713:1:20","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"8343:222:20","statements":[{"nodeType":"YulVariableDeclaration","src":"8357:14:20","value":{"kind":"number","nodeType":"YulLiteral","src":"8370:1:20","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8361:5:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"8394:67:20","statements":[{"nodeType":"YulAssignment","src":"8412:35:20","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8431:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8436:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8427:3:20"},"nodeType":"YulFunctionCall","src":"8427:19:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8421:5:20"},"nodeType":"YulFunctionCall","src":"8421:26:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8412:5:20"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"8387:6:20"},"nodeType":"YulIf","src":"8384:77:20"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8481:4:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8540:5:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"8547:6:20"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"8487:52:20"},"nodeType":"YulFunctionCall","src":"8487:67:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8474:6:20"},"nodeType":"YulFunctionCall","src":"8474:81:20"},"nodeType":"YulExpressionStatement","src":"8474:81:20"}]},"nodeType":"YulCase","src":"8335:230:20","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7688:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"7696:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7685:2:20"},"nodeType":"YulFunctionCall","src":"7685:14:20"},"nodeType":"YulSwitch","src":"7678:887:20"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"7257:4:20","type":""},{"name":"src","nodeType":"YulTypedName","src":"7263:3:20","type":""}],"src":"7176:1395:20"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620017ec380380620017ec8339818101604052810190620000379190620001f6565b8160039081620000489190620004c6565b5080600490816200005a9190620004c6565b505050620005ad565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000cc8262000081565b810181811067ffffffffffffffff82111715620000ee57620000ed62000092565b5b80604052505050565b60006200010362000063565b9050620001118282620000c1565b919050565b600067ffffffffffffffff82111562000134576200013362000092565b5b6200013f8262000081565b9050602081019050919050565b60005b838110156200016c5780820151818401526020810190506200014f565b60008484015250505050565b60006200018f620001898462000116565b620000f7565b905082815260208101848484011115620001ae57620001ad6200007c565b5b620001bb8482856200014c565b509392505050565b600082601f830112620001db57620001da62000077565b5b8151620001ed84826020860162000178565b91505092915050565b6000806040838503121562000210576200020f6200006d565b5b600083015167ffffffffffffffff81111562000231576200023062000072565b5b6200023f85828601620001c3565b925050602083015167ffffffffffffffff81111562000263576200026262000072565b5b6200027185828601620001c3565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002ce57607f821691505b602082108103620002e457620002e362000286565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200034e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200030f565b6200035a86836200030f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003a7620003a16200039b8462000372565b6200037c565b62000372565b9050919050565b6000819050919050565b620003c38362000386565b620003db620003d282620003ae565b8484546200031c565b825550505050565b600090565b620003f2620003e3565b620003ff818484620003b8565b505050565b5b8181101562000427576200041b600082620003e8565b60018101905062000405565b5050565b601f82111562000476576200044081620002ea565b6200044b84620002ff565b810160208510156200045b578190505b620004736200046a85620002ff565b83018262000404565b50505b505050565b600082821c905092915050565b60006200049b600019846008026200047b565b1980831691505092915050565b6000620004b6838362000488565b9150826002028217905092915050565b620004d1826200027b565b67ffffffffffffffff811115620004ed57620004ec62000092565b5b620004f98254620002b5565b620005068282856200042b565b600060209050601f8311600181146200053e576000841562000529578287015190505b620005358582620004a8565b865550620005a5565b601f1984166200054e86620002ea565b60005b82811015620005785784890151825560018201915060208501945060208101905062000551565b8683101562000598578489015162000594601f89168262000488565b8355505b6001600288020188555050505b505050505050565b61122f80620005bd6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b0c565b60405180910390f35b6100e660048036038101906100e19190610bc7565b610308565b6040516100f39190610c22565b60405180910390f35b61010461032b565b6040516101119190610c4c565b60405180910390f35b610134600480360381019061012f9190610c67565b610335565b6040516101419190610c22565b60405180910390f35b610152610364565b60405161015f9190610cd6565b60405180910390f35b610182600480360381019061017d9190610bc7565b61036d565b60405161018f9190610c22565b60405180910390f35b6101b260048036038101906101ad9190610cf1565b6103a4565b6040516101bf9190610c4c565b60405180910390f35b6101d06103ec565b6040516101dd9190610b0c565b60405180910390f35b61020060048036038101906101fb9190610bc7565b61047e565b60405161020d9190610c22565b60405180910390f35b610230600480360381019061022b9190610bc7565b6104f5565b60405161023d9190610c22565b60405180910390f35b610260600480360381019061025b9190610d1e565b610518565b60405161026d9190610c4c565b60405180910390f35b60606003805461028590610d8d565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d8d565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b60008061031361059f565b90506103208185856105a7565b600191505092915050565b6000600254905090565b60008061034061059f565b905061034d858285610770565b6103588585856107fc565b60019150509392505050565b60006012905090565b60008061037861059f565b905061039981858561038a8589610518565b6103949190610ded565b6105a7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103fb90610d8d565b80601f016020809104026020016040519081016040528092919081815260200182805461042790610d8d565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b60008061048961059f565b905060006104978286610518565b9050838110156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610e93565b60405180910390fd5b6104e982868684036105a7565b60019250505092915050565b60008061050061059f565b905061050d8185856107fc565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610f25565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067c90610fb7565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107639190610c4c565b60405180910390a3505050565b600061077c8484610518565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f657818110156107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90611023565b60405180910390fd5b6107f584848484036105a7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610862906110b5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190611147565b60405180910390fd5b6108e5838383610a72565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610962906111d9565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a599190610c4c565b60405180910390a3610a6c848484610a77565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ab6578082015181840152602081019050610a9b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ade82610a7c565b610ae88185610a87565b9350610af8818560208601610a98565b610b0181610ac2565b840191505092915050565b60006020820190508181036000830152610b268184610ad3565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5e82610b33565b9050919050565b610b6e81610b53565b8114610b7957600080fd5b50565b600081359050610b8b81610b65565b92915050565b6000819050919050565b610ba481610b91565b8114610baf57600080fd5b50565b600081359050610bc181610b9b565b92915050565b60008060408385031215610bde57610bdd610b2e565b5b6000610bec85828601610b7c565b9250506020610bfd85828601610bb2565b9150509250929050565b60008115159050919050565b610c1c81610c07565b82525050565b6000602082019050610c376000830184610c13565b92915050565b610c4681610b91565b82525050565b6000602082019050610c616000830184610c3d565b92915050565b600080600060608486031215610c8057610c7f610b2e565b5b6000610c8e86828701610b7c565b9350506020610c9f86828701610b7c565b9250506040610cb086828701610bb2565b9150509250925092565b600060ff82169050919050565b610cd081610cba565b82525050565b6000602082019050610ceb6000830184610cc7565b92915050565b600060208284031215610d0757610d06610b2e565b5b6000610d1584828501610b7c565b91505092915050565b60008060408385031215610d3557610d34610b2e565b5b6000610d4385828601610b7c565b9250506020610d5485828601610b7c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610da557607f821691505b602082108103610db857610db7610d5e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df882610b91565b9150610e0383610b91565b9250828201905080821115610e1b57610e1a610dbe565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e7d602583610a87565b9150610e8882610e21565b604082019050919050565b60006020820190508181036000830152610eac81610e70565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f0f602483610a87565b9150610f1a82610eb3565b604082019050919050565b60006020820190508181036000830152610f3e81610f02565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fa1602283610a87565b9150610fac82610f45565b604082019050919050565b60006020820190508181036000830152610fd081610f94565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061100d601d83610a87565b915061101882610fd7565b602082019050919050565b6000602082019050818103600083015261103c81611000565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061109f602583610a87565b91506110aa82611043565b604082019050919050565b600060208201905081810360008301526110ce81611092565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611131602383610a87565b915061113c826110d5565b604082019050919050565b6000602082019050818103600083015261116081611124565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111c3602683610a87565b91506111ce82611167565b604082019050919050565b600060208201905081810360008301526111f2816111b6565b905091905056fea2646970667358221220cfa590969dc1fe52ec32dbe13f59185757e4c4868929d9f856f7b780f8d2e89764736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x17EC CODESIZE SUB DUP1 PUSH3 0x17EC DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1F6 JUMP JUMPDEST DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0x48 SWAP2 SWAP1 PUSH3 0x4C6 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH3 0x5A SWAP2 SWAP1 PUSH3 0x4C6 JUMP JUMPDEST POP POP POP PUSH3 0x5AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0xCC DUP3 PUSH3 0x81 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0xEE JUMPI PUSH3 0xED PUSH3 0x92 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x103 PUSH3 0x63 JUMP JUMPDEST SWAP1 POP PUSH3 0x111 DUP3 DUP3 PUSH3 0xC1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x134 JUMPI PUSH3 0x133 PUSH3 0x92 JUMP JUMPDEST JUMPDEST PUSH3 0x13F DUP3 PUSH3 0x81 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x16C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x14F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x18F PUSH3 0x189 DUP5 PUSH3 0x116 JUMP JUMPDEST PUSH3 0xF7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x1AE JUMPI PUSH3 0x1AD PUSH3 0x7C JUMP JUMPDEST JUMPDEST PUSH3 0x1BB DUP5 DUP3 DUP6 PUSH3 0x14C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1DB JUMPI PUSH3 0x1DA PUSH3 0x77 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x1ED DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x178 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x210 JUMPI PUSH3 0x20F PUSH3 0x6D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x231 JUMPI PUSH3 0x230 PUSH3 0x72 JUMP JUMPDEST JUMPDEST PUSH3 0x23F DUP6 DUP3 DUP7 ADD PUSH3 0x1C3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x263 JUMPI PUSH3 0x262 PUSH3 0x72 JUMP JUMPDEST JUMPDEST PUSH3 0x271 DUP6 DUP3 DUP7 ADD PUSH3 0x1C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2CE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2E4 JUMPI PUSH3 0x2E3 PUSH3 0x286 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x34E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x30F JUMP JUMPDEST PUSH3 0x35A DUP7 DUP4 PUSH3 0x30F JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3A7 PUSH3 0x3A1 PUSH3 0x39B DUP5 PUSH3 0x372 JUMP JUMPDEST PUSH3 0x37C JUMP JUMPDEST PUSH3 0x372 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x3C3 DUP4 PUSH3 0x386 JUMP JUMPDEST PUSH3 0x3DB PUSH3 0x3D2 DUP3 PUSH3 0x3AE JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x31C JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x3F2 PUSH3 0x3E3 JUMP JUMPDEST PUSH3 0x3FF DUP2 DUP5 DUP5 PUSH3 0x3B8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x427 JUMPI PUSH3 0x41B PUSH1 0x0 DUP3 PUSH3 0x3E8 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x405 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x476 JUMPI PUSH3 0x440 DUP2 PUSH3 0x2EA JUMP JUMPDEST PUSH3 0x44B DUP5 PUSH3 0x2FF JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x45B JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x473 PUSH3 0x46A DUP6 PUSH3 0x2FF JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x404 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x49B PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x47B JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4B6 DUP4 DUP4 PUSH3 0x488 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x4D1 DUP3 PUSH3 0x27B JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4ED JUMPI PUSH3 0x4EC PUSH3 0x92 JUMP JUMPDEST JUMPDEST PUSH3 0x4F9 DUP3 SLOAD PUSH3 0x2B5 JUMP JUMPDEST PUSH3 0x506 DUP3 DUP3 DUP6 PUSH3 0x42B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x53E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x529 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x535 DUP6 DUP3 PUSH3 0x4A8 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x5A5 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x54E DUP7 PUSH3 0x2EA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x578 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x551 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x598 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x594 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x488 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x122F DUP1 PUSH3 0x5BD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC67 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xCF1 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x47E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD1E JUMP JUMPDEST PUSH2 0x518 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x770 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x518 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xDED JUMP JUMPDEST PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x3FB SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x427 SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x474 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x449 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x474 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x457 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x489 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x497 DUP3 DUP7 PUSH2 0x518 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D3 SWAP1 PUSH2 0xE93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4E9 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x500 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x50D DUP2 DUP6 DUP6 PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60D SWAP1 PUSH2 0xF25 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x685 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67C SWAP1 PUSH2 0xFB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x763 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77C DUP5 DUP5 PUSH2 0x518 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F6 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7DF SWAP1 PUSH2 0x1023 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F5 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A7 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x86B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x862 SWAP1 PUSH2 0x10B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8DA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D1 SWAP1 PUSH2 0x1147 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E5 DUP4 DUP4 DUP4 PUSH2 0xA72 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x96B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x962 SWAP1 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA59 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA6C DUP5 DUP5 DUP5 PUSH2 0xA77 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA9B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADE DUP3 PUSH2 0xA7C JUMP JUMPDEST PUSH2 0xAE8 DUP2 DUP6 PUSH2 0xA87 JUMP JUMPDEST SWAP4 POP PUSH2 0xAF8 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA98 JUMP JUMPDEST PUSH2 0xB01 DUP2 PUSH2 0xAC2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB26 DUP2 DUP5 PUSH2 0xAD3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5E DUP3 PUSH2 0xB33 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB6E DUP2 PUSH2 0xB53 JUMP JUMPDEST DUP2 EQ PUSH2 0xB79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB8B DUP2 PUSH2 0xB65 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBA4 DUP2 PUSH2 0xB91 JUMP JUMPDEST DUP2 EQ PUSH2 0xBAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBC1 DUP2 PUSH2 0xB9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBDE JUMPI PUSH2 0xBDD PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBEC DUP6 DUP3 DUP7 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBFD DUP6 DUP3 DUP7 ADD PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC1C DUP2 PUSH2 0xC07 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC37 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC13 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC46 DUP2 PUSH2 0xB91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC61 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC3D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC80 JUMPI PUSH2 0xC7F PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC8E DUP7 DUP3 DUP8 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC9F DUP7 DUP3 DUP8 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCB0 DUP7 DUP3 DUP8 ADD PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCD0 DUP2 PUSH2 0xCBA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCEB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCC7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD07 JUMPI PUSH2 0xD06 PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD15 DUP5 DUP3 DUP6 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD35 JUMPI PUSH2 0xD34 PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD43 DUP6 DUP3 DUP7 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD54 DUP6 DUP3 DUP7 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDA5 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xDB8 JUMPI PUSH2 0xDB7 PUSH2 0xD5E JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDF8 DUP3 PUSH2 0xB91 JUMP JUMPDEST SWAP2 POP PUSH2 0xE03 DUP4 PUSH2 0xB91 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xE1B JUMPI PUSH2 0xE1A PUSH2 0xDBE JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7D PUSH1 0x25 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0xE88 DUP3 PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEAC DUP2 PUSH2 0xE70 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF0F PUSH1 0x24 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0xF1A DUP3 PUSH2 0xEB3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF3E DUP2 PUSH2 0xF02 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA1 PUSH1 0x22 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0xFAC DUP3 PUSH2 0xF45 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFD0 DUP2 PUSH2 0xF94 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100D PUSH1 0x1D DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x1018 DUP3 PUSH2 0xFD7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x103C DUP2 PUSH2 0x1000 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109F PUSH1 0x25 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x10AA DUP3 PUSH2 0x1043 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10CE DUP2 PUSH2 0x1092 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1131 PUSH1 0x23 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x113C DUP3 PUSH2 0x10D5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1160 DUP2 PUSH2 0x1124 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11C3 PUSH1 0x26 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x11CE DUP3 PUSH2 0x1167 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11F2 DUP2 PUSH2 0x11B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF 0xA5 SWAP1 SWAP7 SWAP14 0xC1 INVALID MSTORE 0xEC ORIGIN 0xDB 0xE1 EXTCODEHASH MSIZE XOR JUMPI JUMPI 0xE4 0xC4 DUP7 DUP10 0x29 0xD9 0xF8 JUMP 0xF7 0xB7 DUP1 0xF8 0xD2 0xE8 SWAP8 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"1401:11610:11:-:0;;;1976:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2050:5;2042;:13;;;;;;:::i;:::-;;2075:7;2065;:17;;;;;;:::i;:::-;;1976:113;;1401:11610;;7:75:20;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:246::-;1691:1;1701:113;1715:6;1712:1;1709:13;1701:113;;;1800:1;1795:3;1791:11;1785:18;1781:1;1776:3;1772:11;1765:39;1737:2;1734:1;1730:10;1725:15;;1701:113;;;1848:1;1839:6;1834:3;1830:16;1823:27;1672:184;1610:246;;;:::o;1862:434::-;1951:5;1976:66;1992:49;2034:6;1992:49;:::i;:::-;1976:66;:::i;:::-;1967:75;;2065:6;2058:5;2051:21;2103:4;2096:5;2092:16;2141:3;2132:6;2127:3;2123:16;2120:25;2117:112;;;2148:79;;:::i;:::-;2117:112;2238:52;2283:6;2278:3;2273;2238:52;:::i;:::-;1957:339;1862:434;;;;;:::o;2316:355::-;2383:5;2432:3;2425:4;2417:6;2413:17;2409:27;2399:122;;2440:79;;:::i;:::-;2399:122;2550:6;2544:13;2575:90;2661:3;2653:6;2646:4;2638:6;2634:17;2575:90;:::i;:::-;2566:99;;2389:282;2316:355;;;;:::o;2677:853::-;2776:6;2784;2833:2;2821:9;2812:7;2808:23;2804:32;2801:119;;;2839:79;;:::i;:::-;2801:119;2980:1;2969:9;2965:17;2959:24;3010:18;3002:6;2999:30;2996:117;;;3032:79;;:::i;:::-;2996:117;3137:74;3203:7;3194:6;3183:9;3179:22;3137:74;:::i;:::-;3127:84;;2930:291;3281:2;3270:9;3266:18;3260:25;3312:18;3304:6;3301:30;3298:117;;;3334:79;;:::i;:::-;3298:117;3439:74;3505:7;3496:6;3485:9;3481:22;3439:74;:::i;:::-;3429:84;;3231:292;2677:853;;;;;:::o;3536:99::-;3588:6;3622:5;3616:12;3606:22;;3536:99;;;:::o;3641:180::-;3689:77;3686:1;3679:88;3786:4;3783:1;3776:15;3810:4;3807:1;3800:15;3827:320;3871:6;3908:1;3902:4;3898:12;3888:22;;3955:1;3949:4;3945:12;3976:18;3966:81;;4032:4;4024:6;4020:17;4010:27;;3966:81;4094:2;4086:6;4083:14;4063:18;4060:38;4057:84;;4113:18;;:::i;:::-;4057:84;3878:269;3827:320;;;:::o;4153:141::-;4202:4;4225:3;4217:11;;4248:3;4245:1;4238:14;4282:4;4279:1;4269:18;4261:26;;4153:141;;;:::o;4300:93::-;4337:6;4384:2;4379;4372:5;4368:14;4364:23;4354:33;;4300:93;;;:::o;4399:107::-;4443:8;4493:5;4487:4;4483:16;4462:37;;4399:107;;;;:::o;4512:393::-;4581:6;4631:1;4619:10;4615:18;4654:97;4684:66;4673:9;4654:97;:::i;:::-;4772:39;4802:8;4791:9;4772:39;:::i;:::-;4760:51;;4844:4;4840:9;4833:5;4829:21;4820:30;;4893:4;4883:8;4879:19;4872:5;4869:30;4859:40;;4588:317;;4512:393;;;;;:::o;4911:77::-;4948:7;4977:5;4966:16;;4911:77;;;:::o;4994:60::-;5022:3;5043:5;5036:12;;4994:60;;;:::o;5060:142::-;5110:9;5143:53;5161:34;5170:24;5188:5;5170:24;:::i;:::-;5161:34;:::i;:::-;5143:53;:::i;:::-;5130:66;;5060:142;;;:::o;5208:75::-;5251:3;5272:5;5265:12;;5208:75;;;:::o;5289:269::-;5399:39;5430:7;5399:39;:::i;:::-;5460:91;5509:41;5533:16;5509:41;:::i;:::-;5501:6;5494:4;5488:11;5460:91;:::i;:::-;5454:4;5447:105;5365:193;5289:269;;;:::o;5564:73::-;5609:3;5564:73;:::o;5643:189::-;5720:32;;:::i;:::-;5761:65;5819:6;5811;5805:4;5761:65;:::i;:::-;5696:136;5643:189;;:::o;5838:186::-;5898:120;5915:3;5908:5;5905:14;5898:120;;;5969:39;6006:1;5999:5;5969:39;:::i;:::-;5942:1;5935:5;5931:13;5922:22;;5898:120;;;5838:186;;:::o;6030:543::-;6131:2;6126:3;6123:11;6120:446;;;6165:38;6197:5;6165:38;:::i;:::-;6249:29;6267:10;6249:29;:::i;:::-;6239:8;6235:44;6432:2;6420:10;6417:18;6414:49;;;6453:8;6438:23;;6414:49;6476:80;6532:22;6550:3;6532:22;:::i;:::-;6522:8;6518:37;6505:11;6476:80;:::i;:::-;6135:431;;6120:446;6030:543;;;:::o;6579:117::-;6633:8;6683:5;6677:4;6673:16;6652:37;;6579:117;;;;:::o;6702:169::-;6746:6;6779:51;6827:1;6823:6;6815:5;6812:1;6808:13;6779:51;:::i;:::-;6775:56;6860:4;6854;6850:15;6840:25;;6753:118;6702:169;;;;:::o;6876:295::-;6952:4;7098:29;7123:3;7117:4;7098:29;:::i;:::-;7090:37;;7160:3;7157:1;7153:11;7147:4;7144:21;7136:29;;6876:295;;;;:::o;7176:1395::-;7293:37;7326:3;7293:37;:::i;:::-;7395:18;7387:6;7384:30;7381:56;;;7417:18;;:::i;:::-;7381:56;7461:38;7493:4;7487:11;7461:38;:::i;:::-;7546:67;7606:6;7598;7592:4;7546:67;:::i;:::-;7640:1;7664:4;7651:17;;7696:2;7688:6;7685:14;7713:1;7708:618;;;;8370:1;8387:6;8384:77;;;8436:9;8431:3;8427:19;8421:26;8412:35;;8384:77;8487:67;8547:6;8540:5;8487:67;:::i;:::-;8481:4;8474:81;8343:222;7678:887;;7708:618;7760:4;7756:9;7748:6;7744:22;7794:37;7826:4;7794:37;:::i;:::-;7853:1;7867:208;7881:7;7878:1;7875:14;7867:208;;;7960:9;7955:3;7951:19;7945:26;7937:6;7930:42;8011:1;8003:6;7999:14;7989:24;;8058:2;8047:9;8043:18;8030:31;;7904:4;7901:1;7897:12;7892:17;;7867:208;;;8103:6;8094:7;8091:19;8088:179;;;8161:9;8156:3;8152:19;8146:26;8204:48;8246:4;8238:6;8234:17;8223:9;8204:48;:::i;:::-;8196:6;8189:64;8111:156;8088:179;8313:1;8309;8301:6;8297:14;8293:22;8287:4;8280:36;7715:611;;;7678:887;;7268:1303;;;7176:1395;;:::o;1401:11610:11:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_3314":{"entryPoint":2679,"id":3314,"parameterSlots":3,"returnSlots":0},"@_approve_3249":{"entryPoint":1447,"id":3249,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_3303":{"entryPoint":2674,"id":3303,"parameterSlots":3,"returnSlots":0},"@_msgSender_3430":{"entryPoint":1439,"id":3430,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_3292":{"entryPoint":1904,"id":3292,"parameterSlots":3,"returnSlots":0},"@_transfer_3075":{"entryPoint":2044,"id":3075,"parameterSlots":3,"returnSlots":0},"@allowance_2870":{"entryPoint":1304,"id":2870,"parameterSlots":2,"returnSlots":1},"@approve_2895":{"entryPoint":776,"id":2895,"parameterSlots":2,"returnSlots":1},"@balanceOf_2827":{"entryPoint":932,"id":2827,"parameterSlots":1,"returnSlots":1},"@decimals_2803":{"entryPoint":868,"id":2803,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_2998":{"entryPoint":1150,"id":2998,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_2957":{"entryPoint":877,"id":2957,"parameterSlots":2,"returnSlots":1},"@name_2783":{"entryPoint":630,"id":2783,"parameterSlots":0,"returnSlots":1},"@symbol_2793":{"entryPoint":1004,"id":2793,"parameterSlots":0,"returnSlots":1},"@totalSupply_2813":{"entryPoint":811,"id":2813,"parameterSlots":0,"returnSlots":1},"@transferFrom_2928":{"entryPoint":821,"id":2928,"parameterSlots":3,"returnSlots":1},"@transfer_2852":{"entryPoint":1269,"id":2852,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2940,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":2994,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3313,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3358,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3175,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3015,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3091,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":2771,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":4388,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":3988,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":4096,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":4534,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":4242,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":3842,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":3696,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":3133,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":3271,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":3106,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2828,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4423,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4023,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4131,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4569,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4277,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3877,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3731,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":3148,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":3286,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":2684,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2695,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3565,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2899,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3079,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2867,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":2961,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":3258,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2712,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3469,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3518,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":3422,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2862,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2754,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":4309,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":3909,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":4055,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":4455,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":4163,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":3763,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":3617,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2917,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2971,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13699:20","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:20","statements":[{"nodeType":"YulAssignment","src":"77:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:20"},"nodeType":"YulFunctionCall","src":"87:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:20"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:20","type":""}],"src":"7:99:20"},{"body":{"nodeType":"YulBlock","src":"208:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"225:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"230:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"218:6:20"},"nodeType":"YulFunctionCall","src":"218:19:20"},"nodeType":"YulExpressionStatement","src":"218:19:20"},{"nodeType":"YulAssignment","src":"246:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"265:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"270:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"261:3:20"},"nodeType":"YulFunctionCall","src":"261:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"246:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"180:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"185:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"196:11:20","type":""}],"src":"112:169:20"},{"body":{"nodeType":"YulBlock","src":"349:184:20","statements":[{"nodeType":"YulVariableDeclaration","src":"359:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"368:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"363:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"428:63:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"453:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"458:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"449:3:20"},"nodeType":"YulFunctionCall","src":"449:11:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"472:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"477:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"468:3:20"},"nodeType":"YulFunctionCall","src":"468:11:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"462:5:20"},"nodeType":"YulFunctionCall","src":"462:18:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"442:6:20"},"nodeType":"YulFunctionCall","src":"442:39:20"},"nodeType":"YulExpressionStatement","src":"442:39:20"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"389:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"392:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"386:2:20"},"nodeType":"YulFunctionCall","src":"386:13:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"400:19:20","statements":[{"nodeType":"YulAssignment","src":"402:15:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"411:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"414:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"407:3:20"},"nodeType":"YulFunctionCall","src":"407:10:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"402:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"382:3:20","statements":[]},"src":"378:113:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"511:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"516:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"507:3:20"},"nodeType":"YulFunctionCall","src":"507:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"525:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"500:6:20"},"nodeType":"YulFunctionCall","src":"500:27:20"},"nodeType":"YulExpressionStatement","src":"500:27:20"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"331:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"336:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"341:6:20","type":""}],"src":"287:246:20"},{"body":{"nodeType":"YulBlock","src":"587:54:20","statements":[{"nodeType":"YulAssignment","src":"597:38:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"615:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"622:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"611:3:20"},"nodeType":"YulFunctionCall","src":"611:14:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"631:2:20","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"627:3:20"},"nodeType":"YulFunctionCall","src":"627:7:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"607:3:20"},"nodeType":"YulFunctionCall","src":"607:28:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"597:6:20"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"570:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"580:6:20","type":""}],"src":"539:102:20"},{"body":{"nodeType":"YulBlock","src":"739:285:20","statements":[{"nodeType":"YulVariableDeclaration","src":"749:53:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"796:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"763:32:20"},"nodeType":"YulFunctionCall","src":"763:39:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"753:6:20","type":""}]},{"nodeType":"YulAssignment","src":"811:78:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"877:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"882:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"818:58:20"},"nodeType":"YulFunctionCall","src":"818:71:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"811:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"937:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"944:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"933:3:20"},"nodeType":"YulFunctionCall","src":"933:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"951:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"956:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"898:34:20"},"nodeType":"YulFunctionCall","src":"898:65:20"},"nodeType":"YulExpressionStatement","src":"898:65:20"},{"nodeType":"YulAssignment","src":"972:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"983:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1010:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"988:21:20"},"nodeType":"YulFunctionCall","src":"988:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"979:3:20"},"nodeType":"YulFunctionCall","src":"979:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"972:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"720:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"727:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"735:3:20","type":""}],"src":"647:377:20"},{"body":{"nodeType":"YulBlock","src":"1148:195:20","statements":[{"nodeType":"YulAssignment","src":"1158:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1170:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1181:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1166:3:20"},"nodeType":"YulFunctionCall","src":"1166:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1158:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1205:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1216:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1201:3:20"},"nodeType":"YulFunctionCall","src":"1201:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1224:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"1230:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1220:3:20"},"nodeType":"YulFunctionCall","src":"1220:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1194:6:20"},"nodeType":"YulFunctionCall","src":"1194:47:20"},"nodeType":"YulExpressionStatement","src":"1194:47:20"},{"nodeType":"YulAssignment","src":"1250:86:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1322:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"1331:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1258:63:20"},"nodeType":"YulFunctionCall","src":"1258:78:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1250:4:20"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1120:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1132:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1143:4:20","type":""}],"src":"1030:313:20"},{"body":{"nodeType":"YulBlock","src":"1389:35:20","statements":[{"nodeType":"YulAssignment","src":"1399:19:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1415:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1409:5:20"},"nodeType":"YulFunctionCall","src":"1409:9:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1399:6:20"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1382:6:20","type":""}],"src":"1349:75:20"},{"body":{"nodeType":"YulBlock","src":"1519:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1536:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1539:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1529:6:20"},"nodeType":"YulFunctionCall","src":"1529:12:20"},"nodeType":"YulExpressionStatement","src":"1529:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1430:117:20"},{"body":{"nodeType":"YulBlock","src":"1642:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1659:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1662:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1652:6:20"},"nodeType":"YulFunctionCall","src":"1652:12:20"},"nodeType":"YulExpressionStatement","src":"1652:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"1553:117:20"},{"body":{"nodeType":"YulBlock","src":"1721:81:20","statements":[{"nodeType":"YulAssignment","src":"1731:65:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1746:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"1753:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1742:3:20"},"nodeType":"YulFunctionCall","src":"1742:54:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1731:7:20"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1703:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1713:7:20","type":""}],"src":"1676:126:20"},{"body":{"nodeType":"YulBlock","src":"1853:51:20","statements":[{"nodeType":"YulAssignment","src":"1863:35:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1892:5:20"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1874:17:20"},"nodeType":"YulFunctionCall","src":"1874:24:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1863:7:20"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1835:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1845:7:20","type":""}],"src":"1808:96:20"},{"body":{"nodeType":"YulBlock","src":"1953:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"2010:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2019:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2022:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2012:6:20"},"nodeType":"YulFunctionCall","src":"2012:12:20"},"nodeType":"YulExpressionStatement","src":"2012:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1976:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2001:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1983:17:20"},"nodeType":"YulFunctionCall","src":"1983:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1973:2:20"},"nodeType":"YulFunctionCall","src":"1973:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1966:6:20"},"nodeType":"YulFunctionCall","src":"1966:43:20"},"nodeType":"YulIf","src":"1963:63:20"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1946:5:20","type":""}],"src":"1910:122:20"},{"body":{"nodeType":"YulBlock","src":"2090:87:20","statements":[{"nodeType":"YulAssignment","src":"2100:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2122:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2109:12:20"},"nodeType":"YulFunctionCall","src":"2109:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2100:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2165:5:20"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2138:26:20"},"nodeType":"YulFunctionCall","src":"2138:33:20"},"nodeType":"YulExpressionStatement","src":"2138:33:20"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2068:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2076:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2084:5:20","type":""}],"src":"2038:139:20"},{"body":{"nodeType":"YulBlock","src":"2228:32:20","statements":[{"nodeType":"YulAssignment","src":"2238:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"2249:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2238:7:20"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2210:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2220:7:20","type":""}],"src":"2183:77:20"},{"body":{"nodeType":"YulBlock","src":"2309:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"2366:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2375:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2378:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2368:6:20"},"nodeType":"YulFunctionCall","src":"2368:12:20"},"nodeType":"YulExpressionStatement","src":"2368:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2332:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2357:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2339:17:20"},"nodeType":"YulFunctionCall","src":"2339:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2329:2:20"},"nodeType":"YulFunctionCall","src":"2329:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2322:6:20"},"nodeType":"YulFunctionCall","src":"2322:43:20"},"nodeType":"YulIf","src":"2319:63:20"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2302:5:20","type":""}],"src":"2266:122:20"},{"body":{"nodeType":"YulBlock","src":"2446:87:20","statements":[{"nodeType":"YulAssignment","src":"2456:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2478:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2465:12:20"},"nodeType":"YulFunctionCall","src":"2465:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2456:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2521:5:20"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2494:26:20"},"nodeType":"YulFunctionCall","src":"2494:33:20"},"nodeType":"YulExpressionStatement","src":"2494:33:20"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2424:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2432:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2440:5:20","type":""}],"src":"2394:139:20"},{"body":{"nodeType":"YulBlock","src":"2622:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"2668:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2670:77:20"},"nodeType":"YulFunctionCall","src":"2670:79:20"},"nodeType":"YulExpressionStatement","src":"2670:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2643:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"2652:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2639:3:20"},"nodeType":"YulFunctionCall","src":"2639:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"2664:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2635:3:20"},"nodeType":"YulFunctionCall","src":"2635:32:20"},"nodeType":"YulIf","src":"2632:119:20"},{"nodeType":"YulBlock","src":"2761:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2776:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2790:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2780:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2805:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2840:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2851:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2836:3:20"},"nodeType":"YulFunctionCall","src":"2836:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2860:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2815:20:20"},"nodeType":"YulFunctionCall","src":"2815:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2805:6:20"}]}]},{"nodeType":"YulBlock","src":"2888:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2903:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2917:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2907:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2933:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2968:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2979:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2964:3:20"},"nodeType":"YulFunctionCall","src":"2964:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2988:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2943:20:20"},"nodeType":"YulFunctionCall","src":"2943:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2933:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2584:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2595:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2607:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2615:6:20","type":""}],"src":"2539:474:20"},{"body":{"nodeType":"YulBlock","src":"3061:48:20","statements":[{"nodeType":"YulAssignment","src":"3071:32:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3096:5:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3089:6:20"},"nodeType":"YulFunctionCall","src":"3089:13:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3082:6:20"},"nodeType":"YulFunctionCall","src":"3082:21:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3071:7:20"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3043:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3053:7:20","type":""}],"src":"3019:90:20"},{"body":{"nodeType":"YulBlock","src":"3174:50:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3191:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3211:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3196:14:20"},"nodeType":"YulFunctionCall","src":"3196:21:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3184:6:20"},"nodeType":"YulFunctionCall","src":"3184:34:20"},"nodeType":"YulExpressionStatement","src":"3184:34:20"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3162:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3169:3:20","type":""}],"src":"3115:109:20"},{"body":{"nodeType":"YulBlock","src":"3322:118:20","statements":[{"nodeType":"YulAssignment","src":"3332:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3344:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3355:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3340:3:20"},"nodeType":"YulFunctionCall","src":"3340:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3332:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3406:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3419:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3430:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3415:3:20"},"nodeType":"YulFunctionCall","src":"3415:17:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3368:37:20"},"nodeType":"YulFunctionCall","src":"3368:65:20"},"nodeType":"YulExpressionStatement","src":"3368:65:20"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3294:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3306:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3317:4:20","type":""}],"src":"3230:210:20"},{"body":{"nodeType":"YulBlock","src":"3511:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3528:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3551:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3533:17:20"},"nodeType":"YulFunctionCall","src":"3533:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3521:6:20"},"nodeType":"YulFunctionCall","src":"3521:37:20"},"nodeType":"YulExpressionStatement","src":"3521:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3499:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3506:3:20","type":""}],"src":"3446:118:20"},{"body":{"nodeType":"YulBlock","src":"3668:124:20","statements":[{"nodeType":"YulAssignment","src":"3678:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3690:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3701:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3686:3:20"},"nodeType":"YulFunctionCall","src":"3686:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3678:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3758:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3771:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3782:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3767:3:20"},"nodeType":"YulFunctionCall","src":"3767:17:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3714:43:20"},"nodeType":"YulFunctionCall","src":"3714:71:20"},"nodeType":"YulExpressionStatement","src":"3714:71:20"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3640:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3652:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3663:4:20","type":""}],"src":"3570:222:20"},{"body":{"nodeType":"YulBlock","src":"3898:519:20","statements":[{"body":{"nodeType":"YulBlock","src":"3944:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3946:77:20"},"nodeType":"YulFunctionCall","src":"3946:79:20"},"nodeType":"YulExpressionStatement","src":"3946:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3919:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"3928:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3915:3:20"},"nodeType":"YulFunctionCall","src":"3915:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"3940:2:20","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3911:3:20"},"nodeType":"YulFunctionCall","src":"3911:32:20"},"nodeType":"YulIf","src":"3908:119:20"},{"nodeType":"YulBlock","src":"4037:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4052:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4066:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4056:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4081:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4116:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4127:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4112:3:20"},"nodeType":"YulFunctionCall","src":"4112:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4136:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4091:20:20"},"nodeType":"YulFunctionCall","src":"4091:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4081:6:20"}]}]},{"nodeType":"YulBlock","src":"4164:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4179:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4193:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4183:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4209:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4244:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4255:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4240:3:20"},"nodeType":"YulFunctionCall","src":"4240:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4264:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4219:20:20"},"nodeType":"YulFunctionCall","src":"4219:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4209:6:20"}]}]},{"nodeType":"YulBlock","src":"4292:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4307:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4321:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4311:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4337:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4372:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4383:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4368:3:20"},"nodeType":"YulFunctionCall","src":"4368:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4392:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4347:20:20"},"nodeType":"YulFunctionCall","src":"4347:53:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4337:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3852:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3863:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3875:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3883:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3891:6:20","type":""}],"src":"3798:619:20"},{"body":{"nodeType":"YulBlock","src":"4466:43:20","statements":[{"nodeType":"YulAssignment","src":"4476:27:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4491:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"4498:4:20","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4487:3:20"},"nodeType":"YulFunctionCall","src":"4487:16:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4476:7:20"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4448:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4458:7:20","type":""}],"src":"4423:86:20"},{"body":{"nodeType":"YulBlock","src":"4576:51:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4593:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4614:5:20"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"4598:15:20"},"nodeType":"YulFunctionCall","src":"4598:22:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4586:6:20"},"nodeType":"YulFunctionCall","src":"4586:35:20"},"nodeType":"YulExpressionStatement","src":"4586:35:20"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4564:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4571:3:20","type":""}],"src":"4515:112:20"},{"body":{"nodeType":"YulBlock","src":"4727:120:20","statements":[{"nodeType":"YulAssignment","src":"4737:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4749:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4760:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4745:3:20"},"nodeType":"YulFunctionCall","src":"4745:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4737:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4813:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4826:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4837:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4822:3:20"},"nodeType":"YulFunctionCall","src":"4822:17:20"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"4773:39:20"},"nodeType":"YulFunctionCall","src":"4773:67:20"},"nodeType":"YulExpressionStatement","src":"4773:67:20"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4699:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4711:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4722:4:20","type":""}],"src":"4633:214:20"},{"body":{"nodeType":"YulBlock","src":"4919:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"4965:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4967:77:20"},"nodeType":"YulFunctionCall","src":"4967:79:20"},"nodeType":"YulExpressionStatement","src":"4967:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4940:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"4949:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4936:3:20"},"nodeType":"YulFunctionCall","src":"4936:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"4961:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4932:3:20"},"nodeType":"YulFunctionCall","src":"4932:32:20"},"nodeType":"YulIf","src":"4929:119:20"},{"nodeType":"YulBlock","src":"5058:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5073:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5087:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5077:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5102:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5137:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5148:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5133:3:20"},"nodeType":"YulFunctionCall","src":"5133:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5157:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5112:20:20"},"nodeType":"YulFunctionCall","src":"5112:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5102:6:20"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4889:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4900:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4912:6:20","type":""}],"src":"4853:329:20"},{"body":{"nodeType":"YulBlock","src":"5271:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"5317:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5319:77:20"},"nodeType":"YulFunctionCall","src":"5319:79:20"},"nodeType":"YulExpressionStatement","src":"5319:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5292:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"5301:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5288:3:20"},"nodeType":"YulFunctionCall","src":"5288:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"5313:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5284:3:20"},"nodeType":"YulFunctionCall","src":"5284:32:20"},"nodeType":"YulIf","src":"5281:119:20"},{"nodeType":"YulBlock","src":"5410:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5425:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5439:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5429:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5454:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5489:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5500:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5485:3:20"},"nodeType":"YulFunctionCall","src":"5485:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5509:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5464:20:20"},"nodeType":"YulFunctionCall","src":"5464:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5454:6:20"}]}]},{"nodeType":"YulBlock","src":"5537:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5552:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5566:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5556:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5582:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5617:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5628:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5613:3:20"},"nodeType":"YulFunctionCall","src":"5613:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5637:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5592:20:20"},"nodeType":"YulFunctionCall","src":"5592:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5582:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5233:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5244:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5256:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5264:6:20","type":""}],"src":"5188:474:20"},{"body":{"nodeType":"YulBlock","src":"5696:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5713:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5716:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5706:6:20"},"nodeType":"YulFunctionCall","src":"5706:88:20"},"nodeType":"YulExpressionStatement","src":"5706:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5810:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5813:4:20","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5803:6:20"},"nodeType":"YulFunctionCall","src":"5803:15:20"},"nodeType":"YulExpressionStatement","src":"5803:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5834:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5837:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5827:6:20"},"nodeType":"YulFunctionCall","src":"5827:15:20"},"nodeType":"YulExpressionStatement","src":"5827:15:20"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"5668:180:20"},{"body":{"nodeType":"YulBlock","src":"5905:269:20","statements":[{"nodeType":"YulAssignment","src":"5915:22:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5929:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"5935:1:20","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5925:3:20"},"nodeType":"YulFunctionCall","src":"5925:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5915:6:20"}]},{"nodeType":"YulVariableDeclaration","src":"5946:38:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5976:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"5982:1:20","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5972:3:20"},"nodeType":"YulFunctionCall","src":"5972:12:20"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5950:18:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"6023:51:20","statements":[{"nodeType":"YulAssignment","src":"6037:27:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6051:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"6059:4:20","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6047:3:20"},"nodeType":"YulFunctionCall","src":"6047:17:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6037:6:20"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6003:18:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5996:6:20"},"nodeType":"YulFunctionCall","src":"5996:26:20"},"nodeType":"YulIf","src":"5993:81:20"},{"body":{"nodeType":"YulBlock","src":"6126:42:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"6140:16:20"},"nodeType":"YulFunctionCall","src":"6140:18:20"},"nodeType":"YulExpressionStatement","src":"6140:18:20"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6090:18:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6113:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"6121:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6110:2:20"},"nodeType":"YulFunctionCall","src":"6110:14:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6087:2:20"},"nodeType":"YulFunctionCall","src":"6087:38:20"},"nodeType":"YulIf","src":"6084:84:20"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5889:4:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5898:6:20","type":""}],"src":"5854:320:20"},{"body":{"nodeType":"YulBlock","src":"6208:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6225:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6228:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6218:6:20"},"nodeType":"YulFunctionCall","src":"6218:88:20"},"nodeType":"YulExpressionStatement","src":"6218:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6322:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6325:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6315:6:20"},"nodeType":"YulFunctionCall","src":"6315:15:20"},"nodeType":"YulExpressionStatement","src":"6315:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6346:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6349:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6339:6:20"},"nodeType":"YulFunctionCall","src":"6339:15:20"},"nodeType":"YulExpressionStatement","src":"6339:15:20"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6180:180:20"},{"body":{"nodeType":"YulBlock","src":"6410:147:20","statements":[{"nodeType":"YulAssignment","src":"6420:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6443:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6425:17:20"},"nodeType":"YulFunctionCall","src":"6425:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6420:1:20"}]},{"nodeType":"YulAssignment","src":"6454:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6477:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6459:17:20"},"nodeType":"YulFunctionCall","src":"6459:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6454:1:20"}]},{"nodeType":"YulAssignment","src":"6488:16:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6499:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"6502:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6495:3:20"},"nodeType":"YulFunctionCall","src":"6495:9:20"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"6488:3:20"}]},{"body":{"nodeType":"YulBlock","src":"6528:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6530:16:20"},"nodeType":"YulFunctionCall","src":"6530:18:20"},"nodeType":"YulExpressionStatement","src":"6530:18:20"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6520:1:20"},{"name":"sum","nodeType":"YulIdentifier","src":"6523:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6517:2:20"},"nodeType":"YulFunctionCall","src":"6517:10:20"},"nodeType":"YulIf","src":"6514:36:20"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6397:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"6400:1:20","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6406:3:20","type":""}],"src":"6366:191:20"},{"body":{"nodeType":"YulBlock","src":"6669:118:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6691:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"6699:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6687:3:20"},"nodeType":"YulFunctionCall","src":"6687:14:20"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"6703:34:20","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6680:6:20"},"nodeType":"YulFunctionCall","src":"6680:58:20"},"nodeType":"YulExpressionStatement","src":"6680:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6759:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"6767:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6755:3:20"},"nodeType":"YulFunctionCall","src":"6755:15:20"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"6772:7:20","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6748:6:20"},"nodeType":"YulFunctionCall","src":"6748:32:20"},"nodeType":"YulExpressionStatement","src":"6748:32:20"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6661:6:20","type":""}],"src":"6563:224:20"},{"body":{"nodeType":"YulBlock","src":"6939:220:20","statements":[{"nodeType":"YulAssignment","src":"6949:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7015:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"7020:2:20","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6956:58:20"},"nodeType":"YulFunctionCall","src":"6956:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6949:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7121:3:20"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"7032:88:20"},"nodeType":"YulFunctionCall","src":"7032:93:20"},"nodeType":"YulExpressionStatement","src":"7032:93:20"},{"nodeType":"YulAssignment","src":"7134:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7145:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"7150:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7141:3:20"},"nodeType":"YulFunctionCall","src":"7141:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7134:3:20"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6927:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6935:3:20","type":""}],"src":"6793:366:20"},{"body":{"nodeType":"YulBlock","src":"7336:248:20","statements":[{"nodeType":"YulAssignment","src":"7346:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7358:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"7369:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7354:3:20"},"nodeType":"YulFunctionCall","src":"7354:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7346:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7393:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"7404:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7389:3:20"},"nodeType":"YulFunctionCall","src":"7389:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7412:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"7418:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7408:3:20"},"nodeType":"YulFunctionCall","src":"7408:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7382:6:20"},"nodeType":"YulFunctionCall","src":"7382:47:20"},"nodeType":"YulExpressionStatement","src":"7382:47:20"},{"nodeType":"YulAssignment","src":"7438:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7572:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7446:124:20"},"nodeType":"YulFunctionCall","src":"7446:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7438:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7316:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7331:4:20","type":""}],"src":"7165:419:20"},{"body":{"nodeType":"YulBlock","src":"7696:117:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7718:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"7726:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7714:3:20"},"nodeType":"YulFunctionCall","src":"7714:14:20"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"7730:34:20","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7707:6:20"},"nodeType":"YulFunctionCall","src":"7707:58:20"},"nodeType":"YulExpressionStatement","src":"7707:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7786:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"7794:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7782:3:20"},"nodeType":"YulFunctionCall","src":"7782:15:20"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"7799:6:20","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7775:6:20"},"nodeType":"YulFunctionCall","src":"7775:31:20"},"nodeType":"YulExpressionStatement","src":"7775:31:20"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7688:6:20","type":""}],"src":"7590:223:20"},{"body":{"nodeType":"YulBlock","src":"7965:220:20","statements":[{"nodeType":"YulAssignment","src":"7975:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8041:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"8046:2:20","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7982:58:20"},"nodeType":"YulFunctionCall","src":"7982:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7975:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8147:3:20"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"8058:88:20"},"nodeType":"YulFunctionCall","src":"8058:93:20"},"nodeType":"YulExpressionStatement","src":"8058:93:20"},{"nodeType":"YulAssignment","src":"8160:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8171:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"8176:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8167:3:20"},"nodeType":"YulFunctionCall","src":"8167:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8160:3:20"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7953:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7961:3:20","type":""}],"src":"7819:366:20"},{"body":{"nodeType":"YulBlock","src":"8362:248:20","statements":[{"nodeType":"YulAssignment","src":"8372:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8384:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"8395:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8380:3:20"},"nodeType":"YulFunctionCall","src":"8380:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8372:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8419:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"8430:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8415:3:20"},"nodeType":"YulFunctionCall","src":"8415:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8438:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"8444:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8434:3:20"},"nodeType":"YulFunctionCall","src":"8434:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8408:6:20"},"nodeType":"YulFunctionCall","src":"8408:47:20"},"nodeType":"YulExpressionStatement","src":"8408:47:20"},{"nodeType":"YulAssignment","src":"8464:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8598:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8472:124:20"},"nodeType":"YulFunctionCall","src":"8472:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8464:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8342:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8357:4:20","type":""}],"src":"8191:419:20"},{"body":{"nodeType":"YulBlock","src":"8722:115:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8744:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8752:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8740:3:20"},"nodeType":"YulFunctionCall","src":"8740:14:20"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"8756:34:20","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8733:6:20"},"nodeType":"YulFunctionCall","src":"8733:58:20"},"nodeType":"YulExpressionStatement","src":"8733:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8812:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8820:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8808:3:20"},"nodeType":"YulFunctionCall","src":"8808:15:20"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"8825:4:20","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8801:6:20"},"nodeType":"YulFunctionCall","src":"8801:29:20"},"nodeType":"YulExpressionStatement","src":"8801:29:20"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8714:6:20","type":""}],"src":"8616:221:20"},{"body":{"nodeType":"YulBlock","src":"8989:220:20","statements":[{"nodeType":"YulAssignment","src":"8999:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9065:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"9070:2:20","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9006:58:20"},"nodeType":"YulFunctionCall","src":"9006:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8999:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9171:3:20"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"9082:88:20"},"nodeType":"YulFunctionCall","src":"9082:93:20"},"nodeType":"YulExpressionStatement","src":"9082:93:20"},{"nodeType":"YulAssignment","src":"9184:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9195:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"9200:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9191:3:20"},"nodeType":"YulFunctionCall","src":"9191:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9184:3:20"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8977:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8985:3:20","type":""}],"src":"8843:366:20"},{"body":{"nodeType":"YulBlock","src":"9386:248:20","statements":[{"nodeType":"YulAssignment","src":"9396:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9408:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"9419:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9404:3:20"},"nodeType":"YulFunctionCall","src":"9404:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9396:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9443:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"9454:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9439:3:20"},"nodeType":"YulFunctionCall","src":"9439:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9462:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"9468:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9458:3:20"},"nodeType":"YulFunctionCall","src":"9458:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9432:6:20"},"nodeType":"YulFunctionCall","src":"9432:47:20"},"nodeType":"YulExpressionStatement","src":"9432:47:20"},{"nodeType":"YulAssignment","src":"9488:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9622:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9496:124:20"},"nodeType":"YulFunctionCall","src":"9496:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9488:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9366:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9381:4:20","type":""}],"src":"9215:419:20"},{"body":{"nodeType":"YulBlock","src":"9746:73:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9768:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"9776:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9764:3:20"},"nodeType":"YulFunctionCall","src":"9764:14:20"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"9780:31:20","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9757:6:20"},"nodeType":"YulFunctionCall","src":"9757:55:20"},"nodeType":"YulExpressionStatement","src":"9757:55:20"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9738:6:20","type":""}],"src":"9640:179:20"},{"body":{"nodeType":"YulBlock","src":"9971:220:20","statements":[{"nodeType":"YulAssignment","src":"9981:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10047:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"10052:2:20","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9988:58:20"},"nodeType":"YulFunctionCall","src":"9988:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9981:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10153:3:20"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"10064:88:20"},"nodeType":"YulFunctionCall","src":"10064:93:20"},"nodeType":"YulExpressionStatement","src":"10064:93:20"},{"nodeType":"YulAssignment","src":"10166:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10177:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"10182:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10173:3:20"},"nodeType":"YulFunctionCall","src":"10173:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10166:3:20"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9959:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9967:3:20","type":""}],"src":"9825:366:20"},{"body":{"nodeType":"YulBlock","src":"10368:248:20","statements":[{"nodeType":"YulAssignment","src":"10378:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10390:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"10401:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10386:3:20"},"nodeType":"YulFunctionCall","src":"10386:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10378:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10425:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"10436:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10421:3:20"},"nodeType":"YulFunctionCall","src":"10421:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10444:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"10450:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10440:3:20"},"nodeType":"YulFunctionCall","src":"10440:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10414:6:20"},"nodeType":"YulFunctionCall","src":"10414:47:20"},"nodeType":"YulExpressionStatement","src":"10414:47:20"},{"nodeType":"YulAssignment","src":"10470:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10604:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10478:124:20"},"nodeType":"YulFunctionCall","src":"10478:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10470:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10348:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10363:4:20","type":""}],"src":"10197:419:20"},{"body":{"nodeType":"YulBlock","src":"10728:118:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10750:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"10758:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10746:3:20"},"nodeType":"YulFunctionCall","src":"10746:14:20"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"10762:34:20","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10739:6:20"},"nodeType":"YulFunctionCall","src":"10739:58:20"},"nodeType":"YulExpressionStatement","src":"10739:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10818:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"10826:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10814:3:20"},"nodeType":"YulFunctionCall","src":"10814:15:20"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"10831:7:20","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10807:6:20"},"nodeType":"YulFunctionCall","src":"10807:32:20"},"nodeType":"YulExpressionStatement","src":"10807:32:20"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10720:6:20","type":""}],"src":"10622:224:20"},{"body":{"nodeType":"YulBlock","src":"10998:220:20","statements":[{"nodeType":"YulAssignment","src":"11008:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11074:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"11079:2:20","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11015:58:20"},"nodeType":"YulFunctionCall","src":"11015:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11008:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11180:3:20"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"11091:88:20"},"nodeType":"YulFunctionCall","src":"11091:93:20"},"nodeType":"YulExpressionStatement","src":"11091:93:20"},{"nodeType":"YulAssignment","src":"11193:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11204:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"11209:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11200:3:20"},"nodeType":"YulFunctionCall","src":"11200:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11193:3:20"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10986:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10994:3:20","type":""}],"src":"10852:366:20"},{"body":{"nodeType":"YulBlock","src":"11395:248:20","statements":[{"nodeType":"YulAssignment","src":"11405:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11417:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11428:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11413:3:20"},"nodeType":"YulFunctionCall","src":"11413:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11405:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11452:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11463:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11448:3:20"},"nodeType":"YulFunctionCall","src":"11448:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11471:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"11477:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11467:3:20"},"nodeType":"YulFunctionCall","src":"11467:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11441:6:20"},"nodeType":"YulFunctionCall","src":"11441:47:20"},"nodeType":"YulExpressionStatement","src":"11441:47:20"},{"nodeType":"YulAssignment","src":"11497:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11631:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11505:124:20"},"nodeType":"YulFunctionCall","src":"11505:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11497:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11375:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11390:4:20","type":""}],"src":"11224:419:20"},{"body":{"nodeType":"YulBlock","src":"11755:116:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11777:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"11785:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11773:3:20"},"nodeType":"YulFunctionCall","src":"11773:14:20"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"11789:34:20","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11766:6:20"},"nodeType":"YulFunctionCall","src":"11766:58:20"},"nodeType":"YulExpressionStatement","src":"11766:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11845:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"11853:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11841:3:20"},"nodeType":"YulFunctionCall","src":"11841:15:20"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"11858:5:20","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11834:6:20"},"nodeType":"YulFunctionCall","src":"11834:30:20"},"nodeType":"YulExpressionStatement","src":"11834:30:20"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11747:6:20","type":""}],"src":"11649:222:20"},{"body":{"nodeType":"YulBlock","src":"12023:220:20","statements":[{"nodeType":"YulAssignment","src":"12033:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12099:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"12104:2:20","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12040:58:20"},"nodeType":"YulFunctionCall","src":"12040:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12033:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12205:3:20"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"12116:88:20"},"nodeType":"YulFunctionCall","src":"12116:93:20"},"nodeType":"YulExpressionStatement","src":"12116:93:20"},{"nodeType":"YulAssignment","src":"12218:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12229:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"12234:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12225:3:20"},"nodeType":"YulFunctionCall","src":"12225:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12218:3:20"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12011:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12019:3:20","type":""}],"src":"11877:366:20"},{"body":{"nodeType":"YulBlock","src":"12420:248:20","statements":[{"nodeType":"YulAssignment","src":"12430:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12442:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12453:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12438:3:20"},"nodeType":"YulFunctionCall","src":"12438:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12430:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12477:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12488:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12473:3:20"},"nodeType":"YulFunctionCall","src":"12473:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12496:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"12502:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12492:3:20"},"nodeType":"YulFunctionCall","src":"12492:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12466:6:20"},"nodeType":"YulFunctionCall","src":"12466:47:20"},"nodeType":"YulExpressionStatement","src":"12466:47:20"},{"nodeType":"YulAssignment","src":"12522:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12656:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12530:124:20"},"nodeType":"YulFunctionCall","src":"12530:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12522:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12400:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12415:4:20","type":""}],"src":"12249:419:20"},{"body":{"nodeType":"YulBlock","src":"12780:119:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12802:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"12810:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12798:3:20"},"nodeType":"YulFunctionCall","src":"12798:14:20"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"12814:34:20","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12791:6:20"},"nodeType":"YulFunctionCall","src":"12791:58:20"},"nodeType":"YulExpressionStatement","src":"12791:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12870:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"12878:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12866:3:20"},"nodeType":"YulFunctionCall","src":"12866:15:20"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"12883:8:20","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12859:6:20"},"nodeType":"YulFunctionCall","src":"12859:33:20"},"nodeType":"YulExpressionStatement","src":"12859:33:20"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12772:6:20","type":""}],"src":"12674:225:20"},{"body":{"nodeType":"YulBlock","src":"13051:220:20","statements":[{"nodeType":"YulAssignment","src":"13061:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13127:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"13132:2:20","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13068:58:20"},"nodeType":"YulFunctionCall","src":"13068:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13061:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13233:3:20"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"13144:88:20"},"nodeType":"YulFunctionCall","src":"13144:93:20"},"nodeType":"YulExpressionStatement","src":"13144:93:20"},{"nodeType":"YulAssignment","src":"13246:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13257:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"13262:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13253:3:20"},"nodeType":"YulFunctionCall","src":"13253:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13246:3:20"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13039:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13047:3:20","type":""}],"src":"12905:366:20"},{"body":{"nodeType":"YulBlock","src":"13448:248:20","statements":[{"nodeType":"YulAssignment","src":"13458:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13470:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13481:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13466:3:20"},"nodeType":"YulFunctionCall","src":"13466:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13458:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13505:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13516:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13501:3:20"},"nodeType":"YulFunctionCall","src":"13501:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13524:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"13530:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13520:3:20"},"nodeType":"YulFunctionCall","src":"13520:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13494:6:20"},"nodeType":"YulFunctionCall","src":"13494:47:20"},"nodeType":"YulExpressionStatement","src":"13494:47:20"},{"nodeType":"YulAssignment","src":"13550:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13684:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13558:124:20"},"nodeType":"YulFunctionCall","src":"13558:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13550:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13428:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13443:4:20","type":""}],"src":"13277:419:20"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b0c565b60405180910390f35b6100e660048036038101906100e19190610bc7565b610308565b6040516100f39190610c22565b60405180910390f35b61010461032b565b6040516101119190610c4c565b60405180910390f35b610134600480360381019061012f9190610c67565b610335565b6040516101419190610c22565b60405180910390f35b610152610364565b60405161015f9190610cd6565b60405180910390f35b610182600480360381019061017d9190610bc7565b61036d565b60405161018f9190610c22565b60405180910390f35b6101b260048036038101906101ad9190610cf1565b6103a4565b6040516101bf9190610c4c565b60405180910390f35b6101d06103ec565b6040516101dd9190610b0c565b60405180910390f35b61020060048036038101906101fb9190610bc7565b61047e565b60405161020d9190610c22565b60405180910390f35b610230600480360381019061022b9190610bc7565b6104f5565b60405161023d9190610c22565b60405180910390f35b610260600480360381019061025b9190610d1e565b610518565b60405161026d9190610c4c565b60405180910390f35b60606003805461028590610d8d565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d8d565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b60008061031361059f565b90506103208185856105a7565b600191505092915050565b6000600254905090565b60008061034061059f565b905061034d858285610770565b6103588585856107fc565b60019150509392505050565b60006012905090565b60008061037861059f565b905061039981858561038a8589610518565b6103949190610ded565b6105a7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103fb90610d8d565b80601f016020809104026020016040519081016040528092919081815260200182805461042790610d8d565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b60008061048961059f565b905060006104978286610518565b9050838110156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610e93565b60405180910390fd5b6104e982868684036105a7565b60019250505092915050565b60008061050061059f565b905061050d8185856107fc565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610f25565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067c90610fb7565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107639190610c4c565b60405180910390a3505050565b600061077c8484610518565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f657818110156107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90611023565b60405180910390fd5b6107f584848484036105a7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610862906110b5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190611147565b60405180910390fd5b6108e5838383610a72565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610962906111d9565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a599190610c4c565b60405180910390a3610a6c848484610a77565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ab6578082015181840152602081019050610a9b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ade82610a7c565b610ae88185610a87565b9350610af8818560208601610a98565b610b0181610ac2565b840191505092915050565b60006020820190508181036000830152610b268184610ad3565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5e82610b33565b9050919050565b610b6e81610b53565b8114610b7957600080fd5b50565b600081359050610b8b81610b65565b92915050565b6000819050919050565b610ba481610b91565b8114610baf57600080fd5b50565b600081359050610bc181610b9b565b92915050565b60008060408385031215610bde57610bdd610b2e565b5b6000610bec85828601610b7c565b9250506020610bfd85828601610bb2565b9150509250929050565b60008115159050919050565b610c1c81610c07565b82525050565b6000602082019050610c376000830184610c13565b92915050565b610c4681610b91565b82525050565b6000602082019050610c616000830184610c3d565b92915050565b600080600060608486031215610c8057610c7f610b2e565b5b6000610c8e86828701610b7c565b9350506020610c9f86828701610b7c565b9250506040610cb086828701610bb2565b9150509250925092565b600060ff82169050919050565b610cd081610cba565b82525050565b6000602082019050610ceb6000830184610cc7565b92915050565b600060208284031215610d0757610d06610b2e565b5b6000610d1584828501610b7c565b91505092915050565b60008060408385031215610d3557610d34610b2e565b5b6000610d4385828601610b7c565b9250506020610d5485828601610b7c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610da557607f821691505b602082108103610db857610db7610d5e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df882610b91565b9150610e0383610b91565b9250828201905080821115610e1b57610e1a610dbe565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e7d602583610a87565b9150610e8882610e21565b604082019050919050565b60006020820190508181036000830152610eac81610e70565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f0f602483610a87565b9150610f1a82610eb3565b604082019050919050565b60006020820190508181036000830152610f3e81610f02565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fa1602283610a87565b9150610fac82610f45565b604082019050919050565b60006020820190508181036000830152610fd081610f94565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061100d601d83610a87565b915061101882610fd7565b602082019050919050565b6000602082019050818103600083015261103c81611000565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061109f602583610a87565b91506110aa82611043565b604082019050919050565b600060208201905081810360008301526110ce81611092565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611131602383610a87565b915061113c826110d5565b604082019050919050565b6000602082019050818103600083015261116081611124565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111c3602683610a87565b91506111ce82611167565b604082019050919050565b600060208201905081810360008301526111f2816111b6565b905091905056fea2646970667358221220cfa590969dc1fe52ec32dbe13f59185757e4c4868929d9f856f7b780f8d2e89764736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC67 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xCF1 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x47E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD1E JUMP JUMPDEST PUSH2 0x518 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x770 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x518 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xDED JUMP JUMPDEST PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x3FB SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x427 SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x474 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x449 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x474 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x457 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x489 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x497 DUP3 DUP7 PUSH2 0x518 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D3 SWAP1 PUSH2 0xE93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4E9 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x500 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x50D DUP2 DUP6 DUP6 PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60D SWAP1 PUSH2 0xF25 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x685 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67C SWAP1 PUSH2 0xFB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x763 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77C DUP5 DUP5 PUSH2 0x518 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F6 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7DF SWAP1 PUSH2 0x1023 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F5 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A7 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x86B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x862 SWAP1 PUSH2 0x10B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8DA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D1 SWAP1 PUSH2 0x1147 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E5 DUP4 DUP4 DUP4 PUSH2 0xA72 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x96B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x962 SWAP1 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA59 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA6C DUP5 DUP5 DUP5 PUSH2 0xA77 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA9B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADE DUP3 PUSH2 0xA7C JUMP JUMPDEST PUSH2 0xAE8 DUP2 DUP6 PUSH2 0xA87 JUMP JUMPDEST SWAP4 POP PUSH2 0xAF8 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA98 JUMP JUMPDEST PUSH2 0xB01 DUP2 PUSH2 0xAC2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB26 DUP2 DUP5 PUSH2 0xAD3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5E DUP3 PUSH2 0xB33 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB6E DUP2 PUSH2 0xB53 JUMP JUMPDEST DUP2 EQ PUSH2 0xB79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB8B DUP2 PUSH2 0xB65 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBA4 DUP2 PUSH2 0xB91 JUMP JUMPDEST DUP2 EQ PUSH2 0xBAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBC1 DUP2 PUSH2 0xB9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBDE JUMPI PUSH2 0xBDD PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBEC DUP6 DUP3 DUP7 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBFD DUP6 DUP3 DUP7 ADD PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC1C DUP2 PUSH2 0xC07 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC37 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC13 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC46 DUP2 PUSH2 0xB91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC61 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC3D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC80 JUMPI PUSH2 0xC7F PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC8E DUP7 DUP3 DUP8 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC9F DUP7 DUP3 DUP8 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCB0 DUP7 DUP3 DUP8 ADD PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCD0 DUP2 PUSH2 0xCBA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCEB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCC7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD07 JUMPI PUSH2 0xD06 PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD15 DUP5 DUP3 DUP6 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD35 JUMPI PUSH2 0xD34 PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD43 DUP6 DUP3 DUP7 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD54 DUP6 DUP3 DUP7 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDA5 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xDB8 JUMPI PUSH2 0xDB7 PUSH2 0xD5E JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDF8 DUP3 PUSH2 0xB91 JUMP JUMPDEST SWAP2 POP PUSH2 0xE03 DUP4 PUSH2 0xB91 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xE1B JUMPI PUSH2 0xE1A PUSH2 0xDBE JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7D PUSH1 0x25 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0xE88 DUP3 PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEAC DUP2 PUSH2 0xE70 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF0F PUSH1 0x24 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0xF1A DUP3 PUSH2 0xEB3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF3E DUP2 PUSH2 0xF02 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA1 PUSH1 0x22 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0xFAC DUP3 PUSH2 0xF45 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFD0 DUP2 PUSH2 0xF94 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100D PUSH1 0x1D DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x1018 DUP3 PUSH2 0xFD7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x103C DUP2 PUSH2 0x1000 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109F PUSH1 0x25 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x10AA DUP3 PUSH2 0x1043 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10CE DUP2 PUSH2 0x1092 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1131 PUSH1 0x23 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x113C DUP3 PUSH2 0x10D5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1160 DUP2 PUSH2 0x1124 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11C3 PUSH1 0x26 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x11CE DUP3 PUSH2 0x1167 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11F2 DUP2 PUSH2 0x11B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF 0xA5 SWAP1 SWAP7 SWAP14 0xC1 INVALID MSTORE 0xEC ORIGIN 0xDB 0xE1 EXTCODEHASH MSIZE XOR JUMPI JUMPI 0xE4 0xC4 DUP7 DUP10 0x29 0xD9 0xF8 JUMP 0xF7 0xB7 DUP1 0xF8 0xD2 0xE8 SWAP8 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"1401:11610:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3242:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5190:286;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3091:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5871:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3406:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2365:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6592:427;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3727:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3974:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2154:98;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;4530:13;4546:12;:10;:12::i;:::-;4530:28;;4568:32;4577:5;4584:7;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;:::o;3242:106::-;3303:7;3329:12;;3322:19;;3242:106;:::o;5190:286::-;5317:4;5333:15;5351:12;:10;:12::i;:::-;5333:30;;5373:38;5389:4;5395:7;5404:6;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;5465:4;5458:11;;;5190:286;;;;;:::o;3091:91::-;3149:5;3173:2;3166:9;;3091:91;:::o;5871:234::-;5959:4;5975:13;5991:12;:10;:12::i;:::-;5975:28;;6013:64;6022:5;6029:7;6066:10;6038:25;6048:5;6055:7;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;:::-;6094:4;6087:11;;;5871:234;;;;:::o;3406:125::-;3480:7;3506:9;:18;3516:7;3506:18;;;;;;;;;;;;;;;;3499:25;;3406:125;;;:::o;2365:102::-;2421:13;2453:7;2446:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:102;:::o;6592:427::-;6685:4;6701:13;6717:12;:10;:12::i;:::-;6701:28;;6739:24;6766:25;6776:5;6783:7;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;:::-;7008:4;7001:11;;;;6592:427;;;;:::o;3727:189::-;3806:4;3822:13;3838:12;:10;:12::i;:::-;3822:28;;3860;3870:5;3877:2;3881:6;3860:9;:28::i;:::-;3905:4;3898:11;;;3727:189;;;;:::o;3974:149::-;4063:7;4089:11;:18;4101:5;4089:18;;;;;;;;;;;;;;;:27;4108:7;4089:27;;;;;;;;;;;;;;;;4082:34;;3974:149;;;;:::o;640:96:14:-;693:7;719:10;712:17;;640:96;:::o;10504:370:11:-;10652:1;10635:19;;:5;:19;;;10627:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10732:1;10713:21;;:7;:21;;;10705:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10814:6;10784:11;:18;10796:5;10784:18;;;;;;;;;;;;;;;:27;10803:7;10784:27;;;;;;;;;;;;;;;:36;;;;10851:7;10835:32;;10844:5;10835:32;;;10860:6;10835:32;;;;;;:::i;:::-;;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;11371:17;11351:16;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11347:243;11275:321;11155:441;;;:::o;7473:818::-;7615:1;7599:18;;:4;:18;;;7591:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;7691:1;7677:16;;:2;:16;;;7669:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;7744:38;7765:4;7771:2;7775:6;7744:20;:38::i;:::-;7793:19;7815:9;:15;7825:4;7815:15;;;;;;;;;;;;;;;;7793:37;;7863:6;7848:11;:21;;7840:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;7978:6;7964:11;:20;7946:9;:15;7956:4;7946:15;;;;;;;;;;;;;;;:38;;;;8178:6;8161:9;:13;8171:2;8161:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8225:2;8210:26;;8219:4;8210:26;;;8229:6;8210:26;;;;;;:::i;:::-;;;;;;;;8247:37;8267:4;8273:2;8277:6;8247:19;:37::i;:::-;7581:710;7473:818;;;:::o;12180:121::-;;;;:::o;12889:120::-;;;;:::o;7:99:20:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1430:117::-;1539:1;1536;1529:12;1676:126;1713:7;1753:42;1746:5;1742:54;1731:65;;1676:126;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:122::-;1983:24;2001:5;1983:24;:::i;:::-;1976:5;1973:35;1963:63;;2022:1;2019;2012:12;1963:63;1910:122;:::o;2038:139::-;2084:5;2122:6;2109:20;2100:29;;2138:33;2165:5;2138:33;:::i;:::-;2038:139;;;;:::o;2183:77::-;2220:7;2249:5;2238:16;;2183:77;;;:::o;2266:122::-;2339:24;2357:5;2339:24;:::i;:::-;2332:5;2329:35;2319:63;;2378:1;2375;2368:12;2319:63;2266:122;:::o;2394:139::-;2440:5;2478:6;2465:20;2456:29;;2494:33;2521:5;2494:33;:::i;:::-;2394:139;;;;:::o;2539:474::-;2607:6;2615;2664:2;2652:9;2643:7;2639:23;2635:32;2632:119;;;2670:79;;:::i;:::-;2632:119;2790:1;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2761:117;2917:2;2943:53;2988:7;2979:6;2968:9;2964:22;2943:53;:::i;:::-;2933:63;;2888:118;2539:474;;;;;:::o;3019:90::-;3053:7;3096:5;3089:13;3082:21;3071:32;;3019:90;;;:::o;3115:109::-;3196:21;3211:5;3196:21;:::i;:::-;3191:3;3184:34;3115:109;;:::o;3230:210::-;3317:4;3355:2;3344:9;3340:18;3332:26;;3368:65;3430:1;3419:9;3415:17;3406:6;3368:65;:::i;:::-;3230:210;;;;:::o;3446:118::-;3533:24;3551:5;3533:24;:::i;:::-;3528:3;3521:37;3446:118;;:::o;3570:222::-;3663:4;3701:2;3690:9;3686:18;3678:26;;3714:71;3782:1;3771:9;3767:17;3758:6;3714:71;:::i;:::-;3570:222;;;;:::o;3798:619::-;3875:6;3883;3891;3940:2;3928:9;3919:7;3915:23;3911:32;3908:119;;;3946:79;;:::i;:::-;3908:119;4066:1;4091:53;4136:7;4127:6;4116:9;4112:22;4091:53;:::i;:::-;4081:63;;4037:117;4193:2;4219:53;4264:7;4255:6;4244:9;4240:22;4219:53;:::i;:::-;4209:63;;4164:118;4321:2;4347:53;4392:7;4383:6;4372:9;4368:22;4347:53;:::i;:::-;4337:63;;4292:118;3798:619;;;;;:::o;4423:86::-;4458:7;4498:4;4491:5;4487:16;4476:27;;4423:86;;;:::o;4515:112::-;4598:22;4614:5;4598:22;:::i;:::-;4593:3;4586:35;4515:112;;:::o;4633:214::-;4722:4;4760:2;4749:9;4745:18;4737:26;;4773:67;4837:1;4826:9;4822:17;4813:6;4773:67;:::i;:::-;4633:214;;;;:::o;4853:329::-;4912:6;4961:2;4949:9;4940:7;4936:23;4932:32;4929:119;;;4967:79;;:::i;:::-;4929:119;5087:1;5112:53;5157:7;5148:6;5137:9;5133:22;5112:53;:::i;:::-;5102:63;;5058:117;4853:329;;;;:::o;5188:474::-;5256:6;5264;5313:2;5301:9;5292:7;5288:23;5284:32;5281:119;;;5319:79;;:::i;:::-;5281:119;5439:1;5464:53;5509:7;5500:6;5489:9;5485:22;5464:53;:::i;:::-;5454:63;;5410:117;5566:2;5592:53;5637:7;5628:6;5617:9;5613:22;5592:53;:::i;:::-;5582:63;;5537:118;5188:474;;;;;:::o;5668:180::-;5716:77;5713:1;5706:88;5813:4;5810:1;5803:15;5837:4;5834:1;5827:15;5854:320;5898:6;5935:1;5929:4;5925:12;5915:22;;5982:1;5976:4;5972:12;6003:18;5993:81;;6059:4;6051:6;6047:17;6037:27;;5993:81;6121:2;6113:6;6110:14;6090:18;6087:38;6084:84;;6140:18;;:::i;:::-;6084:84;5905:269;5854:320;;;:::o;6180:180::-;6228:77;6225:1;6218:88;6325:4;6322:1;6315:15;6349:4;6346:1;6339:15;6366:191;6406:3;6425:20;6443:1;6425:20;:::i;:::-;6420:25;;6459:20;6477:1;6459:20;:::i;:::-;6454:25;;6502:1;6499;6495:9;6488:16;;6523:3;6520:1;6517:10;6514:36;;;6530:18;;:::i;:::-;6514:36;6366:191;;;;:::o;6563:224::-;6703:34;6699:1;6691:6;6687:14;6680:58;6772:7;6767:2;6759:6;6755:15;6748:32;6563:224;:::o;6793:366::-;6935:3;6956:67;7020:2;7015:3;6956:67;:::i;:::-;6949:74;;7032:93;7121:3;7032:93;:::i;:::-;7150:2;7145:3;7141:12;7134:19;;6793:366;;;:::o;7165:419::-;7331:4;7369:2;7358:9;7354:18;7346:26;;7418:9;7412:4;7408:20;7404:1;7393:9;7389:17;7382:47;7446:131;7572:4;7446:131;:::i;:::-;7438:139;;7165:419;;;:::o;7590:223::-;7730:34;7726:1;7718:6;7714:14;7707:58;7799:6;7794:2;7786:6;7782:15;7775:31;7590:223;:::o;7819:366::-;7961:3;7982:67;8046:2;8041:3;7982:67;:::i;:::-;7975:74;;8058:93;8147:3;8058:93;:::i;:::-;8176:2;8171:3;8167:12;8160:19;;7819:366;;;:::o;8191:419::-;8357:4;8395:2;8384:9;8380:18;8372:26;;8444:9;8438:4;8434:20;8430:1;8419:9;8415:17;8408:47;8472:131;8598:4;8472:131;:::i;:::-;8464:139;;8191:419;;;:::o;8616:221::-;8756:34;8752:1;8744:6;8740:14;8733:58;8825:4;8820:2;8812:6;8808:15;8801:29;8616:221;:::o;8843:366::-;8985:3;9006:67;9070:2;9065:3;9006:67;:::i;:::-;8999:74;;9082:93;9171:3;9082:93;:::i;:::-;9200:2;9195:3;9191:12;9184:19;;8843:366;;;:::o;9215:419::-;9381:4;9419:2;9408:9;9404:18;9396:26;;9468:9;9462:4;9458:20;9454:1;9443:9;9439:17;9432:47;9496:131;9622:4;9496:131;:::i;:::-;9488:139;;9215:419;;;:::o;9640:179::-;9780:31;9776:1;9768:6;9764:14;9757:55;9640:179;:::o;9825:366::-;9967:3;9988:67;10052:2;10047:3;9988:67;:::i;:::-;9981:74;;10064:93;10153:3;10064:93;:::i;:::-;10182:2;10177:3;10173:12;10166:19;;9825:366;;;:::o;10197:419::-;10363:4;10401:2;10390:9;10386:18;10378:26;;10450:9;10444:4;10440:20;10436:1;10425:9;10421:17;10414:47;10478:131;10604:4;10478:131;:::i;:::-;10470:139;;10197:419;;;:::o;10622:224::-;10762:34;10758:1;10750:6;10746:14;10739:58;10831:7;10826:2;10818:6;10814:15;10807:32;10622:224;:::o;10852:366::-;10994:3;11015:67;11079:2;11074:3;11015:67;:::i;:::-;11008:74;;11091:93;11180:3;11091:93;:::i;:::-;11209:2;11204:3;11200:12;11193:19;;10852:366;;;:::o;11224:419::-;11390:4;11428:2;11417:9;11413:18;11405:26;;11477:9;11471:4;11467:20;11463:1;11452:9;11448:17;11441:47;11505:131;11631:4;11505:131;:::i;:::-;11497:139;;11224:419;;;:::o;11649:222::-;11789:34;11785:1;11777:6;11773:14;11766:58;11858:5;11853:2;11845:6;11841:15;11834:30;11649:222;:::o;11877:366::-;12019:3;12040:67;12104:2;12099:3;12040:67;:::i;:::-;12033:74;;12116:93;12205:3;12116:93;:::i;:::-;12234:2;12229:3;12225:12;12218:19;;11877:366;;;:::o;12249:419::-;12415:4;12453:2;12442:9;12438:18;12430:26;;12502:9;12496:4;12492:20;12488:1;12477:9;12473:17;12466:47;12530:131;12656:4;12530:131;:::i;:::-;12522:139;;12249:419;;;:::o;12674:225::-;12814:34;12810:1;12802:6;12798:14;12791:58;12883:8;12878:2;12870:6;12866:15;12859:33;12674:225;:::o;12905:366::-;13047:3;13068:67;13132:2;13127:3;13068:67;:::i;:::-;13061:74;;13144:93;13233:3;13144:93;:::i;:::-;13262:2;13257:3;13253:12;13246:19;;12905:366;;;:::o;13277:419::-;13443:4;13481:2;13470:9;13466:18;13458:26;;13530:9;13524:4;13520:20;13516:1;13505:9;13501:17;13494:47;13558:131;13684:4;13558:131;:::i;:::-;13550:139;;13277:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"931000","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2863","decimals()":"432","decreaseAllowance(address,uint256)":"infinite","increaseAllowance(address,uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2482","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256)":"15","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"15","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2744,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":2750,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":2752,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":2754,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":2756,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Paycrest.sol":{"Paycrest":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"institutionCode","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"protocolFee","type":"uint64"}],"name":"PaycrestFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"}],"name":"Refunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"validator","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardValidator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"SetAggregator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeRecipient","type":"address"}],"name":"SetFeeRecipient","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"SettingManagerBool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"Settled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferSenderFee","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_institutionCode","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAggregator","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAggregatorAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint64","name":"","type":"uint64"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPaycrest.Order","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"code","type":"bytes32"}],"name":"getSupportedInstitutionName","outputs":[{"components":[{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"bytes32","name":"currency","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.InstitutionByCode","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"}],"name":"getSupportedInstitutions","outputs":[{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"getWhitelistedStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_usdc","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"}],"name":"refund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"institutions","type":"tuple[]"}],"name":"setSupportedInstitutions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"address","name":"_liquidityProvider","type":"address"},{"internalType":"uint64","name":"_settlePercent","type":"uint64"},{"internalType":"bool","name":"_isPartner","type":"bool"}],"name":"settle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateProtocolAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"updateProtocolAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_protocolFeePercent","type":"uint64"}],"name":"updateProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Deposit(address,uint256,bytes32,uint256,bytes32,bytes32,string)":{"details":"Emitted when deposit is made."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Refunded(bytes32,bytes32)":{"details":"Emitted when aggregator refund transaction."},"RewardValidator(address,uint256)":{"details":"Emitted when primary validator get therir rewards."},"Settled(bytes32,bytes32,bytes32,address,uint96)":{"details":"Emitted when aggregator settle transaction."},"TransferSenderFee(address,uint256)":{"details":"Emitted when sender get therir rewards."}},"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":{"details":"See {createOrder-IPaycrest}. "},"getAggregator()":{"details":"See {getAggregator-IPaycrest}. "},"getAggregatorAddress()":{"details":"See {getAggregatorAddress-IPaycrest}. "},"getFeeDetails()":{"details":"See {getFeeDetails-IPaycrest}. "},"getOrderInfo(bytes32)":{"details":"See {getOrderInfo-IPaycrest}. "},"getSupportedInstitutionName(bytes32)":{"details":"See {getSupportedInstitutionName-IPaycrest}. "},"getWhitelistedStatus(address)":{"details":"See {getWhitelistedStatus-IPaycrest}. "},"isTokenSupported(address)":{"details":"See {isTokenSupported-IPaycrest}. "},"owner()":{"details":"Returns the address of the current owner."},"refund(bytes32,bytes32)":{"details":"See {refund-IPaycrest}. "},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"settle(bytes32,bytes32,bytes32,address,uint64,bool)":{"details":"See {settle-IPaycrest}. "},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3486":{"entryPoint":null,"id":3486,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_281":{"entryPoint":40,"id":281,"parameterSlots":0,"returnSlots":0},"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack":{"entryPoint":334,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":420,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":373,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":437,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":238,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":407,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a":{"entryPoint":255,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1638:20","statements":[{"body":{"nodeType":"YulBlock","src":"103:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"120:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"125:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"113:6:20"},"nodeType":"YulFunctionCall","src":"113:19:20"},"nodeType":"YulExpressionStatement","src":"113:19:20"},{"nodeType":"YulAssignment","src":"141:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"160:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"165:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"156:3:20"},"nodeType":"YulFunctionCall","src":"156:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"141:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"75:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"91:11:20","type":""}],"src":"7:169:20"},{"body":{"nodeType":"YulBlock","src":"288:120:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"310:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"318:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"306:3:20"},"nodeType":"YulFunctionCall","src":"306:14:20"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"322:34:20","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"299:6:20"},"nodeType":"YulFunctionCall","src":"299:58:20"},"nodeType":"YulExpressionStatement","src":"299:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"378:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"386:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"374:3:20"},"nodeType":"YulFunctionCall","src":"374:15:20"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"391:9:20","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"367:6:20"},"nodeType":"YulFunctionCall","src":"367:34:20"},"nodeType":"YulExpressionStatement","src":"367:34:20"}]},"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"280:6:20","type":""}],"src":"182:226:20"},{"body":{"nodeType":"YulBlock","src":"560:220:20","statements":[{"nodeType":"YulAssignment","src":"570:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"636:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"641:2:20","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"577:58:20"},"nodeType":"YulFunctionCall","src":"577:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"570:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"742:3:20"}],"functionName":{"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulIdentifier","src":"653:88:20"},"nodeType":"YulFunctionCall","src":"653:93:20"},"nodeType":"YulExpressionStatement","src":"653:93:20"},{"nodeType":"YulAssignment","src":"755:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"766:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"771:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:20"},"nodeType":"YulFunctionCall","src":"762:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"755:3:20"}]}]},"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"548:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"556:3:20","type":""}],"src":"414:366:20"},{"body":{"nodeType":"YulBlock","src":"957:248:20","statements":[{"nodeType":"YulAssignment","src":"967:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"979:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"990:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"975:3:20"},"nodeType":"YulFunctionCall","src":"975:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"967:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1014:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1025:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1010:3:20"},"nodeType":"YulFunctionCall","src":"1010:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1033:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"1039:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1029:3:20"},"nodeType":"YulFunctionCall","src":"1029:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1003:6:20"},"nodeType":"YulFunctionCall","src":"1003:47:20"},"nodeType":"YulExpressionStatement","src":"1003:47:20"},{"nodeType":"YulAssignment","src":"1059:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1193:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1067:124:20"},"nodeType":"YulFunctionCall","src":"1067:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1059:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"937:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"952:4:20","type":""}],"src":"786:419:20"},{"body":{"nodeType":"YulBlock","src":"1254:43:20","statements":[{"nodeType":"YulAssignment","src":"1264:27:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1279:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"1286:4:20","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1275:3:20"},"nodeType":"YulFunctionCall","src":"1275:16:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1264:7:20"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1236:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1246:7:20","type":""}],"src":"1211:86:20"},{"body":{"nodeType":"YulBlock","src":"1364:51:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1381:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1402:5:20"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"1386:15:20"},"nodeType":"YulFunctionCall","src":"1386:22:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1374:6:20"},"nodeType":"YulFunctionCall","src":"1374:35:20"},"nodeType":"YulExpressionStatement","src":"1374:35:20"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1352:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1359:3:20","type":""}],"src":"1303:112:20"},{"body":{"nodeType":"YulBlock","src":"1515:120:20","statements":[{"nodeType":"YulAssignment","src":"1525:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1537:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1548:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:20"},"nodeType":"YulFunctionCall","src":"1533:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1525:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1601:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1614:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1625:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1610:3:20"},"nodeType":"YulFunctionCall","src":"1610:17:20"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"1561:39:20"},"nodeType":"YulFunctionCall","src":"1561:67:20"},"nodeType":"YulExpressionStatement","src":"1561:67:20"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1487:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1499:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1510:4:20","type":""}],"src":"1421:214:20"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is initi\")\n\n        mstore(add(memPtr, 32), \"alizing\")\n\n    }\n\n    function abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b613d9e80620001e26000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806387490d86116100b8578063cb79455b1161007c578063cb79455b1461034e578063d8e8de341461036a578063d9caed121461039a578063e4683a79146103b6578063e8d6e0de146103e6578063f2fde38b1461040457610137565b806387490d86146102a95780638da5cb5b146102d957806399e3c0b4146102f7578063b810c63614610313578063c4d66de81461033257610137565b8063715018a6116100ff578063715018a61461020757806375151b6314610211578063768c6ec01461024157806379a0effb14610271578063846307361461028d57610137565b8063026213381461013c5780632654ec7e1461016c578063322008821461019c5780633ad59dbc146101b85780635fe44cac146101d6575b600080fd5b610156600480360381019061015191906124bf565b610420565b60405161016391906125d9565b60405180910390f35b61018660048036038101906101819190612738565b61055e565b6040516101939190612832565b60405180910390f35b6101b660048036038101906101b191906129f1565b610a26565b005b6101c0610b3a565b6040516101cd9190612acc565b60405180910390f35b6101f060048036038101906101eb9190612b66565b610bcc565b6040516101fe929190612c02565b60405180910390f35b61020f610fc5565b005b61022b60048036038101906102269190612c2b565b610fd9565b6040516102389190612c67565b60405180910390f35b61025b600480360381019061025691906124bf565b61102f565b6040516102689190612d75565b60405180910390f35b61028b60048036038101906102869190612d91565b611260565b005b6102a760048036038101906102a29190612dd1565b6113ad565b005b6102c360048036038101906102be91906124bf565b611418565b6040516102d09190612e2d565b60405180910390f35b6102e1611459565b6040516102ee9190612e48565b60405180910390f35b610311600480360381019061030c9190612e63565b611483565b005b61031b611638565b604051610329929190612ed4565b60405180910390f35b61034c60048036038101906103479190612c2b565b61165d565b005b61036860048036038101906103639190612f53565b611829565b005b610384600480360381019061037f9190612c2b565b611880565b6040516103919190612c67565b60405180910390f35b6103b460048036038101906103af9190612fa0565b6118d6565b005b6103d060048036038101906103cb9190612ff3565b611962565b6040516103dd9190612c67565b60405180910390f35b6103ee611c0f565b6040516103fb9190612e48565b60405180910390f35b61041e60048036038101906104199190612c2b565b611c39565b005b60606000609d6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561049d57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610457565b50505050905060008151905060008167ffffffffffffffff8111156104c5576104c461285e565b5b6040519080825280602002602001820160405280156104fe57816020015b6104eb612359565b8152602001906001900390816104e35790505b50905060005b828110156105525783818151811061051f5761051e613033565b5b602002602001015182828151811061053a57610539613033565b5b60200260200101819052508080600101915050610504565b50809350505050919050565b600061056d8b8b86898d611cbc565b606554606660009054906101000a900467ffffffffffffffff1667ffffffffffffffff168b61059c9190613091565b6105a69190613102565b8511156105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105df90613190565b60405180910390fd5b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd33308d6040518463ffffffff1660e01b8152600401610625939291906131b0565b6020604051808303816000875af1158015610644573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066891906131fc565b5060a060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906106b990613229565b91905055503360a060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051602001610710929190613271565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001886bffffffffffffffffffffffff1681526020016000151581526020018573ffffffffffffffffffffffffffffffffffffffff16815260200160655467ffffffffffffffff166bffffffffffffffffffffffff1681526020018b815250609f600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506101008201518160060155905050808a8c73ffffffffffffffffffffffffffffffffffffffff167f2c205f90c01160d42994a0eb521810056d94bb82a1fcb038d7179c4158a1f15b8a8d8d8989604051610a10959493929190613311565b60405180910390a49a9950505050505050505050565b610a2e611ecb565b60008151905060005b81811015610b3457609d6000858152602001908152602001600020838281518110610a6557610a64613033565b5b60200260200101519080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506040518060400160405280848381518110610aca57610ac9613033565b5b602002602001015160200151815260200185815250609e6000858481518110610af657610af5613033565b5b602002602001015160000151815260200190815260200160002060008201518160000155602082015181600101559050508080600101915050610a37565b50505050565b606060688054610b499061338e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b759061338e565b8015610bc25780601f10610b9757610100808354040283529160200191610bc2565b820191906000526020600020905b815481529060010190602001808311610ba557829003601f168201915b5050505050905090565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c569061340b565b60405180910390fd5b609f6000888152602001908152602001600020600401600c9054906101000a900460ff1615610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba90613477565b60405180910390fd5b6000609f600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508467ffffffffffffffff16609f60008a815260200190815260200160002060050160148282829054906101000a90046bffffffffffffffffffffffff16610d459190613497565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506000610d8a898767ffffffffffffffff1687611f49565b90506000609f60008b815260200190815260200160002060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1603610e29576001609f60008b8152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055506000609f60008b8152602001908152602001600020600301541115610e2857610e278961205a565b5b5b600081600001511115610edc578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600001516040518363ffffffff1660e01b8152600401610e97929190613271565b6020604051808303816000875af1158015610eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eda91906131fc565b505b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8883602001516040518363ffffffff1660e01b8152600401610f1b929190613271565b6020604051808303816000875af1158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e91906131fc565b508673ffffffffffffffffffffffffffffffffffffffff16897ff26de978cbaea68ea699627155a10ad53df3321b0f95a08264c0cfd6d4c053268c8b8a604051610faa93929190613508565b60405180910390a38882935093505050965096945050505050565b610fcd611ecb565b610fd760006121ae565b565b6000609b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b611037612379565b609f6000838152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff161515151581526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b611268611ecb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ce9061358b565b60405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036113405780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f720000000000000000000000000000000000000000000082036113a95780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6113b5611ecb565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc8ca786c100bc62a0dffbe768b5f0b770d84e8604c5de54b54197b9066bb42a98160405161140d91906135ab565b60405180910390a150565b61142061243b565b609e6000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61148b611ecb565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f19061358b565b60405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036115795780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c697374000000000000000000000000000000000000000000000083036115f85780609c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161162b939291906135c6565b60405180910390a1505050565b600080606660009054906101000a900467ffffffffffffffff16606554915091509091565b60008060019054906101000a900460ff1615905080801561168e5750600160008054906101000a900460ff1660ff16105b806116bb575061169d30612274565b1580156116ba5750600160008054906101000a900460ff1660ff16145b5b6116fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f19061366f565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611737576001600060016101000a81548160ff0219169083151502179055505b6001609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620186a0606581905550611388606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506117cc612297565b80156118255760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161181c91906136d7565b60405180910390a15b5050565b611831611ecb565b81816068918261184292919061389f565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef828260405161187492919061399c565b60405180910390a15050565b6000609c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6118de611ecb565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611919929190613271565b6020604051808303816000875af1158015611938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195c91906131fc565b50505050565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119eb9061340b565b60405180910390fd5b609f6000848152602001908152602001600020600401600c9054906101000a900460ff1615611a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4f90613477565b60405180910390fd5b6001609f6000858152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055506000609f600085815260200190815260200160002060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550609f600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb609f600086815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16609f6000878152602001908152602001600020600601546040518363ffffffff1660e01b8152600401611b8a929190613271565b6020604051808303816000875af1158015611ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcd91906131fc565b50827e7c875846b687732a7579c19bb1dade66cd14e9f4f809565e2b2b5e76c72b4f83604051611bfd9190612832565b60405180910390a26001905092915050565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611c41611ecb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611cb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca790613a32565b60405180910390fd5b611cb9816121ae565b50565b609b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3f90613a9e565b60405180910390fd5b60008411611d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8290613b0a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611dfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df190613b76565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6090613b76565b60405180910390fd5b6000801b609e60008381526020019081526020016000206000015403611ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebb90613be2565b60405180910390fd5b5050505050565b611ed36122f0565b73ffffffffffffffffffffffffffffffffffffffff16611ef1611459565b73ffffffffffffffffffffffffffffffffffffffff1614611f47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3e90613c4e565b60405180910390fd5b565b611f5161245b565b6000609f6000868152602001908152602001600020600601549050609f60008681526020019081526020016000206003015481611f8e9190613c6e565b9050606554846bffffffffffffffffffffffff1682611fad9190613091565b611fb79190613102565b826020018181525050606554606660009054906101000a900467ffffffffffffffff1667ffffffffffffffff168360200151611ff39190613091565b611ffd9190613102565b8260000181815250508160000151826020015161201a9190613c6e565b82602001818152505082156120525781600001518260200181815161203f9190613ca2565b9150818152505060008260000181815250505b509392505050565b6000609f600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000609f6000848152602001908152602001600020600301549050609f600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401612121929190613271565b6020604051808303816000875af1158015612140573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216491906131fc565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166122e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122dd90613d48565b60405180910390fd5b6122ee6122f8565b565b600033905090565b600060019054906101000a900460ff16612347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233e90613d48565b60405180910390fd5b6123576123526122f0565b6121ae565b565b604051806040016040528060008019168152602001600080191681525090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006bffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008019168152602001600080191681525090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61249c81612489565b81146124a757600080fd5b50565b6000813590506124b981612493565b92915050565b6000602082840312156124d5576124d461247f565b5b60006124e3848285016124aa565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61252181612489565b82525050565b60408201600082015161253d6000850182612518565b5060208201516125506020850182612518565b50505050565b60006125628383612527565b60408301905092915050565b6000602082019050919050565b6000612586826124ec565b61259081856124f7565b935061259b83612508565b8060005b838110156125cc5781516125b38882612556565b97506125be8361256e565b92505060018101905061259f565b5085935050505092915050565b600060208201905081810360008301526125f3818461257b565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612626826125fb565b9050919050565b6126368161261b565b811461264157600080fd5b50565b6000813590506126538161262d565b92915050565b6000819050919050565b61266c81612659565b811461267757600080fd5b50565b60008135905061268981612663565b92915050565b60006bffffffffffffffffffffffff82169050919050565b6126b08161268f565b81146126bb57600080fd5b50565b6000813590506126cd816126a7565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126126f8576126f76126d3565b5b8235905067ffffffffffffffff811115612715576127146126d8565b5b602083019150836001820283011115612731576127306126dd565b5b9250929050565b6000806000806000806000806000806101208b8d03121561275c5761275b61247f565b5b600061276a8d828e01612644565b9a5050602061277b8d828e0161267a565b995050604061278c8d828e016124aa565b985050606061279d8d828e016124aa565b97505060806127ae8d828e016126be565b96505060a06127bf8d828e01612644565b95505060c06127d08d828e0161267a565b94505060e06127e18d828e01612644565b9350506101008b013567ffffffffffffffff81111561280357612802612484565b5b61280f8d828e016126e2565b92509250509295989b9194979a5092959850565b61282c81612489565b82525050565b60006020820190506128476000830184612823565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128968261284d565b810181811067ffffffffffffffff821117156128b5576128b461285e565b5b80604052505050565b60006128c8612475565b90506128d4828261288d565b919050565b600067ffffffffffffffff8211156128f4576128f361285e565b5b602082029050602081019050919050565b600080fd5b6000604082840312156129205761291f612905565b5b61292a60406128be565b9050600061293a848285016124aa565b600083015250602061294e848285016124aa565b60208301525092915050565b600061296d612968846128d9565b6128be565b905080838252602082019050604084028301858111156129905761298f6126dd565b5b835b818110156129b957806129a5888261290a565b845260208401935050604081019050612992565b5050509392505050565b600082601f8301126129d8576129d76126d3565b5b81356129e884826020860161295a565b91505092915050565b60008060408385031215612a0857612a0761247f565b5b6000612a16858286016124aa565b925050602083013567ffffffffffffffff811115612a3757612a36612484565b5b612a43858286016129c3565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612a87578082015181840152602081019050612a6c565b60008484015250505050565b6000612a9e82612a4d565b612aa88185612a58565b9350612ab8818560208601612a69565b612ac18161284d565b840191505092915050565b60006020820190508181036000830152612ae68184612a93565b905092915050565b600067ffffffffffffffff82169050919050565b612b0b81612aee565b8114612b1657600080fd5b50565b600081359050612b2881612b02565b92915050565b60008115159050919050565b612b4381612b2e565b8114612b4e57600080fd5b50565b600081359050612b6081612b3a565b92915050565b60008060008060008060c08789031215612b8357612b8261247f565b5b6000612b9189828a016124aa565b9650506020612ba289828a016124aa565b9550506040612bb389828a016124aa565b9450506060612bc489828a01612644565b9350506080612bd589828a01612b19565b92505060a0612be689828a01612b51565b9150509295509295509295565b612bfc8161261b565b82525050565b6000604082019050612c176000830185612823565b612c246020830184612bf3565b9392505050565b600060208284031215612c4157612c4061247f565b5b6000612c4f84828501612644565b91505092915050565b612c6181612b2e565b82525050565b6000602082019050612c7c6000830184612c58565b92915050565b612c8b8161261b565b82525050565b612c9a81612659565b82525050565b612ca98161268f565b82525050565b612cb881612b2e565b82525050565b61012082016000820151612cd56000850182612c82565b506020820151612ce86020850182612c82565b506040820151612cfb6040850182612c82565b506060820151612d0e6060850182612c91565b506080820151612d216080850182612ca0565b5060a0820151612d3460a0850182612caf565b5060c0820151612d4760c0850182612c82565b5060e0820151612d5a60e0850182612ca0565b50610100820151612d6f610100850182612c91565b50505050565b600061012082019050612d8b6000830184612cbe565b92915050565b60008060408385031215612da857612da761247f565b5b6000612db6858286016124aa565b9250506020612dc785828601612644565b9150509250929050565b600060208284031215612de757612de661247f565b5b6000612df584828501612b19565b91505092915050565b604082016000820151612e146000850182612518565b506020820151612e276020850182612518565b50505050565b6000604082019050612e426000830184612dfe565b92915050565b6000602082019050612e5d6000830184612bf3565b92915050565b600080600060608486031215612e7c57612e7b61247f565b5b6000612e8a868287016124aa565b9350506020612e9b86828701612644565b9250506040612eac86828701612b51565b9150509250925092565b612ebf81612aee565b82525050565b612ece81612659565b82525050565b6000604082019050612ee96000830185612eb6565b612ef66020830184612ec5565b9392505050565b60008083601f840112612f1357612f126126d3565b5b8235905067ffffffffffffffff811115612f3057612f2f6126d8565b5b602083019150836001820283011115612f4c57612f4b6126dd565b5b9250929050565b60008060208385031215612f6a57612f6961247f565b5b600083013567ffffffffffffffff811115612f8857612f87612484565b5b612f9485828601612efd565b92509250509250929050565b600080600060608486031215612fb957612fb861247f565b5b6000612fc786828701612644565b9350506020612fd886828701612644565b9250506040612fe98682870161267a565b9150509250925092565b6000806040838503121561300a5761300961247f565b5b6000613018858286016124aa565b9250506020613029858286016124aa565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061309c82612659565b91506130a783612659565b92508282026130b581612659565b915082820484148315176130cc576130cb613062565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061310d82612659565b915061311883612659565b925082613128576131276130d3565b5b828204905092915050565b600082825260208201905092915050565b7f53656e646572466565546f6f4869676800000000000000000000000000000000600082015250565b600061317a601083613133565b915061318582613144565b602082019050919050565b600060208201905081810360008301526131a98161316d565b9050919050565b60006060820190506131c56000830186612bf3565b6131d26020830185612bf3565b6131df6040830184612ec5565b949350505050565b6000815190506131f681612b3a565b92915050565b6000602082840312156132125761321161247f565b5b6000613220848285016131e7565b91505092915050565b600061323482612659565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361326657613265613062565b5b600182019050919050565b60006040820190506132866000830185612bf3565b6132936020830184612ec5565b9392505050565b6000819050919050565b60006132bf6132ba6132b58461268f565b61329a565b612659565b9050919050565b6132cf816132a4565b82525050565b82818337600083830152505050565b60006132f08385613133565b93506132fd8385846132d5565b6133068361284d565b840190509392505050565b600060808201905061332660008301886132c6565b6133336020830187612823565b6133406040830186612823565b81810360608301526133538184866132e4565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806133a657607f821691505b6020821081036133b9576133b861335f565b5b50919050565b7f4f6e6c7941676772656761746f72000000000000000000000000000000000000600082015250565b60006133f5600e83613133565b9150613400826133bf565b602082019050919050565b60006020820190508181036000830152613424816133e8565b9050919050565b7f4f7264657246756c66696c6c6564000000000000000000000000000000000000600082015250565b6000613461600e83613133565b915061346c8261342b565b602082019050919050565b6000602082019050818103600083015261349081613454565b9050919050565b60006134a28261268f565b91506134ad8361268f565b925082820390506bffffffffffffffffffffffff8111156134d1576134d0613062565b5b92915050565b60006134f26134ed6134e884612aee565b61329a565b61268f565b9050919050565b613502816134d7565b82525050565b600060608201905061351d6000830186612823565b61352a6020830185612823565b61353760408301846134f9565b949350505050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b6000613575601683613133565b91506135808261353f565b602082019050919050565b600060208201905081810360008301526135a481613568565b9050919050565b60006020820190506135c06000830184612eb6565b92915050565b60006060820190506135db6000830186612823565b6135e86020830185612bf3565b6135f56040830184612c58565b949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613659602e83613133565b9150613664826135fd565b604082019050919050565b600060208201905081810360008301526136888161364c565b9050919050565b6000819050919050565b600060ff82169050919050565b60006136c16136bc6136b78461368f565b61329a565b613699565b9050919050565b6136d1816136a6565b82525050565b60006020820190506136ec60008301846136c8565b92915050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261375f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613722565b6137698683613722565b95508019841693508086168417925050509392505050565b600061379c61379761379284612659565b61329a565b612659565b9050919050565b6000819050919050565b6137b683613781565b6137ca6137c2826137a3565b84845461372f565b825550505050565b600090565b6137df6137d2565b6137ea8184846137ad565b505050565b5b8181101561380e576138036000826137d7565b6001810190506137f0565b5050565b601f82111561385357613824816136fd565b61382d84613712565b8101602085101561383c578190505b61385061384885613712565b8301826137ef565b50505b505050565b600082821c905092915050565b600061387660001984600802613858565b1980831691505092915050565b600061388f8383613865565b9150826002028217905092915050565b6138a983836136f2565b67ffffffffffffffff8111156138c2576138c161285e565b5b6138cc825461338e565b6138d7828285613812565b6000601f83116001811461390657600084156138f4578287013590505b6138fe8582613883565b865550613966565b601f198416613914866136fd565b60005b8281101561393c57848901358255600182019150602085019450602081019050613917565b868310156139595784890135613955601f891682613865565b8355505b6001600288020188555050505b50505050505050565b600061397b8385612a58565b93506139888385846132d5565b6139918361284d565b840190509392505050565b600060208201905081810360008301526139b781848661396f565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613a1c602683613133565b9150613a27826139c0565b604082019050919050565b60006020820190508181036000830152613a4b81613a0f565b9050919050565b7f546f6b656e4e6f74537570706f72746564000000000000000000000000000000600082015250565b6000613a88601183613133565b9150613a9382613a52565b602082019050919050565b60006020820190508181036000830152613ab781613a7b565b9050919050565b7f416d6f756e7449735a65726f0000000000000000000000000000000000000000600082015250565b6000613af4600c83613133565b9150613aff82613abe565b602082019050919050565b60006020820190508181036000830152613b2381613ae7565b9050919050565b7f5468726f775a65726f4164647265737300000000000000000000000000000000600082015250565b6000613b60601083613133565b9150613b6b82613b2a565b602082019050919050565b60006020820190508181036000830152613b8f81613b53565b9050919050565b7f496e76616c6964496e737469747574696f6e436f646500000000000000000000600082015250565b6000613bcc601683613133565b9150613bd782613b96565b602082019050919050565b60006020820190508181036000830152613bfb81613bbf565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613c38602083613133565b9150613c4382613c02565b602082019050919050565b60006020820190508181036000830152613c6781613c2b565b9050919050565b6000613c7982612659565b9150613c8483612659565b9250828203905081811115613c9c57613c9b613062565b5b92915050565b6000613cad82612659565b9150613cb883612659565b9250828201905080821115613cd057613ccf613062565b5b92915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613d32602b83613133565b9150613d3d82613cd6565b604082019050919050565b60006020820190508181036000830152613d6181613d25565b905091905056fea2646970667358221220f803c3247b0b726c64865b7a580dd6d825218d8aa6f111de58c8caa232a024ab64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x22 PUSH3 0x28 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x72 SWAP1 PUSH3 0x175 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP1 AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH3 0xEC JUMPI PUSH1 0xFF PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH3 0xE3 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C697A696E6700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15D PUSH1 0x27 DUP4 PUSH3 0xEE JUMP JUMPDEST SWAP2 POP PUSH3 0x16A DUP3 PUSH3 0xFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x190 DUP2 PUSH3 0x14E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1AF DUP2 PUSH3 0x197 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x1CC PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3D9E DUP1 PUSH3 0x1E2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x87490D86 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xCB79455B GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0xD8E8DE34 EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0xD9CAED12 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0xE4683A79 EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0xE8D6E0DE EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x404 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x87490D86 EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x332 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0x768C6EC0 EQ PUSH2 0x241 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0x28D JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x2621338 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x2654EC7E EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x32200882 EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0x3AD59DBC EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x5FE44CAC EQ PUSH2 0x1D6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x24BF JUMP JUMPDEST PUSH2 0x420 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x25D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x186 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x181 SWAP2 SWAP1 PUSH2 0x2738 JUMP JUMPDEST PUSH2 0x55E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x193 SWAP2 SWAP1 PUSH2 0x2832 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B1 SWAP2 SWAP1 PUSH2 0x29F1 JUMP JUMPDEST PUSH2 0xA26 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH2 0xB3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x2ACC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x2B66 JUMP JUMPDEST PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP3 SWAP2 SWAP1 PUSH2 0x2C02 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20F PUSH2 0xFC5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x226 SWAP2 SWAP1 PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0xFD9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x238 SWAP2 SWAP1 PUSH2 0x2C67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x25B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x256 SWAP2 SWAP1 PUSH2 0x24BF JUMP JUMPDEST PUSH2 0x102F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x268 SWAP2 SWAP1 PUSH2 0x2D75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x286 SWAP2 SWAP1 PUSH2 0x2D91 JUMP JUMPDEST PUSH2 0x1260 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A2 SWAP2 SWAP1 PUSH2 0x2DD1 JUMP JUMPDEST PUSH2 0x13AD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BE SWAP2 SWAP1 PUSH2 0x24BF JUMP JUMPDEST PUSH2 0x1418 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D0 SWAP2 SWAP1 PUSH2 0x2E2D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E1 PUSH2 0x1459 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EE SWAP2 SWAP1 PUSH2 0x2E48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x311 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x2E63 JUMP JUMPDEST PUSH2 0x1483 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x31B PUSH2 0x1638 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x329 SWAP3 SWAP2 SWAP1 PUSH2 0x2ED4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x165D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x368 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x2F53 JUMP JUMPDEST PUSH2 0x1829 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x384 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x37F SWAP2 SWAP1 PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x1880 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x391 SWAP2 SWAP1 PUSH2 0x2C67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3AF SWAP2 SWAP1 PUSH2 0x2FA0 JUMP JUMPDEST PUSH2 0x18D6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0x2FF3 JUMP JUMPDEST PUSH2 0x1962 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DD SWAP2 SWAP1 PUSH2 0x2C67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EE PUSH2 0x1C0F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3FB SWAP2 SWAP1 PUSH2 0x2E48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x41E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x419 SWAP2 SWAP1 PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x1C39 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x49D JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x457 JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4C5 JUMPI PUSH2 0x4C4 PUSH2 0x285E JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4EB PUSH2 0x2359 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x4E3 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x552 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x51F JUMPI PUSH2 0x51E PUSH2 0x3033 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53A JUMPI PUSH2 0x539 PUSH2 0x3033 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x504 JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56D DUP12 DUP12 DUP7 DUP10 DUP14 PUSH2 0x1CBC JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP12 PUSH2 0x59C SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST PUSH2 0x5A6 SWAP2 SWAP1 PUSH2 0x3102 JUMP JUMPDEST DUP6 GT ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DF SWAP1 PUSH2 0x3190 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP14 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x625 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31B0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x644 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x668 SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST POP PUSH1 0xA0 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x6B9 SWAP1 PUSH2 0x3229 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH1 0xA0 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x710 SWAP3 SWAP2 SWAP1 PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x65 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE POP PUSH1 0x9F PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP DUP1 DUP11 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x2C205F90C01160D42994A0EB521810056D94BB82A1FCB038D7179C4158A1F15B DUP11 DUP14 DUP14 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xA10 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3311 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA2E PUSH2 0x1ECB JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB34 JUMPI PUSH1 0x9D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA65 JUMPI PUSH2 0xA64 PUSH2 0x3033 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xACA JUMPI PUSH2 0xAC9 PUSH2 0x3033 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9E PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAF6 JUMPI PUSH2 0xAF5 PUSH2 0x3033 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xA37 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x68 DUP1 SLOAD PUSH2 0xB49 SWAP1 PUSH2 0x338E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB75 SWAP1 PUSH2 0x338E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBC2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB97 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBC2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBA5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC5F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC56 SWAP1 PUSH2 0x340B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9F PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xCC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBA SWAP1 PUSH2 0x3477 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x9F PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD45 SWAP2 SWAP1 PUSH2 0x3497 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0xD8A DUP10 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP8 PUSH2 0x1F49 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE29 JUMPI PUSH1 0x1 PUSH1 0x9F PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD GT ISZERO PUSH2 0xE28 JUMPI PUSH2 0xE27 DUP10 PUSH2 0x205A JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0xEDC JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE97 SWAP3 SWAP2 SWAP1 PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEB6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEDA SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP9 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1B SWAP3 SWAP2 SWAP1 PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF3A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF5E SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH32 0xF26DE978CBAEA68EA699627155A10AD53DF3321B0F95A08264C0CFD6D4C05326 DUP13 DUP12 DUP11 PUSH1 0x40 MLOAD PUSH2 0xFAA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3508 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP9 DUP3 SWAP4 POP SWAP4 POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xFCD PUSH2 0x1ECB JUMP JUMPDEST PUSH2 0xFD7 PUSH1 0x0 PUSH2 0x21AE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9B PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1037 PUSH2 0x2379 JUMP JUMPDEST PUSH1 0x9F PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1268 PUSH2 0x1ECB JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x12D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12CE SWAP1 PUSH2 0x358B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x1340 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x13A9 JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x13B5 PUSH2 0x1ECB JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xC8CA786C100BC62A0DFFBE768B5F0B770D84E8604C5DE54B54197B9066BB42A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x140D SWAP2 SWAP1 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x1420 PUSH2 0x243B JUMP JUMPDEST PUSH1 0x9E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x148B PUSH2 0x1ECB JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F1 SWAP1 PUSH2 0x358B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x1579 JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x15F8 JUMPI DUP1 PUSH1 0x9C PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x162B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x35C6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x65 SLOAD SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x168E JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x16BB JUMPI POP PUSH2 0x169D ADDRESS PUSH2 0x2274 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x16BA JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x16FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F1 SWAP1 PUSH2 0x366F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1737 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH3 0x186A0 PUSH1 0x65 DUP2 SWAP1 SSTORE POP PUSH2 0x1388 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x17CC PUSH2 0x2297 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1825 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x181C SWAP2 SWAP1 PUSH2 0x36D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1831 PUSH2 0x1ECB JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x1842 SWAP3 SWAP2 SWAP1 PUSH2 0x389F JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1874 SWAP3 SWAP2 SWAP1 PUSH2 0x399C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9C PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18DE PUSH2 0x1ECB JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1919 SWAP3 SWAP2 SWAP1 PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1938 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x195C SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x19F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19EB SWAP1 PUSH2 0x340B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1A58 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4F SWAP1 PUSH2 0x3477 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x9F PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x9F PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x9F PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B8A SWAP3 SWAP2 SWAP1 PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BA9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BCD SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST POP DUP3 PUSH31 0x7C875846B687732A7579C19BB1DADE66CD14E9F4F809565E2B2B5E76C72B4F DUP4 PUSH1 0x40 MLOAD PUSH2 0x1BFD SWAP2 SWAP1 PUSH2 0x2832 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1C41 PUSH2 0x1ECB JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1CB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CA7 SWAP1 PUSH2 0x3A32 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1CB9 DUP2 PUSH2 0x21AE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x9B PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D3F SWAP1 PUSH2 0x3A9E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 GT PUSH2 0x1D8B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D82 SWAP1 PUSH2 0x3B0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DF1 SWAP1 PUSH2 0x3B76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1E69 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E60 SWAP1 PUSH2 0x3B76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x9E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x1EC4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EBB SWAP1 PUSH2 0x3BE2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1ED3 PUSH2 0x22F0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EF1 PUSH2 0x1459 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1F47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3E SWAP1 PUSH2 0x3C4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1F51 PUSH2 0x245B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x9F PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD DUP2 PUSH2 0x1F8E SWAP2 SWAP1 PUSH2 0x3C6E JUMP JUMPDEST SWAP1 POP PUSH1 0x65 SLOAD DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x1FAD SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST PUSH2 0x1FB7 SWAP2 SWAP1 PUSH2 0x3102 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1FF3 SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST PUSH2 0x1FFD SWAP2 SWAP1 PUSH2 0x3102 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x201A SWAP2 SWAP1 PUSH2 0x3C6E JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP DUP3 ISZERO PUSH2 0x2052 JUMPI DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD DUP2 DUP2 MLOAD PUSH2 0x203F SWAP2 SWAP1 PUSH2 0x3CA2 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 MSTORE POP POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2121 SWAP3 SWAP2 SWAP1 PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2140 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2164 SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x96C76D5AEC8A8C11A9C8E02768E3FA309347330D08961E0CF9FD43B349B684C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22DD SWAP1 PUSH2 0x3D48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x22EE PUSH2 0x22F8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2347 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x233E SWAP1 PUSH2 0x3D48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2357 PUSH2 0x2352 PUSH2 0x22F0 JUMP JUMPDEST PUSH2 0x21AE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x249C DUP2 PUSH2 0x2489 JUMP JUMPDEST DUP2 EQ PUSH2 0x24A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24B9 DUP2 PUSH2 0x2493 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24D5 JUMPI PUSH2 0x24D4 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24E3 DUP5 DUP3 DUP6 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2521 DUP2 PUSH2 0x2489 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x253D PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2518 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2550 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2518 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2562 DUP4 DUP4 PUSH2 0x2527 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2586 DUP3 PUSH2 0x24EC JUMP JUMPDEST PUSH2 0x2590 DUP2 DUP6 PUSH2 0x24F7 JUMP JUMPDEST SWAP4 POP PUSH2 0x259B DUP4 PUSH2 0x2508 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25CC JUMPI DUP2 MLOAD PUSH2 0x25B3 DUP9 DUP3 PUSH2 0x2556 JUMP JUMPDEST SWAP8 POP PUSH2 0x25BE DUP4 PUSH2 0x256E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x259F JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x25F3 DUP2 DUP5 PUSH2 0x257B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2626 DUP3 PUSH2 0x25FB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2636 DUP2 PUSH2 0x261B JUMP JUMPDEST DUP2 EQ PUSH2 0x2641 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2653 DUP2 PUSH2 0x262D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x266C DUP2 PUSH2 0x2659 JUMP JUMPDEST DUP2 EQ PUSH2 0x2677 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2689 DUP2 PUSH2 0x2663 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26B0 DUP2 PUSH2 0x268F JUMP JUMPDEST DUP2 EQ PUSH2 0x26BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x26CD DUP2 PUSH2 0x26A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x26F8 JUMPI PUSH2 0x26F7 PUSH2 0x26D3 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2715 JUMPI PUSH2 0x2714 PUSH2 0x26D8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2731 JUMPI PUSH2 0x2730 PUSH2 0x26DD JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x120 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x275C JUMPI PUSH2 0x275B PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x276A DUP14 DUP3 DUP15 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP11 POP POP PUSH1 0x20 PUSH2 0x277B DUP14 DUP3 DUP15 ADD PUSH2 0x267A JUMP JUMPDEST SWAP10 POP POP PUSH1 0x40 PUSH2 0x278C DUP14 DUP3 DUP15 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP9 POP POP PUSH1 0x60 PUSH2 0x279D DUP14 DUP3 DUP15 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP8 POP POP PUSH1 0x80 PUSH2 0x27AE DUP14 DUP3 DUP15 ADD PUSH2 0x26BE JUMP JUMPDEST SWAP7 POP POP PUSH1 0xA0 PUSH2 0x27BF DUP14 DUP3 DUP15 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP6 POP POP PUSH1 0xC0 PUSH2 0x27D0 DUP14 DUP3 DUP15 ADD PUSH2 0x267A JUMP JUMPDEST SWAP5 POP POP PUSH1 0xE0 PUSH2 0x27E1 DUP14 DUP3 DUP15 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP4 POP POP PUSH2 0x100 DUP12 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2803 JUMPI PUSH2 0x2802 PUSH2 0x2484 JUMP JUMPDEST JUMPDEST PUSH2 0x280F DUP14 DUP3 DUP15 ADD PUSH2 0x26E2 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH2 0x282C DUP2 PUSH2 0x2489 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2847 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2823 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2896 DUP3 PUSH2 0x284D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x28B5 JUMPI PUSH2 0x28B4 PUSH2 0x285E JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C8 PUSH2 0x2475 JUMP JUMPDEST SWAP1 POP PUSH2 0x28D4 DUP3 DUP3 PUSH2 0x288D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x28F4 JUMPI PUSH2 0x28F3 PUSH2 0x285E JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2920 JUMPI PUSH2 0x291F PUSH2 0x2905 JUMP JUMPDEST JUMPDEST PUSH2 0x292A PUSH1 0x40 PUSH2 0x28BE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x293A DUP5 DUP3 DUP6 ADD PUSH2 0x24AA JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x294E DUP5 DUP3 DUP6 ADD PUSH2 0x24AA JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x296D PUSH2 0x2968 DUP5 PUSH2 0x28D9 JUMP JUMPDEST PUSH2 0x28BE JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2990 JUMPI PUSH2 0x298F PUSH2 0x26DD JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x29B9 JUMPI DUP1 PUSH2 0x29A5 DUP9 DUP3 PUSH2 0x290A JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x2992 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x29D8 JUMPI PUSH2 0x29D7 PUSH2 0x26D3 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x29E8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x295A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A08 JUMPI PUSH2 0x2A07 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2A16 DUP6 DUP3 DUP7 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A37 JUMPI PUSH2 0x2A36 PUSH2 0x2484 JUMP JUMPDEST JUMPDEST PUSH2 0x2A43 DUP6 DUP3 DUP7 ADD PUSH2 0x29C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2A87 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2A6C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9E DUP3 PUSH2 0x2A4D JUMP JUMPDEST PUSH2 0x2AA8 DUP2 DUP6 PUSH2 0x2A58 JUMP JUMPDEST SWAP4 POP PUSH2 0x2AB8 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A69 JUMP JUMPDEST PUSH2 0x2AC1 DUP2 PUSH2 0x284D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AE6 DUP2 DUP5 PUSH2 0x2A93 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B0B DUP2 PUSH2 0x2AEE JUMP JUMPDEST DUP2 EQ PUSH2 0x2B16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2B28 DUP2 PUSH2 0x2B02 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B43 DUP2 PUSH2 0x2B2E JUMP JUMPDEST DUP2 EQ PUSH2 0x2B4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2B60 DUP2 PUSH2 0x2B3A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2B83 JUMPI PUSH2 0x2B82 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B91 DUP10 DUP3 DUP11 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x2BA2 DUP10 DUP3 DUP11 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x2BB3 DUP10 DUP3 DUP11 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x2BC4 DUP10 DUP3 DUP11 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x2BD5 DUP10 DUP3 DUP11 ADD PUSH2 0x2B19 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x2BE6 DUP10 DUP3 DUP11 ADD PUSH2 0x2B51 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH2 0x2BFC DUP2 PUSH2 0x261B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2C17 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2823 JUMP JUMPDEST PUSH2 0x2C24 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2BF3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C41 JUMPI PUSH2 0x2C40 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C4F DUP5 DUP3 DUP6 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C61 DUP2 PUSH2 0x2B2E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2C7C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2C58 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C8B DUP2 PUSH2 0x261B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C9A DUP2 PUSH2 0x2659 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2CA9 DUP2 PUSH2 0x268F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2CB8 DUP2 PUSH2 0x2B2E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2CD5 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2C82 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2CE8 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2C82 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2CFB PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2C82 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2D0E PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2C91 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2D21 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2CA0 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2D34 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2CAF JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2D47 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x2C82 JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x2D5A PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2CA0 JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x2D6F PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x2C91 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x2D8B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2CBE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2DA8 JUMPI PUSH2 0x2DA7 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2DB6 DUP6 DUP3 DUP7 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2DC7 DUP6 DUP3 DUP7 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DE7 JUMPI PUSH2 0x2DE6 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2DF5 DUP5 DUP3 DUP6 ADD PUSH2 0x2B19 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2E14 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2518 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2E27 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2518 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2E42 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2DFE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2E5D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BF3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2E7C JUMPI PUSH2 0x2E7B PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E8A DUP7 DUP3 DUP8 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2E9B DUP7 DUP3 DUP8 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2EAC DUP7 DUP3 DUP8 ADD PUSH2 0x2B51 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x2EBF DUP2 PUSH2 0x2AEE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2ECE DUP2 PUSH2 0x2659 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2EE9 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2EB6 JUMP JUMPDEST PUSH2 0x2EF6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2EC5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2F13 JUMPI PUSH2 0x2F12 PUSH2 0x26D3 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2F30 JUMPI PUSH2 0x2F2F PUSH2 0x26D8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2F4C JUMPI PUSH2 0x2F4B PUSH2 0x26DD JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F6A JUMPI PUSH2 0x2F69 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2F88 JUMPI PUSH2 0x2F87 PUSH2 0x2484 JUMP JUMPDEST JUMPDEST PUSH2 0x2F94 DUP6 DUP3 DUP7 ADD PUSH2 0x2EFD JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2FB9 JUMPI PUSH2 0x2FB8 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2FC7 DUP7 DUP3 DUP8 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2FD8 DUP7 DUP3 DUP8 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2FE9 DUP7 DUP3 DUP8 ADD PUSH2 0x267A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x300A JUMPI PUSH2 0x3009 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3018 DUP6 DUP3 DUP7 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3029 DUP6 DUP3 DUP7 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x309C DUP3 PUSH2 0x2659 JUMP JUMPDEST SWAP2 POP PUSH2 0x30A7 DUP4 PUSH2 0x2659 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x30B5 DUP2 PUSH2 0x2659 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x30CC JUMPI PUSH2 0x30CB PUSH2 0x3062 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x310D DUP3 PUSH2 0x2659 JUMP JUMPDEST SWAP2 POP PUSH2 0x3118 DUP4 PUSH2 0x2659 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3128 JUMPI PUSH2 0x3127 PUSH2 0x30D3 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x53656E646572466565546F6F4869676800000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x317A PUSH1 0x10 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3185 DUP3 PUSH2 0x3144 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31A9 DUP2 PUSH2 0x316D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x31C5 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2BF3 JUMP JUMPDEST PUSH2 0x31D2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2BF3 JUMP JUMPDEST PUSH2 0x31DF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2EC5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x31F6 DUP2 PUSH2 0x2B3A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3212 JUMPI PUSH2 0x3211 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3220 DUP5 DUP3 DUP6 ADD PUSH2 0x31E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3234 DUP3 PUSH2 0x2659 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3266 JUMPI PUSH2 0x3265 PUSH2 0x3062 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3286 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2BF3 JUMP JUMPDEST PUSH2 0x3293 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2EC5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32BF PUSH2 0x32BA PUSH2 0x32B5 DUP5 PUSH2 0x268F JUMP JUMPDEST PUSH2 0x329A JUMP JUMPDEST PUSH2 0x2659 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32CF DUP2 PUSH2 0x32A4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32F0 DUP4 DUP6 PUSH2 0x3133 JUMP JUMPDEST SWAP4 POP PUSH2 0x32FD DUP4 DUP6 DUP5 PUSH2 0x32D5 JUMP JUMPDEST PUSH2 0x3306 DUP4 PUSH2 0x284D JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x3326 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x32C6 JUMP JUMPDEST PUSH2 0x3333 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2823 JUMP JUMPDEST PUSH2 0x3340 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x2823 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x3353 DUP2 DUP5 DUP7 PUSH2 0x32E4 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x33A6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x33B9 JUMPI PUSH2 0x33B8 PUSH2 0x335F JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C7941676772656761746F72000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33F5 PUSH1 0xE DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3400 DUP3 PUSH2 0x33BF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3424 DUP2 PUSH2 0x33E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F7264657246756C66696C6C6564000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3461 PUSH1 0xE DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x346C DUP3 PUSH2 0x342B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3490 DUP2 PUSH2 0x3454 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34A2 DUP3 PUSH2 0x268F JUMP JUMPDEST SWAP2 POP PUSH2 0x34AD DUP4 PUSH2 0x268F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x34D1 JUMPI PUSH2 0x34D0 PUSH2 0x3062 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34F2 PUSH2 0x34ED PUSH2 0x34E8 DUP5 PUSH2 0x2AEE JUMP JUMPDEST PUSH2 0x329A JUMP JUMPDEST PUSH2 0x268F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3502 DUP2 PUSH2 0x34D7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x351D PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2823 JUMP JUMPDEST PUSH2 0x352A PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2823 JUMP JUMPDEST PUSH2 0x3537 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x34F9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3575 PUSH1 0x16 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3580 DUP3 PUSH2 0x353F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35A4 DUP2 PUSH2 0x3568 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x35C0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2EB6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x35DB PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2823 JUMP JUMPDEST PUSH2 0x35E8 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2BF3 JUMP JUMPDEST PUSH2 0x35F5 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2C58 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3659 PUSH1 0x2E DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3664 DUP3 PUSH2 0x35FD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3688 DUP2 PUSH2 0x364C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36C1 PUSH2 0x36BC PUSH2 0x36B7 DUP5 PUSH2 0x368F JUMP JUMPDEST PUSH2 0x329A JUMP JUMPDEST PUSH2 0x3699 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x36D1 DUP2 PUSH2 0x36A6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x36EC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x36C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x375F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3722 JUMP JUMPDEST PUSH2 0x3769 DUP7 DUP4 PUSH2 0x3722 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x379C PUSH2 0x3797 PUSH2 0x3792 DUP5 PUSH2 0x2659 JUMP JUMPDEST PUSH2 0x329A JUMP JUMPDEST PUSH2 0x2659 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x37B6 DUP4 PUSH2 0x3781 JUMP JUMPDEST PUSH2 0x37CA PUSH2 0x37C2 DUP3 PUSH2 0x37A3 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x372F JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x37DF PUSH2 0x37D2 JUMP JUMPDEST PUSH2 0x37EA DUP2 DUP5 DUP5 PUSH2 0x37AD JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x380E JUMPI PUSH2 0x3803 PUSH1 0x0 DUP3 PUSH2 0x37D7 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x37F0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3853 JUMPI PUSH2 0x3824 DUP2 PUSH2 0x36FD JUMP JUMPDEST PUSH2 0x382D DUP5 PUSH2 0x3712 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x383C JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3850 PUSH2 0x3848 DUP6 PUSH2 0x3712 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x37EF JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3876 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3858 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x388F DUP4 DUP4 PUSH2 0x3865 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x38A9 DUP4 DUP4 PUSH2 0x36F2 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x38C2 JUMPI PUSH2 0x38C1 PUSH2 0x285E JUMP JUMPDEST JUMPDEST PUSH2 0x38CC DUP3 SLOAD PUSH2 0x338E JUMP JUMPDEST PUSH2 0x38D7 DUP3 DUP3 DUP6 PUSH2 0x3812 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3906 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x38F4 JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x38FE DUP6 DUP3 PUSH2 0x3883 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3966 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3914 DUP7 PUSH2 0x36FD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x393C JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3917 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3959 JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x3955 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3865 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x397B DUP4 DUP6 PUSH2 0x2A58 JUMP JUMPDEST SWAP4 POP PUSH2 0x3988 DUP4 DUP6 DUP5 PUSH2 0x32D5 JUMP JUMPDEST PUSH2 0x3991 DUP4 PUSH2 0x284D JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39B7 DUP2 DUP5 DUP7 PUSH2 0x396F JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A1C PUSH1 0x26 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A27 DUP3 PUSH2 0x39C0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A4B DUP2 PUSH2 0x3A0F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x546F6B656E4E6F74537570706F72746564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A88 PUSH1 0x11 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A93 DUP3 PUSH2 0x3A52 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AB7 DUP2 PUSH2 0x3A7B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E7449735A65726F0000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AF4 PUSH1 0xC DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AFF DUP3 PUSH2 0x3ABE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B23 DUP2 PUSH2 0x3AE7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5468726F775A65726F4164647265737300000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B60 PUSH1 0x10 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B6B DUP3 PUSH2 0x3B2A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B8F DUP2 PUSH2 0x3B53 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964496E737469747574696F6E436F646500000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BCC PUSH1 0x16 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3BD7 DUP3 PUSH2 0x3B96 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3BFB DUP2 PUSH2 0x3BBF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C38 PUSH1 0x20 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C43 DUP3 PUSH2 0x3C02 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C67 DUP2 PUSH2 0x3C2B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C79 DUP3 PUSH2 0x2659 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C84 DUP4 PUSH2 0x2659 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3C9C JUMPI PUSH2 0x3C9B PUSH2 0x3062 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CAD DUP3 PUSH2 0x2659 JUMP JUMPDEST SWAP2 POP PUSH2 0x3CB8 DUP4 PUSH2 0x2659 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3CD0 JUMPI PUSH2 0x3CCF PUSH2 0x3062 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D32 PUSH1 0x2B DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D3D DUP3 PUSH2 0x3CD6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3D61 DUP2 PUSH2 0x3D25 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 SUB 0xC3 0x24 PUSH28 0xB726C64865B7A580DD6D825218D8AA6F111DE58C8CAA232A024AB64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"367:9282:15:-:0;;;782:53;;;;;;;;;;806:22;:20;;;:22;;:::i;:::-;367:9282;;5939:280:1;6007:13;;;;;;;;;;;6006:14;5998:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;6094:15;6078:31;;:12;;;;;;;;;;:31;;;6074:139;;6140:15;6125:12;;:30;;;;;;;;;;;;;;;;;;6174:28;6186:15;6174:28;;;;;;:::i;:::-;;;;;;;;6074:139;5939:280::o;7:169:20:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:226::-;322:34;318:1;310:6;306:14;299:58;391:9;386:2;378:6;374:15;367:34;182:226;:::o;414:366::-;556:3;577:67;641:2;636:3;577:67;:::i;:::-;570:74;;653:93;742:3;653:93;:::i;:::-;771:2;766:3;762:12;755:19;;414:366;;;:::o;786:419::-;952:4;990:2;979:9;975:18;967:26;;1039:9;1033:4;1029:20;1025:1;1014:9;1010:17;1003:47;1067:131;1193:4;1067:131;:::i;:::-;1059:139;;786:419;;;:::o;1211:86::-;1246:7;1286:4;1279:5;1275:16;1264:27;;1211:86;;;:::o;1303:112::-;1386:22;1402:5;1386:22;:::i;:::-;1381:3;1374:35;1303:112;;:::o;1421:214::-;1510:4;1548:2;1537:9;1533:18;1525:26;;1561:67;1625:1;1614:9;1610:17;1601:6;1561:67;:::i;:::-;1421:214;;;;:::o;367:9282:15:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__Ownable_init_26":{"entryPoint":8855,"id":26,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_37":{"entryPoint":8952,"id":37,"parameterSlots":0,"returnSlots":0},"@_calculateFees_3985":{"entryPoint":8009,"id":3985,"parameterSlots":3,"returnSlots":1},"@_checkOwner_68":{"entryPoint":7883,"id":68,"parameterSlots":0,"returnSlots":0},"@_handler_3692":{"entryPoint":7356,"id":3692,"parameterSlots":5,"returnSlots":0},"@_msgSender_1147":{"entryPoint":8944,"id":1147,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_125":{"entryPoint":8622,"id":125,"parameterSlots":1,"returnSlots":0},"@createOrder_3631":{"entryPoint":1374,"id":3631,"parameterSlots":10,"returnSlots":1},"@getAggregatorAddress_4107":{"entryPoint":7183,"id":4107,"parameterSlots":0,"returnSlots":1},"@getAggregator_4129":{"entryPoint":2874,"id":4129,"parameterSlots":0,"returnSlots":1},"@getFeeDetails_4098":{"entryPoint":5688,"id":4098,"parameterSlots":0,"returnSlots":2},"@getOrderInfo_3999":{"entryPoint":4143,"id":3999,"parameterSlots":1,"returnSlots":1},"@getSupportedInstitutionName_4026":{"entryPoint":5144,"id":4026,"parameterSlots":1,"returnSlots":1},"@getSupportedInstitutions_4085":{"entryPoint":1056,"id":4085,"parameterSlots":1,"returnSlots":1},"@getWhitelistedStatus_4120":{"entryPoint":6272,"id":4120,"parameterSlots":1,"returnSlots":1},"@initialize_3511":{"entryPoint":5725,"id":3511,"parameterSlots":1,"returnSlots":0},"@isContract_808":{"entryPoint":8820,"id":808,"parameterSlots":1,"returnSlots":1},"@isTokenSupported_4012":{"entryPoint":4057,"id":4012,"parameterSlots":1,"returnSlots":1},"@owner_54":{"entryPoint":5209,"id":54,"parameterSlots":0,"returnSlots":1},"@refund_3906":{"entryPoint":6498,"id":3906,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":4037,"id":82,"parameterSlots":0,"returnSlots":0},"@setSupportedInstitutions_4320":{"entryPoint":2598,"id":4320,"parameterSlots":2,"returnSlots":0},"@settingManagerBool_4266":{"entryPoint":5251,"id":4266,"parameterSlots":3,"returnSlots":0},"@settle_3810":{"entryPoint":3020,"id":3810,"parameterSlots":6,"returnSlots":2},"@transferOwnership_105":{"entryPoint":7225,"id":105,"parameterSlots":1,"returnSlots":0},"@transferSenderFee_3846":{"entryPoint":8282,"id":3846,"parameterSlots":1,"returnSlots":0},"@updateProtocolAddresses_4372":{"entryPoint":4704,"id":4372,"parameterSlots":2,"returnSlots":0},"@updateProtocolAggregator_4388":{"entryPoint":6185,"id":4388,"parameterSlots":2,"returnSlots":0},"@updateProtocolFees_4336":{"entryPoint":5037,"id":4336,"parameterSlots":1,"returnSlots":0},"@withdraw_4149":{"entryPoint":6358,"id":4149,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr":{"entryPoint":10586,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":9796,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr":{"entryPoint":10691,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":11089,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":12775,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":9386,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":12029,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_string_calldata_ptr":{"entryPoint":9954,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_struct$_Institution_$4160_memory_ptr":{"entryPoint":10506,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":9850,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64":{"entryPoint":11033,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint96":{"entryPoint":9918,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":11307,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":12192,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256t_bytes32t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr":{"entryPoint":10040,"id":null,"parameterSlots":2,"returnSlots":10},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":12796,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":9407,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":11665,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":11875,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr":{"entryPoint":10737,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes32":{"entryPoint":12275,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes32t_bytes32t_addresst_uint64t_bool":{"entryPoint":11110,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":12115,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64":{"entryPoint":11729,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_struct$_Institution_$4160_memory_ptr_to_t_struct$_Institution_$4160_memory_ptr":{"entryPoint":9558,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":11394,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":11251,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9595,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool":{"entryPoint":11439,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":11352,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32":{"entryPoint":9496,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":10275,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":14703,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":10899,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":14024,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":13028,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":14863,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack":{"entryPoint":15079,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack":{"entryPoint":13672,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack":{"entryPoint":12653,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":13900,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack":{"entryPoint":13396,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack":{"entryPoint":15295,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":15403,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack":{"entryPoint":15187,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack":{"entryPoint":14971,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":15653,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack":{"entryPoint":13288,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_InstitutionByCode_$4165_memory_ptr_to_t_struct$_InstitutionByCode_$4165_memory_ptr_fromStack":{"entryPoint":11774,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Institution_$4160_memory_ptr_to_t_struct$_Institution_$4160_memory_ptr":{"entryPoint":9511,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Order_$4475_memory_ptr_to_t_struct$_Order_$4475_memory_ptr_fromStack":{"entryPoint":11454,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":11409,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":11973,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":11958,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint96_fromStack":{"entryPoint":13561,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint256_fromStack":{"entryPoint":12998,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint96":{"entryPoint":11424,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":11848,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":12720,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":12913,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9689,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":11367,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":10290,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":11266,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":13766,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_uint64__to_t_bytes32_t_bytes32_t_uint96__fromStack_reversed":{"entryPoint":13576,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":14748,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10956,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":14039,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14898,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15114,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13707,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12688,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13935,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13431,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15330,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15438,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15222,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15006,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15688,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13323,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_InstitutionByCode_$4165_memory_ptr__to_t_struct$_InstitutionByCode_$4165_memory_ptr__fromStack_reversed":{"entryPoint":11821,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_struct$_Order_$4475_memory_ptr__to_t_struct$_Order_$4475_memory_ptr__fromStack_reversed":{"entryPoint":11637,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":13739,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint64_t_uint256__to_t_uint64_t_uint256__fromStack_reversed":{"entryPoint":11988,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint96_t_bytes32_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_bytes32_t_bytes32_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13073,"id":null,"parameterSlots":6,"returnSlots":1},"allocate_memory":{"entryPoint":10430,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":9333,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr":{"entryPoint":10457,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr":{"entryPoint":9480,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_bytes_storage":{"entryPoint":14077,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr":{"entryPoint":9452,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_calldata_ptr":{"entryPoint":14066,"id":null,"parameterSlots":2,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":10829,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr":{"entryPoint":9582,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9463,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":10840,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":12595,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":15522,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":12546,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":12433,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":15470,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint96":{"entryPoint":13463,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_bytes_storage":{"entryPoint":14354,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":9755,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":11054,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":9353,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":13967,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9723,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":9817,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":10990,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":13977,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint96":{"entryPoint":9871,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":14319,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":13990,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":14209,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint64_to_t_uint96":{"entryPoint":13527,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint96_to_t_uint256":{"entryPoint":12964,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage":{"entryPoint":14495,"id":null,"parameterSlots":3,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":13013,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":10857,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":14098,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":13198,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":14467,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":10381,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":12954,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":12841,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":14437,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":12386,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":12499,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":13151,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":12339,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":10334,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":14243,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":9944,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":9939,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":10501,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":9949,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":9348,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":9343,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":10317,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":14114,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":14424,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":14295,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":14784,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2":{"entryPoint":15038,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4":{"entryPoint":13631,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4":{"entryPoint":12612,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":13821,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5":{"entryPoint":13355,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5":{"entryPoint":15254,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":15362,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7":{"entryPoint":15146,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1":{"entryPoint":14930,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":15574,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243":{"entryPoint":13247,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":14127,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":14253,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":9773,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":11066,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":9363,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":9827,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":11010,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint96":{"entryPoint":9895,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":14290,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:49255:20","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:20","statements":[{"nodeType":"YulAssignment","src":"57:19:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:20"},"nodeType":"YulFunctionCall","src":"67:9:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:20"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:20","type":""}],"src":"7:75:20"},{"body":{"nodeType":"YulBlock","src":"177:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:20"},"nodeType":"YulFunctionCall","src":"187:12:20"},"nodeType":"YulExpressionStatement","src":"187:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:20"},{"body":{"nodeType":"YulBlock","src":"300:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:20"},"nodeType":"YulFunctionCall","src":"310:12:20"},"nodeType":"YulExpressionStatement","src":"310:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:20"},{"body":{"nodeType":"YulBlock","src":"379:32:20","statements":[{"nodeType":"YulAssignment","src":"389:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:20"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:20","type":""}],"src":"334:77:20"},{"body":{"nodeType":"YulBlock","src":"460:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:20"},"nodeType":"YulFunctionCall","src":"519:12:20"},"nodeType":"YulExpressionStatement","src":"519:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:20"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:20"},"nodeType":"YulFunctionCall","src":"490:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:20"},"nodeType":"YulFunctionCall","src":"480:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:20"},"nodeType":"YulFunctionCall","src":"473:43:20"},"nodeType":"YulIf","src":"470:63:20"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:20","type":""}],"src":"417:122:20"},{"body":{"nodeType":"YulBlock","src":"597:87:20","statements":[{"nodeType":"YulAssignment","src":"607:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:20"},"nodeType":"YulFunctionCall","src":"616:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:20"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:20"},"nodeType":"YulFunctionCall","src":"645:33:20"},"nodeType":"YulExpressionStatement","src":"645:33:20"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:20","type":""}],"src":"545:139:20"},{"body":{"nodeType":"YulBlock","src":"756:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"802:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"804:77:20"},"nodeType":"YulFunctionCall","src":"804:79:20"},"nodeType":"YulExpressionStatement","src":"804:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"777:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"773:3:20"},"nodeType":"YulFunctionCall","src":"773:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"769:3:20"},"nodeType":"YulFunctionCall","src":"769:32:20"},"nodeType":"YulIf","src":"766:119:20"},{"nodeType":"YulBlock","src":"895:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"910:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"924:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:20","type":""}]},{"nodeType":"YulAssignment","src":"939:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"974:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"985:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:20"},"nodeType":"YulFunctionCall","src":"970:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"949:20:20"},"nodeType":"YulFunctionCall","src":"949:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"939:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"726:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"737:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"749:6:20","type":""}],"src":"690:329:20"},{"body":{"nodeType":"YulBlock","src":"1128:40:20","statements":[{"nodeType":"YulAssignment","src":"1139:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1155:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1149:5:20"},"nodeType":"YulFunctionCall","src":"1149:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1139:6:20"}]}]},"name":"array_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1111:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1121:6:20","type":""}],"src":"1025:143:20"},{"body":{"nodeType":"YulBlock","src":"1314:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1331:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"1336:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1324:6:20"},"nodeType":"YulFunctionCall","src":"1324:19:20"},"nodeType":"YulExpressionStatement","src":"1324:19:20"},{"nodeType":"YulAssignment","src":"1352:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1371:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"1376:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1367:3:20"},"nodeType":"YulFunctionCall","src":"1367:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1352:11:20"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1286:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"1291:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1302:11:20","type":""}],"src":"1174:213:20"},{"body":{"nodeType":"YulBlock","src":"1494:60:20","statements":[{"nodeType":"YulAssignment","src":"1504:11:20","value":{"name":"ptr","nodeType":"YulIdentifier","src":"1512:3:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1504:4:20"}]},{"nodeType":"YulAssignment","src":"1525:22:20","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1537:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"1542:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:20"},"nodeType":"YulFunctionCall","src":"1533:14:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1525:4:20"}]}]},"name":"array_dataslot_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1481:3:20","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1489:4:20","type":""}],"src":"1393:161:20"},{"body":{"nodeType":"YulBlock","src":"1615:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1632:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1655:5:20"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1637:17:20"},"nodeType":"YulFunctionCall","src":"1637:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1625:6:20"},"nodeType":"YulFunctionCall","src":"1625:37:20"},"nodeType":"YulExpressionStatement","src":"1625:37:20"}]},"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1603:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1610:3:20","type":""}],"src":"1560:108:20"},{"body":{"nodeType":"YulBlock","src":"1882:391:20","statements":[{"nodeType":"YulVariableDeclaration","src":"1892:26:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1908:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"1913:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1904:3:20"},"nodeType":"YulFunctionCall","src":"1904:14:20"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"1896:4:20","type":""}]},{"nodeType":"YulBlock","src":"1928:164:20","statements":[{"nodeType":"YulVariableDeclaration","src":"1963:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1993:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"2000:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1989:3:20"},"nodeType":"YulFunctionCall","src":"1989:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1983:5:20"},"nodeType":"YulFunctionCall","src":"1983:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"1967:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2053:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2071:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"2076:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2067:3:20"},"nodeType":"YulFunctionCall","src":"2067:14:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"2019:33:20"},"nodeType":"YulFunctionCall","src":"2019:63:20"},"nodeType":"YulExpressionStatement","src":"2019:63:20"}]},{"nodeType":"YulBlock","src":"2102:164:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2137:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2167:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"2174:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2163:3:20"},"nodeType":"YulFunctionCall","src":"2163:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2157:5:20"},"nodeType":"YulFunctionCall","src":"2157:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"2141:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2227:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2245:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"2250:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2241:3:20"},"nodeType":"YulFunctionCall","src":"2241:14:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"2193:33:20"},"nodeType":"YulFunctionCall","src":"2193:63:20"},"nodeType":"YulExpressionStatement","src":"2193:63:20"}]}]},"name":"abi_encode_t_struct$_Institution_$4160_memory_ptr_to_t_struct$_Institution_$4160_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1869:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1876:3:20","type":""}],"src":"1768:505:20"},{"body":{"nodeType":"YulBlock","src":"2417:157:20","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2519:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"2527:3:20"}],"functionName":{"name":"abi_encode_t_struct$_Institution_$4160_memory_ptr_to_t_struct$_Institution_$4160_memory_ptr","nodeType":"YulIdentifier","src":"2427:91:20"},"nodeType":"YulFunctionCall","src":"2427:104:20"},"nodeType":"YulExpressionStatement","src":"2427:104:20"},{"nodeType":"YulAssignment","src":"2540:28:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2558:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"2563:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2554:3:20"},"nodeType":"YulFunctionCall","src":"2554:14:20"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"2540:10:20"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_Institution_$4160_memory_ptr_to_t_struct$_Institution_$4160_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"2390:6:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2398:3:20","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"2406:10:20","type":""}],"src":"2279:295:20"},{"body":{"nodeType":"YulBlock","src":"2684:38:20","statements":[{"nodeType":"YulAssignment","src":"2694:22:20","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2706:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"2711:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2702:3:20"},"nodeType":"YulFunctionCall","src":"2702:14:20"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"2694:4:20"}]}]},"name":"array_nextElement_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2671:3:20","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"2679:4:20","type":""}],"src":"2580:142:20"},{"body":{"nodeType":"YulBlock","src":"3008:782:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3018:97:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3109:5:20"}],"functionName":{"name":"array_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3032:76:20"},"nodeType":"YulFunctionCall","src":"3032:83:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3022:6:20","type":""}]},{"nodeType":"YulAssignment","src":"3124:122:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3234:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"3239:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3131:102:20"},"nodeType":"YulFunctionCall","src":"3131:115:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3124:3:20"}]},{"nodeType":"YulVariableDeclaration","src":"3255:100:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3349:5:20"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3270:78:20"},"nodeType":"YulFunctionCall","src":"3270:85:20"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"3259:7:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3364:21:20","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"3378:7:20"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"3368:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"3454:311:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3468:34:20","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3495:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3489:5:20"},"nodeType":"YulFunctionCall","src":"3489:13:20"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"3472:13:20","type":""}]},{"nodeType":"YulAssignment","src":"3515:128:20","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"3624:13:20"},{"name":"pos","nodeType":"YulIdentifier","src":"3639:3:20"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_Institution_$4160_memory_ptr_to_t_struct$_Institution_$4160_memory_ptr","nodeType":"YulIdentifier","src":"3522:101:20"},"nodeType":"YulFunctionCall","src":"3522:121:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3515:3:20"}]},{"nodeType":"YulAssignment","src":"3656:99:20","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3748:6:20"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3666:81:20"},"nodeType":"YulFunctionCall","src":"3666:89:20"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3656:6:20"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3416:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"3419:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3413:2:20"},"nodeType":"YulFunctionCall","src":"3413:13:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3427:18:20","statements":[{"nodeType":"YulAssignment","src":"3429:14:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3438:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"3441:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3434:3:20"},"nodeType":"YulFunctionCall","src":"3434:9:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3429:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"3398:14:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3400:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"3409:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3404:1:20","type":""}]}]},"src":"3394:371:20"},{"nodeType":"YulAssignment","src":"3774:10:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"3781:3:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3774:3:20"}]}]},"name":"abi_encode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2987:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2994:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3003:3:20","type":""}],"src":"2826:964:20"},{"body":{"nodeType":"YulBlock","src":"4002:283:20","statements":[{"nodeType":"YulAssignment","src":"4012:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4024:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4035:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4020:3:20"},"nodeType":"YulFunctionCall","src":"4020:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4012:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4059:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4070:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4055:3:20"},"nodeType":"YulFunctionCall","src":"4055:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4078:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"4084:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4074:3:20"},"nodeType":"YulFunctionCall","src":"4074:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4048:6:20"},"nodeType":"YulFunctionCall","src":"4048:47:20"},"nodeType":"YulExpressionStatement","src":"4048:47:20"},{"nodeType":"YulAssignment","src":"4104:174:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4264:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"4273:4:20"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4112:151:20"},"nodeType":"YulFunctionCall","src":"4112:166:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4104:4:20"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3974:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3986:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3997:4:20","type":""}],"src":"3796:489:20"},{"body":{"nodeType":"YulBlock","src":"4336:81:20","statements":[{"nodeType":"YulAssignment","src":"4346:65:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4361:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"4368:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4357:3:20"},"nodeType":"YulFunctionCall","src":"4357:54:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4346:7:20"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4318:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4328:7:20","type":""}],"src":"4291:126:20"},{"body":{"nodeType":"YulBlock","src":"4468:51:20","statements":[{"nodeType":"YulAssignment","src":"4478:35:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4507:5:20"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4489:17:20"},"nodeType":"YulFunctionCall","src":"4489:24:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4478:7:20"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4450:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4460:7:20","type":""}],"src":"4423:96:20"},{"body":{"nodeType":"YulBlock","src":"4568:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"4625:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4634:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4637:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4627:6:20"},"nodeType":"YulFunctionCall","src":"4627:12:20"},"nodeType":"YulExpressionStatement","src":"4627:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4591:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4616:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4598:17:20"},"nodeType":"YulFunctionCall","src":"4598:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4588:2:20"},"nodeType":"YulFunctionCall","src":"4588:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4581:6:20"},"nodeType":"YulFunctionCall","src":"4581:43:20"},"nodeType":"YulIf","src":"4578:63:20"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4561:5:20","type":""}],"src":"4525:122:20"},{"body":{"nodeType":"YulBlock","src":"4705:87:20","statements":[{"nodeType":"YulAssignment","src":"4715:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4737:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4724:12:20"},"nodeType":"YulFunctionCall","src":"4724:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4715:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4780:5:20"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4753:26:20"},"nodeType":"YulFunctionCall","src":"4753:33:20"},"nodeType":"YulExpressionStatement","src":"4753:33:20"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4683:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"4691:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4699:5:20","type":""}],"src":"4653:139:20"},{"body":{"nodeType":"YulBlock","src":"4843:32:20","statements":[{"nodeType":"YulAssignment","src":"4853:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"4864:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4853:7:20"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4825:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4835:7:20","type":""}],"src":"4798:77:20"},{"body":{"nodeType":"YulBlock","src":"4924:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"4981:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4990:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4993:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4983:6:20"},"nodeType":"YulFunctionCall","src":"4983:12:20"},"nodeType":"YulExpressionStatement","src":"4983:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4947:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4972:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4954:17:20"},"nodeType":"YulFunctionCall","src":"4954:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4944:2:20"},"nodeType":"YulFunctionCall","src":"4944:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4937:6:20"},"nodeType":"YulFunctionCall","src":"4937:43:20"},"nodeType":"YulIf","src":"4934:63:20"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4917:5:20","type":""}],"src":"4881:122:20"},{"body":{"nodeType":"YulBlock","src":"5061:87:20","statements":[{"nodeType":"YulAssignment","src":"5071:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5093:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5080:12:20"},"nodeType":"YulFunctionCall","src":"5080:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5071:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5136:5:20"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"5109:26:20"},"nodeType":"YulFunctionCall","src":"5109:33:20"},"nodeType":"YulExpressionStatement","src":"5109:33:20"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5039:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"5047:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5055:5:20","type":""}],"src":"5009:139:20"},{"body":{"nodeType":"YulBlock","src":"5198:65:20","statements":[{"nodeType":"YulAssignment","src":"5208:49:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5223:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"5230:26:20","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5219:3:20"},"nodeType":"YulFunctionCall","src":"5219:38:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5208:7:20"}]}]},"name":"cleanup_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5180:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5190:7:20","type":""}],"src":"5154:109:20"},{"body":{"nodeType":"YulBlock","src":"5311:78:20","statements":[{"body":{"nodeType":"YulBlock","src":"5367:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5376:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5379:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5369:6:20"},"nodeType":"YulFunctionCall","src":"5369:12:20"},"nodeType":"YulExpressionStatement","src":"5369:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5334:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5358:5:20"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"5341:16:20"},"nodeType":"YulFunctionCall","src":"5341:23:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5331:2:20"},"nodeType":"YulFunctionCall","src":"5331:34:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5324:6:20"},"nodeType":"YulFunctionCall","src":"5324:42:20"},"nodeType":"YulIf","src":"5321:62:20"}]},"name":"validator_revert_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5304:5:20","type":""}],"src":"5269:120:20"},{"body":{"nodeType":"YulBlock","src":"5446:86:20","statements":[{"nodeType":"YulAssignment","src":"5456:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5478:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5465:12:20"},"nodeType":"YulFunctionCall","src":"5465:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5456:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5520:5:20"}],"functionName":{"name":"validator_revert_t_uint96","nodeType":"YulIdentifier","src":"5494:25:20"},"nodeType":"YulFunctionCall","src":"5494:32:20"},"nodeType":"YulExpressionStatement","src":"5494:32:20"}]},"name":"abi_decode_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5424:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"5432:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5440:5:20","type":""}],"src":"5395:137:20"},{"body":{"nodeType":"YulBlock","src":"5627:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5644:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5647:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5637:6:20"},"nodeType":"YulFunctionCall","src":"5637:12:20"},"nodeType":"YulExpressionStatement","src":"5637:12:20"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"5538:117:20"},{"body":{"nodeType":"YulBlock","src":"5750:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5767:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5770:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5760:6:20"},"nodeType":"YulFunctionCall","src":"5760:12:20"},"nodeType":"YulExpressionStatement","src":"5760:12:20"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"5661:117:20"},{"body":{"nodeType":"YulBlock","src":"5873:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5890:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5893:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5883:6:20"},"nodeType":"YulFunctionCall","src":"5883:12:20"},"nodeType":"YulExpressionStatement","src":"5883:12:20"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"5784:117:20"},{"body":{"nodeType":"YulBlock","src":"5996:478:20","statements":[{"body":{"nodeType":"YulBlock","src":"6045:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"6047:77:20"},"nodeType":"YulFunctionCall","src":"6047:79:20"},"nodeType":"YulExpressionStatement","src":"6047:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6024:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"6032:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6020:3:20"},"nodeType":"YulFunctionCall","src":"6020:17:20"},{"name":"end","nodeType":"YulIdentifier","src":"6039:3:20"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6016:3:20"},"nodeType":"YulFunctionCall","src":"6016:27:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6009:6:20"},"nodeType":"YulFunctionCall","src":"6009:35:20"},"nodeType":"YulIf","src":"6006:122:20"},{"nodeType":"YulAssignment","src":"6137:30:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6160:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6147:12:20"},"nodeType":"YulFunctionCall","src":"6147:20:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6137:6:20"}]},{"body":{"nodeType":"YulBlock","src":"6210:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"6212:77:20"},"nodeType":"YulFunctionCall","src":"6212:79:20"},"nodeType":"YulExpressionStatement","src":"6212:79:20"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6182:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"6190:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6179:2:20"},"nodeType":"YulFunctionCall","src":"6179:30:20"},"nodeType":"YulIf","src":"6176:117:20"},{"nodeType":"YulAssignment","src":"6302:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6318:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"6326:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6314:3:20"},"nodeType":"YulFunctionCall","src":"6314:17:20"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"6302:8:20"}]},{"body":{"nodeType":"YulBlock","src":"6385:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"6387:77:20"},"nodeType":"YulFunctionCall","src":"6387:79:20"},"nodeType":"YulExpressionStatement","src":"6387:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"6350:8:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6364:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"6372:4:20","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6360:3:20"},"nodeType":"YulFunctionCall","src":"6360:17:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6346:3:20"},"nodeType":"YulFunctionCall","src":"6346:32:20"},{"name":"end","nodeType":"YulIdentifier","src":"6380:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6343:2:20"},"nodeType":"YulFunctionCall","src":"6343:41:20"},"nodeType":"YulIf","src":"6340:128:20"}]},"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5963:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"5971:3:20","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"5979:8:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"5989:6:20","type":""}],"src":"5921:553:20"},{"body":{"nodeType":"YulBlock","src":"6701:1472:20","statements":[{"body":{"nodeType":"YulBlock","src":"6748:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6750:77:20"},"nodeType":"YulFunctionCall","src":"6750:79:20"},"nodeType":"YulExpressionStatement","src":"6750:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6722:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"6731:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6718:3:20"},"nodeType":"YulFunctionCall","src":"6718:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"6743:3:20","type":"","value":"288"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6714:3:20"},"nodeType":"YulFunctionCall","src":"6714:33:20"},"nodeType":"YulIf","src":"6711:120:20"},{"nodeType":"YulBlock","src":"6841:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6856:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"6870:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6860:6:20","type":""}]},{"nodeType":"YulAssignment","src":"6885:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6920:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"6931:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6916:3:20"},"nodeType":"YulFunctionCall","src":"6916:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6940:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6895:20:20"},"nodeType":"YulFunctionCall","src":"6895:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6885:6:20"}]}]},{"nodeType":"YulBlock","src":"6968:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6983:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"6997:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6987:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7013:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7048:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7059:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7044:3:20"},"nodeType":"YulFunctionCall","src":"7044:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7068:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7023:20:20"},"nodeType":"YulFunctionCall","src":"7023:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7013:6:20"}]}]},{"nodeType":"YulBlock","src":"7096:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7111:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7125:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7115:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7141:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7176:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7187:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7172:3:20"},"nodeType":"YulFunctionCall","src":"7172:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7196:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7151:20:20"},"nodeType":"YulFunctionCall","src":"7151:53:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7141:6:20"}]}]},{"nodeType":"YulBlock","src":"7224:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7239:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7253:2:20","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7243:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7269:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7304:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7315:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7300:3:20"},"nodeType":"YulFunctionCall","src":"7300:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7324:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7279:20:20"},"nodeType":"YulFunctionCall","src":"7279:53:20"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7269:6:20"}]}]},{"nodeType":"YulBlock","src":"7352:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7367:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7381:3:20","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7371:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7398:62:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7432:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7443:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7428:3:20"},"nodeType":"YulFunctionCall","src":"7428:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7452:7:20"}],"functionName":{"name":"abi_decode_t_uint96","nodeType":"YulIdentifier","src":"7408:19:20"},"nodeType":"YulFunctionCall","src":"7408:52:20"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7398:6:20"}]}]},{"nodeType":"YulBlock","src":"7480:119:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7495:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7509:3:20","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7499:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7526:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7561:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7572:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7557:3:20"},"nodeType":"YulFunctionCall","src":"7557:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7581:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7536:20:20"},"nodeType":"YulFunctionCall","src":"7536:53:20"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7526:6:20"}]}]},{"nodeType":"YulBlock","src":"7609:119:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7624:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7638:3:20","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7628:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7655:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7690:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7701:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7686:3:20"},"nodeType":"YulFunctionCall","src":"7686:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7710:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7665:20:20"},"nodeType":"YulFunctionCall","src":"7665:53:20"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"7655:6:20"}]}]},{"nodeType":"YulBlock","src":"7738:119:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7753:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7767:3:20","type":"","value":"224"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7757:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7784:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7819:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7830:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7815:3:20"},"nodeType":"YulFunctionCall","src":"7815:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7839:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7794:20:20"},"nodeType":"YulFunctionCall","src":"7794:53:20"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"7784:6:20"}]}]},{"nodeType":"YulBlock","src":"7867:299:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7882:47:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7913:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"7924:3:20","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7909:3:20"},"nodeType":"YulFunctionCall","src":"7909:19:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7896:12:20"},"nodeType":"YulFunctionCall","src":"7896:33:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7886:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"7976:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7978:77:20"},"nodeType":"YulFunctionCall","src":"7978:79:20"},"nodeType":"YulExpressionStatement","src":"7978:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7948:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"7956:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7945:2:20"},"nodeType":"YulFunctionCall","src":"7945:30:20"},"nodeType":"YulIf","src":"7942:117:20"},{"nodeType":"YulAssignment","src":"8073:83:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8128:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"8139:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8124:3:20"},"nodeType":"YulFunctionCall","src":"8124:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8148:7:20"}],"functionName":{"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulIdentifier","src":"8091:32:20"},"nodeType":"YulFunctionCall","src":"8091:65:20"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"8073:6:20"},{"name":"value9","nodeType":"YulIdentifier","src":"8081:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6599:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6610:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6622:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6630:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6638:6:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6646:6:20","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6654:6:20","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6662:6:20","type":""},{"name":"value6","nodeType":"YulTypedName","src":"6670:6:20","type":""},{"name":"value7","nodeType":"YulTypedName","src":"6678:6:20","type":""},{"name":"value8","nodeType":"YulTypedName","src":"6686:6:20","type":""},{"name":"value9","nodeType":"YulTypedName","src":"6694:6:20","type":""}],"src":"6480:1693:20"},{"body":{"nodeType":"YulBlock","src":"8244:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8261:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8284:5:20"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"8266:17:20"},"nodeType":"YulFunctionCall","src":"8266:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8254:6:20"},"nodeType":"YulFunctionCall","src":"8254:37:20"},"nodeType":"YulExpressionStatement","src":"8254:37:20"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8232:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8239:3:20","type":""}],"src":"8179:118:20"},{"body":{"nodeType":"YulBlock","src":"8401:124:20","statements":[{"nodeType":"YulAssignment","src":"8411:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8423:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"8434:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8419:3:20"},"nodeType":"YulFunctionCall","src":"8419:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8411:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8491:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8504:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"8515:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8500:3:20"},"nodeType":"YulFunctionCall","src":"8500:17:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8447:43:20"},"nodeType":"YulFunctionCall","src":"8447:71:20"},"nodeType":"YulExpressionStatement","src":"8447:71:20"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8373:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8385:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8396:4:20","type":""}],"src":"8303:222:20"},{"body":{"nodeType":"YulBlock","src":"8579:54:20","statements":[{"nodeType":"YulAssignment","src":"8589:38:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8607:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"8614:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8603:3:20"},"nodeType":"YulFunctionCall","src":"8603:14:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8623:2:20","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8619:3:20"},"nodeType":"YulFunctionCall","src":"8619:7:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8599:3:20"},"nodeType":"YulFunctionCall","src":"8599:28:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8589:6:20"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8562:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"8572:6:20","type":""}],"src":"8531:102:20"},{"body":{"nodeType":"YulBlock","src":"8667:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8684:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8687:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8677:6:20"},"nodeType":"YulFunctionCall","src":"8677:88:20"},"nodeType":"YulExpressionStatement","src":"8677:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8781:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8784:4:20","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8774:6:20"},"nodeType":"YulFunctionCall","src":"8774:15:20"},"nodeType":"YulExpressionStatement","src":"8774:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8805:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8808:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8798:6:20"},"nodeType":"YulFunctionCall","src":"8798:15:20"},"nodeType":"YulExpressionStatement","src":"8798:15:20"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"8639:180:20"},{"body":{"nodeType":"YulBlock","src":"8868:238:20","statements":[{"nodeType":"YulVariableDeclaration","src":"8878:58:20","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8900:6:20"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8930:4:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8908:21:20"},"nodeType":"YulFunctionCall","src":"8908:27:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8896:3:20"},"nodeType":"YulFunctionCall","src":"8896:40:20"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"8882:10:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"9047:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9049:16:20"},"nodeType":"YulFunctionCall","src":"9049:18:20"},"nodeType":"YulExpressionStatement","src":"9049:18:20"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8990:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"9002:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8987:2:20"},"nodeType":"YulFunctionCall","src":"8987:34:20"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9026:10:20"},{"name":"memPtr","nodeType":"YulIdentifier","src":"9038:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9023:2:20"},"nodeType":"YulFunctionCall","src":"9023:22:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8984:2:20"},"nodeType":"YulFunctionCall","src":"8984:62:20"},"nodeType":"YulIf","src":"8981:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9085:2:20","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9089:10:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9078:6:20"},"nodeType":"YulFunctionCall","src":"9078:22:20"},"nodeType":"YulExpressionStatement","src":"9078:22:20"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8854:6:20","type":""},{"name":"size","nodeType":"YulTypedName","src":"8862:4:20","type":""}],"src":"8825:281:20"},{"body":{"nodeType":"YulBlock","src":"9153:88:20","statements":[{"nodeType":"YulAssignment","src":"9163:30:20","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"9173:18:20"},"nodeType":"YulFunctionCall","src":"9173:20:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9163:6:20"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9222:6:20"},{"name":"size","nodeType":"YulIdentifier","src":"9230:4:20"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"9202:19:20"},"nodeType":"YulFunctionCall","src":"9202:33:20"},"nodeType":"YulExpressionStatement","src":"9202:33:20"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"9137:4:20","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"9146:6:20","type":""}],"src":"9112:129:20"},{"body":{"nodeType":"YulBlock","src":"9358:229:20","statements":[{"body":{"nodeType":"YulBlock","src":"9463:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9465:16:20"},"nodeType":"YulFunctionCall","src":"9465:18:20"},"nodeType":"YulExpressionStatement","src":"9465:18:20"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9435:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"9443:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9432:2:20"},"nodeType":"YulFunctionCall","src":"9432:30:20"},"nodeType":"YulIf","src":"9429:56:20"},{"nodeType":"YulAssignment","src":"9495:25:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9507:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"9515:4:20","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9503:3:20"},"nodeType":"YulFunctionCall","src":"9503:17:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9495:4:20"}]},{"nodeType":"YulAssignment","src":"9557:23:20","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"9569:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"9575:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9565:3:20"},"nodeType":"YulFunctionCall","src":"9565:15:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9557:4:20"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"9342:6:20","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"9353:4:20","type":""}],"src":"9247:340:20"},{"body":{"nodeType":"YulBlock","src":"9682:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9699:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9702:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9692:6:20"},"nodeType":"YulFunctionCall","src":"9692:12:20"},"nodeType":"YulExpressionStatement","src":"9692:12:20"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"9593:117:20"},{"body":{"nodeType":"YulBlock","src":"9805:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9822:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9825:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9815:6:20"},"nodeType":"YulFunctionCall","src":"9815:12:20"},"nodeType":"YulExpressionStatement","src":"9815:12:20"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"9716:117:20"},{"body":{"nodeType":"YulBlock","src":"9972:494:20","statements":[{"body":{"nodeType":"YulBlock","src":"10016:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"10018:77:20"},"nodeType":"YulFunctionCall","src":"10018:79:20"},"nodeType":"YulExpressionStatement","src":"10018:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"9993:3:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"9998:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9989:3:20"},"nodeType":"YulFunctionCall","src":"9989:19:20"},{"kind":"number","nodeType":"YulLiteral","src":"10010:4:20","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9985:3:20"},"nodeType":"YulFunctionCall","src":"9985:30:20"},"nodeType":"YulIf","src":"9982:117:20"},{"nodeType":"YulAssignment","src":"10108:30:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10133:4:20","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"10117:15:20"},"nodeType":"YulFunctionCall","src":"10117:21:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10108:5:20"}]},{"nodeType":"YulBlock","src":"10148:150:20","statements":[{"nodeType":"YulVariableDeclaration","src":"10183:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"10197:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10187:6:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10223:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"10230:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10219:3:20"},"nodeType":"YulFunctionCall","src":"10219:16:20"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10262:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"10273:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10258:3:20"},"nodeType":"YulFunctionCall","src":"10258:22:20"},{"name":"end","nodeType":"YulIdentifier","src":"10282:3:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10237:20:20"},"nodeType":"YulFunctionCall","src":"10237:49:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10212:6:20"},"nodeType":"YulFunctionCall","src":"10212:75:20"},"nodeType":"YulExpressionStatement","src":"10212:75:20"}]},{"nodeType":"YulBlock","src":"10308:151:20","statements":[{"nodeType":"YulVariableDeclaration","src":"10343:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"10357:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10347:6:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10384:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"10391:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10380:3:20"},"nodeType":"YulFunctionCall","src":"10380:16:20"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10423:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"10434:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10419:3:20"},"nodeType":"YulFunctionCall","src":"10419:22:20"},{"name":"end","nodeType":"YulIdentifier","src":"10443:3:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10398:20:20"},"nodeType":"YulFunctionCall","src":"10398:49:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10373:6:20"},"nodeType":"YulFunctionCall","src":"10373:75:20"},"nodeType":"YulExpressionStatement","src":"10373:75:20"}]}]},"name":"abi_decode_t_struct$_Institution_$4160_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9947:9:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"9958:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9966:5:20","type":""}],"src":"9888:578:20"},{"body":{"nodeType":"YulBlock","src":"10654:666:20","statements":[{"nodeType":"YulAssignment","src":"10664:119:20","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10775:6:20"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"10689:85:20"},"nodeType":"YulFunctionCall","src":"10689:93:20"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"10673:15:20"},"nodeType":"YulFunctionCall","src":"10673:110:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"10664:5:20"}]},{"nodeType":"YulVariableDeclaration","src":"10792:16:20","value":{"name":"array","nodeType":"YulIdentifier","src":"10803:5:20"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"10796:3:20","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"10825:5:20"},{"name":"length","nodeType":"YulIdentifier","src":"10832:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10818:6:20"},"nodeType":"YulFunctionCall","src":"10818:21:20"},"nodeType":"YulExpressionStatement","src":"10818:21:20"},{"nodeType":"YulAssignment","src":"10848:23:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"10859:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"10866:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10855:3:20"},"nodeType":"YulFunctionCall","src":"10855:16:20"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"10848:3:20"}]},{"nodeType":"YulVariableDeclaration","src":"10881:44:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10899:6:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10911:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"10919:4:20","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10907:3:20"},"nodeType":"YulFunctionCall","src":"10907:17:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10895:3:20"},"nodeType":"YulFunctionCall","src":"10895:30:20"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"10885:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"10953:103:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"10967:77:20"},"nodeType":"YulFunctionCall","src":"10967:79:20"},"nodeType":"YulExpressionStatement","src":"10967:79:20"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"10940:6:20"},{"name":"end","nodeType":"YulIdentifier","src":"10948:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10937:2:20"},"nodeType":"YulFunctionCall","src":"10937:15:20"},"nodeType":"YulIf","src":"10934:122:20"},{"body":{"nodeType":"YulBlock","src":"11141:173:20","statements":[{"nodeType":"YulVariableDeclaration","src":"11156:21:20","value":{"name":"src","nodeType":"YulIdentifier","src":"11174:3:20"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"11160:10:20","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11198:3:20"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"11253:10:20"},{"name":"end","nodeType":"YulIdentifier","src":"11265:3:20"}],"functionName":{"name":"abi_decode_t_struct$_Institution_$4160_memory_ptr","nodeType":"YulIdentifier","src":"11203:49:20"},"nodeType":"YulFunctionCall","src":"11203:66:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11191:6:20"},"nodeType":"YulFunctionCall","src":"11191:79:20"},"nodeType":"YulExpressionStatement","src":"11191:79:20"},{"nodeType":"YulAssignment","src":"11283:21:20","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11294:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"11299:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11290:3:20"},"nodeType":"YulFunctionCall","src":"11290:14:20"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"11283:3:20"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11094:3:20"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"11099:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11091:2:20"},"nodeType":"YulFunctionCall","src":"11091:15:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11107:25:20","statements":[{"nodeType":"YulAssignment","src":"11109:21:20","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11120:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"11125:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11116:3:20"},"nodeType":"YulFunctionCall","src":"11116:14:20"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"11109:3:20"}]}]},"pre":{"nodeType":"YulBlock","src":"11069:21:20","statements":[{"nodeType":"YulVariableDeclaration","src":"11071:17:20","value":{"name":"offset","nodeType":"YulIdentifier","src":"11082:6:20"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"11075:3:20","type":""}]}]},"src":"11065:249:20"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10624:6:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"10632:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"10640:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"10648:5:20","type":""}],"src":"10523:797:20"},{"body":{"nodeType":"YulBlock","src":"11483:322:20","statements":[{"body":{"nodeType":"YulBlock","src":"11532:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"11534:77:20"},"nodeType":"YulFunctionCall","src":"11534:79:20"},"nodeType":"YulExpressionStatement","src":"11534:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11511:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"11519:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11507:3:20"},"nodeType":"YulFunctionCall","src":"11507:17:20"},{"name":"end","nodeType":"YulIdentifier","src":"11526:3:20"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11503:3:20"},"nodeType":"YulFunctionCall","src":"11503:27:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11496:6:20"},"nodeType":"YulFunctionCall","src":"11496:35:20"},"nodeType":"YulIf","src":"11493:122:20"},{"nodeType":"YulVariableDeclaration","src":"11624:34:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11651:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11638:12:20"},"nodeType":"YulFunctionCall","src":"11638:20:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11628:6:20","type":""}]},{"nodeType":"YulAssignment","src":"11667:132:20","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11772:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"11780:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11768:3:20"},"nodeType":"YulFunctionCall","src":"11768:17:20"},{"name":"length","nodeType":"YulIdentifier","src":"11787:6:20"},{"name":"end","nodeType":"YulIdentifier","src":"11795:3:20"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"11676:91:20"},"nodeType":"YulFunctionCall","src":"11676:123:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"11667:5:20"}]}]},"name":"abi_decode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"11461:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"11469:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"11477:5:20","type":""}],"src":"11377:428:20"},{"body":{"nodeType":"YulBlock","src":"11948:605:20","statements":[{"body":{"nodeType":"YulBlock","src":"11994:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11996:77:20"},"nodeType":"YulFunctionCall","src":"11996:79:20"},"nodeType":"YulExpressionStatement","src":"11996:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11969:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"11978:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11965:3:20"},"nodeType":"YulFunctionCall","src":"11965:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"11990:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11961:3:20"},"nodeType":"YulFunctionCall","src":"11961:32:20"},"nodeType":"YulIf","src":"11958:119:20"},{"nodeType":"YulBlock","src":"12087:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"12102:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"12116:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12106:6:20","type":""}]},{"nodeType":"YulAssignment","src":"12131:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12166:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"12177:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12162:3:20"},"nodeType":"YulFunctionCall","src":"12162:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12186:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"12141:20:20"},"nodeType":"YulFunctionCall","src":"12141:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12131:6:20"}]}]},{"nodeType":"YulBlock","src":"12214:332:20","statements":[{"nodeType":"YulVariableDeclaration","src":"12229:46:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12260:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12271:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12256:3:20"},"nodeType":"YulFunctionCall","src":"12256:18:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12243:12:20"},"nodeType":"YulFunctionCall","src":"12243:32:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12233:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"12322:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"12324:77:20"},"nodeType":"YulFunctionCall","src":"12324:79:20"},"nodeType":"YulExpressionStatement","src":"12324:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12294:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"12302:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12291:2:20"},"nodeType":"YulFunctionCall","src":"12291:30:20"},"nodeType":"YulIf","src":"12288:117:20"},{"nodeType":"YulAssignment","src":"12419:117:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12508:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"12519:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12504:3:20"},"nodeType":"YulFunctionCall","src":"12504:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12528:7:20"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12429:74:20"},"nodeType":"YulFunctionCall","src":"12429:107:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12419:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11910:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11921:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11933:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11941:6:20","type":""}],"src":"11811:742:20"},{"body":{"nodeType":"YulBlock","src":"12617:40:20","statements":[{"nodeType":"YulAssignment","src":"12628:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12644:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12638:5:20"},"nodeType":"YulFunctionCall","src":"12638:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12628:6:20"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12600:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12610:6:20","type":""}],"src":"12559:98:20"},{"body":{"nodeType":"YulBlock","src":"12758:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12775:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"12780:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12768:6:20"},"nodeType":"YulFunctionCall","src":"12768:19:20"},"nodeType":"YulExpressionStatement","src":"12768:19:20"},{"nodeType":"YulAssignment","src":"12796:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12815:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"12820:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12811:3:20"},"nodeType":"YulFunctionCall","src":"12811:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"12796:11:20"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12730:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"12735:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"12746:11:20","type":""}],"src":"12663:168:20"},{"body":{"nodeType":"YulBlock","src":"12899:184:20","statements":[{"nodeType":"YulVariableDeclaration","src":"12909:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"12918:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"12913:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"12978:63:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13003:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"13008:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12999:3:20"},"nodeType":"YulFunctionCall","src":"12999:11:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13022:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"13027:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13018:3:20"},"nodeType":"YulFunctionCall","src":"13018:11:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13012:5:20"},"nodeType":"YulFunctionCall","src":"13012:18:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12992:6:20"},"nodeType":"YulFunctionCall","src":"12992:39:20"},"nodeType":"YulExpressionStatement","src":"12992:39:20"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12939:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"12942:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12936:2:20"},"nodeType":"YulFunctionCall","src":"12936:13:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12950:19:20","statements":[{"nodeType":"YulAssignment","src":"12952:15:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12961:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"12964:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12957:3:20"},"nodeType":"YulFunctionCall","src":"12957:10:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"12952:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"12932:3:20","statements":[]},"src":"12928:113:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13061:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"13066:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13057:3:20"},"nodeType":"YulFunctionCall","src":"13057:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"13075:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13050:6:20"},"nodeType":"YulFunctionCall","src":"13050:27:20"},"nodeType":"YulExpressionStatement","src":"13050:27:20"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"12881:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"12886:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"12891:6:20","type":""}],"src":"12837:246:20"},{"body":{"nodeType":"YulBlock","src":"13179:283:20","statements":[{"nodeType":"YulVariableDeclaration","src":"13189:52:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13235:5:20"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13203:31:20"},"nodeType":"YulFunctionCall","src":"13203:38:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13193:6:20","type":""}]},{"nodeType":"YulAssignment","src":"13250:77:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13315:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"13320:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13257:57:20"},"nodeType":"YulFunctionCall","src":"13257:70:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13250:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13375:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"13382:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13371:3:20"},"nodeType":"YulFunctionCall","src":"13371:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"13389:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"13394:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"13336:34:20"},"nodeType":"YulFunctionCall","src":"13336:65:20"},"nodeType":"YulExpressionStatement","src":"13336:65:20"},{"nodeType":"YulAssignment","src":"13410:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13421:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13448:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"13426:21:20"},"nodeType":"YulFunctionCall","src":"13426:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13417:3:20"},"nodeType":"YulFunctionCall","src":"13417:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13410:3:20"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13160:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13167:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13175:3:20","type":""}],"src":"13089:373:20"},{"body":{"nodeType":"YulBlock","src":"13584:193:20","statements":[{"nodeType":"YulAssignment","src":"13594:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13606:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13617:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13602:3:20"},"nodeType":"YulFunctionCall","src":"13602:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13594:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13641:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13652:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13637:3:20"},"nodeType":"YulFunctionCall","src":"13637:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13660:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"13666:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13656:3:20"},"nodeType":"YulFunctionCall","src":"13656:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13630:6:20"},"nodeType":"YulFunctionCall","src":"13630:47:20"},"nodeType":"YulExpressionStatement","src":"13630:47:20"},{"nodeType":"YulAssignment","src":"13686:84:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13756:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"13765:4:20"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13694:61:20"},"nodeType":"YulFunctionCall","src":"13694:76:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13686:4:20"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13556:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13568:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13579:4:20","type":""}],"src":"13468:309:20"},{"body":{"nodeType":"YulBlock","src":"13827:57:20","statements":[{"nodeType":"YulAssignment","src":"13837:41:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13852:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"13859:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13848:3:20"},"nodeType":"YulFunctionCall","src":"13848:30:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"13837:7:20"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13809:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"13819:7:20","type":""}],"src":"13783:101:20"},{"body":{"nodeType":"YulBlock","src":"13932:78:20","statements":[{"body":{"nodeType":"YulBlock","src":"13988:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13997:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14000:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13990:6:20"},"nodeType":"YulFunctionCall","src":"13990:12:20"},"nodeType":"YulExpressionStatement","src":"13990:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13955:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13979:5:20"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"13962:16:20"},"nodeType":"YulFunctionCall","src":"13962:23:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13952:2:20"},"nodeType":"YulFunctionCall","src":"13952:34:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13945:6:20"},"nodeType":"YulFunctionCall","src":"13945:42:20"},"nodeType":"YulIf","src":"13942:62:20"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13925:5:20","type":""}],"src":"13890:120:20"},{"body":{"nodeType":"YulBlock","src":"14067:86:20","statements":[{"nodeType":"YulAssignment","src":"14077:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14099:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14086:12:20"},"nodeType":"YulFunctionCall","src":"14086:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"14077:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14141:5:20"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"14115:25:20"},"nodeType":"YulFunctionCall","src":"14115:32:20"},"nodeType":"YulExpressionStatement","src":"14115:32:20"}]},"name":"abi_decode_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"14045:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"14053:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"14061:5:20","type":""}],"src":"14016:137:20"},{"body":{"nodeType":"YulBlock","src":"14201:48:20","statements":[{"nodeType":"YulAssignment","src":"14211:32:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14236:5:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14229:6:20"},"nodeType":"YulFunctionCall","src":"14229:13:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14222:6:20"},"nodeType":"YulFunctionCall","src":"14222:21:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"14211:7:20"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14183:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"14193:7:20","type":""}],"src":"14159:90:20"},{"body":{"nodeType":"YulBlock","src":"14295:76:20","statements":[{"body":{"nodeType":"YulBlock","src":"14349:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14358:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14361:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14351:6:20"},"nodeType":"YulFunctionCall","src":"14351:12:20"},"nodeType":"YulExpressionStatement","src":"14351:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14318:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14340:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"14325:14:20"},"nodeType":"YulFunctionCall","src":"14325:21:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14315:2:20"},"nodeType":"YulFunctionCall","src":"14315:32:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14308:6:20"},"nodeType":"YulFunctionCall","src":"14308:40:20"},"nodeType":"YulIf","src":"14305:60:20"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14288:5:20","type":""}],"src":"14255:116:20"},{"body":{"nodeType":"YulBlock","src":"14426:84:20","statements":[{"nodeType":"YulAssignment","src":"14436:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14458:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14445:12:20"},"nodeType":"YulFunctionCall","src":"14445:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"14436:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14498:5:20"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"14474:23:20"},"nodeType":"YulFunctionCall","src":"14474:30:20"},"nodeType":"YulExpressionStatement","src":"14474:30:20"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"14404:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"14412:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"14420:5:20","type":""}],"src":"14377:133:20"},{"body":{"nodeType":"YulBlock","src":"14663:902:20","statements":[{"body":{"nodeType":"YulBlock","src":"14710:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14712:77:20"},"nodeType":"YulFunctionCall","src":"14712:79:20"},"nodeType":"YulExpressionStatement","src":"14712:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14684:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"14693:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14680:3:20"},"nodeType":"YulFunctionCall","src":"14680:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"14705:3:20","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14676:3:20"},"nodeType":"YulFunctionCall","src":"14676:33:20"},"nodeType":"YulIf","src":"14673:120:20"},{"nodeType":"YulBlock","src":"14803:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"14818:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"14832:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14822:6:20","type":""}]},{"nodeType":"YulAssignment","src":"14847:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14882:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"14893:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14878:3:20"},"nodeType":"YulFunctionCall","src":"14878:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14902:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"14857:20:20"},"nodeType":"YulFunctionCall","src":"14857:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14847:6:20"}]}]},{"nodeType":"YulBlock","src":"14930:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"14945:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"14959:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14949:6:20","type":""}]},{"nodeType":"YulAssignment","src":"14975:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15010:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"15021:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15006:3:20"},"nodeType":"YulFunctionCall","src":"15006:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15030:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"14985:20:20"},"nodeType":"YulFunctionCall","src":"14985:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14975:6:20"}]}]},{"nodeType":"YulBlock","src":"15058:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"15073:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"15087:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15077:6:20","type":""}]},{"nodeType":"YulAssignment","src":"15103:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15138:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"15149:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15134:3:20"},"nodeType":"YulFunctionCall","src":"15134:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15158:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"15113:20:20"},"nodeType":"YulFunctionCall","src":"15113:53:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"15103:6:20"}]}]},{"nodeType":"YulBlock","src":"15186:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"15201:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"15215:2:20","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15205:6:20","type":""}]},{"nodeType":"YulAssignment","src":"15231:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15266:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"15277:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15262:3:20"},"nodeType":"YulFunctionCall","src":"15262:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15286:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15241:20:20"},"nodeType":"YulFunctionCall","src":"15241:53:20"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"15231:6:20"}]}]},{"nodeType":"YulBlock","src":"15314:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"15329:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"15343:3:20","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15333:6:20","type":""}]},{"nodeType":"YulAssignment","src":"15360:62:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15394:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"15405:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15390:3:20"},"nodeType":"YulFunctionCall","src":"15390:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15414:7:20"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"15370:19:20"},"nodeType":"YulFunctionCall","src":"15370:52:20"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"15360:6:20"}]}]},{"nodeType":"YulBlock","src":"15442:116:20","statements":[{"nodeType":"YulVariableDeclaration","src":"15457:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"15471:3:20","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15461:6:20","type":""}]},{"nodeType":"YulAssignment","src":"15488:60:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15520:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"15531:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15516:3:20"},"nodeType":"YulFunctionCall","src":"15516:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15540:7:20"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"15498:17:20"},"nodeType":"YulFunctionCall","src":"15498:50:20"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"15488:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_bytes32t_addresst_uint64t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14593:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14604:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14616:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14624:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14632:6:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14640:6:20","type":""},{"name":"value4","nodeType":"YulTypedName","src":"14648:6:20","type":""},{"name":"value5","nodeType":"YulTypedName","src":"14656:6:20","type":""}],"src":"14516:1049:20"},{"body":{"nodeType":"YulBlock","src":"15636:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15653:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15676:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"15658:17:20"},"nodeType":"YulFunctionCall","src":"15658:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15646:6:20"},"nodeType":"YulFunctionCall","src":"15646:37:20"},"nodeType":"YulExpressionStatement","src":"15646:37:20"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15624:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15631:3:20","type":""}],"src":"15571:118:20"},{"body":{"nodeType":"YulBlock","src":"15821:206:20","statements":[{"nodeType":"YulAssignment","src":"15831:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15843:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"15854:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15839:3:20"},"nodeType":"YulFunctionCall","src":"15839:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15831:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15911:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15924:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"15935:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15920:3:20"},"nodeType":"YulFunctionCall","src":"15920:17:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"15867:43:20"},"nodeType":"YulFunctionCall","src":"15867:71:20"},"nodeType":"YulExpressionStatement","src":"15867:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15992:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16005:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"16016:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16001:3:20"},"nodeType":"YulFunctionCall","src":"16001:18:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"15948:43:20"},"nodeType":"YulFunctionCall","src":"15948:72:20"},"nodeType":"YulExpressionStatement","src":"15948:72:20"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15785:9:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15797:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15805:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15816:4:20","type":""}],"src":"15695:332:20"},{"body":{"nodeType":"YulBlock","src":"16099:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"16145:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"16147:77:20"},"nodeType":"YulFunctionCall","src":"16147:79:20"},"nodeType":"YulExpressionStatement","src":"16147:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16120:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"16129:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16116:3:20"},"nodeType":"YulFunctionCall","src":"16116:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"16141:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16112:3:20"},"nodeType":"YulFunctionCall","src":"16112:32:20"},"nodeType":"YulIf","src":"16109:119:20"},{"nodeType":"YulBlock","src":"16238:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"16253:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"16267:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16257:6:20","type":""}]},{"nodeType":"YulAssignment","src":"16282:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16317:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"16328:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16313:3:20"},"nodeType":"YulFunctionCall","src":"16313:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16337:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"16292:20:20"},"nodeType":"YulFunctionCall","src":"16292:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16282:6:20"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16069:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16080:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16092:6:20","type":""}],"src":"16033:329:20"},{"body":{"nodeType":"YulBlock","src":"16427:50:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16444:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16464:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"16449:14:20"},"nodeType":"YulFunctionCall","src":"16449:21:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16437:6:20"},"nodeType":"YulFunctionCall","src":"16437:34:20"},"nodeType":"YulExpressionStatement","src":"16437:34:20"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16415:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16422:3:20","type":""}],"src":"16368:109:20"},{"body":{"nodeType":"YulBlock","src":"16575:118:20","statements":[{"nodeType":"YulAssignment","src":"16585:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16597:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"16608:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16593:3:20"},"nodeType":"YulFunctionCall","src":"16593:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16585:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16659:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16672:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"16683:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16668:3:20"},"nodeType":"YulFunctionCall","src":"16668:17:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"16621:37:20"},"nodeType":"YulFunctionCall","src":"16621:65:20"},"nodeType":"YulExpressionStatement","src":"16621:65:20"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16547:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16559:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16570:4:20","type":""}],"src":"16483:210:20"},{"body":{"nodeType":"YulBlock","src":"16754:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16771:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16794:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"16776:17:20"},"nodeType":"YulFunctionCall","src":"16776:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16764:6:20"},"nodeType":"YulFunctionCall","src":"16764:37:20"},"nodeType":"YulExpressionStatement","src":"16764:37:20"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16742:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16749:3:20","type":""}],"src":"16699:108:20"},{"body":{"nodeType":"YulBlock","src":"16868:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16885:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16908:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"16890:17:20"},"nodeType":"YulFunctionCall","src":"16890:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16878:6:20"},"nodeType":"YulFunctionCall","src":"16878:37:20"},"nodeType":"YulExpressionStatement","src":"16878:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16856:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16863:3:20","type":""}],"src":"16813:108:20"},{"body":{"nodeType":"YulBlock","src":"16980:52:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16997:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17019:5:20"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"17002:16:20"},"nodeType":"YulFunctionCall","src":"17002:23:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16990:6:20"},"nodeType":"YulFunctionCall","src":"16990:36:20"},"nodeType":"YulExpressionStatement","src":"16990:36:20"}]},"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16968:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16975:3:20","type":""}],"src":"16927:105:20"},{"body":{"nodeType":"YulBlock","src":"17087:50:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17104:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17124:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"17109:14:20"},"nodeType":"YulFunctionCall","src":"17109:21:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17097:6:20"},"nodeType":"YulFunctionCall","src":"17097:34:20"},"nodeType":"YulExpressionStatement","src":"17097:34:20"}]},"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17075:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17082:3:20","type":""}],"src":"17038:99:20"},{"body":{"nodeType":"YulBlock","src":"17311:1651:20","statements":[{"nodeType":"YulVariableDeclaration","src":"17321:28:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17337:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17342:6:20","type":"","value":"0x0120"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17333:3:20"},"nodeType":"YulFunctionCall","src":"17333:16:20"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"17325:4:20","type":""}]},{"nodeType":"YulBlock","src":"17359:166:20","statements":[{"nodeType":"YulVariableDeclaration","src":"17396:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17426:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"17433:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17422:3:20"},"nodeType":"YulFunctionCall","src":"17422:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17416:5:20"},"nodeType":"YulFunctionCall","src":"17416:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"17400:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"17486:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17504:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17509:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17500:3:20"},"nodeType":"YulFunctionCall","src":"17500:14:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"17452:33:20"},"nodeType":"YulFunctionCall","src":"17452:63:20"},"nodeType":"YulExpressionStatement","src":"17452:63:20"}]},{"nodeType":"YulBlock","src":"17535:165:20","statements":[{"nodeType":"YulVariableDeclaration","src":"17571:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17601:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"17608:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17597:3:20"},"nodeType":"YulFunctionCall","src":"17597:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17591:5:20"},"nodeType":"YulFunctionCall","src":"17591:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"17575:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"17661:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17679:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17684:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17675:3:20"},"nodeType":"YulFunctionCall","src":"17675:14:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"17627:33:20"},"nodeType":"YulFunctionCall","src":"17627:63:20"},"nodeType":"YulExpressionStatement","src":"17627:63:20"}]},{"nodeType":"YulBlock","src":"17710:178:20","statements":[{"nodeType":"YulVariableDeclaration","src":"17759:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17789:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"17796:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17785:3:20"},"nodeType":"YulFunctionCall","src":"17785:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17779:5:20"},"nodeType":"YulFunctionCall","src":"17779:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"17763:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"17849:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17867:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17872:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17863:3:20"},"nodeType":"YulFunctionCall","src":"17863:14:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"17815:33:20"},"nodeType":"YulFunctionCall","src":"17815:63:20"},"nodeType":"YulExpressionStatement","src":"17815:63:20"}]},{"nodeType":"YulBlock","src":"17898:169:20","statements":[{"nodeType":"YulVariableDeclaration","src":"17938:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17968:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"17975:4:20","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17964:3:20"},"nodeType":"YulFunctionCall","src":"17964:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17958:5:20"},"nodeType":"YulFunctionCall","src":"17958:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"17942:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18028:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18046:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18051:4:20","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18042:3:20"},"nodeType":"YulFunctionCall","src":"18042:14:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"17994:33:20"},"nodeType":"YulFunctionCall","src":"17994:63:20"},"nodeType":"YulExpressionStatement","src":"17994:63:20"}]},{"nodeType":"YulBlock","src":"18077:162:20","statements":[{"nodeType":"YulVariableDeclaration","src":"18112:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18142:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"18149:4:20","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18138:3:20"},"nodeType":"YulFunctionCall","src":"18138:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18132:5:20"},"nodeType":"YulFunctionCall","src":"18132:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18116:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18200:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18218:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18223:4:20","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18214:3:20"},"nodeType":"YulFunctionCall","src":"18214:14:20"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulIdentifier","src":"18168:31:20"},"nodeType":"YulFunctionCall","src":"18168:61:20"},"nodeType":"YulExpressionStatement","src":"18168:61:20"}]},{"nodeType":"YulBlock","src":"18249:165:20","statements":[{"nodeType":"YulVariableDeclaration","src":"18291:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18321:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"18328:4:20","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18317:3:20"},"nodeType":"YulFunctionCall","src":"18317:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18311:5:20"},"nodeType":"YulFunctionCall","src":"18311:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18295:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18375:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18393:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18398:4:20","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18389:3:20"},"nodeType":"YulFunctionCall","src":"18389:14:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"18347:27:20"},"nodeType":"YulFunctionCall","src":"18347:57:20"},"nodeType":"YulExpressionStatement","src":"18347:57:20"}]},{"nodeType":"YulBlock","src":"18424:173:20","statements":[{"nodeType":"YulVariableDeclaration","src":"18468:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18498:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"18505:4:20","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18494:3:20"},"nodeType":"YulFunctionCall","src":"18494:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18488:5:20"},"nodeType":"YulFunctionCall","src":"18488:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18472:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18558:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18576:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18581:4:20","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18572:3:20"},"nodeType":"YulFunctionCall","src":"18572:14:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"18524:33:20"},"nodeType":"YulFunctionCall","src":"18524:63:20"},"nodeType":"YulExpressionStatement","src":"18524:63:20"}]},{"nodeType":"YulBlock","src":"18607:168:20","statements":[{"nodeType":"YulVariableDeclaration","src":"18648:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18678:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"18685:4:20","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18674:3:20"},"nodeType":"YulFunctionCall","src":"18674:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18668:5:20"},"nodeType":"YulFunctionCall","src":"18668:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18652:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18736:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18754:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18759:4:20","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18750:3:20"},"nodeType":"YulFunctionCall","src":"18750:14:20"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulIdentifier","src":"18704:31:20"},"nodeType":"YulFunctionCall","src":"18704:61:20"},"nodeType":"YulExpressionStatement","src":"18704:61:20"}]},{"nodeType":"YulBlock","src":"18785:170:20","statements":[{"nodeType":"YulVariableDeclaration","src":"18822:45:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18852:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"18859:6:20","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18848:3:20"},"nodeType":"YulFunctionCall","src":"18848:18:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18842:5:20"},"nodeType":"YulFunctionCall","src":"18842:25:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18826:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18914:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18932:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18937:6:20","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18928:3:20"},"nodeType":"YulFunctionCall","src":"18928:16:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"18880:33:20"},"nodeType":"YulFunctionCall","src":"18880:65:20"},"nodeType":"YulExpressionStatement","src":"18880:65:20"}]}]},"name":"abi_encode_t_struct$_Order_$4475_memory_ptr_to_t_struct$_Order_$4475_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17298:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17305:3:20","type":""}],"src":"17199:1763:20"},{"body":{"nodeType":"YulBlock","src":"19112:171:20","statements":[{"nodeType":"YulAssignment","src":"19122:27:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19134:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"19145:3:20","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19130:3:20"},"nodeType":"YulFunctionCall","src":"19130:19:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19122:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19249:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19262:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"19273:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19258:3:20"},"nodeType":"YulFunctionCall","src":"19258:17:20"}],"functionName":{"name":"abi_encode_t_struct$_Order_$4475_memory_ptr_to_t_struct$_Order_$4475_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19159:89:20"},"nodeType":"YulFunctionCall","src":"19159:117:20"},"nodeType":"YulExpressionStatement","src":"19159:117:20"}]},"name":"abi_encode_tuple_t_struct$_Order_$4475_memory_ptr__to_t_struct$_Order_$4475_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19084:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19096:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19107:4:20","type":""}],"src":"18968:315:20"},{"body":{"nodeType":"YulBlock","src":"19372:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"19418:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"19420:77:20"},"nodeType":"YulFunctionCall","src":"19420:79:20"},"nodeType":"YulExpressionStatement","src":"19420:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19393:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"19402:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19389:3:20"},"nodeType":"YulFunctionCall","src":"19389:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"19414:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19385:3:20"},"nodeType":"YulFunctionCall","src":"19385:32:20"},"nodeType":"YulIf","src":"19382:119:20"},{"nodeType":"YulBlock","src":"19511:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"19526:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"19540:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19530:6:20","type":""}]},{"nodeType":"YulAssignment","src":"19555:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19590:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"19601:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19586:3:20"},"nodeType":"YulFunctionCall","src":"19586:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19610:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"19565:20:20"},"nodeType":"YulFunctionCall","src":"19565:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19555:6:20"}]}]},{"nodeType":"YulBlock","src":"19638:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"19653:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"19667:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19657:6:20","type":""}]},{"nodeType":"YulAssignment","src":"19683:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19718:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"19729:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19714:3:20"},"nodeType":"YulFunctionCall","src":"19714:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19738:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19693:20:20"},"nodeType":"YulFunctionCall","src":"19693:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"19683:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19334:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19345:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19357:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19365:6:20","type":""}],"src":"19289:474:20"},{"body":{"nodeType":"YulBlock","src":"19834:262:20","statements":[{"body":{"nodeType":"YulBlock","src":"19880:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"19882:77:20"},"nodeType":"YulFunctionCall","src":"19882:79:20"},"nodeType":"YulExpressionStatement","src":"19882:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19855:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"19864:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19851:3:20"},"nodeType":"YulFunctionCall","src":"19851:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"19876:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19847:3:20"},"nodeType":"YulFunctionCall","src":"19847:32:20"},"nodeType":"YulIf","src":"19844:119:20"},{"nodeType":"YulBlock","src":"19973:116:20","statements":[{"nodeType":"YulVariableDeclaration","src":"19988:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"20002:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19992:6:20","type":""}]},{"nodeType":"YulAssignment","src":"20017:62:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20051:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"20062:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20047:3:20"},"nodeType":"YulFunctionCall","src":"20047:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20071:7:20"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"20027:19:20"},"nodeType":"YulFunctionCall","src":"20027:52:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20017:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19804:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19815:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19827:6:20","type":""}],"src":"19769:327:20"},{"body":{"nodeType":"YulBlock","src":"20344:395:20","statements":[{"nodeType":"YulVariableDeclaration","src":"20354:26:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20370:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"20375:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20366:3:20"},"nodeType":"YulFunctionCall","src":"20366:14:20"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"20358:4:20","type":""}]},{"nodeType":"YulBlock","src":"20390:164:20","statements":[{"nodeType":"YulVariableDeclaration","src":"20425:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20455:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"20462:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20451:3:20"},"nodeType":"YulFunctionCall","src":"20451:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20445:5:20"},"nodeType":"YulFunctionCall","src":"20445:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"20429:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"20515:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20533:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"20538:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20529:3:20"},"nodeType":"YulFunctionCall","src":"20529:14:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"20481:33:20"},"nodeType":"YulFunctionCall","src":"20481:63:20"},"nodeType":"YulExpressionStatement","src":"20481:63:20"}]},{"nodeType":"YulBlock","src":"20564:168:20","statements":[{"nodeType":"YulVariableDeclaration","src":"20603:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20633:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"20640:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20629:3:20"},"nodeType":"YulFunctionCall","src":"20629:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20623:5:20"},"nodeType":"YulFunctionCall","src":"20623:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"20607:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"20693:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20711:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"20716:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20707:3:20"},"nodeType":"YulFunctionCall","src":"20707:14:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"20659:33:20"},"nodeType":"YulFunctionCall","src":"20659:63:20"},"nodeType":"YulExpressionStatement","src":"20659:63:20"}]}]},"name":"abi_encode_t_struct$_InstitutionByCode_$4165_memory_ptr_to_t_struct$_InstitutionByCode_$4165_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20331:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"20338:3:20","type":""}],"src":"20208:531:20"},{"body":{"nodeType":"YulBlock","src":"20913:194:20","statements":[{"nodeType":"YulAssignment","src":"20923:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20935:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"20946:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20931:3:20"},"nodeType":"YulFunctionCall","src":"20931:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20923:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21073:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21086:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"21097:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21082:3:20"},"nodeType":"YulFunctionCall","src":"21082:17:20"}],"functionName":{"name":"abi_encode_t_struct$_InstitutionByCode_$4165_memory_ptr_to_t_struct$_InstitutionByCode_$4165_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20959:113:20"},"nodeType":"YulFunctionCall","src":"20959:141:20"},"nodeType":"YulExpressionStatement","src":"20959:141:20"}]},"name":"abi_encode_tuple_t_struct$_InstitutionByCode_$4165_memory_ptr__to_t_struct$_InstitutionByCode_$4165_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20885:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20897:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20908:4:20","type":""}],"src":"20745:362:20"},{"body":{"nodeType":"YulBlock","src":"21211:124:20","statements":[{"nodeType":"YulAssignment","src":"21221:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21233:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"21244:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21229:3:20"},"nodeType":"YulFunctionCall","src":"21229:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21221:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21301:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21314:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"21325:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21310:3:20"},"nodeType":"YulFunctionCall","src":"21310:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"21257:43:20"},"nodeType":"YulFunctionCall","src":"21257:71:20"},"nodeType":"YulExpressionStatement","src":"21257:71:20"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21183:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21195:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21206:4:20","type":""}],"src":"21113:222:20"},{"body":{"nodeType":"YulBlock","src":"21438:516:20","statements":[{"body":{"nodeType":"YulBlock","src":"21484:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"21486:77:20"},"nodeType":"YulFunctionCall","src":"21486:79:20"},"nodeType":"YulExpressionStatement","src":"21486:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21459:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"21468:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21455:3:20"},"nodeType":"YulFunctionCall","src":"21455:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"21480:2:20","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21451:3:20"},"nodeType":"YulFunctionCall","src":"21451:32:20"},"nodeType":"YulIf","src":"21448:119:20"},{"nodeType":"YulBlock","src":"21577:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"21592:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"21606:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21596:6:20","type":""}]},{"nodeType":"YulAssignment","src":"21621:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21656:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"21667:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21652:3:20"},"nodeType":"YulFunctionCall","src":"21652:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21676:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"21631:20:20"},"nodeType":"YulFunctionCall","src":"21631:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"21621:6:20"}]}]},{"nodeType":"YulBlock","src":"21704:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"21719:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"21733:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21723:6:20","type":""}]},{"nodeType":"YulAssignment","src":"21749:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21784:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"21795:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21780:3:20"},"nodeType":"YulFunctionCall","src":"21780:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21804:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"21759:20:20"},"nodeType":"YulFunctionCall","src":"21759:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"21749:6:20"}]}]},{"nodeType":"YulBlock","src":"21832:115:20","statements":[{"nodeType":"YulVariableDeclaration","src":"21847:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"21861:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21851:6:20","type":""}]},{"nodeType":"YulAssignment","src":"21877:60:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21909:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"21920:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21905:3:20"},"nodeType":"YulFunctionCall","src":"21905:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21929:7:20"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"21887:17:20"},"nodeType":"YulFunctionCall","src":"21887:50:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"21877:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21392:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"21403:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21415:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21423:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21431:6:20","type":""}],"src":"21341:613:20"},{"body":{"nodeType":"YulBlock","src":"22023:52:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22040:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22062:5:20"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"22045:16:20"},"nodeType":"YulFunctionCall","src":"22045:23:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22033:6:20"},"nodeType":"YulFunctionCall","src":"22033:36:20"},"nodeType":"YulExpressionStatement","src":"22033:36:20"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22011:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22018:3:20","type":""}],"src":"21960:115:20"},{"body":{"nodeType":"YulBlock","src":"22146:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22163:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22186:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22168:17:20"},"nodeType":"YulFunctionCall","src":"22168:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22156:6:20"},"nodeType":"YulFunctionCall","src":"22156:37:20"},"nodeType":"YulExpressionStatement","src":"22156:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22134:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22141:3:20","type":""}],"src":"22081:118:20"},{"body":{"nodeType":"YulBlock","src":"22329:204:20","statements":[{"nodeType":"YulAssignment","src":"22339:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22351:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"22362:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22347:3:20"},"nodeType":"YulFunctionCall","src":"22347:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22339:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22417:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22430:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"22441:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22426:3:20"},"nodeType":"YulFunctionCall","src":"22426:17:20"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"22375:41:20"},"nodeType":"YulFunctionCall","src":"22375:69:20"},"nodeType":"YulExpressionStatement","src":"22375:69:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22498:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22511:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"22522:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22507:3:20"},"nodeType":"YulFunctionCall","src":"22507:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"22454:43:20"},"nodeType":"YulFunctionCall","src":"22454:72:20"},"nodeType":"YulExpressionStatement","src":"22454:72:20"}]},"name":"abi_encode_tuple_t_uint64_t_uint256__to_t_uint64_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22293:9:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22305:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22313:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22324:4:20","type":""}],"src":"22205:328:20"},{"body":{"nodeType":"YulBlock","src":"22626:478:20","statements":[{"body":{"nodeType":"YulBlock","src":"22675:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"22677:77:20"},"nodeType":"YulFunctionCall","src":"22677:79:20"},"nodeType":"YulExpressionStatement","src":"22677:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22654:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"22662:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22650:3:20"},"nodeType":"YulFunctionCall","src":"22650:17:20"},{"name":"end","nodeType":"YulIdentifier","src":"22669:3:20"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22646:3:20"},"nodeType":"YulFunctionCall","src":"22646:27:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22639:6:20"},"nodeType":"YulFunctionCall","src":"22639:35:20"},"nodeType":"YulIf","src":"22636:122:20"},{"nodeType":"YulAssignment","src":"22767:30:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22790:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"22777:12:20"},"nodeType":"YulFunctionCall","src":"22777:20:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"22767:6:20"}]},{"body":{"nodeType":"YulBlock","src":"22840:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"22842:77:20"},"nodeType":"YulFunctionCall","src":"22842:79:20"},"nodeType":"YulExpressionStatement","src":"22842:79:20"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22812:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"22820:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22809:2:20"},"nodeType":"YulFunctionCall","src":"22809:30:20"},"nodeType":"YulIf","src":"22806:117:20"},{"nodeType":"YulAssignment","src":"22932:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22948:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"22956:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22944:3:20"},"nodeType":"YulFunctionCall","src":"22944:17:20"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"22932:8:20"}]},{"body":{"nodeType":"YulBlock","src":"23015:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"23017:77:20"},"nodeType":"YulFunctionCall","src":"23017:79:20"},"nodeType":"YulExpressionStatement","src":"23017:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"22980:8:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22994:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"23002:4:20","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"22990:3:20"},"nodeType":"YulFunctionCall","src":"22990:17:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22976:3:20"},"nodeType":"YulFunctionCall","src":"22976:32:20"},{"name":"end","nodeType":"YulIdentifier","src":"23010:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22973:2:20"},"nodeType":"YulFunctionCall","src":"22973:41:20"},"nodeType":"YulIf","src":"22970:128:20"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"22593:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"22601:3:20","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"22609:8:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"22619:6:20","type":""}],"src":"22552:552:20"},{"body":{"nodeType":"YulBlock","src":"23195:442:20","statements":[{"body":{"nodeType":"YulBlock","src":"23241:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23243:77:20"},"nodeType":"YulFunctionCall","src":"23243:79:20"},"nodeType":"YulExpressionStatement","src":"23243:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23216:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"23225:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23212:3:20"},"nodeType":"YulFunctionCall","src":"23212:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"23237:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23208:3:20"},"nodeType":"YulFunctionCall","src":"23208:32:20"},"nodeType":"YulIf","src":"23205:119:20"},{"nodeType":"YulBlock","src":"23334:296:20","statements":[{"nodeType":"YulVariableDeclaration","src":"23349:45:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23380:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"23391:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23376:3:20"},"nodeType":"YulFunctionCall","src":"23376:17:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"23363:12:20"},"nodeType":"YulFunctionCall","src":"23363:31:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23353:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"23441:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"23443:77:20"},"nodeType":"YulFunctionCall","src":"23443:79:20"},"nodeType":"YulExpressionStatement","src":"23443:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23413:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"23421:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23410:2:20"},"nodeType":"YulFunctionCall","src":"23410:30:20"},"nodeType":"YulIf","src":"23407:117:20"},{"nodeType":"YulAssignment","src":"23538:82:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23592:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"23603:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23588:3:20"},"nodeType":"YulFunctionCall","src":"23588:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23612:7:20"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"23556:31:20"},"nodeType":"YulFunctionCall","src":"23556:64:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23538:6:20"},{"name":"value1","nodeType":"YulIdentifier","src":"23546:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23157:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23168:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23180:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23188:6:20","type":""}],"src":"23110:527:20"},{"body":{"nodeType":"YulBlock","src":"23743:519:20","statements":[{"body":{"nodeType":"YulBlock","src":"23789:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23791:77:20"},"nodeType":"YulFunctionCall","src":"23791:79:20"},"nodeType":"YulExpressionStatement","src":"23791:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23764:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"23773:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23760:3:20"},"nodeType":"YulFunctionCall","src":"23760:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"23785:2:20","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23756:3:20"},"nodeType":"YulFunctionCall","src":"23756:32:20"},"nodeType":"YulIf","src":"23753:119:20"},{"nodeType":"YulBlock","src":"23882:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"23897:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"23911:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23901:6:20","type":""}]},{"nodeType":"YulAssignment","src":"23926:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23961:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"23972:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23957:3:20"},"nodeType":"YulFunctionCall","src":"23957:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23981:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"23936:20:20"},"nodeType":"YulFunctionCall","src":"23936:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23926:6:20"}]}]},{"nodeType":"YulBlock","src":"24009:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"24024:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"24038:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24028:6:20","type":""}]},{"nodeType":"YulAssignment","src":"24054:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24089:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"24100:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24085:3:20"},"nodeType":"YulFunctionCall","src":"24085:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24109:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"24064:20:20"},"nodeType":"YulFunctionCall","src":"24064:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"24054:6:20"}]}]},{"nodeType":"YulBlock","src":"24137:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"24152:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"24166:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24156:6:20","type":""}]},{"nodeType":"YulAssignment","src":"24182:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24217:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"24228:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24213:3:20"},"nodeType":"YulFunctionCall","src":"24213:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24237:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"24192:20:20"},"nodeType":"YulFunctionCall","src":"24192:53:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"24182:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23697:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23708:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23720:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23728:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23736:6:20","type":""}],"src":"23643:619:20"},{"body":{"nodeType":"YulBlock","src":"24351:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"24397:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"24399:77:20"},"nodeType":"YulFunctionCall","src":"24399:79:20"},"nodeType":"YulExpressionStatement","src":"24399:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"24372:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"24381:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24368:3:20"},"nodeType":"YulFunctionCall","src":"24368:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"24393:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24364:3:20"},"nodeType":"YulFunctionCall","src":"24364:32:20"},"nodeType":"YulIf","src":"24361:119:20"},{"nodeType":"YulBlock","src":"24490:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"24505:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"24519:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24509:6:20","type":""}]},{"nodeType":"YulAssignment","src":"24534:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24569:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"24580:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24565:3:20"},"nodeType":"YulFunctionCall","src":"24565:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24589:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"24544:20:20"},"nodeType":"YulFunctionCall","src":"24544:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"24534:6:20"}]}]},{"nodeType":"YulBlock","src":"24617:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"24632:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"24646:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24636:6:20","type":""}]},{"nodeType":"YulAssignment","src":"24662:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24697:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"24708:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24693:3:20"},"nodeType":"YulFunctionCall","src":"24693:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24717:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"24672:20:20"},"nodeType":"YulFunctionCall","src":"24672:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"24662:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24313:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"24324:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"24336:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24344:6:20","type":""}],"src":"24268:474:20"},{"body":{"nodeType":"YulBlock","src":"24776:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24793:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24796:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24786:6:20"},"nodeType":"YulFunctionCall","src":"24786:88:20"},"nodeType":"YulExpressionStatement","src":"24786:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24890:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"24893:4:20","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24883:6:20"},"nodeType":"YulFunctionCall","src":"24883:15:20"},"nodeType":"YulExpressionStatement","src":"24883:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24914:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24917:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24907:6:20"},"nodeType":"YulFunctionCall","src":"24907:15:20"},"nodeType":"YulExpressionStatement","src":"24907:15:20"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"24748:180:20"},{"body":{"nodeType":"YulBlock","src":"24962:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24979:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24982:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24972:6:20"},"nodeType":"YulFunctionCall","src":"24972:88:20"},"nodeType":"YulExpressionStatement","src":"24972:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25076:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25079:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25069:6:20"},"nodeType":"YulFunctionCall","src":"25069:15:20"},"nodeType":"YulExpressionStatement","src":"25069:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25100:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25103:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25093:6:20"},"nodeType":"YulFunctionCall","src":"25093:15:20"},"nodeType":"YulExpressionStatement","src":"25093:15:20"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"24934:180:20"},{"body":{"nodeType":"YulBlock","src":"25168:362:20","statements":[{"nodeType":"YulAssignment","src":"25178:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25201:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25183:17:20"},"nodeType":"YulFunctionCall","src":"25183:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"25178:1:20"}]},{"nodeType":"YulAssignment","src":"25212:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25235:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25217:17:20"},"nodeType":"YulFunctionCall","src":"25217:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"25212:1:20"}]},{"nodeType":"YulVariableDeclaration","src":"25246:28:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25269:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"25272:1:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"25265:3:20"},"nodeType":"YulFunctionCall","src":"25265:9:20"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"25250:11:20","type":""}]},{"nodeType":"YulAssignment","src":"25283:41:20","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"25312:11:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25294:17:20"},"nodeType":"YulFunctionCall","src":"25294:30:20"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"25283:7:20"}]},{"body":{"nodeType":"YulBlock","src":"25501:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25503:16:20"},"nodeType":"YulFunctionCall","src":"25503:18:20"},"nodeType":"YulExpressionStatement","src":"25503:18:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25434:1:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25427:6:20"},"nodeType":"YulFunctionCall","src":"25427:9:20"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25457:1:20"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"25464:7:20"},{"name":"x","nodeType":"YulIdentifier","src":"25473:1:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"25460:3:20"},"nodeType":"YulFunctionCall","src":"25460:15:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"25454:2:20"},"nodeType":"YulFunctionCall","src":"25454:22:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"25407:2:20"},"nodeType":"YulFunctionCall","src":"25407:83:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25387:6:20"},"nodeType":"YulFunctionCall","src":"25387:113:20"},"nodeType":"YulIf","src":"25384:139:20"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25151:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"25154:1:20","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"25160:7:20","type":""}],"src":"25120:410:20"},{"body":{"nodeType":"YulBlock","src":"25564:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25581:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25584:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25574:6:20"},"nodeType":"YulFunctionCall","src":"25574:88:20"},"nodeType":"YulExpressionStatement","src":"25574:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25678:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25681:4:20","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25671:6:20"},"nodeType":"YulFunctionCall","src":"25671:15:20"},"nodeType":"YulExpressionStatement","src":"25671:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25702:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25705:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25695:6:20"},"nodeType":"YulFunctionCall","src":"25695:15:20"},"nodeType":"YulExpressionStatement","src":"25695:15:20"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"25536:180:20"},{"body":{"nodeType":"YulBlock","src":"25764:143:20","statements":[{"nodeType":"YulAssignment","src":"25774:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25797:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25779:17:20"},"nodeType":"YulFunctionCall","src":"25779:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"25774:1:20"}]},{"nodeType":"YulAssignment","src":"25808:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25831:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25813:17:20"},"nodeType":"YulFunctionCall","src":"25813:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"25808:1:20"}]},{"body":{"nodeType":"YulBlock","src":"25855:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"25857:16:20"},"nodeType":"YulFunctionCall","src":"25857:18:20"},"nodeType":"YulExpressionStatement","src":"25857:18:20"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25852:1:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25845:6:20"},"nodeType":"YulFunctionCall","src":"25845:9:20"},"nodeType":"YulIf","src":"25842:35:20"},{"nodeType":"YulAssignment","src":"25887:14:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25896:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"25899:1:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"25892:3:20"},"nodeType":"YulFunctionCall","src":"25892:9:20"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"25887:1:20"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25753:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"25756:1:20","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"25762:1:20","type":""}],"src":"25722:185:20"},{"body":{"nodeType":"YulBlock","src":"26009:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26026:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"26031:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26019:6:20"},"nodeType":"YulFunctionCall","src":"26019:19:20"},"nodeType":"YulExpressionStatement","src":"26019:19:20"},{"nodeType":"YulAssignment","src":"26047:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26066:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"26071:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26062:3:20"},"nodeType":"YulFunctionCall","src":"26062:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26047:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25981:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"25986:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"25997:11:20","type":""}],"src":"25913:169:20"},{"body":{"nodeType":"YulBlock","src":"26194:60:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26216:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"26224:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26212:3:20"},"nodeType":"YulFunctionCall","src":"26212:14:20"},{"hexValue":"53656e646572466565546f6f48696768","kind":"string","nodeType":"YulLiteral","src":"26228:18:20","type":"","value":"SenderFeeTooHigh"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26205:6:20"},"nodeType":"YulFunctionCall","src":"26205:42:20"},"nodeType":"YulExpressionStatement","src":"26205:42:20"}]},"name":"store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26186:6:20","type":""}],"src":"26088:166:20"},{"body":{"nodeType":"YulBlock","src":"26406:220:20","statements":[{"nodeType":"YulAssignment","src":"26416:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26482:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"26487:2:20","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26423:58:20"},"nodeType":"YulFunctionCall","src":"26423:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26416:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26588:3:20"}],"functionName":{"name":"store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4","nodeType":"YulIdentifier","src":"26499:88:20"},"nodeType":"YulFunctionCall","src":"26499:93:20"},"nodeType":"YulExpressionStatement","src":"26499:93:20"},{"nodeType":"YulAssignment","src":"26601:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26612:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"26617:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26608:3:20"},"nodeType":"YulFunctionCall","src":"26608:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26601:3:20"}]}]},"name":"abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26394:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26402:3:20","type":""}],"src":"26260:366:20"},{"body":{"nodeType":"YulBlock","src":"26803:248:20","statements":[{"nodeType":"YulAssignment","src":"26813:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26825:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"26836:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26821:3:20"},"nodeType":"YulFunctionCall","src":"26821:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26813:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26860:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"26871:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26856:3:20"},"nodeType":"YulFunctionCall","src":"26856:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26879:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"26885:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26875:3:20"},"nodeType":"YulFunctionCall","src":"26875:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26849:6:20"},"nodeType":"YulFunctionCall","src":"26849:47:20"},"nodeType":"YulExpressionStatement","src":"26849:47:20"},{"nodeType":"YulAssignment","src":"26905:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27039:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26913:124:20"},"nodeType":"YulFunctionCall","src":"26913:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26905:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26783:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26798:4:20","type":""}],"src":"26632:419:20"},{"body":{"nodeType":"YulBlock","src":"27211:288:20","statements":[{"nodeType":"YulAssignment","src":"27221:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27233:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"27244:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27229:3:20"},"nodeType":"YulFunctionCall","src":"27229:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27221:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27301:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27314:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"27325:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27310:3:20"},"nodeType":"YulFunctionCall","src":"27310:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"27257:43:20"},"nodeType":"YulFunctionCall","src":"27257:71:20"},"nodeType":"YulExpressionStatement","src":"27257:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27382:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27395:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"27406:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27391:3:20"},"nodeType":"YulFunctionCall","src":"27391:18:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"27338:43:20"},"nodeType":"YulFunctionCall","src":"27338:72:20"},"nodeType":"YulExpressionStatement","src":"27338:72:20"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"27464:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27477:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"27488:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27473:3:20"},"nodeType":"YulFunctionCall","src":"27473:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"27420:43:20"},"nodeType":"YulFunctionCall","src":"27420:72:20"},"nodeType":"YulExpressionStatement","src":"27420:72:20"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27167:9:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"27179:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27187:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27195:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27206:4:20","type":""}],"src":"27057:442:20"},{"body":{"nodeType":"YulBlock","src":"27565:77:20","statements":[{"nodeType":"YulAssignment","src":"27575:22:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27590:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27584:5:20"},"nodeType":"YulFunctionCall","src":"27584:13:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27575:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27630:5:20"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"27606:23:20"},"nodeType":"YulFunctionCall","src":"27606:30:20"},"nodeType":"YulExpressionStatement","src":"27606:30:20"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"27543:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"27551:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"27559:5:20","type":""}],"src":"27505:137:20"},{"body":{"nodeType":"YulBlock","src":"27722:271:20","statements":[{"body":{"nodeType":"YulBlock","src":"27768:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"27770:77:20"},"nodeType":"YulFunctionCall","src":"27770:79:20"},"nodeType":"YulExpressionStatement","src":"27770:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"27743:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"27752:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27739:3:20"},"nodeType":"YulFunctionCall","src":"27739:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"27764:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"27735:3:20"},"nodeType":"YulFunctionCall","src":"27735:32:20"},"nodeType":"YulIf","src":"27732:119:20"},{"nodeType":"YulBlock","src":"27861:125:20","statements":[{"nodeType":"YulVariableDeclaration","src":"27876:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"27890:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"27880:6:20","type":""}]},{"nodeType":"YulAssignment","src":"27905:71:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27948:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"27959:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27944:3:20"},"nodeType":"YulFunctionCall","src":"27944:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"27968:7:20"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"27915:28:20"},"nodeType":"YulFunctionCall","src":"27915:61:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"27905:6:20"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27692:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"27703:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"27715:6:20","type":""}],"src":"27648:345:20"},{"body":{"nodeType":"YulBlock","src":"28042:190:20","statements":[{"nodeType":"YulAssignment","src":"28052:33:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28079:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28061:17:20"},"nodeType":"YulFunctionCall","src":"28061:24:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"28052:5:20"}]},{"body":{"nodeType":"YulBlock","src":"28175:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"28177:16:20"},"nodeType":"YulFunctionCall","src":"28177:18:20"},"nodeType":"YulExpressionStatement","src":"28177:18:20"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28100:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"28107:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28097:2:20"},"nodeType":"YulFunctionCall","src":"28097:77:20"},"nodeType":"YulIf","src":"28094:103:20"},{"nodeType":"YulAssignment","src":"28206:20:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28217:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"28224:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28213:3:20"},"nodeType":"YulFunctionCall","src":"28213:13:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"28206:3:20"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28028:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"28038:3:20","type":""}],"src":"27999:233:20"},{"body":{"nodeType":"YulBlock","src":"28364:206:20","statements":[{"nodeType":"YulAssignment","src":"28374:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28386:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28397:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28382:3:20"},"nodeType":"YulFunctionCall","src":"28382:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28374:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28454:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28467:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28478:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28463:3:20"},"nodeType":"YulFunctionCall","src":"28463:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28410:43:20"},"nodeType":"YulFunctionCall","src":"28410:71:20"},"nodeType":"YulExpressionStatement","src":"28410:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28535:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28548:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28559:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28544:3:20"},"nodeType":"YulFunctionCall","src":"28544:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28491:43:20"},"nodeType":"YulFunctionCall","src":"28491:72:20"},"nodeType":"YulExpressionStatement","src":"28491:72:20"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28328:9:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28340:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28348:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28359:4:20","type":""}],"src":"28238:332:20"},{"body":{"nodeType":"YulBlock","src":"28608:28:20","statements":[{"nodeType":"YulAssignment","src":"28618:12:20","value":{"name":"value","nodeType":"YulIdentifier","src":"28625:5:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"28618:3:20"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28594:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"28604:3:20","type":""}],"src":"28576:60:20"},{"body":{"nodeType":"YulBlock","src":"28701:81:20","statements":[{"nodeType":"YulAssignment","src":"28711:65:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28768:5:20"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"28751:16:20"},"nodeType":"YulFunctionCall","src":"28751:23:20"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"28742:8:20"},"nodeType":"YulFunctionCall","src":"28742:33:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28724:17:20"},"nodeType":"YulFunctionCall","src":"28724:52:20"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"28711:9:20"}]}]},"name":"convert_t_uint96_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28681:5:20","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"28691:9:20","type":""}],"src":"28642:140:20"},{"body":{"nodeType":"YulBlock","src":"28852:65:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28869:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28904:5:20"}],"functionName":{"name":"convert_t_uint96_to_t_uint256","nodeType":"YulIdentifier","src":"28874:29:20"},"nodeType":"YulFunctionCall","src":"28874:36:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28862:6:20"},"nodeType":"YulFunctionCall","src":"28862:49:20"},"nodeType":"YulExpressionStatement","src":"28862:49:20"}]},"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28840:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"28847:3:20","type":""}],"src":"28788:129:20"},{"body":{"nodeType":"YulBlock","src":"28987:82:20","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"29010:3:20"},{"name":"src","nodeType":"YulIdentifier","src":"29015:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"29020:6:20"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"28997:12:20"},"nodeType":"YulFunctionCall","src":"28997:30:20"},"nodeType":"YulExpressionStatement","src":"28997:30:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"29047:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"29052:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29043:3:20"},"nodeType":"YulFunctionCall","src":"29043:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"29061:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29036:6:20"},"nodeType":"YulFunctionCall","src":"29036:27:20"},"nodeType":"YulExpressionStatement","src":"29036:27:20"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"28969:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"28974:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"28979:6:20","type":""}],"src":"28923:146:20"},{"body":{"nodeType":"YulBlock","src":"29201:215:20","statements":[{"nodeType":"YulAssignment","src":"29211:78:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29277:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"29282:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29218:58:20"},"nodeType":"YulFunctionCall","src":"29218:71:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29211:3:20"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"29336:5:20"},{"name":"pos","nodeType":"YulIdentifier","src":"29343:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"29348:6:20"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"29299:36:20"},"nodeType":"YulFunctionCall","src":"29299:56:20"},"nodeType":"YulExpressionStatement","src":"29299:56:20"},{"nodeType":"YulAssignment","src":"29364:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29375:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"29402:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"29380:21:20"},"nodeType":"YulFunctionCall","src":"29380:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29371:3:20"},"nodeType":"YulFunctionCall","src":"29371:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29364:3:20"}]}]},"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"29174:5:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"29181:6:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"29189:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29197:3:20","type":""}],"src":"29099:317:20"},{"body":{"nodeType":"YulBlock","src":"29633:451:20","statements":[{"nodeType":"YulAssignment","src":"29643:27:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29655:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29666:3:20","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29651:3:20"},"nodeType":"YulFunctionCall","src":"29651:19:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29643:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29723:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29736:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29747:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29732:3:20"},"nodeType":"YulFunctionCall","src":"29732:17:20"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"29680:42:20"},"nodeType":"YulFunctionCall","src":"29680:70:20"},"nodeType":"YulExpressionStatement","src":"29680:70:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29804:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29817:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29828:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29813:3:20"},"nodeType":"YulFunctionCall","src":"29813:18:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29760:43:20"},"nodeType":"YulFunctionCall","src":"29760:72:20"},"nodeType":"YulExpressionStatement","src":"29760:72:20"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"29886:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29899:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29910:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29895:3:20"},"nodeType":"YulFunctionCall","src":"29895:18:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29842:43:20"},"nodeType":"YulFunctionCall","src":"29842:72:20"},"nodeType":"YulExpressionStatement","src":"29842:72:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29935:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29946:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29931:3:20"},"nodeType":"YulFunctionCall","src":"29931:18:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29955:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"29961:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29951:3:20"},"nodeType":"YulFunctionCall","src":"29951:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29924:6:20"},"nodeType":"YulFunctionCall","src":"29924:48:20"},"nodeType":"YulExpressionStatement","src":"29924:48:20"},{"nodeType":"YulAssignment","src":"29981:96:20","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"30055:6:20"},{"name":"value4","nodeType":"YulIdentifier","src":"30063:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"30072:4:20"}],"functionName":{"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29989:65:20"},"nodeType":"YulFunctionCall","src":"29989:88:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29981:4:20"}]}]},"name":"abi_encode_tuple_t_uint96_t_bytes32_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_bytes32_t_bytes32_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29573:9:20","type":""},{"name":"value4","nodeType":"YulTypedName","src":"29585:6:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"29593:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29601:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29609:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29617:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29628:4:20","type":""}],"src":"29422:662:20"},{"body":{"nodeType":"YulBlock","src":"30118:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30135:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30138:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30128:6:20"},"nodeType":"YulFunctionCall","src":"30128:88:20"},"nodeType":"YulExpressionStatement","src":"30128:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30232:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"30235:4:20","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30225:6:20"},"nodeType":"YulFunctionCall","src":"30225:15:20"},"nodeType":"YulExpressionStatement","src":"30225:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30256:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30259:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30249:6:20"},"nodeType":"YulFunctionCall","src":"30249:15:20"},"nodeType":"YulExpressionStatement","src":"30249:15:20"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"30090:180:20"},{"body":{"nodeType":"YulBlock","src":"30327:269:20","statements":[{"nodeType":"YulAssignment","src":"30337:22:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"30351:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"30357:1:20","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"30347:3:20"},"nodeType":"YulFunctionCall","src":"30347:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"30337:6:20"}]},{"nodeType":"YulVariableDeclaration","src":"30368:38:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"30398:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"30404:1:20","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30394:3:20"},"nodeType":"YulFunctionCall","src":"30394:12:20"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"30372:18:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"30445:51:20","statements":[{"nodeType":"YulAssignment","src":"30459:27:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"30473:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"30481:4:20","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30469:3:20"},"nodeType":"YulFunctionCall","src":"30469:17:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"30459:6:20"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"30425:18:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30418:6:20"},"nodeType":"YulFunctionCall","src":"30418:26:20"},"nodeType":"YulIf","src":"30415:81:20"},{"body":{"nodeType":"YulBlock","src":"30548:42:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"30562:16:20"},"nodeType":"YulFunctionCall","src":"30562:18:20"},"nodeType":"YulExpressionStatement","src":"30562:18:20"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"30512:18:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"30535:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"30543:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"30532:2:20"},"nodeType":"YulFunctionCall","src":"30532:14:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"30509:2:20"},"nodeType":"YulFunctionCall","src":"30509:38:20"},"nodeType":"YulIf","src":"30506:84:20"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"30311:4:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"30320:6:20","type":""}],"src":"30276:320:20"},{"body":{"nodeType":"YulBlock","src":"30708:58:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30730:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"30738:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30726:3:20"},"nodeType":"YulFunctionCall","src":"30726:14:20"},{"hexValue":"4f6e6c7941676772656761746f72","kind":"string","nodeType":"YulLiteral","src":"30742:16:20","type":"","value":"OnlyAggregator"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30719:6:20"},"nodeType":"YulFunctionCall","src":"30719:40:20"},"nodeType":"YulExpressionStatement","src":"30719:40:20"}]},"name":"store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30700:6:20","type":""}],"src":"30602:164:20"},{"body":{"nodeType":"YulBlock","src":"30918:220:20","statements":[{"nodeType":"YulAssignment","src":"30928:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30994:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"30999:2:20","type":"","value":"14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30935:58:20"},"nodeType":"YulFunctionCall","src":"30935:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30928:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31100:3:20"}],"functionName":{"name":"store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","nodeType":"YulIdentifier","src":"31011:88:20"},"nodeType":"YulFunctionCall","src":"31011:93:20"},"nodeType":"YulExpressionStatement","src":"31011:93:20"},{"nodeType":"YulAssignment","src":"31113:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31124:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"31129:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31120:3:20"},"nodeType":"YulFunctionCall","src":"31120:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31113:3:20"}]}]},"name":"abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30906:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30914:3:20","type":""}],"src":"30772:366:20"},{"body":{"nodeType":"YulBlock","src":"31315:248:20","statements":[{"nodeType":"YulAssignment","src":"31325:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31337:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"31348:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31333:3:20"},"nodeType":"YulFunctionCall","src":"31333:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31325:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31372:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"31383:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31368:3:20"},"nodeType":"YulFunctionCall","src":"31368:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31391:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"31397:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31387:3:20"},"nodeType":"YulFunctionCall","src":"31387:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31361:6:20"},"nodeType":"YulFunctionCall","src":"31361:47:20"},"nodeType":"YulExpressionStatement","src":"31361:47:20"},{"nodeType":"YulAssignment","src":"31417:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31551:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31425:124:20"},"nodeType":"YulFunctionCall","src":"31425:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31417:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31295:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31310:4:20","type":""}],"src":"31144:419:20"},{"body":{"nodeType":"YulBlock","src":"31675:58:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31697:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"31705:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31693:3:20"},"nodeType":"YulFunctionCall","src":"31693:14:20"},{"hexValue":"4f7264657246756c66696c6c6564","kind":"string","nodeType":"YulLiteral","src":"31709:16:20","type":"","value":"OrderFulfilled"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31686:6:20"},"nodeType":"YulFunctionCall","src":"31686:40:20"},"nodeType":"YulExpressionStatement","src":"31686:40:20"}]},"name":"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31667:6:20","type":""}],"src":"31569:164:20"},{"body":{"nodeType":"YulBlock","src":"31885:220:20","statements":[{"nodeType":"YulAssignment","src":"31895:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31961:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"31966:2:20","type":"","value":"14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31902:58:20"},"nodeType":"YulFunctionCall","src":"31902:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31895:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32067:3:20"}],"functionName":{"name":"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","nodeType":"YulIdentifier","src":"31978:88:20"},"nodeType":"YulFunctionCall","src":"31978:93:20"},"nodeType":"YulExpressionStatement","src":"31978:93:20"},{"nodeType":"YulAssignment","src":"32080:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32091:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"32096:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32087:3:20"},"nodeType":"YulFunctionCall","src":"32087:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32080:3:20"}]}]},"name":"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31873:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31881:3:20","type":""}],"src":"31739:366:20"},{"body":{"nodeType":"YulBlock","src":"32282:248:20","statements":[{"nodeType":"YulAssignment","src":"32292:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32304:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"32315:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32300:3:20"},"nodeType":"YulFunctionCall","src":"32300:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32292:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32339:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"32350:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32335:3:20"},"nodeType":"YulFunctionCall","src":"32335:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32358:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"32364:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32354:3:20"},"nodeType":"YulFunctionCall","src":"32354:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32328:6:20"},"nodeType":"YulFunctionCall","src":"32328:47:20"},"nodeType":"YulExpressionStatement","src":"32328:47:20"},{"nodeType":"YulAssignment","src":"32384:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32518:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32392:124:20"},"nodeType":"YulFunctionCall","src":"32392:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32384:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32262:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32277:4:20","type":""}],"src":"32111:419:20"},{"body":{"nodeType":"YulBlock","src":"32580:172:20","statements":[{"nodeType":"YulAssignment","src":"32590:24:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"32612:1:20"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"32595:16:20"},"nodeType":"YulFunctionCall","src":"32595:19:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"32590:1:20"}]},{"nodeType":"YulAssignment","src":"32623:24:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"32645:1:20"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"32628:16:20"},"nodeType":"YulFunctionCall","src":"32628:19:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"32623:1:20"}]},{"nodeType":"YulAssignment","src":"32656:17:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"32668:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"32671:1:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32664:3:20"},"nodeType":"YulFunctionCall","src":"32664:9:20"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"32656:4:20"}]},{"body":{"nodeType":"YulBlock","src":"32723:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"32725:16:20"},"nodeType":"YulFunctionCall","src":"32725:18:20"},"nodeType":"YulExpressionStatement","src":"32725:18:20"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"32689:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"32695:26:20","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"32686:2:20"},"nodeType":"YulFunctionCall","src":"32686:36:20"},"nodeType":"YulIf","src":"32683:62:20"}]},"name":"checked_sub_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"32566:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"32569:1:20","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"32575:4:20","type":""}],"src":"32536:216:20"},{"body":{"nodeType":"YulBlock","src":"32816:80:20","statements":[{"nodeType":"YulAssignment","src":"32826:64:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32882:5:20"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"32865:16:20"},"nodeType":"YulFunctionCall","src":"32865:23:20"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"32856:8:20"},"nodeType":"YulFunctionCall","src":"32856:33:20"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"32839:16:20"},"nodeType":"YulFunctionCall","src":"32839:51:20"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"32826:9:20"}]}]},"name":"convert_t_uint64_to_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32796:5:20","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"32806:9:20","type":""}],"src":"32758:138:20"},{"body":{"nodeType":"YulBlock","src":"32965:64:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32982:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33016:5:20"}],"functionName":{"name":"convert_t_uint64_to_t_uint96","nodeType":"YulIdentifier","src":"32987:28:20"},"nodeType":"YulFunctionCall","src":"32987:35:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32975:6:20"},"nodeType":"YulFunctionCall","src":"32975:48:20"},"nodeType":"YulExpressionStatement","src":"32975:48:20"}]},"name":"abi_encode_t_uint64_to_t_uint96_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32953:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"32960:3:20","type":""}],"src":"32902:127:20"},{"body":{"nodeType":"YulBlock","src":"33187:286:20","statements":[{"nodeType":"YulAssignment","src":"33197:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33209:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"33220:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33205:3:20"},"nodeType":"YulFunctionCall","src":"33205:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33197:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"33277:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33290:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"33301:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33286:3:20"},"nodeType":"YulFunctionCall","src":"33286:17:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"33233:43:20"},"nodeType":"YulFunctionCall","src":"33233:71:20"},"nodeType":"YulExpressionStatement","src":"33233:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"33358:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33371:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"33382:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33367:3:20"},"nodeType":"YulFunctionCall","src":"33367:18:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"33314:43:20"},"nodeType":"YulFunctionCall","src":"33314:72:20"},"nodeType":"YulExpressionStatement","src":"33314:72:20"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"33438:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33451:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"33462:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33447:3:20"},"nodeType":"YulFunctionCall","src":"33447:18:20"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint96_fromStack","nodeType":"YulIdentifier","src":"33396:41:20"},"nodeType":"YulFunctionCall","src":"33396:70:20"},"nodeType":"YulExpressionStatement","src":"33396:70:20"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_uint64__to_t_bytes32_t_bytes32_t_uint96__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33143:9:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"33155:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"33163:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"33171:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33182:4:20","type":""}],"src":"33035:438:20"},{"body":{"nodeType":"YulBlock","src":"33585:66:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33607:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"33615:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33603:3:20"},"nodeType":"YulFunctionCall","src":"33603:14:20"},{"hexValue":"50617963726573743a207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"33619:24:20","type":"","value":"Paycrest: zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33596:6:20"},"nodeType":"YulFunctionCall","src":"33596:48:20"},"nodeType":"YulExpressionStatement","src":"33596:48:20"}]},"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33577:6:20","type":""}],"src":"33479:172:20"},{"body":{"nodeType":"YulBlock","src":"33803:220:20","statements":[{"nodeType":"YulAssignment","src":"33813:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33879:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"33884:2:20","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33820:58:20"},"nodeType":"YulFunctionCall","src":"33820:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33813:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33985:3:20"}],"functionName":{"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulIdentifier","src":"33896:88:20"},"nodeType":"YulFunctionCall","src":"33896:93:20"},"nodeType":"YulExpressionStatement","src":"33896:93:20"},{"nodeType":"YulAssignment","src":"33998:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34009:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"34014:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34005:3:20"},"nodeType":"YulFunctionCall","src":"34005:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33998:3:20"}]}]},"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33791:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33799:3:20","type":""}],"src":"33657:366:20"},{"body":{"nodeType":"YulBlock","src":"34200:248:20","statements":[{"nodeType":"YulAssignment","src":"34210:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34222:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34233:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34218:3:20"},"nodeType":"YulFunctionCall","src":"34218:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34210:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34257:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34268:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34253:3:20"},"nodeType":"YulFunctionCall","src":"34253:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34276:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"34282:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34272:3:20"},"nodeType":"YulFunctionCall","src":"34272:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34246:6:20"},"nodeType":"YulFunctionCall","src":"34246:47:20"},"nodeType":"YulExpressionStatement","src":"34246:47:20"},{"nodeType":"YulAssignment","src":"34302:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34436:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34310:124:20"},"nodeType":"YulFunctionCall","src":"34310:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34302:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34180:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34195:4:20","type":""}],"src":"34029:419:20"},{"body":{"nodeType":"YulBlock","src":"34550:122:20","statements":[{"nodeType":"YulAssignment","src":"34560:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34572:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34583:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34568:3:20"},"nodeType":"YulFunctionCall","src":"34568:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34560:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"34638:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34651:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34662:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34647:3:20"},"nodeType":"YulFunctionCall","src":"34647:17:20"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"34596:41:20"},"nodeType":"YulFunctionCall","src":"34596:69:20"},"nodeType":"YulExpressionStatement","src":"34596:69:20"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34522:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"34534:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34545:4:20","type":""}],"src":"34454:218:20"},{"body":{"nodeType":"YulBlock","src":"34826:282:20","statements":[{"nodeType":"YulAssignment","src":"34836:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34848:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34859:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34844:3:20"},"nodeType":"YulFunctionCall","src":"34844:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34836:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"34916:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34929:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34940:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34925:3:20"},"nodeType":"YulFunctionCall","src":"34925:17:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"34872:43:20"},"nodeType":"YulFunctionCall","src":"34872:71:20"},"nodeType":"YulExpressionStatement","src":"34872:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"34997:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35010:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"35021:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35006:3:20"},"nodeType":"YulFunctionCall","src":"35006:18:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"34953:43:20"},"nodeType":"YulFunctionCall","src":"34953:72:20"},"nodeType":"YulExpressionStatement","src":"34953:72:20"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"35073:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35086:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"35097:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35082:3:20"},"nodeType":"YulFunctionCall","src":"35082:18:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"35035:37:20"},"nodeType":"YulFunctionCall","src":"35035:66:20"},"nodeType":"YulExpressionStatement","src":"35035:66:20"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34782:9:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"34794:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"34802:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"34810:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34821:4:20","type":""}],"src":"34678:430:20"},{"body":{"nodeType":"YulBlock","src":"35220:127:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35242:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"35250:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35238:3:20"},"nodeType":"YulFunctionCall","src":"35238:14:20"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"35254:34:20","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35231:6:20"},"nodeType":"YulFunctionCall","src":"35231:58:20"},"nodeType":"YulExpressionStatement","src":"35231:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35310:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"35318:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35306:3:20"},"nodeType":"YulFunctionCall","src":"35306:15:20"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"35323:16:20","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35299:6:20"},"nodeType":"YulFunctionCall","src":"35299:41:20"},"nodeType":"YulExpressionStatement","src":"35299:41:20"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35212:6:20","type":""}],"src":"35114:233:20"},{"body":{"nodeType":"YulBlock","src":"35499:220:20","statements":[{"nodeType":"YulAssignment","src":"35509:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35575:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"35580:2:20","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35516:58:20"},"nodeType":"YulFunctionCall","src":"35516:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"35509:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35681:3:20"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"35592:88:20"},"nodeType":"YulFunctionCall","src":"35592:93:20"},"nodeType":"YulExpressionStatement","src":"35592:93:20"},{"nodeType":"YulAssignment","src":"35694:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35705:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"35710:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35701:3:20"},"nodeType":"YulFunctionCall","src":"35701:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"35694:3:20"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"35487:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"35495:3:20","type":""}],"src":"35353:366:20"},{"body":{"nodeType":"YulBlock","src":"35896:248:20","statements":[{"nodeType":"YulAssignment","src":"35906:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35918:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"35929:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35914:3:20"},"nodeType":"YulFunctionCall","src":"35914:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35906:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35953:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"35964:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35949:3:20"},"nodeType":"YulFunctionCall","src":"35949:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35972:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"35978:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35968:3:20"},"nodeType":"YulFunctionCall","src":"35968:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35942:6:20"},"nodeType":"YulFunctionCall","src":"35942:47:20"},"nodeType":"YulExpressionStatement","src":"35942:47:20"},{"nodeType":"YulAssignment","src":"35998:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36132:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36006:124:20"},"nodeType":"YulFunctionCall","src":"36006:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35998:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35876:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35891:4:20","type":""}],"src":"35725:419:20"},{"body":{"nodeType":"YulBlock","src":"36203:32:20","statements":[{"nodeType":"YulAssignment","src":"36213:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"36224:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"36213:7:20"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36185:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"36195:7:20","type":""}],"src":"36150:85:20"},{"body":{"nodeType":"YulBlock","src":"36284:43:20","statements":[{"nodeType":"YulAssignment","src":"36294:27:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36309:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"36316:4:20","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"36305:3:20"},"nodeType":"YulFunctionCall","src":"36305:16:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"36294:7:20"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36266:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"36276:7:20","type":""}],"src":"36241:86:20"},{"body":{"nodeType":"YulBlock","src":"36399:88:20","statements":[{"nodeType":"YulAssignment","src":"36409:72:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36473:5:20"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"36447:25:20"},"nodeType":"YulFunctionCall","src":"36447:32:20"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"36438:8:20"},"nodeType":"YulFunctionCall","src":"36438:42:20"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"36422:15:20"},"nodeType":"YulFunctionCall","src":"36422:59:20"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"36409:9:20"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36379:5:20","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"36389:9:20","type":""}],"src":"36333:154:20"},{"body":{"nodeType":"YulBlock","src":"36564:72:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36581:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36623:5:20"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"36586:36:20"},"nodeType":"YulFunctionCall","src":"36586:43:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36574:6:20"},"nodeType":"YulFunctionCall","src":"36574:56:20"},"nodeType":"YulExpressionStatement","src":"36574:56:20"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36552:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"36559:3:20","type":""}],"src":"36493:143:20"},{"body":{"nodeType":"YulBlock","src":"36746:130:20","statements":[{"nodeType":"YulAssignment","src":"36756:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36768:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"36779:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36764:3:20"},"nodeType":"YulFunctionCall","src":"36764:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36756:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"36842:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36855:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"36866:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36851:3:20"},"nodeType":"YulFunctionCall","src":"36851:17:20"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"36792:49:20"},"nodeType":"YulFunctionCall","src":"36792:77:20"},"nodeType":"YulExpressionStatement","src":"36792:77:20"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36718:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"36730:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36741:4:20","type":""}],"src":"36642:234:20"},{"body":{"nodeType":"YulBlock","src":"36947:31:20","statements":[{"nodeType":"YulAssignment","src":"36958:13:20","value":{"name":"len","nodeType":"YulIdentifier","src":"36968:3:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"36958:6:20"}]}]},"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36925:5:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"36932:3:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"36940:6:20","type":""}],"src":"36882:96:20"},{"body":{"nodeType":"YulBlock","src":"37037:87:20","statements":[{"nodeType":"YulAssignment","src":"37047:11:20","value":{"name":"ptr","nodeType":"YulIdentifier","src":"37055:3:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"37047:4:20"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37075:1:20","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"37078:3:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37068:6:20"},"nodeType":"YulFunctionCall","src":"37068:14:20"},"nodeType":"YulExpressionStatement","src":"37068:14:20"},{"nodeType":"YulAssignment","src":"37091:26:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37109:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"37112:4:20","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"37099:9:20"},"nodeType":"YulFunctionCall","src":"37099:18:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"37091:4:20"}]}]},"name":"array_dataslot_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"37024:3:20","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"37032:4:20","type":""}],"src":"36984:140:20"},{"body":{"nodeType":"YulBlock","src":"37174:49:20","statements":[{"nodeType":"YulAssignment","src":"37184:33:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37202:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"37209:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37198:3:20"},"nodeType":"YulFunctionCall","src":"37198:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"37214:2:20","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"37194:3:20"},"nodeType":"YulFunctionCall","src":"37194:23:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"37184:6:20"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37157:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"37167:6:20","type":""}],"src":"37130:93:20"},{"body":{"nodeType":"YulBlock","src":"37282:54:20","statements":[{"nodeType":"YulAssignment","src":"37292:37:20","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"37317:4:20"},{"name":"value","nodeType":"YulIdentifier","src":"37323:5:20"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"37313:3:20"},"nodeType":"YulFunctionCall","src":"37313:16:20"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"37292:8:20"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"37257:4:20","type":""},{"name":"value","nodeType":"YulTypedName","src":"37263:5:20","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"37273:8:20","type":""}],"src":"37229:107:20"},{"body":{"nodeType":"YulBlock","src":"37418:317:20","statements":[{"nodeType":"YulVariableDeclaration","src":"37428:35:20","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"37449:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"37461:1:20","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"37445:3:20"},"nodeType":"YulFunctionCall","src":"37445:18:20"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"37432:9:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"37472:109:20","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"37503:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"37514:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"37484:18:20"},"nodeType":"YulFunctionCall","src":"37484:97:20"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"37476:4:20","type":""}]},{"nodeType":"YulAssignment","src":"37590:51:20","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"37621:9:20"},{"name":"toInsert","nodeType":"YulIdentifier","src":"37632:8:20"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"37602:18:20"},"nodeType":"YulFunctionCall","src":"37602:39:20"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"37590:8:20"}]},{"nodeType":"YulAssignment","src":"37650:30:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37663:5:20"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"37674:4:20"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"37670:3:20"},"nodeType":"YulFunctionCall","src":"37670:9:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"37659:3:20"},"nodeType":"YulFunctionCall","src":"37659:21:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"37650:5:20"}]},{"nodeType":"YulAssignment","src":"37689:40:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37702:5:20"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"37713:8:20"},{"name":"mask","nodeType":"YulIdentifier","src":"37723:4:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"37709:3:20"},"nodeType":"YulFunctionCall","src":"37709:19:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"37699:2:20"},"nodeType":"YulFunctionCall","src":"37699:30:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"37689:6:20"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37379:5:20","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"37386:10:20","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"37398:8:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"37411:6:20","type":""}],"src":"37342:393:20"},{"body":{"nodeType":"YulBlock","src":"37801:82:20","statements":[{"nodeType":"YulAssignment","src":"37811:66:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37869:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"37851:17:20"},"nodeType":"YulFunctionCall","src":"37851:24:20"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"37842:8:20"},"nodeType":"YulFunctionCall","src":"37842:34:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"37824:17:20"},"nodeType":"YulFunctionCall","src":"37824:53:20"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"37811:9:20"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37781:5:20","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"37791:9:20","type":""}],"src":"37741:142:20"},{"body":{"nodeType":"YulBlock","src":"37936:28:20","statements":[{"nodeType":"YulAssignment","src":"37946:12:20","value":{"name":"value","nodeType":"YulIdentifier","src":"37953:5:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"37946:3:20"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37922:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"37932:3:20","type":""}],"src":"37889:75:20"},{"body":{"nodeType":"YulBlock","src":"38046:193:20","statements":[{"nodeType":"YulVariableDeclaration","src":"38056:63:20","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"38111:7:20"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"38080:30:20"},"nodeType":"YulFunctionCall","src":"38080:39:20"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"38060:16:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"38135:4:20"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"38175:4:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"38169:5:20"},"nodeType":"YulFunctionCall","src":"38169:11:20"},{"name":"offset","nodeType":"YulIdentifier","src":"38182:6:20"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"38214:16:20"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"38190:23:20"},"nodeType":"YulFunctionCall","src":"38190:41:20"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"38141:27:20"},"nodeType":"YulFunctionCall","src":"38141:91:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"38128:6:20"},"nodeType":"YulFunctionCall","src":"38128:105:20"},"nodeType":"YulExpressionStatement","src":"38128:105:20"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"38023:4:20","type":""},{"name":"offset","nodeType":"YulTypedName","src":"38029:6:20","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"38037:7:20","type":""}],"src":"37970:269:20"},{"body":{"nodeType":"YulBlock","src":"38294:24:20","statements":[{"nodeType":"YulAssignment","src":"38304:8:20","value":{"kind":"number","nodeType":"YulLiteral","src":"38311:1:20","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"38304:3:20"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"38290:3:20","type":""}],"src":"38245:73:20"},{"body":{"nodeType":"YulBlock","src":"38377:136:20","statements":[{"nodeType":"YulVariableDeclaration","src":"38387:46:20","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"38401:30:20"},"nodeType":"YulFunctionCall","src":"38401:32:20"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"38391:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"38486:4:20"},{"name":"offset","nodeType":"YulIdentifier","src":"38492:6:20"},{"name":"zero_0","nodeType":"YulIdentifier","src":"38500:6:20"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"38442:43:20"},"nodeType":"YulFunctionCall","src":"38442:65:20"},"nodeType":"YulExpressionStatement","src":"38442:65:20"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"38363:4:20","type":""},{"name":"offset","nodeType":"YulTypedName","src":"38369:6:20","type":""}],"src":"38324:189:20"},{"body":{"nodeType":"YulBlock","src":"38569:136:20","statements":[{"body":{"nodeType":"YulBlock","src":"38636:63:20","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"38680:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"38687:1:20","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"38650:29:20"},"nodeType":"YulFunctionCall","src":"38650:39:20"},"nodeType":"YulExpressionStatement","src":"38650:39:20"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"38589:5:20"},{"name":"end","nodeType":"YulIdentifier","src":"38596:3:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"38586:2:20"},"nodeType":"YulFunctionCall","src":"38586:14:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"38601:26:20","statements":[{"nodeType":"YulAssignment","src":"38603:22:20","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"38616:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"38623:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38612:3:20"},"nodeType":"YulFunctionCall","src":"38612:13:20"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"38603:5:20"}]}]},"pre":{"nodeType":"YulBlock","src":"38583:2:20","statements":[]},"src":"38579:120:20"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"38557:5:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"38564:3:20","type":""}],"src":"38519:186:20"},{"body":{"nodeType":"YulBlock","src":"38789:463:20","statements":[{"body":{"nodeType":"YulBlock","src":"38815:430:20","statements":[{"nodeType":"YulVariableDeclaration","src":"38829:53:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"38876:5:20"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"38845:30:20"},"nodeType":"YulFunctionCall","src":"38845:37:20"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"38833:8:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"38895:63:20","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"38918:8:20"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"38946:10:20"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"38928:17:20"},"nodeType":"YulFunctionCall","src":"38928:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38914:3:20"},"nodeType":"YulFunctionCall","src":"38914:44:20"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"38899:11:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"39115:27:20","statements":[{"nodeType":"YulAssignment","src":"39117:23:20","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"39132:8:20"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"39117:11:20"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"39099:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"39111:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"39096:2:20"},"nodeType":"YulFunctionCall","src":"39096:18:20"},"nodeType":"YulIf","src":"39093:49:20"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"39184:11:20"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"39201:8:20"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"39229:3:20"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"39211:17:20"},"nodeType":"YulFunctionCall","src":"39211:22:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39197:3:20"},"nodeType":"YulFunctionCall","src":"39197:37:20"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"39155:28:20"},"nodeType":"YulFunctionCall","src":"39155:80:20"},"nodeType":"YulExpressionStatement","src":"39155:80:20"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"38806:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"38811:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"38803:2:20"},"nodeType":"YulFunctionCall","src":"38803:11:20"},"nodeType":"YulIf","src":"38800:445:20"}]},"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"38765:5:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"38772:3:20","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"38777:10:20","type":""}],"src":"38711:541:20"},{"body":{"nodeType":"YulBlock","src":"39321:54:20","statements":[{"nodeType":"YulAssignment","src":"39331:37:20","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"39356:4:20"},{"name":"value","nodeType":"YulIdentifier","src":"39362:5:20"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"39352:3:20"},"nodeType":"YulFunctionCall","src":"39352:16:20"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"39331:8:20"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"39296:4:20","type":""},{"name":"value","nodeType":"YulTypedName","src":"39302:5:20","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"39312:8:20","type":""}],"src":"39258:117:20"},{"body":{"nodeType":"YulBlock","src":"39432:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"39442:68:20","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39491:1:20","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"39494:5:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"39487:3:20"},"nodeType":"YulFunctionCall","src":"39487:13:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39506:1:20","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"39502:3:20"},"nodeType":"YulFunctionCall","src":"39502:6:20"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"39458:28:20"},"nodeType":"YulFunctionCall","src":"39458:51:20"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"39454:3:20"},"nodeType":"YulFunctionCall","src":"39454:56:20"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"39446:4:20","type":""}]},{"nodeType":"YulAssignment","src":"39519:25:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"39533:4:20"},{"name":"mask","nodeType":"YulIdentifier","src":"39539:4:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"39529:3:20"},"nodeType":"YulFunctionCall","src":"39529:15:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"39519:6:20"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"39409:4:20","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"39415:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"39425:6:20","type":""}],"src":"39381:169:20"},{"body":{"nodeType":"YulBlock","src":"39636:214:20","statements":[{"nodeType":"YulAssignment","src":"39769:37:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"39796:4:20"},{"name":"len","nodeType":"YulIdentifier","src":"39802:3:20"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"39777:18:20"},"nodeType":"YulFunctionCall","src":"39777:29:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"39769:4:20"}]},{"nodeType":"YulAssignment","src":"39815:29:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"39826:4:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39836:1:20","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"39839:3:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"39832:3:20"},"nodeType":"YulFunctionCall","src":"39832:11:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"39823:2:20"},"nodeType":"YulFunctionCall","src":"39823:21:20"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"39815:4:20"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"39617:4:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"39623:3:20","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"39631:4:20","type":""}],"src":"39555:295:20"},{"body":{"nodeType":"YulBlock","src":"39952:1301:20","statements":[{"nodeType":"YulVariableDeclaration","src":"39963:57:20","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"40011:3:20"},{"name":"len","nodeType":"YulIdentifier","src":"40016:3:20"}],"functionName":{"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"39977:33:20"},"nodeType":"YulFunctionCall","src":"39977:43:20"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"39967:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"40105:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"40107:16:20"},"nodeType":"YulFunctionCall","src":"40107:18:20"},"nodeType":"YulExpressionStatement","src":"40107:18:20"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"40077:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"40085:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"40074:2:20"},"nodeType":"YulFunctionCall","src":"40074:30:20"},"nodeType":"YulIf","src":"40071:56:20"},{"nodeType":"YulVariableDeclaration","src":"40137:52:20","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"40183:4:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"40177:5:20"},"nodeType":"YulFunctionCall","src":"40177:11:20"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"40151:25:20"},"nodeType":"YulFunctionCall","src":"40151:38:20"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"40141:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"40281:4:20"},{"name":"oldLen","nodeType":"YulIdentifier","src":"40287:6:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"40295:6:20"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulIdentifier","src":"40236:44:20"},"nodeType":"YulFunctionCall","src":"40236:66:20"},"nodeType":"YulExpressionStatement","src":"40236:66:20"},{"nodeType":"YulVariableDeclaration","src":"40312:18:20","value":{"kind":"number","nodeType":"YulLiteral","src":"40329:1:20","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"40316:9:20","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"40377:624:20","statements":[{"nodeType":"YulVariableDeclaration","src":"40391:37:20","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"40410:6:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40422:4:20","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"40418:3:20"},"nodeType":"YulFunctionCall","src":"40418:9:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"40406:3:20"},"nodeType":"YulFunctionCall","src":"40406:22:20"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"40395:7:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"40442:50:20","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"40487:4:20"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"40456:30:20"},"nodeType":"YulFunctionCall","src":"40456:36:20"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"40446:6:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"40505:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"40514:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"40509:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"40573:170:20","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"40598:6:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"40623:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"40628:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40619:3:20"},"nodeType":"YulFunctionCall","src":"40619:19:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"40606:12:20"},"nodeType":"YulFunctionCall","src":"40606:33:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"40591:6:20"},"nodeType":"YulFunctionCall","src":"40591:49:20"},"nodeType":"YulExpressionStatement","src":"40591:49:20"},{"nodeType":"YulAssignment","src":"40657:24:20","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"40671:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"40679:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40667:3:20"},"nodeType":"YulFunctionCall","src":"40667:14:20"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"40657:6:20"}]},{"nodeType":"YulAssignment","src":"40698:31:20","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"40715:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"40726:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40711:3:20"},"nodeType":"YulFunctionCall","src":"40711:18:20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"40698:9:20"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"40539:1:20"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"40542:7:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"40536:2:20"},"nodeType":"YulFunctionCall","src":"40536:14:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"40551:21:20","statements":[{"nodeType":"YulAssignment","src":"40553:17:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"40562:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"40565:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40558:3:20"},"nodeType":"YulFunctionCall","src":"40558:12:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"40553:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"40532:3:20","statements":[]},"src":"40528:215:20"},{"body":{"nodeType":"YulBlock","src":"40779:163:20","statements":[{"nodeType":"YulVariableDeclaration","src":"40797:50:20","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"40831:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"40836:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40827:3:20"},"nodeType":"YulFunctionCall","src":"40827:19:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"40814:12:20"},"nodeType":"YulFunctionCall","src":"40814:33:20"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"40801:9:20","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"40871:6:20"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"40898:9:20"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"40913:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"40921:4:20","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"40909:3:20"},"nodeType":"YulFunctionCall","src":"40909:17:20"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"40879:18:20"},"nodeType":"YulFunctionCall","src":"40879:48:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"40864:6:20"},"nodeType":"YulFunctionCall","src":"40864:64:20"},"nodeType":"YulExpressionStatement","src":"40864:64:20"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"40762:7:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"40771:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"40759:2:20"},"nodeType":"YulFunctionCall","src":"40759:19:20"},"nodeType":"YulIf","src":"40756:186:20"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"40962:4:20"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"40976:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"40984:1:20","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"40972:3:20"},"nodeType":"YulFunctionCall","src":"40972:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"40988:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40968:3:20"},"nodeType":"YulFunctionCall","src":"40968:22:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"40955:6:20"},"nodeType":"YulFunctionCall","src":"40955:36:20"},"nodeType":"YulExpressionStatement","src":"40955:36:20"}]},"nodeType":"YulCase","src":"40370:631:20","value":{"kind":"number","nodeType":"YulLiteral","src":"40375:1:20","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"41018:229:20","statements":[{"nodeType":"YulVariableDeclaration","src":"41032:14:20","value":{"kind":"number","nodeType":"YulLiteral","src":"41045:1:20","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"41036:5:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"41069:74:20","statements":[{"nodeType":"YulAssignment","src":"41087:42:20","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"41113:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"41118:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41109:3:20"},"nodeType":"YulFunctionCall","src":"41109:19:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"41096:12:20"},"nodeType":"YulFunctionCall","src":"41096:33:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"41087:5:20"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"41062:6:20"},"nodeType":"YulIf","src":"41059:84:20"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"41163:4:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41222:5:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"41229:6:20"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"41169:52:20"},"nodeType":"YulFunctionCall","src":"41169:67:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"41156:6:20"},"nodeType":"YulFunctionCall","src":"41156:81:20"},"nodeType":"YulExpressionStatement","src":"41156:81:20"}]},"nodeType":"YulCase","src":"41010:237:20","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"40350:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"40358:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"40347:2:20"},"nodeType":"YulFunctionCall","src":"40347:14:20"},"nodeType":"YulSwitch","src":"40340:907:20"}]},"name":"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"39936:4:20","type":""},{"name":"src","nodeType":"YulTypedName","src":"39942:3:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"39947:3:20","type":""}],"src":"39855:1398:20"},{"body":{"nodeType":"YulBlock","src":"41381:214:20","statements":[{"nodeType":"YulAssignment","src":"41391:77:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41456:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"41461:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"41398:57:20"},"nodeType":"YulFunctionCall","src":"41398:70:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"41391:3:20"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"41515:5:20"},{"name":"pos","nodeType":"YulIdentifier","src":"41522:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"41527:6:20"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"41478:36:20"},"nodeType":"YulFunctionCall","src":"41478:56:20"},"nodeType":"YulExpressionStatement","src":"41478:56:20"},{"nodeType":"YulAssignment","src":"41543:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41554:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"41581:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"41559:21:20"},"nodeType":"YulFunctionCall","src":"41559:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41550:3:20"},"nodeType":"YulFunctionCall","src":"41550:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"41543:3:20"}]}]},"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"41354:5:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"41361:6:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"41369:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"41377:3:20","type":""}],"src":"41281:314:20"},{"body":{"nodeType":"YulBlock","src":"41727:203:20","statements":[{"nodeType":"YulAssignment","src":"41737:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41749:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"41760:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41745:3:20"},"nodeType":"YulFunctionCall","src":"41745:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41737:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41784:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"41795:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41780:3:20"},"nodeType":"YulFunctionCall","src":"41780:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"41803:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"41809:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41799:3:20"},"nodeType":"YulFunctionCall","src":"41799:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41773:6:20"},"nodeType":"YulFunctionCall","src":"41773:47:20"},"nodeType":"YulExpressionStatement","src":"41773:47:20"},{"nodeType":"YulAssignment","src":"41829:94:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"41901:6:20"},{"name":"value1","nodeType":"YulIdentifier","src":"41909:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"41918:4:20"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"41837:63:20"},"nodeType":"YulFunctionCall","src":"41837:86:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41829:4:20"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"41691:9:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"41703:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"41711:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"41722:4:20","type":""}],"src":"41601:329:20"},{"body":{"nodeType":"YulBlock","src":"42042:119:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"42064:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"42072:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42060:3:20"},"nodeType":"YulFunctionCall","src":"42060:14:20"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"42076:34:20","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42053:6:20"},"nodeType":"YulFunctionCall","src":"42053:58:20"},"nodeType":"YulExpressionStatement","src":"42053:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"42132:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"42140:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42128:3:20"},"nodeType":"YulFunctionCall","src":"42128:15:20"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"42145:8:20","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42121:6:20"},"nodeType":"YulFunctionCall","src":"42121:33:20"},"nodeType":"YulExpressionStatement","src":"42121:33:20"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"42034:6:20","type":""}],"src":"41936:225:20"},{"body":{"nodeType":"YulBlock","src":"42313:220:20","statements":[{"nodeType":"YulAssignment","src":"42323:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42389:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"42394:2:20","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42330:58:20"},"nodeType":"YulFunctionCall","src":"42330:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"42323:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42495:3:20"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"42406:88:20"},"nodeType":"YulFunctionCall","src":"42406:93:20"},"nodeType":"YulExpressionStatement","src":"42406:93:20"},{"nodeType":"YulAssignment","src":"42508:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42519:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"42524:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42515:3:20"},"nodeType":"YulFunctionCall","src":"42515:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"42508:3:20"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"42301:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"42309:3:20","type":""}],"src":"42167:366:20"},{"body":{"nodeType":"YulBlock","src":"42710:248:20","statements":[{"nodeType":"YulAssignment","src":"42720:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42732:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"42743:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42728:3:20"},"nodeType":"YulFunctionCall","src":"42728:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42720:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42767:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"42778:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42763:3:20"},"nodeType":"YulFunctionCall","src":"42763:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"42786:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"42792:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"42782:3:20"},"nodeType":"YulFunctionCall","src":"42782:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42756:6:20"},"nodeType":"YulFunctionCall","src":"42756:47:20"},"nodeType":"YulExpressionStatement","src":"42756:47:20"},{"nodeType":"YulAssignment","src":"42812:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"42946:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42820:124:20"},"nodeType":"YulFunctionCall","src":"42820:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42812:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42690:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"42705:4:20","type":""}],"src":"42539:419:20"},{"body":{"nodeType":"YulBlock","src":"43070:61:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"43092:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"43100:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43088:3:20"},"nodeType":"YulFunctionCall","src":"43088:14:20"},{"hexValue":"546f6b656e4e6f74537570706f72746564","kind":"string","nodeType":"YulLiteral","src":"43104:19:20","type":"","value":"TokenNotSupported"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43081:6:20"},"nodeType":"YulFunctionCall","src":"43081:43:20"},"nodeType":"YulExpressionStatement","src":"43081:43:20"}]},"name":"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"43062:6:20","type":""}],"src":"42964:167:20"},{"body":{"nodeType":"YulBlock","src":"43283:220:20","statements":[{"nodeType":"YulAssignment","src":"43293:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43359:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"43364:2:20","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43300:58:20"},"nodeType":"YulFunctionCall","src":"43300:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"43293:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43465:3:20"}],"functionName":{"name":"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","nodeType":"YulIdentifier","src":"43376:88:20"},"nodeType":"YulFunctionCall","src":"43376:93:20"},"nodeType":"YulExpressionStatement","src":"43376:93:20"},{"nodeType":"YulAssignment","src":"43478:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43489:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"43494:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43485:3:20"},"nodeType":"YulFunctionCall","src":"43485:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"43478:3:20"}]}]},"name":"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"43271:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"43279:3:20","type":""}],"src":"43137:366:20"},{"body":{"nodeType":"YulBlock","src":"43680:248:20","statements":[{"nodeType":"YulAssignment","src":"43690:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43702:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"43713:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43698:3:20"},"nodeType":"YulFunctionCall","src":"43698:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43690:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43737:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"43748:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43733:3:20"},"nodeType":"YulFunctionCall","src":"43733:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43756:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"43762:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43752:3:20"},"nodeType":"YulFunctionCall","src":"43752:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43726:6:20"},"nodeType":"YulFunctionCall","src":"43726:47:20"},"nodeType":"YulExpressionStatement","src":"43726:47:20"},{"nodeType":"YulAssignment","src":"43782:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43916:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43790:124:20"},"nodeType":"YulFunctionCall","src":"43790:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43782:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43660:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"43675:4:20","type":""}],"src":"43509:419:20"},{"body":{"nodeType":"YulBlock","src":"44040:56:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"44062:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"44070:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44058:3:20"},"nodeType":"YulFunctionCall","src":"44058:14:20"},{"hexValue":"416d6f756e7449735a65726f","kind":"string","nodeType":"YulLiteral","src":"44074:14:20","type":"","value":"AmountIsZero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44051:6:20"},"nodeType":"YulFunctionCall","src":"44051:38:20"},"nodeType":"YulExpressionStatement","src":"44051:38:20"}]},"name":"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"44032:6:20","type":""}],"src":"43934:162:20"},{"body":{"nodeType":"YulBlock","src":"44248:220:20","statements":[{"nodeType":"YulAssignment","src":"44258:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44324:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"44329:2:20","type":"","value":"12"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44265:58:20"},"nodeType":"YulFunctionCall","src":"44265:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"44258:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44430:3:20"}],"functionName":{"name":"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","nodeType":"YulIdentifier","src":"44341:88:20"},"nodeType":"YulFunctionCall","src":"44341:93:20"},"nodeType":"YulExpressionStatement","src":"44341:93:20"},{"nodeType":"YulAssignment","src":"44443:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44454:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"44459:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44450:3:20"},"nodeType":"YulFunctionCall","src":"44450:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"44443:3:20"}]}]},"name":"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"44236:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"44244:3:20","type":""}],"src":"44102:366:20"},{"body":{"nodeType":"YulBlock","src":"44645:248:20","statements":[{"nodeType":"YulAssignment","src":"44655:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44667:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"44678:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44663:3:20"},"nodeType":"YulFunctionCall","src":"44663:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44655:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44702:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"44713:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44698:3:20"},"nodeType":"YulFunctionCall","src":"44698:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44721:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"44727:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"44717:3:20"},"nodeType":"YulFunctionCall","src":"44717:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44691:6:20"},"nodeType":"YulFunctionCall","src":"44691:47:20"},"nodeType":"YulExpressionStatement","src":"44691:47:20"},{"nodeType":"YulAssignment","src":"44747:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44881:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44755:124:20"},"nodeType":"YulFunctionCall","src":"44755:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44747:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"44625:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"44640:4:20","type":""}],"src":"44474:419:20"},{"body":{"nodeType":"YulBlock","src":"45005:60:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45027:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"45035:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45023:3:20"},"nodeType":"YulFunctionCall","src":"45023:14:20"},{"hexValue":"5468726f775a65726f41646472657373","kind":"string","nodeType":"YulLiteral","src":"45039:18:20","type":"","value":"ThrowZeroAddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45016:6:20"},"nodeType":"YulFunctionCall","src":"45016:42:20"},"nodeType":"YulExpressionStatement","src":"45016:42:20"}]},"name":"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"44997:6:20","type":""}],"src":"44899:166:20"},{"body":{"nodeType":"YulBlock","src":"45217:220:20","statements":[{"nodeType":"YulAssignment","src":"45227:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45293:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"45298:2:20","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45234:58:20"},"nodeType":"YulFunctionCall","src":"45234:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"45227:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45399:3:20"}],"functionName":{"name":"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","nodeType":"YulIdentifier","src":"45310:88:20"},"nodeType":"YulFunctionCall","src":"45310:93:20"},"nodeType":"YulExpressionStatement","src":"45310:93:20"},{"nodeType":"YulAssignment","src":"45412:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45423:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"45428:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45419:3:20"},"nodeType":"YulFunctionCall","src":"45419:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"45412:3:20"}]}]},"name":"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"45205:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"45213:3:20","type":""}],"src":"45071:366:20"},{"body":{"nodeType":"YulBlock","src":"45614:248:20","statements":[{"nodeType":"YulAssignment","src":"45624:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45636:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"45647:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45632:3:20"},"nodeType":"YulFunctionCall","src":"45632:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45624:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45671:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"45682:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45667:3:20"},"nodeType":"YulFunctionCall","src":"45667:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45690:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"45696:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"45686:3:20"},"nodeType":"YulFunctionCall","src":"45686:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45660:6:20"},"nodeType":"YulFunctionCall","src":"45660:47:20"},"nodeType":"YulExpressionStatement","src":"45660:47:20"},{"nodeType":"YulAssignment","src":"45716:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45850:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45724:124:20"},"nodeType":"YulFunctionCall","src":"45724:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45716:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"45594:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"45609:4:20","type":""}],"src":"45443:419:20"},{"body":{"nodeType":"YulBlock","src":"45974:66:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45996:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"46004:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45992:3:20"},"nodeType":"YulFunctionCall","src":"45992:14:20"},{"hexValue":"496e76616c6964496e737469747574696f6e436f6465","kind":"string","nodeType":"YulLiteral","src":"46008:24:20","type":"","value":"InvalidInstitutionCode"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45985:6:20"},"nodeType":"YulFunctionCall","src":"45985:48:20"},"nodeType":"YulExpressionStatement","src":"45985:48:20"}]},"name":"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"45966:6:20","type":""}],"src":"45868:172:20"},{"body":{"nodeType":"YulBlock","src":"46192:220:20","statements":[{"nodeType":"YulAssignment","src":"46202:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46268:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"46273:2:20","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"46209:58:20"},"nodeType":"YulFunctionCall","src":"46209:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"46202:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46374:3:20"}],"functionName":{"name":"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","nodeType":"YulIdentifier","src":"46285:88:20"},"nodeType":"YulFunctionCall","src":"46285:93:20"},"nodeType":"YulExpressionStatement","src":"46285:93:20"},{"nodeType":"YulAssignment","src":"46387:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46398:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"46403:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46394:3:20"},"nodeType":"YulFunctionCall","src":"46394:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"46387:3:20"}]}]},"name":"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"46180:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"46188:3:20","type":""}],"src":"46046:366:20"},{"body":{"nodeType":"YulBlock","src":"46589:248:20","statements":[{"nodeType":"YulAssignment","src":"46599:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46611:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"46622:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46607:3:20"},"nodeType":"YulFunctionCall","src":"46607:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46599:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46646:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"46657:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46642:3:20"},"nodeType":"YulFunctionCall","src":"46642:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46665:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"46671:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"46661:3:20"},"nodeType":"YulFunctionCall","src":"46661:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46635:6:20"},"nodeType":"YulFunctionCall","src":"46635:47:20"},"nodeType":"YulExpressionStatement","src":"46635:47:20"},{"nodeType":"YulAssignment","src":"46691:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46825:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"46699:124:20"},"nodeType":"YulFunctionCall","src":"46699:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46691:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"46569:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"46584:4:20","type":""}],"src":"46418:419:20"},{"body":{"nodeType":"YulBlock","src":"46949:76:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46971:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"46979:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46967:3:20"},"nodeType":"YulFunctionCall","src":"46967:14:20"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"46983:34:20","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46960:6:20"},"nodeType":"YulFunctionCall","src":"46960:58:20"},"nodeType":"YulExpressionStatement","src":"46960:58:20"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"46941:6:20","type":""}],"src":"46843:182:20"},{"body":{"nodeType":"YulBlock","src":"47177:220:20","statements":[{"nodeType":"YulAssignment","src":"47187:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47253:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"47258:2:20","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"47194:58:20"},"nodeType":"YulFunctionCall","src":"47194:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"47187:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47359:3:20"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"47270:88:20"},"nodeType":"YulFunctionCall","src":"47270:93:20"},"nodeType":"YulExpressionStatement","src":"47270:93:20"},{"nodeType":"YulAssignment","src":"47372:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47383:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"47388:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47379:3:20"},"nodeType":"YulFunctionCall","src":"47379:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"47372:3:20"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"47165:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"47173:3:20","type":""}],"src":"47031:366:20"},{"body":{"nodeType":"YulBlock","src":"47574:248:20","statements":[{"nodeType":"YulAssignment","src":"47584:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47596:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"47607:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47592:3:20"},"nodeType":"YulFunctionCall","src":"47592:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47584:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47631:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"47642:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47627:3:20"},"nodeType":"YulFunctionCall","src":"47627:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"47650:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"47656:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"47646:3:20"},"nodeType":"YulFunctionCall","src":"47646:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47620:6:20"},"nodeType":"YulFunctionCall","src":"47620:47:20"},"nodeType":"YulExpressionStatement","src":"47620:47:20"},{"nodeType":"YulAssignment","src":"47676:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"47810:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"47684:124:20"},"nodeType":"YulFunctionCall","src":"47684:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47676:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"47554:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"47569:4:20","type":""}],"src":"47403:419:20"},{"body":{"nodeType":"YulBlock","src":"47873:149:20","statements":[{"nodeType":"YulAssignment","src":"47883:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"47906:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"47888:17:20"},"nodeType":"YulFunctionCall","src":"47888:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"47883:1:20"}]},{"nodeType":"YulAssignment","src":"47917:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"47940:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"47922:17:20"},"nodeType":"YulFunctionCall","src":"47922:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"47917:1:20"}]},{"nodeType":"YulAssignment","src":"47951:17:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"47963:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"47966:1:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"47959:3:20"},"nodeType":"YulFunctionCall","src":"47959:9:20"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"47951:4:20"}]},{"body":{"nodeType":"YulBlock","src":"47993:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"47995:16:20"},"nodeType":"YulFunctionCall","src":"47995:18:20"},"nodeType":"YulExpressionStatement","src":"47995:18:20"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"47984:4:20"},{"name":"x","nodeType":"YulIdentifier","src":"47990:1:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"47981:2:20"},"nodeType":"YulFunctionCall","src":"47981:11:20"},"nodeType":"YulIf","src":"47978:37:20"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"47859:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"47862:1:20","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"47868:4:20","type":""}],"src":"47828:194:20"},{"body":{"nodeType":"YulBlock","src":"48072:147:20","statements":[{"nodeType":"YulAssignment","src":"48082:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"48105:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"48087:17:20"},"nodeType":"YulFunctionCall","src":"48087:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"48082:1:20"}]},{"nodeType":"YulAssignment","src":"48116:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"48139:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"48121:17:20"},"nodeType":"YulFunctionCall","src":"48121:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"48116:1:20"}]},{"nodeType":"YulAssignment","src":"48150:16:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"48161:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"48164:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48157:3:20"},"nodeType":"YulFunctionCall","src":"48157:9:20"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"48150:3:20"}]},{"body":{"nodeType":"YulBlock","src":"48190:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"48192:16:20"},"nodeType":"YulFunctionCall","src":"48192:18:20"},"nodeType":"YulExpressionStatement","src":"48192:18:20"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"48182:1:20"},{"name":"sum","nodeType":"YulIdentifier","src":"48185:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"48179:2:20"},"nodeType":"YulFunctionCall","src":"48179:10:20"},"nodeType":"YulIf","src":"48176:36:20"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"48059:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"48062:1:20","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"48068:3:20","type":""}],"src":"48028:191:20"},{"body":{"nodeType":"YulBlock","src":"48331:124:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"48353:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"48361:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48349:3:20"},"nodeType":"YulFunctionCall","src":"48349:14:20"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"48365:34:20","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48342:6:20"},"nodeType":"YulFunctionCall","src":"48342:58:20"},"nodeType":"YulExpressionStatement","src":"48342:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"48421:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"48429:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48417:3:20"},"nodeType":"YulFunctionCall","src":"48417:15:20"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"48434:13:20","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48410:6:20"},"nodeType":"YulFunctionCall","src":"48410:38:20"},"nodeType":"YulExpressionStatement","src":"48410:38:20"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"48323:6:20","type":""}],"src":"48225:230:20"},{"body":{"nodeType":"YulBlock","src":"48607:220:20","statements":[{"nodeType":"YulAssignment","src":"48617:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48683:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"48688:2:20","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48624:58:20"},"nodeType":"YulFunctionCall","src":"48624:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"48617:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48789:3:20"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"48700:88:20"},"nodeType":"YulFunctionCall","src":"48700:93:20"},"nodeType":"YulExpressionStatement","src":"48700:93:20"},{"nodeType":"YulAssignment","src":"48802:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48813:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"48818:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48809:3:20"},"nodeType":"YulFunctionCall","src":"48809:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"48802:3:20"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"48595:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"48603:3:20","type":""}],"src":"48461:366:20"},{"body":{"nodeType":"YulBlock","src":"49004:248:20","statements":[{"nodeType":"YulAssignment","src":"49014:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49026:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"49037:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49022:3:20"},"nodeType":"YulFunctionCall","src":"49022:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49014:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49061:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"49072:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49057:3:20"},"nodeType":"YulFunctionCall","src":"49057:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"49080:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"49086:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"49076:3:20"},"nodeType":"YulFunctionCall","src":"49076:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49050:6:20"},"nodeType":"YulFunctionCall","src":"49050:47:20"},"nodeType":"YulExpressionStatement","src":"49050:47:20"},{"nodeType":"YulAssignment","src":"49106:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"49240:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"49114:124:20"},"nodeType":"YulFunctionCall","src":"49114:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49106:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48984:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"48999:4:20","type":""}],"src":"48833:419:20"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    // struct PaycrestSettingManager.Institution -> struct PaycrestSettingManager.Institution\n    function abi_encode_t_struct$_Institution_$4160_memory_ptr_to_t_struct$_Institution_$4160_memory_ptr(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // code\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Institution_$4160_memory_ptr_to_t_struct$_Institution_$4160_memory_ptr(value0, pos) -> updatedPos {\n        abi_encode_t_struct$_Institution_$4160_memory_ptr_to_t_struct$_Institution_$4160_memory_ptr(value0, pos)\n        updatedPos := add(pos, 0x40)\n    }\n\n    function array_nextElement_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct PaycrestSettingManager.Institution[] -> struct PaycrestSettingManager.Institution[]\n    function abi_encode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_Institution_$4160_memory_ptr_to_t_struct$_Institution_$4160_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_uint96(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffff)\n    }\n\n    function validator_revert_t_uint96(value) {\n        if iszero(eq(value, cleanup_t_uint96(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint96(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint96(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // string\n    function abi_decode_t_string_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9 {\n        if slt(sub(dataEnd, headStart), 288) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint96(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 224\n\n            value7 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 256))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value8, value9 := abi_decode_t_string_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct PaycrestSettingManager.Institution\n    function abi_decode_t_struct$_Institution_$4160_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // code\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // name\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_available_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Institution_$4160_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_bytes32t_bytes32t_addresst_uint64t_bool(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint96_to_t_uint96(value, pos) {\n        mstore(pos, cleanup_t_uint96(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    // struct IPaycrest.Order -> struct IPaycrest.Order\n    function abi_encode_t_struct$_Order_$4475_memory_ptr_to_t_struct$_Order_$4475_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x0120)\n\n        {\n            // seller\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // token\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // senderFeeRecipient\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // senderFee\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // rate\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint96_to_t_uint96(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // isFulfilled\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // refundAddress\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0xc0))\n        }\n\n        {\n            // currentBPS\n\n            let memberValue0 := mload(add(value, 0xe0))\n            abi_encode_t_uint96_to_t_uint96(memberValue0, add(pos, 0xe0))\n        }\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x0100))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x0100))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_Order_$4475_memory_ptr__to_t_struct$_Order_$4475_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 288)\n\n        abi_encode_t_struct$_Order_$4475_memory_ptr_to_t_struct$_Order_$4475_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    // struct PaycrestSettingManager.InstitutionByCode -> struct PaycrestSettingManager.InstitutionByCode\n    function abi_encode_t_struct$_InstitutionByCode_$4165_memory_ptr_to_t_struct$_InstitutionByCode_$4165_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // currency\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_InstitutionByCode_$4165_memory_ptr__to_t_struct$_InstitutionByCode_$4165_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_struct$_InstitutionByCode_$4165_memory_ptr_to_t_struct$_InstitutionByCode_$4165_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint64_t_uint256__to_t_uint64_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4(memPtr) {\n\n        mstore(add(memPtr, 0), \"SenderFeeTooHigh\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint96_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint96(value)))\n    }\n\n    function abi_encode_t_uint96_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_uint96_to_t_uint256(value))\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // string -> string\n    function abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_uint96_t_bytes32_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_bytes32_t_bytes32_t_string_memory_ptr__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_uint96_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(value3, value4,  tail)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243(memPtr) {\n\n        mstore(add(memPtr, 0), \"OnlyAggregator\")\n\n    }\n\n    function abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5(memPtr) {\n\n        mstore(add(memPtr, 0), \"OrderFulfilled\")\n\n    }\n\n    function abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint96(x, y) -> diff {\n        x := cleanup_t_uint96(x)\n        y := cleanup_t_uint96(y)\n        diff := sub(x, y)\n\n        if gt(diff, 0xffffffffffffffffffffffff) { panic_error_0x11() }\n\n    }\n\n    function convert_t_uint64_to_t_uint96(value) -> converted {\n        converted := cleanup_t_uint96(identity(cleanup_t_uint64(value)))\n    }\n\n    function abi_encode_t_uint64_to_t_uint96_fromStack(value, pos) {\n        mstore(pos, convert_t_uint64_to_t_uint96(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_uint64__to_t_bytes32_t_bytes32_t_uint96__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint64_to_t_uint96_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(memPtr) {\n\n        mstore(add(memPtr, 0), \"Paycrest: zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_bytes_calldata_ptr(value, len) -> length {\n\n        length := len\n\n    }\n\n    function array_dataslot_t_bytes_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_bytes_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_bytes_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage(slot, src, len) {\n\n        let newLen := array_length_t_bytes_calldata_ptr(src, len)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_bytes_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := calldataload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value0, value1,  tail)\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1(memPtr) {\n\n        mstore(add(memPtr, 0), \"TokenNotSupported\")\n\n    }\n\n    function abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2(memPtr) {\n\n        mstore(add(memPtr, 0), \"AmountIsZero\")\n\n    }\n\n    function abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)\n        store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7(memPtr) {\n\n        mstore(add(memPtr, 0), \"ThrowZeroAddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5(memPtr) {\n\n        mstore(add(memPtr, 0), \"InvalidInstitutionCode\")\n\n    }\n\n    function abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x87490D86 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xCB79455B GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0xD8E8DE34 EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0xD9CAED12 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0xE4683A79 EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0xE8D6E0DE EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x404 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x87490D86 EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x332 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0x768C6EC0 EQ PUSH2 0x241 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0x28D JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x2621338 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x2654EC7E EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x32200882 EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0x3AD59DBC EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x5FE44CAC EQ PUSH2 0x1D6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x24BF JUMP JUMPDEST PUSH2 0x420 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x25D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x186 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x181 SWAP2 SWAP1 PUSH2 0x2738 JUMP JUMPDEST PUSH2 0x55E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x193 SWAP2 SWAP1 PUSH2 0x2832 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B1 SWAP2 SWAP1 PUSH2 0x29F1 JUMP JUMPDEST PUSH2 0xA26 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH2 0xB3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x2ACC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x2B66 JUMP JUMPDEST PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP3 SWAP2 SWAP1 PUSH2 0x2C02 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20F PUSH2 0xFC5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x226 SWAP2 SWAP1 PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0xFD9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x238 SWAP2 SWAP1 PUSH2 0x2C67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x25B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x256 SWAP2 SWAP1 PUSH2 0x24BF JUMP JUMPDEST PUSH2 0x102F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x268 SWAP2 SWAP1 PUSH2 0x2D75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x286 SWAP2 SWAP1 PUSH2 0x2D91 JUMP JUMPDEST PUSH2 0x1260 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A2 SWAP2 SWAP1 PUSH2 0x2DD1 JUMP JUMPDEST PUSH2 0x13AD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BE SWAP2 SWAP1 PUSH2 0x24BF JUMP JUMPDEST PUSH2 0x1418 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D0 SWAP2 SWAP1 PUSH2 0x2E2D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E1 PUSH2 0x1459 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EE SWAP2 SWAP1 PUSH2 0x2E48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x311 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x2E63 JUMP JUMPDEST PUSH2 0x1483 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x31B PUSH2 0x1638 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x329 SWAP3 SWAP2 SWAP1 PUSH2 0x2ED4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x165D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x368 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x2F53 JUMP JUMPDEST PUSH2 0x1829 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x384 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x37F SWAP2 SWAP1 PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x1880 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x391 SWAP2 SWAP1 PUSH2 0x2C67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3AF SWAP2 SWAP1 PUSH2 0x2FA0 JUMP JUMPDEST PUSH2 0x18D6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0x2FF3 JUMP JUMPDEST PUSH2 0x1962 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DD SWAP2 SWAP1 PUSH2 0x2C67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EE PUSH2 0x1C0F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3FB SWAP2 SWAP1 PUSH2 0x2E48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x41E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x419 SWAP2 SWAP1 PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x1C39 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x49D JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x457 JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4C5 JUMPI PUSH2 0x4C4 PUSH2 0x285E JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4EB PUSH2 0x2359 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x4E3 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x552 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x51F JUMPI PUSH2 0x51E PUSH2 0x3033 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53A JUMPI PUSH2 0x539 PUSH2 0x3033 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x504 JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56D DUP12 DUP12 DUP7 DUP10 DUP14 PUSH2 0x1CBC JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP12 PUSH2 0x59C SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST PUSH2 0x5A6 SWAP2 SWAP1 PUSH2 0x3102 JUMP JUMPDEST DUP6 GT ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DF SWAP1 PUSH2 0x3190 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP14 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x625 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31B0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x644 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x668 SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST POP PUSH1 0xA0 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x6B9 SWAP1 PUSH2 0x3229 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH1 0xA0 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x710 SWAP3 SWAP2 SWAP1 PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x65 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE POP PUSH1 0x9F PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP DUP1 DUP11 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x2C205F90C01160D42994A0EB521810056D94BB82A1FCB038D7179C4158A1F15B DUP11 DUP14 DUP14 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xA10 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3311 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA2E PUSH2 0x1ECB JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB34 JUMPI PUSH1 0x9D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA65 JUMPI PUSH2 0xA64 PUSH2 0x3033 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xACA JUMPI PUSH2 0xAC9 PUSH2 0x3033 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9E PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAF6 JUMPI PUSH2 0xAF5 PUSH2 0x3033 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xA37 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x68 DUP1 SLOAD PUSH2 0xB49 SWAP1 PUSH2 0x338E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB75 SWAP1 PUSH2 0x338E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBC2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB97 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBC2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBA5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC5F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC56 SWAP1 PUSH2 0x340B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9F PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xCC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBA SWAP1 PUSH2 0x3477 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x9F PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD45 SWAP2 SWAP1 PUSH2 0x3497 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0xD8A DUP10 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP8 PUSH2 0x1F49 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE29 JUMPI PUSH1 0x1 PUSH1 0x9F PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD GT ISZERO PUSH2 0xE28 JUMPI PUSH2 0xE27 DUP10 PUSH2 0x205A JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0xEDC JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE97 SWAP3 SWAP2 SWAP1 PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEB6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEDA SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP9 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1B SWAP3 SWAP2 SWAP1 PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF3A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF5E SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH32 0xF26DE978CBAEA68EA699627155A10AD53DF3321B0F95A08264C0CFD6D4C05326 DUP13 DUP12 DUP11 PUSH1 0x40 MLOAD PUSH2 0xFAA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3508 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP9 DUP3 SWAP4 POP SWAP4 POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xFCD PUSH2 0x1ECB JUMP JUMPDEST PUSH2 0xFD7 PUSH1 0x0 PUSH2 0x21AE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9B PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1037 PUSH2 0x2379 JUMP JUMPDEST PUSH1 0x9F PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1268 PUSH2 0x1ECB JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x12D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12CE SWAP1 PUSH2 0x358B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x1340 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x13A9 JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x13B5 PUSH2 0x1ECB JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xC8CA786C100BC62A0DFFBE768B5F0B770D84E8604C5DE54B54197B9066BB42A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x140D SWAP2 SWAP1 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x1420 PUSH2 0x243B JUMP JUMPDEST PUSH1 0x9E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x148B PUSH2 0x1ECB JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F1 SWAP1 PUSH2 0x358B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x1579 JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x15F8 JUMPI DUP1 PUSH1 0x9C PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x162B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x35C6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x65 SLOAD SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x168E JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x16BB JUMPI POP PUSH2 0x169D ADDRESS PUSH2 0x2274 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x16BA JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x16FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F1 SWAP1 PUSH2 0x366F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1737 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH3 0x186A0 PUSH1 0x65 DUP2 SWAP1 SSTORE POP PUSH2 0x1388 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x17CC PUSH2 0x2297 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1825 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x181C SWAP2 SWAP1 PUSH2 0x36D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1831 PUSH2 0x1ECB JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x1842 SWAP3 SWAP2 SWAP1 PUSH2 0x389F JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1874 SWAP3 SWAP2 SWAP1 PUSH2 0x399C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9C PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18DE PUSH2 0x1ECB JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1919 SWAP3 SWAP2 SWAP1 PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1938 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x195C SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x19F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19EB SWAP1 PUSH2 0x340B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1A58 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4F SWAP1 PUSH2 0x3477 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x9F PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x9F PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x9F PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B8A SWAP3 SWAP2 SWAP1 PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BA9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BCD SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST POP DUP3 PUSH31 0x7C875846B687732A7579C19BB1DADE66CD14E9F4F809565E2B2B5E76C72B4F DUP4 PUSH1 0x40 MLOAD PUSH2 0x1BFD SWAP2 SWAP1 PUSH2 0x2832 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1C41 PUSH2 0x1ECB JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1CB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CA7 SWAP1 PUSH2 0x3A32 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1CB9 DUP2 PUSH2 0x21AE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x9B PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D3F SWAP1 PUSH2 0x3A9E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 GT PUSH2 0x1D8B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D82 SWAP1 PUSH2 0x3B0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DF1 SWAP1 PUSH2 0x3B76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1E69 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E60 SWAP1 PUSH2 0x3B76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x9E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x1EC4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EBB SWAP1 PUSH2 0x3BE2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1ED3 PUSH2 0x22F0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EF1 PUSH2 0x1459 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1F47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3E SWAP1 PUSH2 0x3C4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1F51 PUSH2 0x245B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x9F PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD DUP2 PUSH2 0x1F8E SWAP2 SWAP1 PUSH2 0x3C6E JUMP JUMPDEST SWAP1 POP PUSH1 0x65 SLOAD DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x1FAD SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST PUSH2 0x1FB7 SWAP2 SWAP1 PUSH2 0x3102 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1FF3 SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST PUSH2 0x1FFD SWAP2 SWAP1 PUSH2 0x3102 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x201A SWAP2 SWAP1 PUSH2 0x3C6E JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP DUP3 ISZERO PUSH2 0x2052 JUMPI DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD DUP2 DUP2 MLOAD PUSH2 0x203F SWAP2 SWAP1 PUSH2 0x3CA2 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 MSTORE POP POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2121 SWAP3 SWAP2 SWAP1 PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2140 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2164 SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x96C76D5AEC8A8C11A9C8E02768E3FA309347330D08961E0CF9FD43B349B684C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22DD SWAP1 PUSH2 0x3D48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x22EE PUSH2 0x22F8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2347 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x233E SWAP1 PUSH2 0x3D48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2357 PUSH2 0x2352 PUSH2 0x22F0 JUMP JUMPDEST PUSH2 0x21AE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x249C DUP2 PUSH2 0x2489 JUMP JUMPDEST DUP2 EQ PUSH2 0x24A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24B9 DUP2 PUSH2 0x2493 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24D5 JUMPI PUSH2 0x24D4 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24E3 DUP5 DUP3 DUP6 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2521 DUP2 PUSH2 0x2489 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x253D PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2518 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2550 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2518 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2562 DUP4 DUP4 PUSH2 0x2527 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2586 DUP3 PUSH2 0x24EC JUMP JUMPDEST PUSH2 0x2590 DUP2 DUP6 PUSH2 0x24F7 JUMP JUMPDEST SWAP4 POP PUSH2 0x259B DUP4 PUSH2 0x2508 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25CC JUMPI DUP2 MLOAD PUSH2 0x25B3 DUP9 DUP3 PUSH2 0x2556 JUMP JUMPDEST SWAP8 POP PUSH2 0x25BE DUP4 PUSH2 0x256E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x259F JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x25F3 DUP2 DUP5 PUSH2 0x257B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2626 DUP3 PUSH2 0x25FB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2636 DUP2 PUSH2 0x261B JUMP JUMPDEST DUP2 EQ PUSH2 0x2641 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2653 DUP2 PUSH2 0x262D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x266C DUP2 PUSH2 0x2659 JUMP JUMPDEST DUP2 EQ PUSH2 0x2677 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2689 DUP2 PUSH2 0x2663 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26B0 DUP2 PUSH2 0x268F JUMP JUMPDEST DUP2 EQ PUSH2 0x26BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x26CD DUP2 PUSH2 0x26A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x26F8 JUMPI PUSH2 0x26F7 PUSH2 0x26D3 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2715 JUMPI PUSH2 0x2714 PUSH2 0x26D8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2731 JUMPI PUSH2 0x2730 PUSH2 0x26DD JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x120 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x275C JUMPI PUSH2 0x275B PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x276A DUP14 DUP3 DUP15 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP11 POP POP PUSH1 0x20 PUSH2 0x277B DUP14 DUP3 DUP15 ADD PUSH2 0x267A JUMP JUMPDEST SWAP10 POP POP PUSH1 0x40 PUSH2 0x278C DUP14 DUP3 DUP15 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP9 POP POP PUSH1 0x60 PUSH2 0x279D DUP14 DUP3 DUP15 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP8 POP POP PUSH1 0x80 PUSH2 0x27AE DUP14 DUP3 DUP15 ADD PUSH2 0x26BE JUMP JUMPDEST SWAP7 POP POP PUSH1 0xA0 PUSH2 0x27BF DUP14 DUP3 DUP15 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP6 POP POP PUSH1 0xC0 PUSH2 0x27D0 DUP14 DUP3 DUP15 ADD PUSH2 0x267A JUMP JUMPDEST SWAP5 POP POP PUSH1 0xE0 PUSH2 0x27E1 DUP14 DUP3 DUP15 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP4 POP POP PUSH2 0x100 DUP12 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2803 JUMPI PUSH2 0x2802 PUSH2 0x2484 JUMP JUMPDEST JUMPDEST PUSH2 0x280F DUP14 DUP3 DUP15 ADD PUSH2 0x26E2 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH2 0x282C DUP2 PUSH2 0x2489 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2847 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2823 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2896 DUP3 PUSH2 0x284D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x28B5 JUMPI PUSH2 0x28B4 PUSH2 0x285E JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C8 PUSH2 0x2475 JUMP JUMPDEST SWAP1 POP PUSH2 0x28D4 DUP3 DUP3 PUSH2 0x288D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x28F4 JUMPI PUSH2 0x28F3 PUSH2 0x285E JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2920 JUMPI PUSH2 0x291F PUSH2 0x2905 JUMP JUMPDEST JUMPDEST PUSH2 0x292A PUSH1 0x40 PUSH2 0x28BE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x293A DUP5 DUP3 DUP6 ADD PUSH2 0x24AA JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x294E DUP5 DUP3 DUP6 ADD PUSH2 0x24AA JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x296D PUSH2 0x2968 DUP5 PUSH2 0x28D9 JUMP JUMPDEST PUSH2 0x28BE JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2990 JUMPI PUSH2 0x298F PUSH2 0x26DD JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x29B9 JUMPI DUP1 PUSH2 0x29A5 DUP9 DUP3 PUSH2 0x290A JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x2992 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x29D8 JUMPI PUSH2 0x29D7 PUSH2 0x26D3 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x29E8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x295A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A08 JUMPI PUSH2 0x2A07 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2A16 DUP6 DUP3 DUP7 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A37 JUMPI PUSH2 0x2A36 PUSH2 0x2484 JUMP JUMPDEST JUMPDEST PUSH2 0x2A43 DUP6 DUP3 DUP7 ADD PUSH2 0x29C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2A87 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2A6C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9E DUP3 PUSH2 0x2A4D JUMP JUMPDEST PUSH2 0x2AA8 DUP2 DUP6 PUSH2 0x2A58 JUMP JUMPDEST SWAP4 POP PUSH2 0x2AB8 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A69 JUMP JUMPDEST PUSH2 0x2AC1 DUP2 PUSH2 0x284D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AE6 DUP2 DUP5 PUSH2 0x2A93 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B0B DUP2 PUSH2 0x2AEE JUMP JUMPDEST DUP2 EQ PUSH2 0x2B16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2B28 DUP2 PUSH2 0x2B02 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B43 DUP2 PUSH2 0x2B2E JUMP JUMPDEST DUP2 EQ PUSH2 0x2B4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2B60 DUP2 PUSH2 0x2B3A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2B83 JUMPI PUSH2 0x2B82 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B91 DUP10 DUP3 DUP11 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x2BA2 DUP10 DUP3 DUP11 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x2BB3 DUP10 DUP3 DUP11 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x2BC4 DUP10 DUP3 DUP11 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x2BD5 DUP10 DUP3 DUP11 ADD PUSH2 0x2B19 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x2BE6 DUP10 DUP3 DUP11 ADD PUSH2 0x2B51 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH2 0x2BFC DUP2 PUSH2 0x261B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2C17 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2823 JUMP JUMPDEST PUSH2 0x2C24 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2BF3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C41 JUMPI PUSH2 0x2C40 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C4F DUP5 DUP3 DUP6 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C61 DUP2 PUSH2 0x2B2E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2C7C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2C58 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C8B DUP2 PUSH2 0x261B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C9A DUP2 PUSH2 0x2659 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2CA9 DUP2 PUSH2 0x268F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2CB8 DUP2 PUSH2 0x2B2E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2CD5 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2C82 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2CE8 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2C82 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2CFB PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2C82 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2D0E PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2C91 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2D21 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2CA0 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2D34 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2CAF JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2D47 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x2C82 JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x2D5A PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2CA0 JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x2D6F PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x2C91 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x2D8B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2CBE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2DA8 JUMPI PUSH2 0x2DA7 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2DB6 DUP6 DUP3 DUP7 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2DC7 DUP6 DUP3 DUP7 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DE7 JUMPI PUSH2 0x2DE6 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2DF5 DUP5 DUP3 DUP6 ADD PUSH2 0x2B19 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2E14 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2518 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2E27 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2518 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2E42 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2DFE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2E5D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BF3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2E7C JUMPI PUSH2 0x2E7B PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E8A DUP7 DUP3 DUP8 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2E9B DUP7 DUP3 DUP8 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2EAC DUP7 DUP3 DUP8 ADD PUSH2 0x2B51 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x2EBF DUP2 PUSH2 0x2AEE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2ECE DUP2 PUSH2 0x2659 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2EE9 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2EB6 JUMP JUMPDEST PUSH2 0x2EF6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2EC5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2F13 JUMPI PUSH2 0x2F12 PUSH2 0x26D3 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2F30 JUMPI PUSH2 0x2F2F PUSH2 0x26D8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2F4C JUMPI PUSH2 0x2F4B PUSH2 0x26DD JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F6A JUMPI PUSH2 0x2F69 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2F88 JUMPI PUSH2 0x2F87 PUSH2 0x2484 JUMP JUMPDEST JUMPDEST PUSH2 0x2F94 DUP6 DUP3 DUP7 ADD PUSH2 0x2EFD JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2FB9 JUMPI PUSH2 0x2FB8 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2FC7 DUP7 DUP3 DUP8 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2FD8 DUP7 DUP3 DUP8 ADD PUSH2 0x2644 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2FE9 DUP7 DUP3 DUP8 ADD PUSH2 0x267A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x300A JUMPI PUSH2 0x3009 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3018 DUP6 DUP3 DUP7 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3029 DUP6 DUP3 DUP7 ADD PUSH2 0x24AA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x309C DUP3 PUSH2 0x2659 JUMP JUMPDEST SWAP2 POP PUSH2 0x30A7 DUP4 PUSH2 0x2659 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x30B5 DUP2 PUSH2 0x2659 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x30CC JUMPI PUSH2 0x30CB PUSH2 0x3062 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x310D DUP3 PUSH2 0x2659 JUMP JUMPDEST SWAP2 POP PUSH2 0x3118 DUP4 PUSH2 0x2659 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3128 JUMPI PUSH2 0x3127 PUSH2 0x30D3 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x53656E646572466565546F6F4869676800000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x317A PUSH1 0x10 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3185 DUP3 PUSH2 0x3144 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31A9 DUP2 PUSH2 0x316D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x31C5 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2BF3 JUMP JUMPDEST PUSH2 0x31D2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2BF3 JUMP JUMPDEST PUSH2 0x31DF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2EC5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x31F6 DUP2 PUSH2 0x2B3A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3212 JUMPI PUSH2 0x3211 PUSH2 0x247F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3220 DUP5 DUP3 DUP6 ADD PUSH2 0x31E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3234 DUP3 PUSH2 0x2659 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3266 JUMPI PUSH2 0x3265 PUSH2 0x3062 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3286 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2BF3 JUMP JUMPDEST PUSH2 0x3293 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2EC5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32BF PUSH2 0x32BA PUSH2 0x32B5 DUP5 PUSH2 0x268F JUMP JUMPDEST PUSH2 0x329A JUMP JUMPDEST PUSH2 0x2659 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32CF DUP2 PUSH2 0x32A4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32F0 DUP4 DUP6 PUSH2 0x3133 JUMP JUMPDEST SWAP4 POP PUSH2 0x32FD DUP4 DUP6 DUP5 PUSH2 0x32D5 JUMP JUMPDEST PUSH2 0x3306 DUP4 PUSH2 0x284D JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x3326 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x32C6 JUMP JUMPDEST PUSH2 0x3333 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2823 JUMP JUMPDEST PUSH2 0x3340 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x2823 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x3353 DUP2 DUP5 DUP7 PUSH2 0x32E4 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x33A6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x33B9 JUMPI PUSH2 0x33B8 PUSH2 0x335F JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C7941676772656761746F72000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33F5 PUSH1 0xE DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3400 DUP3 PUSH2 0x33BF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3424 DUP2 PUSH2 0x33E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F7264657246756C66696C6C6564000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3461 PUSH1 0xE DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x346C DUP3 PUSH2 0x342B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3490 DUP2 PUSH2 0x3454 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34A2 DUP3 PUSH2 0x268F JUMP JUMPDEST SWAP2 POP PUSH2 0x34AD DUP4 PUSH2 0x268F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x34D1 JUMPI PUSH2 0x34D0 PUSH2 0x3062 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34F2 PUSH2 0x34ED PUSH2 0x34E8 DUP5 PUSH2 0x2AEE JUMP JUMPDEST PUSH2 0x329A JUMP JUMPDEST PUSH2 0x268F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3502 DUP2 PUSH2 0x34D7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x351D PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2823 JUMP JUMPDEST PUSH2 0x352A PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2823 JUMP JUMPDEST PUSH2 0x3537 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x34F9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3575 PUSH1 0x16 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3580 DUP3 PUSH2 0x353F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35A4 DUP2 PUSH2 0x3568 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x35C0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2EB6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x35DB PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2823 JUMP JUMPDEST PUSH2 0x35E8 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2BF3 JUMP JUMPDEST PUSH2 0x35F5 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2C58 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3659 PUSH1 0x2E DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3664 DUP3 PUSH2 0x35FD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3688 DUP2 PUSH2 0x364C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36C1 PUSH2 0x36BC PUSH2 0x36B7 DUP5 PUSH2 0x368F JUMP JUMPDEST PUSH2 0x329A JUMP JUMPDEST PUSH2 0x3699 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x36D1 DUP2 PUSH2 0x36A6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x36EC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x36C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x375F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3722 JUMP JUMPDEST PUSH2 0x3769 DUP7 DUP4 PUSH2 0x3722 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x379C PUSH2 0x3797 PUSH2 0x3792 DUP5 PUSH2 0x2659 JUMP JUMPDEST PUSH2 0x329A JUMP JUMPDEST PUSH2 0x2659 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x37B6 DUP4 PUSH2 0x3781 JUMP JUMPDEST PUSH2 0x37CA PUSH2 0x37C2 DUP3 PUSH2 0x37A3 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x372F JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x37DF PUSH2 0x37D2 JUMP JUMPDEST PUSH2 0x37EA DUP2 DUP5 DUP5 PUSH2 0x37AD JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x380E JUMPI PUSH2 0x3803 PUSH1 0x0 DUP3 PUSH2 0x37D7 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x37F0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3853 JUMPI PUSH2 0x3824 DUP2 PUSH2 0x36FD JUMP JUMPDEST PUSH2 0x382D DUP5 PUSH2 0x3712 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x383C JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3850 PUSH2 0x3848 DUP6 PUSH2 0x3712 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x37EF JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3876 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3858 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x388F DUP4 DUP4 PUSH2 0x3865 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x38A9 DUP4 DUP4 PUSH2 0x36F2 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x38C2 JUMPI PUSH2 0x38C1 PUSH2 0x285E JUMP JUMPDEST JUMPDEST PUSH2 0x38CC DUP3 SLOAD PUSH2 0x338E JUMP JUMPDEST PUSH2 0x38D7 DUP3 DUP3 DUP6 PUSH2 0x3812 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3906 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x38F4 JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x38FE DUP6 DUP3 PUSH2 0x3883 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3966 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3914 DUP7 PUSH2 0x36FD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x393C JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3917 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3959 JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x3955 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3865 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x397B DUP4 DUP6 PUSH2 0x2A58 JUMP JUMPDEST SWAP4 POP PUSH2 0x3988 DUP4 DUP6 DUP5 PUSH2 0x32D5 JUMP JUMPDEST PUSH2 0x3991 DUP4 PUSH2 0x284D JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39B7 DUP2 DUP5 DUP7 PUSH2 0x396F JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A1C PUSH1 0x26 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A27 DUP3 PUSH2 0x39C0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A4B DUP2 PUSH2 0x3A0F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x546F6B656E4E6F74537570706F72746564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A88 PUSH1 0x11 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A93 DUP3 PUSH2 0x3A52 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AB7 DUP2 PUSH2 0x3A7B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E7449735A65726F0000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AF4 PUSH1 0xC DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AFF DUP3 PUSH2 0x3ABE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B23 DUP2 PUSH2 0x3AE7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5468726F775A65726F4164647265737300000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B60 PUSH1 0x10 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B6B DUP3 PUSH2 0x3B2A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B8F DUP2 PUSH2 0x3B53 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964496E737469747574696F6E436F646500000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BCC PUSH1 0x16 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3BD7 DUP3 PUSH2 0x3B96 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3BFB DUP2 PUSH2 0x3BBF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C38 PUSH1 0x20 DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C43 DUP3 PUSH2 0x3C02 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C67 DUP2 PUSH2 0x3C2B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C79 DUP3 PUSH2 0x2659 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C84 DUP4 PUSH2 0x2659 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3C9C JUMPI PUSH2 0x3C9B PUSH2 0x3062 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CAD DUP3 PUSH2 0x2659 JUMP JUMPDEST SWAP2 POP PUSH2 0x3CB8 DUP4 PUSH2 0x2659 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3CD0 JUMPI PUSH2 0x3CCF PUSH2 0x3062 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D32 PUSH1 0x2B DUP4 PUSH2 0x3133 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D3D DUP3 PUSH2 0x3CD6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3D61 DUP2 PUSH2 0x3D25 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 SUB 0xC3 0x24 PUSH28 0xB726C64865B7A580DD6D825218D8AA6F111DE58C8CAA232A024AB64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"367:9282:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8225:487;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1410:1608;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1751:500:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9302:96:15;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3830:1572;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;2064:101:0;;;:::i;:::-;;7876:119:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7705:115;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2443:263:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2257:180;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8062:157:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1441:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1401:344:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8765:139:15;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;841:206;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2712:161:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9129:120:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9495:151;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5797:546;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8964:105;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2314:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8225:487:15;8300:20;8332:33;8368:21;:31;8390:8;8368:31;;;;;;;;;;;8332:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8409:14;8426:12;:19;8409:36;;8455:27;8503:6;8485:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;8455:55;;8534:9;8529:145;8553:6;8549:1;:10;8529:145;;;8589:12;8602:1;8589:15;;;;;;;;:::i;:::-;;;;;;;;8577:6;8584:1;8577:9;;;;;;;;:::i;:::-;;;;;;;:27;;;;8646:3;;;;;;;8529:145;;;;8699:6;8692:13;;;;;8225:487;;;:::o;1410:1608::-;1722:15;1785:80;1794:6;1802:7;1811:14;1827:19;1848:16;1785:8;:80::i;:::-;1991:7;;1969:18;;;;;;;;;;;1959:28;;:7;:28;;;;:::i;:::-;1958:40;;;;:::i;:::-;1944:10;:54;;1936:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;2084:6;2077:27;;;2105:10;2125:4;2132:7;2077:63;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2206:6;:18;2213:10;2206:18;;;;;;;;;;;;;;;;:21;;;;;;;;;:::i;:::-;;;;;;2464:10;2476:6;:18;2483:10;2476:18;;;;;;;;;;;;;;;;2453:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2443:53;;;;;;2433:63;;2553:334;;;;;;;;2581:10;2553:334;;;;;;2612:6;2553:334;;;;;;2652:19;2553:334;;;;;;2696:10;2553:334;;;;2726:5;2553:334;;;;;;2758:5;2553:334;;;;;;2792:14;2553:334;;;;;;2839:7;;2553:334;;;;;;;;2869:7;2553:334;;;2536:5;:14;2542:7;2536:14;;;;;;;;;;;:351;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2957:7;2948;2940:6;2932:79;;;2966:5;2973:16;2991:6;2999:11;;2932:79;;;;;;;;;;:::i;:::-;;;;;;;;1410:1608;;;;;;;;;;;;:::o;1751:500:16:-;1334:13:0;:11;:13::i;:::-;1868:14:16::1;1885:12;:19;1868:36;;1919:6;1914:331;1935:6;1931:1;:10;1914:331;;;1959:21;:31;1981:8;1959:31;;;;;;;;;;;1996:12;2009:1;1996:15;;;;;;;;:::i;:::-;;;;;;;;1959:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2078:97;;;;;;;;2120:12;2133:1;2120:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2078:97;;;;2152:8;2078:97;;::::0;2026:27:::1;:49;2054:12;2067:1;2054:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2026:49;;;;;;;;;;;:149;;;;;;;;;;;;;;;;;;;2217:3;;;;;;;1914:331;;;;1857:394;1751:500:::0;;:::o;9302:96:15:-;9349:12;9380:11;9373:18;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9302:96;:::o;3830:1572::-;4066:7;4075;1109:18;;;;;;;;;;;1095:32;;:10;:32;;;1087:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;4160:5:::1;:15;4166:8;4160:15;;;;;;;;;;;:27;;;;;;;;;;;;4159:28;4151:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;4254:13;4270:5;:15;4276:8;4270:15;;;;;;;;;;;:21;;;;;;;;;;;;4254:37;;4400:14;4370:44;;:5;:15;4376:8;4370:15;;;;;;;;;;;:26;;;:44;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4556:21;4583:52;4598:8;4608:14;4583:52;;4624:10;4583:14;:52::i;:::-;4554:81;;4678:1;4648:5;:15;4654:8;4648:15;;;;;;;;;;;:26;;;;;;;;;;;;:31;;::::0;4645:296:::1;;4779:4;4749:5;:15;4755:8;4749:15;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;4829:1;4801:5;:15;4807:8;4801:15;;;;;;;;;;;:25;;;:29;4797:134;;;4889:27;4907:8;4889:17;:27::i;:::-;4797:134;4645:296;4988:1;4963:10;:22;;;:26;4959:154;;;5049:5;5042:22;;;5065:12;;;;;;;;;;;5079:10;:22;;;5042:60;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4959:154;5175:5;5168:22;;;5191:18;5211:10;:34;;;5168:78;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5326:18;5284:77;;5307:8;5284:77;5292:13;5317:6;5346:14;5284:77;;;;;;;;:::i;:::-;;;;;;;;5379:8;5389:5;5371:24;;;;;;3830:1572:::0;;;;;;;;;:::o;2064:101:0:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;7876:119:15:-;7940:4;7963:17;:25;7981:6;7963:25;;;;;;;;;;;;;;;;;;;;;;;;;7956:32;;7876:119;;;:::o;7705:115::-;7767:12;;:::i;:::-;7798:5;:15;7804:8;7798:15;;;;;;;;;;;7791:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7705:115;;;:::o;2443:263:16:-;1334:13:0;:11;:13::i;:::-;2559:1:16::1;2542:19;;:5;:19;;::::0;2534:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2602:13;:4;:13:::0;2598:39:::1;;2632:5;2617:12;;:20;;;;;;;;;;;;;;;;;;2598:39;2651:20;:4;:20:::0;2647:52:::1;;2694:5;2673:18;;:26;;;;;;;;;;;;;;;;;;2647:52;2443:263:::0;;:::o;2257:180::-;1334:13:0;:11;:13::i;:::-;2363:19:16::1;2342:18;;:40;;;;;;;;;;;;;;;;;;2397:33;2410:19;2397:33;;;;;;:::i;:::-;;;;;;;;2257:180:::0;:::o;8062:157:15:-;8136:24;;:::i;:::-;8179:27;:33;8207:4;8179:33;;;;;;;;;;;8172:40;;;;;;;;;;;;;;;;;;;;;;;;;;;8062:157;;;:::o;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;1401:344:16:-;1334:13:0;:11;:13::i;:::-;1525:1:16::1;1508:19;;:5;:19;;::::0;1500:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;1568:15;:4;:15:::0;1564:54:::1;;1612:6;1585:17;:24;1603:5;1585:24;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;1564:54;1632:19;:4;:19:::0;1628:55:::1;;1677:6;1653:14;:21;1668:5;1653:21;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;1628:55;1699:39;1718:4;1724:5;1731:6;1699:39;;;;;;;;:::i;:::-;;;;;;;;1401:344:::0;;;:::o;8765:139:15:-;8821:6;8838:7;8869:18;;;;;;;;;;;8889:7;;8862:35;;;;8765:139;;:::o;841:206::-;3279:19:1;3302:13;;;;;;;;;;;3301:14;3279:36;;3347:14;:34;;;;;3380:1;3365:12;;;;;;;;;;:16;;;3347:34;3346:108;;;;3388:44;3426:4;3388:29;:44::i;:::-;3387:45;:66;;;;;3452:1;3436:12;;;;;;;;;;:17;;;3387:66;3346:108;3325:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3551:1;3536:12;;:16;;;;;;;;;;;;;;;;;;3566:14;3562:65;;;3612:4;3596:13;;:20;;;;;;;;;;;;;;;;;;3562:65;938:4:15::1;911:17;:24;929:5;911:24;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;965:7;955;:17;;;;1004:4;983:18;;:25;;;;;;;;;;;;;;;;;;1024:16;:14;:16::i;:::-;3651:14:1::0;3647:99;;;3697:5;3681:13;;:21;;;;;;;;;;;;;;;;;;3721:14;3733:1;3721:14;;;;;;:::i;:::-;;;;;;;;3647:99;3269:483;841:206:15;:::o;2712:161:16:-;1334:13:0;:11;:13::i;:::-;2816:10:16::1;;2802:11;:24;;;;;;;:::i;:::-;;2841:25;2855:10;;2841:25;;;;;;;:::i;:::-;;;;;;;;2712:161:::0;;:::o;9129:120:15:-;9197:4;9220:14;:22;9235:6;9220:22;;;;;;;;;;;;;;;;;;;;;;;;;9213:29;;9129:120;;;:::o;9495:151::-;1334:13:0;:11;:13::i;:::-;9602:6:15::1;9595:23;;;9619:10;9631:7;9595:44;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9495:151:::0;;;:::o;5797:546::-;5882:4;1109:18;;;;;;;;;;;1095:32;;:10;:32;;;1087:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;5964:5:::1;:15;5970:8;5964:15;;;;;;;;;;;:27;;;;;;;;;;;;5963:28;5955:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;6080:4;6050:5;:15;6056:8;6050:15;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;6123:1;6094:5;:15;6100:8;6094:15;;;;;;;;;;;:26;;;:30;;;;;;;;;;;;;;;;;;6172:5;:15;6178:8;6172:15;;;;;;;;;;;:21;;;;;;;;;;;;6165:38;;;6204:5;:15;6210:8;6204:15;;;;;;;;;;;:29;;;;;;;;;;;;6235:5;:15;6241:8;6235:15;;;;;;;;;;;:22;;;6165:93;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6298:8;6289:26;6308:6;6289:26;;;;;;:::i;:::-;;;;;;;;6332:4;6325:11;;5797:546:::0;;;;:::o;8964:105::-;9018:7;9044:18;;;;;;;;;;;9037:25;;8964:105;:::o;2314:198:0:-;1334:13;:11;:13::i;:::-;2422:1:::1;2402:22;;:8;:22;;::::0;2394:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;3024:559:15:-;3235:17;:25;3253:6;3235:25;;;;;;;;;;;;;;;;;;;;;;;;;3227:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;3310:1;3300:7;:11;3292:36;;;;;;;;;;;;:::i;:::-;;;;;;;;;3372:1;3346:28;;:14;:28;;;3338:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3444:1;3413:33;;:19;:33;;;3405:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;3547:1;3539:10;;3485:27;:45;3513:16;3485:45;;;;;;;;;;;:50;;;:64;3477:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;3024:559;;;;;:::o;1599:130:0:-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;6349:1109:15:-;6452:21;;:::i;:::-;6546:14;6563:5;:15;6569:8;6563:15;;;;;;;;;;;:22;;;6546:39;;6651:5;:15;6657:8;6651:15;;;;;;;;;;;:25;;;6642:6;:34;;;;:::i;:::-;6633:43;;6820:7;;6802:14;6793:23;;:6;:23;;;;:::i;:::-;6792:35;;;;:::i;:::-;6755:10;:34;;:72;;;;;6980:7;;6958:18;;;;;;;;;;;6921:55;;:10;:34;;;:55;;;;:::i;:::-;6920:67;;;;:::i;:::-;6895:10;:22;;:92;;;;;7160:10;:22;;;7123:10;:34;;;:59;;;;:::i;:::-;7085:10;:34;;:98;;;;;7315:10;7311:141;;;7379:10;:22;;;7341:10;:34;;:60;;;;;;;:::i;:::-;;;;;;;;7440:1;7415:10;:22;;:26;;;;;7311:141;6476:982;6349:1109;;;;;:::o;5408:343::-;5472:17;5492:5;:15;5498:8;5492:15;;;;;;;;;;;:34;;;;;;;;;;;;5472:54;;5536:12;5551:5;:15;5557:8;5551:15;;;;;;;;;;;:25;;;5536:40;;5624:5;:15;5630:8;5624:15;;;;;;;;;;;:21;;;;;;;;;;;;5617:38;;;5656:9;5667:4;5617:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5739:4;5728:9;5710:34;;;;;;;;;;;;5462:289;;5408:343;:::o;2666:187:0:-;2739:16;2758:6;;;;;;;;;;;2739:25;;2783:8;2774:6;;:17;;;;;;;;;;;;;;;;;;2837:8;2806:40;;2827:8;2806:40;;;;;;;;;;;;2729:124;2666:187;:::o;1423:320:5:-;1483:4;1735:1;1713:7;:19;;;:23;1706:30;;1423:320;;;:::o;1003:95:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1065:26:0::1;:24;:26::i;:::-;1003:95::o:0;850:96:6:-;903:7;929:10;922:17;;850:96;:::o;1104:111:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1176:32:0::1;1195:12;:10;:12::i;:::-;1176:18;:32::i;:::-;1104:111::o:0;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;7:75:20:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:143::-;1121:6;1155:5;1149:12;1139:22;;1025:143;;;:::o;1174:213::-;1302:11;1336:6;1331:3;1324:19;1376:4;1371:3;1367:14;1352:29;;1174:213;;;;:::o;1393:161::-;1489:4;1512:3;1504:11;;1542:4;1537:3;1533:14;1525:22;;1393:161;;;:::o;1560:108::-;1637:24;1655:5;1637:24;:::i;:::-;1632:3;1625:37;1560:108;;:::o;1768:505::-;1913:4;1908:3;1904:14;2000:4;1993:5;1989:16;1983:23;2019:63;2076:4;2071:3;2067:14;2053:12;2019:63;:::i;:::-;1928:164;2174:4;2167:5;2163:16;2157:23;2193:63;2250:4;2245:3;2241:14;2227:12;2193:63;:::i;:::-;2102:164;1882:391;1768:505;;:::o;2279:295::-;2406:10;2427:104;2527:3;2519:6;2427:104;:::i;:::-;2563:4;2558:3;2554:14;2540:28;;2279:295;;;;:::o;2580:142::-;2679:4;2711;2706:3;2702:14;2694:22;;2580:142;;;:::o;2826:964::-;3003:3;3032:83;3109:5;3032:83;:::i;:::-;3131:115;3239:6;3234:3;3131:115;:::i;:::-;3124:122;;3270:85;3349:5;3270:85;:::i;:::-;3378:7;3409:1;3394:371;3419:6;3416:1;3413:13;3394:371;;;3495:6;3489:13;3522:121;3639:3;3624:13;3522:121;:::i;:::-;3515:128;;3666:89;3748:6;3666:89;:::i;:::-;3656:99;;3454:311;3441:1;3438;3434:9;3429:14;;3394:371;;;3398:14;3781:3;3774:10;;3008:782;;;2826:964;;;;:::o;3796:489::-;3997:4;4035:2;4024:9;4020:18;4012:26;;4084:9;4078:4;4074:20;4070:1;4059:9;4055:17;4048:47;4112:166;4273:4;4264:6;4112:166;:::i;:::-;4104:174;;3796:489;;;;:::o;4291:126::-;4328:7;4368:42;4361:5;4357:54;4346:65;;4291:126;;;:::o;4423:96::-;4460:7;4489:24;4507:5;4489:24;:::i;:::-;4478:35;;4423:96;;;:::o;4525:122::-;4598:24;4616:5;4598:24;:::i;:::-;4591:5;4588:35;4578:63;;4637:1;4634;4627:12;4578:63;4525:122;:::o;4653:139::-;4699:5;4737:6;4724:20;4715:29;;4753:33;4780:5;4753:33;:::i;:::-;4653:139;;;;:::o;4798:77::-;4835:7;4864:5;4853:16;;4798:77;;;:::o;4881:122::-;4954:24;4972:5;4954:24;:::i;:::-;4947:5;4944:35;4934:63;;4993:1;4990;4983:12;4934:63;4881:122;:::o;5009:139::-;5055:5;5093:6;5080:20;5071:29;;5109:33;5136:5;5109:33;:::i;:::-;5009:139;;;;:::o;5154:109::-;5190:7;5230:26;5223:5;5219:38;5208:49;;5154:109;;;:::o;5269:120::-;5341:23;5358:5;5341:23;:::i;:::-;5334:5;5331:34;5321:62;;5379:1;5376;5369:12;5321:62;5269:120;:::o;5395:137::-;5440:5;5478:6;5465:20;5456:29;;5494:32;5520:5;5494:32;:::i;:::-;5395:137;;;;:::o;5538:117::-;5647:1;5644;5637:12;5661:117;5770:1;5767;5760:12;5784:117;5893:1;5890;5883:12;5921:553;5979:8;5989:6;6039:3;6032:4;6024:6;6020:17;6016:27;6006:122;;6047:79;;:::i;:::-;6006:122;6160:6;6147:20;6137:30;;6190:18;6182:6;6179:30;6176:117;;;6212:79;;:::i;:::-;6176:117;6326:4;6318:6;6314:17;6302:29;;6380:3;6372:4;6364:6;6360:17;6350:8;6346:32;6343:41;6340:128;;;6387:79;;:::i;:::-;6340:128;5921:553;;;;;:::o;6480:1693::-;6622:6;6630;6638;6646;6654;6662;6670;6678;6686;6694;6743:3;6731:9;6722:7;6718:23;6714:33;6711:120;;;6750:79;;:::i;:::-;6711:120;6870:1;6895:53;6940:7;6931:6;6920:9;6916:22;6895:53;:::i;:::-;6885:63;;6841:117;6997:2;7023:53;7068:7;7059:6;7048:9;7044:22;7023:53;:::i;:::-;7013:63;;6968:118;7125:2;7151:53;7196:7;7187:6;7176:9;7172:22;7151:53;:::i;:::-;7141:63;;7096:118;7253:2;7279:53;7324:7;7315:6;7304:9;7300:22;7279:53;:::i;:::-;7269:63;;7224:118;7381:3;7408:52;7452:7;7443:6;7432:9;7428:22;7408:52;:::i;:::-;7398:62;;7352:118;7509:3;7536:53;7581:7;7572:6;7561:9;7557:22;7536:53;:::i;:::-;7526:63;;7480:119;7638:3;7665:53;7710:7;7701:6;7690:9;7686:22;7665:53;:::i;:::-;7655:63;;7609:119;7767:3;7794:53;7839:7;7830:6;7819:9;7815:22;7794:53;:::i;:::-;7784:63;;7738:119;7924:3;7913:9;7909:19;7896:33;7956:18;7948:6;7945:30;7942:117;;;7978:79;;:::i;:::-;7942:117;8091:65;8148:7;8139:6;8128:9;8124:22;8091:65;:::i;:::-;8073:83;;;;7867:299;6480:1693;;;;;;;;;;;;;:::o;8179:118::-;8266:24;8284:5;8266:24;:::i;:::-;8261:3;8254:37;8179:118;;:::o;8303:222::-;8396:4;8434:2;8423:9;8419:18;8411:26;;8447:71;8515:1;8504:9;8500:17;8491:6;8447:71;:::i;:::-;8303:222;;;;:::o;8531:102::-;8572:6;8623:2;8619:7;8614:2;8607:5;8603:14;8599:28;8589:38;;8531:102;;;:::o;8639:180::-;8687:77;8684:1;8677:88;8784:4;8781:1;8774:15;8808:4;8805:1;8798:15;8825:281;8908:27;8930:4;8908:27;:::i;:::-;8900:6;8896:40;9038:6;9026:10;9023:22;9002:18;8990:10;8987:34;8984:62;8981:88;;;9049:18;;:::i;:::-;8981:88;9089:10;9085:2;9078:22;8868:238;8825:281;;:::o;9112:129::-;9146:6;9173:20;;:::i;:::-;9163:30;;9202:33;9230:4;9222:6;9202:33;:::i;:::-;9112:129;;;:::o;9247:340::-;9353:4;9443:18;9435:6;9432:30;9429:56;;;9465:18;;:::i;:::-;9429:56;9515:4;9507:6;9503:17;9495:25;;9575:4;9569;9565:15;9557:23;;9247:340;;;:::o;9593:117::-;9702:1;9699;9692:12;9888:578;9966:5;10010:4;9998:9;9993:3;9989:19;9985:30;9982:117;;;10018:79;;:::i;:::-;9982:117;10117:21;10133:4;10117:21;:::i;:::-;10108:30;;10197:1;10237:49;10282:3;10273:6;10262:9;10258:22;10237:49;:::i;:::-;10230:4;10223:5;10219:16;10212:75;10148:150;10357:2;10398:49;10443:3;10434:6;10423:9;10419:22;10398:49;:::i;:::-;10391:4;10384:5;10380:16;10373:75;10308:151;9888:578;;;;:::o;10523:797::-;10648:5;10673:110;10689:93;10775:6;10689:93;:::i;:::-;10673:110;:::i;:::-;10664:119;;10803:5;10832:6;10825:5;10818:21;10866:4;10859:5;10855:16;10848:23;;10919:4;10911:6;10907:17;10899:6;10895:30;10948:3;10940:6;10937:15;10934:122;;;10967:79;;:::i;:::-;10934:122;11082:6;11065:249;11099:6;11094:3;11091:15;11065:249;;;11174:3;11203:66;11265:3;11253:10;11203:66;:::i;:::-;11198:3;11191:79;11299:4;11294:3;11290:14;11283:21;;11141:173;11125:4;11120:3;11116:14;11109:21;;11065:249;;;11069:21;10654:666;;10523:797;;;;;:::o;11377:428::-;11477:5;11526:3;11519:4;11511:6;11507:17;11503:27;11493:122;;11534:79;;:::i;:::-;11493:122;11651:6;11638:20;11676:123;11795:3;11787:6;11780:4;11772:6;11768:17;11676:123;:::i;:::-;11667:132;;11483:322;11377:428;;;;:::o;11811:742::-;11933:6;11941;11990:2;11978:9;11969:7;11965:23;11961:32;11958:119;;;11996:79;;:::i;:::-;11958:119;12116:1;12141:53;12186:7;12177:6;12166:9;12162:22;12141:53;:::i;:::-;12131:63;;12087:117;12271:2;12260:9;12256:18;12243:32;12302:18;12294:6;12291:30;12288:117;;;12324:79;;:::i;:::-;12288:117;12429:107;12528:7;12519:6;12508:9;12504:22;12429:107;:::i;:::-;12419:117;;12214:332;11811:742;;;;;:::o;12559:98::-;12610:6;12644:5;12638:12;12628:22;;12559:98;;;:::o;12663:168::-;12746:11;12780:6;12775:3;12768:19;12820:4;12815:3;12811:14;12796:29;;12663:168;;;;:::o;12837:246::-;12918:1;12928:113;12942:6;12939:1;12936:13;12928:113;;;13027:1;13022:3;13018:11;13012:18;13008:1;13003:3;12999:11;12992:39;12964:2;12961:1;12957:10;12952:15;;12928:113;;;13075:1;13066:6;13061:3;13057:16;13050:27;12899:184;12837:246;;;:::o;13089:373::-;13175:3;13203:38;13235:5;13203:38;:::i;:::-;13257:70;13320:6;13315:3;13257:70;:::i;:::-;13250:77;;13336:65;13394:6;13389:3;13382:4;13375:5;13371:16;13336:65;:::i;:::-;13426:29;13448:6;13426:29;:::i;:::-;13421:3;13417:39;13410:46;;13179:283;13089:373;;;;:::o;13468:309::-;13579:4;13617:2;13606:9;13602:18;13594:26;;13666:9;13660:4;13656:20;13652:1;13641:9;13637:17;13630:47;13694:76;13765:4;13756:6;13694:76;:::i;:::-;13686:84;;13468:309;;;;:::o;13783:101::-;13819:7;13859:18;13852:5;13848:30;13837:41;;13783:101;;;:::o;13890:120::-;13962:23;13979:5;13962:23;:::i;:::-;13955:5;13952:34;13942:62;;14000:1;13997;13990:12;13942:62;13890:120;:::o;14016:137::-;14061:5;14099:6;14086:20;14077:29;;14115:32;14141:5;14115:32;:::i;:::-;14016:137;;;;:::o;14159:90::-;14193:7;14236:5;14229:13;14222:21;14211:32;;14159:90;;;:::o;14255:116::-;14325:21;14340:5;14325:21;:::i;:::-;14318:5;14315:32;14305:60;;14361:1;14358;14351:12;14305:60;14255:116;:::o;14377:133::-;14420:5;14458:6;14445:20;14436:29;;14474:30;14498:5;14474:30;:::i;:::-;14377:133;;;;:::o;14516:1049::-;14616:6;14624;14632;14640;14648;14656;14705:3;14693:9;14684:7;14680:23;14676:33;14673:120;;;14712:79;;:::i;:::-;14673:120;14832:1;14857:53;14902:7;14893:6;14882:9;14878:22;14857:53;:::i;:::-;14847:63;;14803:117;14959:2;14985:53;15030:7;15021:6;15010:9;15006:22;14985:53;:::i;:::-;14975:63;;14930:118;15087:2;15113:53;15158:7;15149:6;15138:9;15134:22;15113:53;:::i;:::-;15103:63;;15058:118;15215:2;15241:53;15286:7;15277:6;15266:9;15262:22;15241:53;:::i;:::-;15231:63;;15186:118;15343:3;15370:52;15414:7;15405:6;15394:9;15390:22;15370:52;:::i;:::-;15360:62;;15314:118;15471:3;15498:50;15540:7;15531:6;15520:9;15516:22;15498:50;:::i;:::-;15488:60;;15442:116;14516:1049;;;;;;;;:::o;15571:118::-;15658:24;15676:5;15658:24;:::i;:::-;15653:3;15646:37;15571:118;;:::o;15695:332::-;15816:4;15854:2;15843:9;15839:18;15831:26;;15867:71;15935:1;15924:9;15920:17;15911:6;15867:71;:::i;:::-;15948:72;16016:2;16005:9;16001:18;15992:6;15948:72;:::i;:::-;15695:332;;;;;:::o;16033:329::-;16092:6;16141:2;16129:9;16120:7;16116:23;16112:32;16109:119;;;16147:79;;:::i;:::-;16109:119;16267:1;16292:53;16337:7;16328:6;16317:9;16313:22;16292:53;:::i;:::-;16282:63;;16238:117;16033:329;;;;:::o;16368:109::-;16449:21;16464:5;16449:21;:::i;:::-;16444:3;16437:34;16368:109;;:::o;16483:210::-;16570:4;16608:2;16597:9;16593:18;16585:26;;16621:65;16683:1;16672:9;16668:17;16659:6;16621:65;:::i;:::-;16483:210;;;;:::o;16699:108::-;16776:24;16794:5;16776:24;:::i;:::-;16771:3;16764:37;16699:108;;:::o;16813:::-;16890:24;16908:5;16890:24;:::i;:::-;16885:3;16878:37;16813:108;;:::o;16927:105::-;17002:23;17019:5;17002:23;:::i;:::-;16997:3;16990:36;16927:105;;:::o;17038:99::-;17109:21;17124:5;17109:21;:::i;:::-;17104:3;17097:34;17038:99;;:::o;17199:1763::-;17342:6;17337:3;17333:16;17433:4;17426:5;17422:16;17416:23;17452:63;17509:4;17504:3;17500:14;17486:12;17452:63;:::i;:::-;17359:166;17608:4;17601:5;17597:16;17591:23;17627:63;17684:4;17679:3;17675:14;17661:12;17627:63;:::i;:::-;17535:165;17796:4;17789:5;17785:16;17779:23;17815:63;17872:4;17867:3;17863:14;17849:12;17815:63;:::i;:::-;17710:178;17975:4;17968:5;17964:16;17958:23;17994:63;18051:4;18046:3;18042:14;18028:12;17994:63;:::i;:::-;17898:169;18149:4;18142:5;18138:16;18132:23;18168:61;18223:4;18218:3;18214:14;18200:12;18168:61;:::i;:::-;18077:162;18328:4;18321:5;18317:16;18311:23;18347:57;18398:4;18393:3;18389:14;18375:12;18347:57;:::i;:::-;18249:165;18505:4;18498:5;18494:16;18488:23;18524:63;18581:4;18576:3;18572:14;18558:12;18524:63;:::i;:::-;18424:173;18685:4;18678:5;18674:16;18668:23;18704:61;18759:4;18754:3;18750:14;18736:12;18704:61;:::i;:::-;18607:168;18859:6;18852:5;18848:18;18842:25;18880:65;18937:6;18932:3;18928:16;18914:12;18880:65;:::i;:::-;18785:170;17311:1651;17199:1763;;:::o;18968:315::-;19107:4;19145:3;19134:9;19130:19;19122:27;;19159:117;19273:1;19262:9;19258:17;19249:6;19159:117;:::i;:::-;18968:315;;;;:::o;19289:474::-;19357:6;19365;19414:2;19402:9;19393:7;19389:23;19385:32;19382:119;;;19420:79;;:::i;:::-;19382:119;19540:1;19565:53;19610:7;19601:6;19590:9;19586:22;19565:53;:::i;:::-;19555:63;;19511:117;19667:2;19693:53;19738:7;19729:6;19718:9;19714:22;19693:53;:::i;:::-;19683:63;;19638:118;19289:474;;;;;:::o;19769:327::-;19827:6;19876:2;19864:9;19855:7;19851:23;19847:32;19844:119;;;19882:79;;:::i;:::-;19844:119;20002:1;20027:52;20071:7;20062:6;20051:9;20047:22;20027:52;:::i;:::-;20017:62;;19973:116;19769:327;;;;:::o;20208:531::-;20375:4;20370:3;20366:14;20462:4;20455:5;20451:16;20445:23;20481:63;20538:4;20533:3;20529:14;20515:12;20481:63;:::i;:::-;20390:164;20640:4;20633:5;20629:16;20623:23;20659:63;20716:4;20711:3;20707:14;20693:12;20659:63;:::i;:::-;20564:168;20344:395;20208:531;;:::o;20745:362::-;20908:4;20946:2;20935:9;20931:18;20923:26;;20959:141;21097:1;21086:9;21082:17;21073:6;20959:141;:::i;:::-;20745:362;;;;:::o;21113:222::-;21206:4;21244:2;21233:9;21229:18;21221:26;;21257:71;21325:1;21314:9;21310:17;21301:6;21257:71;:::i;:::-;21113:222;;;;:::o;21341:613::-;21415:6;21423;21431;21480:2;21468:9;21459:7;21455:23;21451:32;21448:119;;;21486:79;;:::i;:::-;21448:119;21606:1;21631:53;21676:7;21667:6;21656:9;21652:22;21631:53;:::i;:::-;21621:63;;21577:117;21733:2;21759:53;21804:7;21795:6;21784:9;21780:22;21759:53;:::i;:::-;21749:63;;21704:118;21861:2;21887:50;21929:7;21920:6;21909:9;21905:22;21887:50;:::i;:::-;21877:60;;21832:115;21341:613;;;;;:::o;21960:115::-;22045:23;22062:5;22045:23;:::i;:::-;22040:3;22033:36;21960:115;;:::o;22081:118::-;22168:24;22186:5;22168:24;:::i;:::-;22163:3;22156:37;22081:118;;:::o;22205:328::-;22324:4;22362:2;22351:9;22347:18;22339:26;;22375:69;22441:1;22430:9;22426:17;22417:6;22375:69;:::i;:::-;22454:72;22522:2;22511:9;22507:18;22498:6;22454:72;:::i;:::-;22205:328;;;;;:::o;22552:552::-;22609:8;22619:6;22669:3;22662:4;22654:6;22650:17;22646:27;22636:122;;22677:79;;:::i;:::-;22636:122;22790:6;22777:20;22767:30;;22820:18;22812:6;22809:30;22806:117;;;22842:79;;:::i;:::-;22806:117;22956:4;22948:6;22944:17;22932:29;;23010:3;23002:4;22994:6;22990:17;22980:8;22976:32;22973:41;22970:128;;;23017:79;;:::i;:::-;22970:128;22552:552;;;;;:::o;23110:527::-;23180:6;23188;23237:2;23225:9;23216:7;23212:23;23208:32;23205:119;;;23243:79;;:::i;:::-;23205:119;23391:1;23380:9;23376:17;23363:31;23421:18;23413:6;23410:30;23407:117;;;23443:79;;:::i;:::-;23407:117;23556:64;23612:7;23603:6;23592:9;23588:22;23556:64;:::i;:::-;23538:82;;;;23334:296;23110:527;;;;;:::o;23643:619::-;23720:6;23728;23736;23785:2;23773:9;23764:7;23760:23;23756:32;23753:119;;;23791:79;;:::i;:::-;23753:119;23911:1;23936:53;23981:7;23972:6;23961:9;23957:22;23936:53;:::i;:::-;23926:63;;23882:117;24038:2;24064:53;24109:7;24100:6;24089:9;24085:22;24064:53;:::i;:::-;24054:63;;24009:118;24166:2;24192:53;24237:7;24228:6;24217:9;24213:22;24192:53;:::i;:::-;24182:63;;24137:118;23643:619;;;;;:::o;24268:474::-;24336:6;24344;24393:2;24381:9;24372:7;24368:23;24364:32;24361:119;;;24399:79;;:::i;:::-;24361:119;24519:1;24544:53;24589:7;24580:6;24569:9;24565:22;24544:53;:::i;:::-;24534:63;;24490:117;24646:2;24672:53;24717:7;24708:6;24697:9;24693:22;24672:53;:::i;:::-;24662:63;;24617:118;24268:474;;;;;:::o;24748:180::-;24796:77;24793:1;24786:88;24893:4;24890:1;24883:15;24917:4;24914:1;24907:15;24934:180;24982:77;24979:1;24972:88;25079:4;25076:1;25069:15;25103:4;25100:1;25093:15;25120:410;25160:7;25183:20;25201:1;25183:20;:::i;:::-;25178:25;;25217:20;25235:1;25217:20;:::i;:::-;25212:25;;25272:1;25269;25265:9;25294:30;25312:11;25294:30;:::i;:::-;25283:41;;25473:1;25464:7;25460:15;25457:1;25454:22;25434:1;25427:9;25407:83;25384:139;;25503:18;;:::i;:::-;25384:139;25168:362;25120:410;;;;:::o;25536:180::-;25584:77;25581:1;25574:88;25681:4;25678:1;25671:15;25705:4;25702:1;25695:15;25722:185;25762:1;25779:20;25797:1;25779:20;:::i;:::-;25774:25;;25813:20;25831:1;25813:20;:::i;:::-;25808:25;;25852:1;25842:35;;25857:18;;:::i;:::-;25842:35;25899:1;25896;25892:9;25887:14;;25722:185;;;;:::o;25913:169::-;25997:11;26031:6;26026:3;26019:19;26071:4;26066:3;26062:14;26047:29;;25913:169;;;;:::o;26088:166::-;26228:18;26224:1;26216:6;26212:14;26205:42;26088:166;:::o;26260:366::-;26402:3;26423:67;26487:2;26482:3;26423:67;:::i;:::-;26416:74;;26499:93;26588:3;26499:93;:::i;:::-;26617:2;26612:3;26608:12;26601:19;;26260:366;;;:::o;26632:419::-;26798:4;26836:2;26825:9;26821:18;26813:26;;26885:9;26879:4;26875:20;26871:1;26860:9;26856:17;26849:47;26913:131;27039:4;26913:131;:::i;:::-;26905:139;;26632:419;;;:::o;27057:442::-;27206:4;27244:2;27233:9;27229:18;27221:26;;27257:71;27325:1;27314:9;27310:17;27301:6;27257:71;:::i;:::-;27338:72;27406:2;27395:9;27391:18;27382:6;27338:72;:::i;:::-;27420;27488:2;27477:9;27473:18;27464:6;27420:72;:::i;:::-;27057:442;;;;;;:::o;27505:137::-;27559:5;27590:6;27584:13;27575:22;;27606:30;27630:5;27606:30;:::i;:::-;27505:137;;;;:::o;27648:345::-;27715:6;27764:2;27752:9;27743:7;27739:23;27735:32;27732:119;;;27770:79;;:::i;:::-;27732:119;27890:1;27915:61;27968:7;27959:6;27948:9;27944:22;27915:61;:::i;:::-;27905:71;;27861:125;27648:345;;;;:::o;27999:233::-;28038:3;28061:24;28079:5;28061:24;:::i;:::-;28052:33;;28107:66;28100:5;28097:77;28094:103;;28177:18;;:::i;:::-;28094:103;28224:1;28217:5;28213:13;28206:20;;27999:233;;;:::o;28238:332::-;28359:4;28397:2;28386:9;28382:18;28374:26;;28410:71;28478:1;28467:9;28463:17;28454:6;28410:71;:::i;:::-;28491:72;28559:2;28548:9;28544:18;28535:6;28491:72;:::i;:::-;28238:332;;;;;:::o;28576:60::-;28604:3;28625:5;28618:12;;28576:60;;;:::o;28642:140::-;28691:9;28724:52;28742:33;28751:23;28768:5;28751:23;:::i;:::-;28742:33;:::i;:::-;28724:52;:::i;:::-;28711:65;;28642:140;;;:::o;28788:129::-;28874:36;28904:5;28874:36;:::i;:::-;28869:3;28862:49;28788:129;;:::o;28923:146::-;29020:6;29015:3;29010;28997:30;29061:1;29052:6;29047:3;29043:16;29036:27;28923:146;;;:::o;29099:317::-;29197:3;29218:71;29282:6;29277:3;29218:71;:::i;:::-;29211:78;;29299:56;29348:6;29343:3;29336:5;29299:56;:::i;:::-;29380:29;29402:6;29380:29;:::i;:::-;29375:3;29371:39;29364:46;;29099:317;;;;;:::o;29422:662::-;29628:4;29666:3;29655:9;29651:19;29643:27;;29680:70;29747:1;29736:9;29732:17;29723:6;29680:70;:::i;:::-;29760:72;29828:2;29817:9;29813:18;29804:6;29760:72;:::i;:::-;29842;29910:2;29899:9;29895:18;29886:6;29842:72;:::i;:::-;29961:9;29955:4;29951:20;29946:2;29935:9;29931:18;29924:48;29989:88;30072:4;30063:6;30055;29989:88;:::i;:::-;29981:96;;29422:662;;;;;;;;:::o;30090:180::-;30138:77;30135:1;30128:88;30235:4;30232:1;30225:15;30259:4;30256:1;30249:15;30276:320;30320:6;30357:1;30351:4;30347:12;30337:22;;30404:1;30398:4;30394:12;30425:18;30415:81;;30481:4;30473:6;30469:17;30459:27;;30415:81;30543:2;30535:6;30532:14;30512:18;30509:38;30506:84;;30562:18;;:::i;:::-;30506:84;30327:269;30276:320;;;:::o;30602:164::-;30742:16;30738:1;30730:6;30726:14;30719:40;30602:164;:::o;30772:366::-;30914:3;30935:67;30999:2;30994:3;30935:67;:::i;:::-;30928:74;;31011:93;31100:3;31011:93;:::i;:::-;31129:2;31124:3;31120:12;31113:19;;30772:366;;;:::o;31144:419::-;31310:4;31348:2;31337:9;31333:18;31325:26;;31397:9;31391:4;31387:20;31383:1;31372:9;31368:17;31361:47;31425:131;31551:4;31425:131;:::i;:::-;31417:139;;31144:419;;;:::o;31569:164::-;31709:16;31705:1;31697:6;31693:14;31686:40;31569:164;:::o;31739:366::-;31881:3;31902:67;31966:2;31961:3;31902:67;:::i;:::-;31895:74;;31978:93;32067:3;31978:93;:::i;:::-;32096:2;32091:3;32087:12;32080:19;;31739:366;;;:::o;32111:419::-;32277:4;32315:2;32304:9;32300:18;32292:26;;32364:9;32358:4;32354:20;32350:1;32339:9;32335:17;32328:47;32392:131;32518:4;32392:131;:::i;:::-;32384:139;;32111:419;;;:::o;32536:216::-;32575:4;32595:19;32612:1;32595:19;:::i;:::-;32590:24;;32628:19;32645:1;32628:19;:::i;:::-;32623:24;;32671:1;32668;32664:9;32656:17;;32695:26;32689:4;32686:36;32683:62;;;32725:18;;:::i;:::-;32683:62;32536:216;;;;:::o;32758:138::-;32806:9;32839:51;32856:33;32865:23;32882:5;32865:23;:::i;:::-;32856:33;:::i;:::-;32839:51;:::i;:::-;32826:64;;32758:138;;;:::o;32902:127::-;32987:35;33016:5;32987:35;:::i;:::-;32982:3;32975:48;32902:127;;:::o;33035:438::-;33182:4;33220:2;33209:9;33205:18;33197:26;;33233:71;33301:1;33290:9;33286:17;33277:6;33233:71;:::i;:::-;33314:72;33382:2;33371:9;33367:18;33358:6;33314:72;:::i;:::-;33396:70;33462:2;33451:9;33447:18;33438:6;33396:70;:::i;:::-;33035:438;;;;;;:::o;33479:172::-;33619:24;33615:1;33607:6;33603:14;33596:48;33479:172;:::o;33657:366::-;33799:3;33820:67;33884:2;33879:3;33820:67;:::i;:::-;33813:74;;33896:93;33985:3;33896:93;:::i;:::-;34014:2;34009:3;34005:12;33998:19;;33657:366;;;:::o;34029:419::-;34195:4;34233:2;34222:9;34218:18;34210:26;;34282:9;34276:4;34272:20;34268:1;34257:9;34253:17;34246:47;34310:131;34436:4;34310:131;:::i;:::-;34302:139;;34029:419;;;:::o;34454:218::-;34545:4;34583:2;34572:9;34568:18;34560:26;;34596:69;34662:1;34651:9;34647:17;34638:6;34596:69;:::i;:::-;34454:218;;;;:::o;34678:430::-;34821:4;34859:2;34848:9;34844:18;34836:26;;34872:71;34940:1;34929:9;34925:17;34916:6;34872:71;:::i;:::-;34953:72;35021:2;35010:9;35006:18;34997:6;34953:72;:::i;:::-;35035:66;35097:2;35086:9;35082:18;35073:6;35035:66;:::i;:::-;34678:430;;;;;;:::o;35114:233::-;35254:34;35250:1;35242:6;35238:14;35231:58;35323:16;35318:2;35310:6;35306:15;35299:41;35114:233;:::o;35353:366::-;35495:3;35516:67;35580:2;35575:3;35516:67;:::i;:::-;35509:74;;35592:93;35681:3;35592:93;:::i;:::-;35710:2;35705:3;35701:12;35694:19;;35353:366;;;:::o;35725:419::-;35891:4;35929:2;35918:9;35914:18;35906:26;;35978:9;35972:4;35968:20;35964:1;35953:9;35949:17;35942:47;36006:131;36132:4;36006:131;:::i;:::-;35998:139;;35725:419;;;:::o;36150:85::-;36195:7;36224:5;36213:16;;36150:85;;;:::o;36241:86::-;36276:7;36316:4;36309:5;36305:16;36294:27;;36241:86;;;:::o;36333:154::-;36389:9;36422:59;36438:42;36447:32;36473:5;36447:32;:::i;:::-;36438:42;:::i;:::-;36422:59;:::i;:::-;36409:72;;36333:154;;;:::o;36493:143::-;36586:43;36623:5;36586:43;:::i;:::-;36581:3;36574:56;36493:143;;:::o;36642:234::-;36741:4;36779:2;36768:9;36764:18;36756:26;;36792:77;36866:1;36855:9;36851:17;36842:6;36792:77;:::i;:::-;36642:234;;;;:::o;36882:96::-;36940:6;36968:3;36958:13;;36882:96;;;;:::o;36984:140::-;37032:4;37055:3;37047:11;;37078:3;37075:1;37068:14;37112:4;37109:1;37099:18;37091:26;;36984:140;;;:::o;37130:93::-;37167:6;37214:2;37209;37202:5;37198:14;37194:23;37184:33;;37130:93;;;:::o;37229:107::-;37273:8;37323:5;37317:4;37313:16;37292:37;;37229:107;;;;:::o;37342:393::-;37411:6;37461:1;37449:10;37445:18;37484:97;37514:66;37503:9;37484:97;:::i;:::-;37602:39;37632:8;37621:9;37602:39;:::i;:::-;37590:51;;37674:4;37670:9;37663:5;37659:21;37650:30;;37723:4;37713:8;37709:19;37702:5;37699:30;37689:40;;37418:317;;37342:393;;;;;:::o;37741:142::-;37791:9;37824:53;37842:34;37851:24;37869:5;37851:24;:::i;:::-;37842:34;:::i;:::-;37824:53;:::i;:::-;37811:66;;37741:142;;;:::o;37889:75::-;37932:3;37953:5;37946:12;;37889:75;;;:::o;37970:269::-;38080:39;38111:7;38080:39;:::i;:::-;38141:91;38190:41;38214:16;38190:41;:::i;:::-;38182:6;38175:4;38169:11;38141:91;:::i;:::-;38135:4;38128:105;38046:193;37970:269;;;:::o;38245:73::-;38290:3;38245:73;:::o;38324:189::-;38401:32;;:::i;:::-;38442:65;38500:6;38492;38486:4;38442:65;:::i;:::-;38377:136;38324:189;;:::o;38519:186::-;38579:120;38596:3;38589:5;38586:14;38579:120;;;38650:39;38687:1;38680:5;38650:39;:::i;:::-;38623:1;38616:5;38612:13;38603:22;;38579:120;;;38519:186;;:::o;38711:541::-;38811:2;38806:3;38803:11;38800:445;;;38845:37;38876:5;38845:37;:::i;:::-;38928:29;38946:10;38928:29;:::i;:::-;38918:8;38914:44;39111:2;39099:10;39096:18;39093:49;;;39132:8;39117:23;;39093:49;39155:80;39211:22;39229:3;39211:22;:::i;:::-;39201:8;39197:37;39184:11;39155:80;:::i;:::-;38815:430;;38800:445;38711:541;;;:::o;39258:117::-;39312:8;39362:5;39356:4;39352:16;39331:37;;39258:117;;;;:::o;39381:169::-;39425:6;39458:51;39506:1;39502:6;39494:5;39491:1;39487:13;39458:51;:::i;:::-;39454:56;39539:4;39533;39529:15;39519:25;;39432:118;39381:169;;;;:::o;39555:295::-;39631:4;39777:29;39802:3;39796:4;39777:29;:::i;:::-;39769:37;;39839:3;39836:1;39832:11;39826:4;39823:21;39815:29;;39555:295;;;;:::o;39855:1398::-;39977:43;40016:3;40011;39977:43;:::i;:::-;40085:18;40077:6;40074:30;40071:56;;;40107:18;;:::i;:::-;40071:56;40151:38;40183:4;40177:11;40151:38;:::i;:::-;40236:66;40295:6;40287;40281:4;40236:66;:::i;:::-;40329:1;40358:2;40350:6;40347:14;40375:1;40370:631;;;;41045:1;41062:6;41059:84;;;41118:9;41113:3;41109:19;41096:33;41087:42;;41059:84;41169:67;41229:6;41222:5;41169:67;:::i;:::-;41163:4;41156:81;41018:229;40340:907;;40370:631;40422:4;40418:9;40410:6;40406:22;40456:36;40487:4;40456:36;:::i;:::-;40514:1;40528:215;40542:7;40539:1;40536:14;40528:215;;;40628:9;40623:3;40619:19;40606:33;40598:6;40591:49;40679:1;40671:6;40667:14;40657:24;;40726:2;40715:9;40711:18;40698:31;;40565:4;40562:1;40558:12;40553:17;;40528:215;;;40771:6;40762:7;40759:19;40756:186;;;40836:9;40831:3;40827:19;40814:33;40879:48;40921:4;40913:6;40909:17;40898:9;40879:48;:::i;:::-;40871:6;40864:64;40779:163;40756:186;40988:1;40984;40976:6;40972:14;40968:22;40962:4;40955:36;40377:624;;;40340:907;;39952:1301;;;39855:1398;;;:::o;41281:314::-;41377:3;41398:70;41461:6;41456:3;41398:70;:::i;:::-;41391:77;;41478:56;41527:6;41522:3;41515:5;41478:56;:::i;:::-;41559:29;41581:6;41559:29;:::i;:::-;41554:3;41550:39;41543:46;;41281:314;;;;;:::o;41601:329::-;41722:4;41760:2;41749:9;41745:18;41737:26;;41809:9;41803:4;41799:20;41795:1;41784:9;41780:17;41773:47;41837:86;41918:4;41909:6;41901;41837:86;:::i;:::-;41829:94;;41601:329;;;;;:::o;41936:225::-;42076:34;42072:1;42064:6;42060:14;42053:58;42145:8;42140:2;42132:6;42128:15;42121:33;41936:225;:::o;42167:366::-;42309:3;42330:67;42394:2;42389:3;42330:67;:::i;:::-;42323:74;;42406:93;42495:3;42406:93;:::i;:::-;42524:2;42519:3;42515:12;42508:19;;42167:366;;;:::o;42539:419::-;42705:4;42743:2;42732:9;42728:18;42720:26;;42792:9;42786:4;42782:20;42778:1;42767:9;42763:17;42756:47;42820:131;42946:4;42820:131;:::i;:::-;42812:139;;42539:419;;;:::o;42964:167::-;43104:19;43100:1;43092:6;43088:14;43081:43;42964:167;:::o;43137:366::-;43279:3;43300:67;43364:2;43359:3;43300:67;:::i;:::-;43293:74;;43376:93;43465:3;43376:93;:::i;:::-;43494:2;43489:3;43485:12;43478:19;;43137:366;;;:::o;43509:419::-;43675:4;43713:2;43702:9;43698:18;43690:26;;43762:9;43756:4;43752:20;43748:1;43737:9;43733:17;43726:47;43790:131;43916:4;43790:131;:::i;:::-;43782:139;;43509:419;;;:::o;43934:162::-;44074:14;44070:1;44062:6;44058:14;44051:38;43934:162;:::o;44102:366::-;44244:3;44265:67;44329:2;44324:3;44265:67;:::i;:::-;44258:74;;44341:93;44430:3;44341:93;:::i;:::-;44459:2;44454:3;44450:12;44443:19;;44102:366;;;:::o;44474:419::-;44640:4;44678:2;44667:9;44663:18;44655:26;;44727:9;44721:4;44717:20;44713:1;44702:9;44698:17;44691:47;44755:131;44881:4;44755:131;:::i;:::-;44747:139;;44474:419;;;:::o;44899:166::-;45039:18;45035:1;45027:6;45023:14;45016:42;44899:166;:::o;45071:366::-;45213:3;45234:67;45298:2;45293:3;45234:67;:::i;:::-;45227:74;;45310:93;45399:3;45310:93;:::i;:::-;45428:2;45423:3;45419:12;45412:19;;45071:366;;;:::o;45443:419::-;45609:4;45647:2;45636:9;45632:18;45624:26;;45696:9;45690:4;45686:20;45682:1;45671:9;45667:17;45660:47;45724:131;45850:4;45724:131;:::i;:::-;45716:139;;45443:419;;;:::o;45868:172::-;46008:24;46004:1;45996:6;45992:14;45985:48;45868:172;:::o;46046:366::-;46188:3;46209:67;46273:2;46268:3;46209:67;:::i;:::-;46202:74;;46285:93;46374:3;46285:93;:::i;:::-;46403:2;46398:3;46394:12;46387:19;;46046:366;;;:::o;46418:419::-;46584:4;46622:2;46611:9;46607:18;46599:26;;46671:9;46665:4;46661:20;46657:1;46646:9;46642:17;46635:47;46699:131;46825:4;46699:131;:::i;:::-;46691:139;;46418:419;;;:::o;46843:182::-;46983:34;46979:1;46971:6;46967:14;46960:58;46843:182;:::o;47031:366::-;47173:3;47194:67;47258:2;47253:3;47194:67;:::i;:::-;47187:74;;47270:93;47359:3;47270:93;:::i;:::-;47388:2;47383:3;47379:12;47372:19;;47031:366;;;:::o;47403:419::-;47569:4;47607:2;47596:9;47592:18;47584:26;;47656:9;47650:4;47646:20;47642:1;47631:9;47627:17;47620:47;47684:131;47810:4;47684:131;:::i;:::-;47676:139;;47403:419;;;:::o;47828:194::-;47868:4;47888:20;47906:1;47888:20;:::i;:::-;47883:25;;47922:20;47940:1;47922:20;:::i;:::-;47917:25;;47966:1;47963;47959:9;47951:17;;47990:1;47984:4;47981:11;47978:37;;;47995:18;;:::i;:::-;47978:37;47828:194;;;;:::o;48028:191::-;48068:3;48087:20;48105:1;48087:20;:::i;:::-;48082:25;;48121:20;48139:1;48121:20;:::i;:::-;48116:25;;48164:1;48161;48157:9;48150:16;;48185:3;48182:1;48179:10;48176:36;;;48192:18;;:::i;:::-;48176:36;48028:191;;;;:::o;48225:230::-;48365:34;48361:1;48353:6;48349:14;48342:58;48434:13;48429:2;48421:6;48417:15;48410:38;48225:230;:::o;48461:366::-;48603:3;48624:67;48688:2;48683:3;48624:67;:::i;:::-;48617:74;;48700:93;48789:3;48700:93;:::i;:::-;48818:2;48813:3;48809:12;48802:19;;48461:366;;;:::o;48833:419::-;48999:4;49037:2;49026:9;49022:18;49014:26;;49086:9;49080:4;49076:20;49072:1;49061:9;49057:17;49050:47;49114:131;49240:4;49114:131;:::i;:::-;49106:139;;48833:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3154800","executionCost":"infinite","totalCost":"infinite"},"external":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":"infinite","getAggregator()":"infinite","getAggregatorAddress()":"2632","getFeeDetails()":"4782","getOrderInfo(bytes32)":"infinite","getSupportedInstitutionName(bytes32)":"infinite","getSupportedInstitutions(bytes32)":"infinite","getWhitelistedStatus(address)":"2927","initialize(address)":"187287","isTokenSupported(address)":"2928","owner()":"2567","refund(bytes32,bytes32)":"infinite","renounceOwnership()":"30421","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"infinite","settingManagerBool(bytes32,address,bool)":"infinite","settle(bytes32,bytes32,bytes32,address,uint64,bool)":"infinite","transferOwnership(address)":"30876","updateProtocolAddresses(bytes32,address)":"51646","updateProtocolAggregator(bytes)":"infinite","updateProtocolFees(uint64)":"infinite","withdraw(address,address,uint256)":"infinite"},"internal":{"_calculateFees(bytes32,uint96,bool)":"infinite","_handler(address,uint256,address,address,bytes32)":"infinite","transferSenderFee(bytes32)":"infinite"}},"methodIdentifiers":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":"2654ec7e","getAggregator()":"3ad59dbc","getAggregatorAddress()":"e8d6e0de","getFeeDetails()":"b810c636","getOrderInfo(bytes32)":"768c6ec0","getSupportedInstitutionName(bytes32)":"87490d86","getSupportedInstitutions(bytes32)":"02621338","getWhitelistedStatus(address)":"d8e8de34","initialize(address)":"c4d66de8","isTokenSupported(address)":"75151b63","owner()":"8da5cb5b","refund(bytes32,bytes32)":"e4683a79","renounceOwnership()":"715018a6","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"32200882","settingManagerBool(bytes32,address,bool)":"99e3c0b4","settle(bytes32,bytes32,bytes32,address,uint64,bool)":"5fe44cac","transferOwnership(address)":"f2fde38b","updateProtocolAddresses(bytes32,address)":"79a0effb","updateProtocolAggregator(bytes)":"cb79455b","updateProtocolFees(uint64)":"84630736","withdraw(address,address,uint256)":"d9caed12"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"PaycrestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionName\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_isPartner\",\"type\":\"bool\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"updateProtocolAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deposit(address,uint256,bytes32,uint256,bytes32,bytes32,string)\":{\"details\":\"Emitted when deposit is made.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Refunded(bytes32,bytes32)\":{\"details\":\"Emitted when aggregator refund transaction.\"},\"RewardValidator(address,uint256)\":{\"details\":\"Emitted when primary validator get therir rewards.\"},\"Settled(bytes32,bytes32,bytes32,address,uint96)\":{\"details\":\"Emitted when aggregator settle transaction.\"},\"TransferSenderFee(address,uint256)\":{\"details\":\"Emitted when sender get therir rewards.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"See {createOrder-IPaycrest}. \"},\"getAggregator()\":{\"details\":\"See {getAggregator-IPaycrest}. \"},\"getAggregatorAddress()\":{\"details\":\"See {getAggregatorAddress-IPaycrest}. \"},\"getFeeDetails()\":{\"details\":\"See {getFeeDetails-IPaycrest}. \"},\"getOrderInfo(bytes32)\":{\"details\":\"See {getOrderInfo-IPaycrest}. \"},\"getSupportedInstitutionName(bytes32)\":{\"details\":\"See {getSupportedInstitutionName-IPaycrest}. \"},\"getWhitelistedStatus(address)\":{\"details\":\"See {getWhitelistedStatus-IPaycrest}. \"},\"isTokenSupported(address)\":{\"details\":\"See {isTokenSupported-IPaycrest}. \"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"refund(bytes32,bytes32)\":{\"details\":\"See {refund-IPaycrest}. \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"settle(bytes32,bytes32,bytes32,address,uint64,bool)\":{\"details\":\"See {settle-IPaycrest}. \"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Paycrest.sol\":\"Paycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Paycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {PaycrestSettingManager} from \\\"./PaycrestSettingManager.sol\\\";\\nimport {IPaycrest, IERC20} from \\\"./interface/IPaycrest.sol\\\";\\ncontract Paycrest is IPaycrest, PaycrestSettingManager { \\n    using SafeERC20Upgradeable for IERC20;\\n    using ECDSAUpgradeable for bytes32;\\n    struct fee {\\n        uint256 protocolFee;\\n        uint256 liquidityProviderAmount;\\n    }\\n    mapping(bytes32 => Order) private order;\\n    mapping(address => uint256) private _nonce;\\n    uint256[50] private __gap;\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _usdc) external initializer {    \\n        _isTokenSupported[_usdc] = true;   \\n        MAX_BPS = 100_000; \\n        protocolFeePercent = 5000; // 5%\\n        __Ownable_init();\\n    }\\n\\n    modifier onlyAggregator {\\n        require(msg.sender == _aggregatorAddress, \\\"OnlyAggregator\\\");\\n        _;\\n    }\\n    \\n    /* ##################################################################\\n                                USER CALLS\\n    ################################################################## */\\n    /** @dev See {createOrder-IPaycrest}. */\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        bytes32 _label,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash\\n    )  external returns(bytes32 orderId) {\\n        // checks that are required\\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _institutionCode);\\n        // require that sender fee is less than protocol fee\\n        require(_senderFee <= (_amount * protocolFeePercent) / MAX_BPS, \\\"SenderFeeTooHigh\\\");\\n        // first transfer token from msg.sender\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n        // increase users nonce to avoid replay attacks\\n        _nonce[msg.sender] ++;\\n        // @chibie @5ran6\\n        // @todo sender fee should have limit, let say the maximum amount of sender fee should be 1% of the amount\\n        // generate transaction id for the transaction\\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\\n        // update transaction\\n        order[orderId] = Order({\\n            seller: msg.sender,\\n            token: _token,\\n            senderFeeRecipient: _senderFeeRecipient,\\n            senderFee: _senderFee,\\n            rate: _rate,\\n            isFulfilled: false,\\n            refundAddress: _refundAddress,\\n            currentBPS: uint64(MAX_BPS),\\n            amount: _amount\\n        });\\n        // emit deposit event\\n        emit Deposit(_token, _amount, orderId, _rate, _institutionCode, _label, messageHash);\\n    }\\n\\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, bytes32 _institutionCode) internal view {\\n        // use require for all the custom errors\\n        require(_isTokenSupported[_token], \\\"TokenNotSupported\\\");\\n        require(_amount > 0, \\\"AmountIsZero\\\");\\n        require(_refundAddress != address(0), \\\"ThrowZeroAddress\\\");\\n        require(_senderFeeRecipient != address(0), \\\"ThrowZeroAddress\\\");\\n        require(supportedInstitutionsByCode[_institutionCode].name != bytes32(0), \\\"InvalidInstitutionCode\\\");\\n    }\\n\\n    /* ##################################################################\\n                                AGGREGATOR FUNCTIONS\\n    ################################################################## */\\n    /** @dev See {settle-IPaycrest}. */\\n    function settle(\\n        bytes32 _splitOrderId,\\n        bytes32 _orderId, \\n        bytes32 _label,\\n        address _liquidityProvider, \\n        uint64 _settlePercent,\\n        bool _isPartner\\n        )  external onlyAggregator() returns(bytes32, address) {\\n        // ensure the transaction has not been fulfilled\\n        require(!order[_orderId].isFulfilled, \\\"OrderFulfilled\\\");\\n        // load the token into memory\\n        address token = order[_orderId].token;\\n        // substract sum of amount based on the input _settlePercent\\n        order[_orderId].currentBPS -= _settlePercent;\\n        // if transaction amount is zero\\n        // load the fees and transfer associated protocol fees to protocol fee recipient\\n        ( fee memory _feeParams  ) = _calculateFees(_orderId, _settlePercent, _isPartner);\\n        if(order[_orderId].currentBPS == 0) {\\n            // update the transaction to be fulfilled\\n            order[_orderId].isFulfilled = true;\\n            if (order[_orderId].senderFee > 0) {\\n                // transfer sender fee\\n                transferSenderFee(_orderId);\\n            }\\n        }\\n        \\n        if (_feeParams.protocolFee > 0) {\\n            // transfer protocol fee\\n            IERC20(token).transfer(feeRecipient, _feeParams.protocolFee);\\n        }\\n        // // transfer to liquidity provider \\n        IERC20(token).transfer(_liquidityProvider, _feeParams.liquidityProviderAmount);\\n\\n        // emit event\\n        emit Settled(_splitOrderId, _orderId, _label,  _liquidityProvider, _settlePercent);\\n        return (_orderId, token);\\n    }\\n\\n    function transferSenderFee(bytes32 _orderId) internal {\\n        address recipient = order[_orderId].senderFeeRecipient;\\n        uint256 _fee = order[_orderId].senderFee;\\n        // transfer sender fee\\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\\n        // emmit event\\n        emit TransferSenderFee(recipient, _fee);\\n    }\\n\\n    /** @dev See {refund-IPaycrest}. */\\n    function refund(bytes32 _orderId, bytes32 _label)  external onlyAggregator() returns(bool) {\\n        // ensure the transaction has not been fulfilled\\n        require(!order[_orderId].isFulfilled, \\\"OrderFulfilled\\\");\\n        // reser state values\\n        order[_orderId].isFulfilled = true;\\n        order[_orderId].currentBPS = 0;\\n        // transfer to seller \\n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, order[_orderId].amount);\\n        // emit\\n        emit Refunded(_orderId, _label);\\n        return true;\\n    }\\n\\n    function _calculateFees(bytes32 _orderId, uint96 _settlePercent, bool _isPartner) private view returns(fee memory _feeParams ) {\\n        // get the total amount associated with the orderId\\n        uint256 amount = order[_orderId].amount;\\n        // get sender fee from amount\\n        amount = amount - order[_orderId].senderFee;\\n        // get the settled percent that is scheduled for this amount\\n        _feeParams.liquidityProviderAmount = (amount * _settlePercent) / MAX_BPS;\\n        // deduct protocol fees from the new total amount\\n        _feeParams.protocolFee = (_feeParams.liquidityProviderAmount * protocolFeePercent) / MAX_BPS; \\n        // substract total fees from the new amount after getting the scheduled amount\\n        _feeParams.liquidityProviderAmount = (_feeParams.liquidityProviderAmount - _feeParams.protocolFee);\\n        // if (_isPartner) protocol fee should be 0, and the whole protocol fee should be added to liquidity provider\\n        if (_isPartner) {\\n            _feeParams.liquidityProviderAmount += _feeParams.protocolFee;\\n            _feeParams.protocolFee = 0;\\n        }\\n    }\\n    \\n    /* ##################################################################\\n                                VIEW CALLS\\n    ################################################################## */\\n    /** @dev See {getOrderInfo-IPaycrest}. */\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\\n        return order[_orderId];\\n    }\\n\\n    /** @dev See {isTokenSupported-IPaycrest}. */\\n    function isTokenSupported(address _token) external view returns(bool) {\\n        return _isTokenSupported[_token];\\n    }\\n\\n    /** @dev See {getSupportedInstitutionName-IPaycrest}. */\\n    function getSupportedInstitutionName(bytes32 code) external view returns (InstitutionByCode memory) {\\n        return supportedInstitutionsByCode[code];\\n    }\\n\\n    function getSupportedInstitutions(bytes32 currency) external view returns (Institution[] memory) {\\n        Institution[] memory institutions = supportedInstitutions[currency];\\n        uint256 length = institutions.length;\\n        Institution[] memory result = new Institution[](length);\\n        \\n        for (uint256 i = 0; i < length; ) {\\n            result[i] = institutions[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n\\n    /** @dev See {getFeeDetails-IPaycrest}. */\\n    function getFeeDetails() external view returns(\\n        uint64, \\n        uint256\\n    ) {\\n        return(protocolFeePercent, MAX_BPS);\\n    }\\n\\n    /** @dev See {getAggregatorAddress-IPaycrest}. */\\n    function getAggregatorAddress() external view returns(address) {\\n        return _aggregatorAddress;\\n    }\\n\\n    /** @dev See {getWhitelistedStatus-IPaycrest}. */\\n    function getWhitelistedStatus(address sender) external view returns(bool) {\\n        return _isWhitelisted[sender];\\n    }\\n\\n    /** @dev See {getAggregator-IPaycrest}. */\\n    function getAggregator() external view returns(bytes memory) {\\n        return _aggregator;\\n    }\\n\\n\\n    // DECLARE A FUNCTION TO WITHDRAW ANY TOKEN FROM CONTRACT CAN ONLY NE CALLED BY OWNER\\n    function withdraw(address _token, address _recipient, uint256 _amount) external onlyOwner {\\n        IERC20(_token).transfer(_recipient, _amount);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb0f04d07b7ad95f39c6fad6855c419895a10a7d8abf4556e46464c04153dcab0\",\"license\":\"UNLICENSED\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    struct Institution {\\n        bytes32 code; // usually not more than 8 letters\\n        bytes32 name; // \\n    }\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n    uint256 internal MAX_BPS;\\n    uint64 internal protocolFeePercent; // 5%\\n    address internal feeRecipient;\\n    address internal _aggregatorAddress;\\n    bytes internal _aggregator;\\n    \\n    // this should decrease if more slots are needed on this contract to avoid collisions with base contract\\n    uint256[50] private __gap;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n    mapping(address => bool) internal _isWhitelisted;\\n\\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event PaycrestFees(uint64 protocolFee);\\n    event SetAggregator(bytes aggregator);\\n    event SetFeeRecipient(address feeRecipient);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n        if (what == \\\"whitelist\\\") _isWhitelisted[value] = status;\\n\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function updateProtocolFees(uint64 _protocolFeePercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        emit PaycrestFees(_protocolFeePercent);\\n    }\\n\\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"fee\\\") feeRecipient = value;\\n        if (what == \\\"aggregator\\\") _aggregatorAddress = value;\\n    }\\n\\n    function updateProtocolAggregator(bytes calldata aggregator) external onlyOwner {\\n        _aggregator = aggregator;\\n        emit SetAggregator(aggregator);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa7a73992f19899060ce30182c809c3bd02ce01e4675de7e0ddd1701deccb25f9\",\"license\":\"UNLICENSED\"},\"contracts/interface/IPaycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/**\\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /// @dev Emitted when deposit is made.\\n    event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash);\\n    /// @dev Emitted when aggregator settle transaction.\\n    event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent);\\n    /// @dev Emitted when aggregator refund transaction.\\n    event Refunded(bytes32 indexed orderId, bytes32 label);\\n    /// @dev Emitted when sender get therir rewards.\\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\\n    /// @dev Emitted when primary validator get therir rewards.\\n    event RewardValidator(address indexed validator, uint256 indexed amount);\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    struct TransactionMetadata {\\n        bytes8 identifier;                 //                                                                   slot 0\\n        bytes8 institution;                //                                                                   slot 0\\n        bytes8 name;                       //                                                                   slot 0\\n        bytes8 currency;                   //                                                                   slot 0\\n        uint256 liquidityProviderID;       //                                                                   slot 1\\n    }\\n\\n    struct Order {\\n        address seller;                     //                                                                   slot 0\\n        address token;                      //                                                                   slot 1\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint96 rate;                        //                                                                   slot 1\\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\\n        uint96 currentBPS;                  //                                                                   slot 2 {}\\n        uint256 amount;                     //                                                                   slot 3\\n    }\\n\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /// @notice lock sender `_amount` of `token` into Paycrest.\\n    /// Requirements:\\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _token address of the token.\\n    /// @param _amount amount in the decimal of `_token` above.\\n    /// @param _institutionCode institution code of the sender.\\n    /// @param _label reference of the sender.\\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\\n    /// @param _senderFeeRecipient address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\\n    /// @param _senderFee amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\\n    /// @return _orderId the bytes20 which is the orderId\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        bytes32 _label,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash)  external returns(bytes32 _orderId);\\n\\n    /// @notice settle transaction and distribute rewards accordingly.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _orderId transaction Id.\\n    /// @param _label reference of the sender.\\n    /// @param _liquidityProvider address of the liquidity provider.\\n    /// @param _settlePercent rate at which the transaction is settled.\\n    /// @param _isPartner is the liquidity provider a partner.\\n    /// @return return the status of transaction {bool}\\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address _liquidityProvider, uint64 _settlePercent, bool _isPartner)  external returns(bytes32, address);\\n\\n    /// @notice refund to the specified refundable address.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `isFulfilled` must be false.\\n    /// @param _orderId transaction Id.\\n    /// @param _label reference of the sender.\\n    /// @return return the status of transaction {bool}\\n    function refund(bytes32 _orderId, bytes32 _label)  external returns(bool);\\n\\n    /// @notice get supported token from Paycrest.\\n    /// @param _token address of the token to check.\\n    /// @return return the status of `_token` {bool}\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /// @notice get order details.\\n    /// @param _orderId transaction Id.\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /// @notice get every rewards and address on Paycrest.\\n    /// @return protocolReward amount that will be taken in percentage on all trade.\\n    /// @return max_bps maximum amount in bps \\\"100% == 100_000\\\".\\n    function getFeeDetails() external view returns(\\n        uint64 protocolReward, \\n        uint256 max_bps\\n    );\\n\\n    /// @notice get address of liquidity aggregator.\\n    /// @return address of `Aggregator`.\\n    function getAggregatorAddress() external view returns(address);\\n\\n    /// @notice get aggregator public key.\\n    /// @return aggregator public key.\\n    function getAggregator() external view returns(bytes memory);\\n    \\n    /// @notice get address of sender whitelisting status.\\n    /// @param sender address of the sender.\\n    /// @return address of `status`.\\n    function getWhitelistedStatus(address sender) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x198ea288244ee5a444a202088748913df1d930f9561fda95a120ff81c9bcb04b\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/Paycrest.sol:Paycrest","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"contracts/Paycrest.sol:Paycrest","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1161,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/Paycrest.sol:Paycrest","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":4167,"contract":"contracts/Paycrest.sol:Paycrest","label":"MAX_BPS","offset":0,"slot":"101","type":"t_uint256"},{"astId":4169,"contract":"contracts/Paycrest.sol:Paycrest","label":"protocolFeePercent","offset":0,"slot":"102","type":"t_uint64"},{"astId":4171,"contract":"contracts/Paycrest.sol:Paycrest","label":"feeRecipient","offset":8,"slot":"102","type":"t_address"},{"astId":4173,"contract":"contracts/Paycrest.sol:Paycrest","label":"_aggregatorAddress","offset":0,"slot":"103","type":"t_address"},{"astId":4175,"contract":"contracts/Paycrest.sol:Paycrest","label":"_aggregator","offset":0,"slot":"104","type":"t_bytes_storage"},{"astId":4179,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"105","type":"t_array(t_uint256)50_storage"},{"astId":4183,"contract":"contracts/Paycrest.sol:Paycrest","label":"_isTokenSupported","offset":0,"slot":"155","type":"t_mapping(t_address,t_bool)"},{"astId":4187,"contract":"contracts/Paycrest.sol:Paycrest","label":"_isWhitelisted","offset":0,"slot":"156","type":"t_mapping(t_address,t_bool)"},{"astId":4193,"contract":"contracts/Paycrest.sol:Paycrest","label":"supportedInstitutions","offset":0,"slot":"157","type":"t_mapping(t_bytes32,t_array(t_struct(Institution)4160_storage)dyn_storage)"},{"astId":4198,"contract":"contracts/Paycrest.sol:Paycrest","label":"supportedInstitutionsByCode","offset":0,"slot":"158","type":"t_mapping(t_bytes32,t_struct(InstitutionByCode)4165_storage)"},{"astId":3470,"contract":"contracts/Paycrest.sol:Paycrest","label":"order","offset":0,"slot":"159","type":"t_mapping(t_bytes32,t_struct(Order)4475_storage)"},{"astId":3474,"contract":"contracts/Paycrest.sol:Paycrest","label":"_nonce","offset":0,"slot":"160","type":"t_mapping(t_address,t_uint256)"},{"astId":3478,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"161","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Institution)4160_storage)dyn_storage":{"base":"t_struct(Institution)4160_storage","encoding":"dynamic_array","label":"struct PaycrestSettingManager.Institution[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_array(t_struct(Institution)4160_storage)dyn_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])","numberOfBytes":"32","value":"t_array(t_struct(Institution)4160_storage)dyn_storage"},"t_mapping(t_bytes32,t_struct(InstitutionByCode)4165_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)","numberOfBytes":"32","value":"t_struct(InstitutionByCode)4165_storage"},"t_mapping(t_bytes32,t_struct(Order)4475_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IPaycrest.Order)","numberOfBytes":"32","value":"t_struct(Order)4475_storage"},"t_struct(Institution)4160_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.Institution","members":[{"astId":4157,"contract":"contracts/Paycrest.sol:Paycrest","label":"code","offset":0,"slot":"0","type":"t_bytes32"},{"astId":4159,"contract":"contracts/Paycrest.sol:Paycrest","label":"name","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(InstitutionByCode)4165_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.InstitutionByCode","members":[{"astId":4162,"contract":"contracts/Paycrest.sol:Paycrest","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":4164,"contract":"contracts/Paycrest.sol:Paycrest","label":"currency","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Order)4475_storage":{"encoding":"inplace","label":"struct IPaycrest.Order","members":[{"astId":4458,"contract":"contracts/Paycrest.sol:Paycrest","label":"seller","offset":0,"slot":"0","type":"t_address"},{"astId":4460,"contract":"contracts/Paycrest.sol:Paycrest","label":"token","offset":0,"slot":"1","type":"t_address"},{"astId":4462,"contract":"contracts/Paycrest.sol:Paycrest","label":"senderFeeRecipient","offset":0,"slot":"2","type":"t_address"},{"astId":4464,"contract":"contracts/Paycrest.sol:Paycrest","label":"senderFee","offset":0,"slot":"3","type":"t_uint256"},{"astId":4466,"contract":"contracts/Paycrest.sol:Paycrest","label":"rate","offset":0,"slot":"4","type":"t_uint96"},{"astId":4468,"contract":"contracts/Paycrest.sol:Paycrest","label":"isFulfilled","offset":12,"slot":"4","type":"t_bool"},{"astId":4470,"contract":"contracts/Paycrest.sol:Paycrest","label":"refundAddress","offset":0,"slot":"5","type":"t_address"},{"astId":4472,"contract":"contracts/Paycrest.sol:Paycrest","label":"currentBPS","offset":20,"slot":"5","type":"t_uint96"},{"astId":4474,"contract":"contracts/Paycrest.sol:Paycrest","label":"amount","offset":0,"slot":"6","type":"t_uint256"}],"numberOfBytes":"224"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/PaycrestSettingManager.sol":{"PaycrestSettingManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"protocolFee","type":"uint64"}],"name":"PaycrestFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"SetAggregator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeRecipient","type":"address"}],"name":"SetFeeRecipient","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"SettingManagerBool","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"institutions","type":"tuple[]"}],"name":"setSupportedInstitutions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateProtocolAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"updateProtocolAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_protocolFeePercent","type":"uint64"}],"name":"updateProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506112ec806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100eb57806399e3c0b414610109578063cb79455b14610125578063f2fde38b1461014157610088565b8063322008821461008d578063715018a6146100a957806379a0effb146100b357806384630736146100cf575b600080fd5b6100a760048036038101906100a29190610a3a565b61015d565b005b6100b1610271565b005b6100cd60048036038101906100c89190610af4565b610285565b005b6100e960048036038101906100e49190610b74565b6103d2565b005b6100f361043d565b6040516101009190610bb0565b60405180910390f35b610123600480360381019061011e9190610c03565b610467565b005b61013f600480360381019061013a9190610cb1565b61061c565b005b61015b60048036038101906101569190610cfe565b610673565b005b6101656106f6565b60008151905060005b8181101561026b57609d600085815260200190815260200160002083828151811061019c5761019b610d2b565b5b6020026020010151908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050604051806040016040528084838151811061020157610200610d2b565b5b602002602001015160200151815260200185815250609e600085848151811061022d5761022c610d2b565b5b60200260200101516000015181526020019081526020016000206000820151816000015560208201518160010155905050808060010191505061016e565b50505050565b6102796106f6565b6102836000610774565b565b61028d6106f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390610db7565b60405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036103655780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f720000000000000000000000000000000000000000000082036103ce5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6103da6106f6565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc8ca786c100bc62a0dffbe768b5f0b770d84e8604c5de54b54197b9066bb42a9816040516104329190610de6565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61046f6106f6565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d590610db7565b60405180910390fd5b7f746f6b656e000000000000000000000000000000000000000000000000000000830361055d5780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c697374000000000000000000000000000000000000000000000083036105dc5780609c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161060f93929190610e1f565b60405180910390a1505050565b6106246106f6565b818160689182610635929190611077565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef8282604051610667929190611194565b60405180910390a15050565b61067b6106f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e19061122a565b60405180910390fd5b6106f381610774565b50565b6106fe61083a565b73ffffffffffffffffffffffffffffffffffffffff1661071c61043d565b73ffffffffffffffffffffffffffffffffffffffff1614610772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076990611296565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61086981610856565b811461087457600080fd5b50565b60008135905061088681610860565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108da82610891565b810181811067ffffffffffffffff821117156108f9576108f86108a2565b5b80604052505050565b600061090c610842565b905061091882826108d1565b919050565b600067ffffffffffffffff821115610938576109376108a2565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156109695761096861094e565b5b6109736040610902565b9050600061098384828501610877565b600083015250602061099784828501610877565b60208301525092915050565b60006109b66109b18461091d565b610902565b905080838252602082019050604084028301858111156109d9576109d8610949565b5b835b81811015610a0257806109ee8882610953565b8452602084019350506040810190506109db565b5050509392505050565b600082601f830112610a2157610a2061088c565b5b8135610a318482602086016109a3565b91505092915050565b60008060408385031215610a5157610a5061084c565b5b6000610a5f85828601610877565b925050602083013567ffffffffffffffff811115610a8057610a7f610851565b5b610a8c85828601610a0c565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac182610a96565b9050919050565b610ad181610ab6565b8114610adc57600080fd5b50565b600081359050610aee81610ac8565b92915050565b60008060408385031215610b0b57610b0a61084c565b5b6000610b1985828601610877565b9250506020610b2a85828601610adf565b9150509250929050565b600067ffffffffffffffff82169050919050565b610b5181610b34565b8114610b5c57600080fd5b50565b600081359050610b6e81610b48565b92915050565b600060208284031215610b8a57610b8961084c565b5b6000610b9884828501610b5f565b91505092915050565b610baa81610ab6565b82525050565b6000602082019050610bc56000830184610ba1565b92915050565b60008115159050919050565b610be081610bcb565b8114610beb57600080fd5b50565b600081359050610bfd81610bd7565b92915050565b600080600060608486031215610c1c57610c1b61084c565b5b6000610c2a86828701610877565b9350506020610c3b86828701610adf565b9250506040610c4c86828701610bee565b9150509250925092565b600080fd5b60008083601f840112610c7157610c7061088c565b5b8235905067ffffffffffffffff811115610c8e57610c8d610c56565b5b602083019150836001820283011115610caa57610ca9610949565b5b9250929050565b60008060208385031215610cc857610cc761084c565b5b600083013567ffffffffffffffff811115610ce657610ce5610851565b5b610cf285828601610c5b565b92509250509250929050565b600060208284031215610d1457610d1361084c565b5b6000610d2284828501610adf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b6000610da1601683610d5a565b9150610dac82610d6b565b602082019050919050565b60006020820190508181036000830152610dd081610d94565b9050919050565b610de081610b34565b82525050565b6000602082019050610dfb6000830184610dd7565b92915050565b610e0a81610856565b82525050565b610e1981610bcb565b82525050565b6000606082019050610e346000830186610e01565b610e416020830185610ba1565b610e4e6040830184610e10565b949350505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ea857607f821691505b602082108103610ebb57610eba610e61565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610f237fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ee6565b610f2d8683610ee6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610f74610f6f610f6a84610f45565b610f4f565b610f45565b9050919050565b6000819050919050565b610f8e83610f59565b610fa2610f9a82610f7b565b848454610ef3565b825550505050565b600090565b610fb7610faa565b610fc2818484610f85565b505050565b5b81811015610fe657610fdb600082610faf565b600181019050610fc8565b5050565b601f82111561102b57610ffc81610ec1565b61100584610ed6565b81016020851015611014578190505b61102861102085610ed6565b830182610fc7565b50505b505050565b600082821c905092915050565b600061104e60001984600802611030565b1980831691505092915050565b6000611067838361103d565b9150826002028217905092915050565b6110818383610e56565b67ffffffffffffffff81111561109a576110996108a2565b5b6110a48254610e90565b6110af828285610fea565b6000601f8311600181146110de57600084156110cc578287013590505b6110d6858261105b565b86555061113e565b601f1984166110ec86610ec1565b60005b82811015611114578489013582556001820191506020850194506020810190506110ef565b86831015611131578489013561112d601f89168261103d565b8355505b6001600288020188555050505b50505050505050565b600082825260208201905092915050565b82818337600083830152505050565b60006111738385611147565b9350611180838584611158565b61118983610891565b840190509392505050565b600060208201905081810360008301526111af818486611167565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611214602683610d5a565b915061121f826111b8565b604082019050919050565b6000602082019050818103600083015261124381611207565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611280602083610d5a565b915061128b8261124a565b602082019050919050565b600060208201905081810360008301526112af81611273565b905091905056fea264697066735822122050b41f080926bf4f9f186583798e139b279542447fd028eba1d461cde298594564736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12EC DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x141 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x32200882 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0xCF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xA3A JUMP JUMPDEST PUSH2 0x15D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB1 PUSH2 0x271 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xAF4 JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE4 SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x3D2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF3 PUSH2 0x43D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0xBB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x123 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11E SWAP2 SWAP1 PUSH2 0xC03 JUMP JUMPDEST PUSH2 0x467 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xCB1 JUMP JUMPDEST PUSH2 0x61C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x156 SWAP2 SWAP1 PUSH2 0xCFE JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x165 PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x9D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x19C JUMPI PUSH2 0x19B PUSH2 0xD2B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x201 JUMPI PUSH2 0x200 PUSH2 0xD2B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9E PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI PUSH2 0x22C PUSH2 0xD2B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x16E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x279 PUSH2 0x6F6 JUMP JUMPDEST PUSH2 0x283 PUSH1 0x0 PUSH2 0x774 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x28D PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F3 SWAP1 PUSH2 0xDB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x365 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x3CE JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x6F6 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xC8CA786C100BC62A0DFFBE768B5F0B770D84E8604C5DE54B54197B9066BB42A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x432 SWAP2 SWAP1 PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x46F PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D5 SWAP1 PUSH2 0xDB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x55D JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x5DC JUMPI DUP1 PUSH1 0x9C PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x60F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x624 PUSH2 0x6F6 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x635 SWAP3 SWAP2 SWAP1 PUSH2 0x1077 JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x667 SWAP3 SWAP2 SWAP1 PUSH2 0x1194 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x67B PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E1 SWAP1 PUSH2 0x122A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6F3 DUP2 PUSH2 0x774 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x6FE PUSH2 0x83A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x71C PUSH2 0x43D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x772 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x769 SWAP1 PUSH2 0x1296 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x869 DUP2 PUSH2 0x856 JUMP JUMPDEST DUP2 EQ PUSH2 0x874 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x886 DUP2 PUSH2 0x860 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x8DA DUP3 PUSH2 0x891 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x8F9 JUMPI PUSH2 0x8F8 PUSH2 0x8A2 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90C PUSH2 0x842 JUMP JUMPDEST SWAP1 POP PUSH2 0x918 DUP3 DUP3 PUSH2 0x8D1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x938 JUMPI PUSH2 0x937 PUSH2 0x8A2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x969 JUMPI PUSH2 0x968 PUSH2 0x94E JUMP JUMPDEST JUMPDEST PUSH2 0x973 PUSH1 0x40 PUSH2 0x902 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x983 DUP5 DUP3 DUP6 ADD PUSH2 0x877 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x997 DUP5 DUP3 DUP6 ADD PUSH2 0x877 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B6 PUSH2 0x9B1 DUP5 PUSH2 0x91D JUMP JUMPDEST PUSH2 0x902 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x9D9 JUMPI PUSH2 0x9D8 PUSH2 0x949 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA02 JUMPI DUP1 PUSH2 0x9EE DUP9 DUP3 PUSH2 0x953 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x9DB JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA21 JUMPI PUSH2 0xA20 PUSH2 0x88C JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA31 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x9A3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA51 JUMPI PUSH2 0xA50 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA5F DUP6 DUP3 DUP7 ADD PUSH2 0x877 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA80 JUMPI PUSH2 0xA7F PUSH2 0x851 JUMP JUMPDEST JUMPDEST PUSH2 0xA8C DUP6 DUP3 DUP7 ADD PUSH2 0xA0C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC1 DUP3 PUSH2 0xA96 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAD1 DUP2 PUSH2 0xAB6 JUMP JUMPDEST DUP2 EQ PUSH2 0xADC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xAEE DUP2 PUSH2 0xAC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB0B JUMPI PUSH2 0xB0A PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB19 DUP6 DUP3 DUP7 ADD PUSH2 0x877 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB2A DUP6 DUP3 DUP7 ADD PUSH2 0xADF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB51 DUP2 PUSH2 0xB34 JUMP JUMPDEST DUP2 EQ PUSH2 0xB5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB6E DUP2 PUSH2 0xB48 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB8A JUMPI PUSH2 0xB89 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB98 DUP5 DUP3 DUP6 ADD PUSH2 0xB5F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBAA DUP2 PUSH2 0xAB6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBC5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBA1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBE0 DUP2 PUSH2 0xBCB JUMP JUMPDEST DUP2 EQ PUSH2 0xBEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBFD DUP2 PUSH2 0xBD7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC1C JUMPI PUSH2 0xC1B PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC2A DUP7 DUP3 DUP8 ADD PUSH2 0x877 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC3B DUP7 DUP3 DUP8 ADD PUSH2 0xADF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xC4C DUP7 DUP3 DUP8 ADD PUSH2 0xBEE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC71 JUMPI PUSH2 0xC70 PUSH2 0x88C JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC8E JUMPI PUSH2 0xC8D PUSH2 0xC56 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xCAA JUMPI PUSH2 0xCA9 PUSH2 0x949 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCC8 JUMPI PUSH2 0xCC7 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCE6 JUMPI PUSH2 0xCE5 PUSH2 0x851 JUMP JUMPDEST JUMPDEST PUSH2 0xCF2 DUP6 DUP3 DUP7 ADD PUSH2 0xC5B JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD14 JUMPI PUSH2 0xD13 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD22 DUP5 DUP3 DUP6 ADD PUSH2 0xADF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA1 PUSH1 0x16 DUP4 PUSH2 0xD5A JUMP JUMPDEST SWAP2 POP PUSH2 0xDAC DUP3 PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDD0 DUP2 PUSH2 0xD94 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDE0 DUP2 PUSH2 0xB34 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDFB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDD7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xE0A DUP2 PUSH2 0x856 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xE19 DUP2 PUSH2 0xBCB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE34 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xE01 JUMP JUMPDEST PUSH2 0xE41 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0xE4E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xE10 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xEA8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xEBB JUMPI PUSH2 0xEBA PUSH2 0xE61 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0xF23 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0xEE6 JUMP JUMPDEST PUSH2 0xF2D DUP7 DUP4 PUSH2 0xEE6 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF74 PUSH2 0xF6F PUSH2 0xF6A DUP5 PUSH2 0xF45 JUMP JUMPDEST PUSH2 0xF4F JUMP JUMPDEST PUSH2 0xF45 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF8E DUP4 PUSH2 0xF59 JUMP JUMPDEST PUSH2 0xFA2 PUSH2 0xF9A DUP3 PUSH2 0xF7B JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0xEF3 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xFB7 PUSH2 0xFAA JUMP JUMPDEST PUSH2 0xFC2 DUP2 DUP5 DUP5 PUSH2 0xF85 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFE6 JUMPI PUSH2 0xFDB PUSH1 0x0 DUP3 PUSH2 0xFAF JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xFC8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x102B JUMPI PUSH2 0xFFC DUP2 PUSH2 0xEC1 JUMP JUMPDEST PUSH2 0x1005 DUP5 PUSH2 0xED6 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x1014 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x1028 PUSH2 0x1020 DUP6 PUSH2 0xED6 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0xFC7 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104E PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x1030 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1067 DUP4 DUP4 PUSH2 0x103D JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1081 DUP4 DUP4 PUSH2 0xE56 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109A JUMPI PUSH2 0x1099 PUSH2 0x8A2 JUMP JUMPDEST JUMPDEST PUSH2 0x10A4 DUP3 SLOAD PUSH2 0xE90 JUMP JUMPDEST PUSH2 0x10AF DUP3 DUP3 DUP6 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x10DE JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x10CC JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x10D6 DUP6 DUP3 PUSH2 0x105B JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x113E JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x10EC DUP7 PUSH2 0xEC1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1114 JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x10EF JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x1131 JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x112D PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x103D JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1173 DUP4 DUP6 PUSH2 0x1147 JUMP JUMPDEST SWAP4 POP PUSH2 0x1180 DUP4 DUP6 DUP5 PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x1189 DUP4 PUSH2 0x891 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11AF DUP2 DUP5 DUP7 PUSH2 0x1167 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1214 PUSH1 0x26 DUP4 PUSH2 0xD5A JUMP JUMPDEST SWAP2 POP PUSH2 0x121F DUP3 PUSH2 0x11B8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1243 DUP2 PUSH2 0x1207 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1280 PUSH1 0x20 DUP4 PUSH2 0xD5A JUMP JUMPDEST SWAP2 POP PUSH2 0x128B DUP3 PUSH2 0x124A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12AF DUP2 PUSH2 0x1273 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP 0xB4 0x1F ADDMOD MULMOD 0x26 0xBF 0x4F SWAP16 XOR PUSH6 0x83798E139B27 SWAP6 TIMESTAMP PREVRANDAO PUSH32 0xD028EBA1D461CDE298594564736F6C6343000812003300000000000000000000 ","sourceMap":"139:2737:16:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_68":{"entryPoint":1782,"id":68,"parameterSlots":0,"returnSlots":0},"@_msgSender_1147":{"entryPoint":2106,"id":1147,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_125":{"entryPoint":1908,"id":125,"parameterSlots":1,"returnSlots":0},"@owner_54":{"entryPoint":1085,"id":54,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":625,"id":82,"parameterSlots":0,"returnSlots":0},"@setSupportedInstitutions_4320":{"entryPoint":349,"id":4320,"parameterSlots":2,"returnSlots":0},"@settingManagerBool_4266":{"entryPoint":1127,"id":4266,"parameterSlots":3,"returnSlots":0},"@transferOwnership_105":{"entryPoint":1651,"id":105,"parameterSlots":1,"returnSlots":0},"@updateProtocolAddresses_4372":{"entryPoint":645,"id":4372,"parameterSlots":2,"returnSlots":0},"@updateProtocolAggregator_4388":{"entryPoint":1564,"id":4388,"parameterSlots":2,"returnSlots":0},"@updateProtocolFees_4336":{"entryPoint":978,"id":4336,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr":{"entryPoint":2467,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2783,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr":{"entryPoint":2572,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":3054,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":2167,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":3163,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_struct$_Institution_$4160_memory_ptr":{"entryPoint":2387,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64":{"entryPoint":2911,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3326,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":2804,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":3075,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr":{"entryPoint":2618,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":3249,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64":{"entryPoint":2932,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":2977,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3600,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3585,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":4455,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":4615,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack":{"entryPoint":3476,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":4723,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":3543,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":2992,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":3615,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4500,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4650,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3511,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4758,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":3558,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":2306,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":2114,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr":{"entryPoint":2333,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_bytes_storage":{"entryPoint":3777,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_calldata_ptr":{"entryPoint":3670,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":4423,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3418,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_bytes_storage":{"entryPoint":4074,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":2742,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3019,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":2134,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2710,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":3909,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":2868,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":4039,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":3929,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage":{"entryPoint":4215,"id":null,"parameterSlots":3,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":4440,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":3798,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":3728,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":4187,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":2257,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":3919,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":4157,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":3681,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3371,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2210,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":3963,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":3158,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":2188,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":2382,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":2377,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":2129,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2124,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2193,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":3814,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":4144,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":4015,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":4536,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4":{"entryPoint":3435,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":4682,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":3827,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":3973,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2760,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":3031,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":2144,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":2888,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":4010,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:19957:20","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:20","statements":[{"nodeType":"YulAssignment","src":"57:19:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:20"},"nodeType":"YulFunctionCall","src":"67:9:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:20"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:20","type":""}],"src":"7:75:20"},{"body":{"nodeType":"YulBlock","src":"177:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:20"},"nodeType":"YulFunctionCall","src":"187:12:20"},"nodeType":"YulExpressionStatement","src":"187:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:20"},{"body":{"nodeType":"YulBlock","src":"300:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:20"},"nodeType":"YulFunctionCall","src":"310:12:20"},"nodeType":"YulExpressionStatement","src":"310:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:20"},{"body":{"nodeType":"YulBlock","src":"379:32:20","statements":[{"nodeType":"YulAssignment","src":"389:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:20"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:20","type":""}],"src":"334:77:20"},{"body":{"nodeType":"YulBlock","src":"460:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:20"},"nodeType":"YulFunctionCall","src":"519:12:20"},"nodeType":"YulExpressionStatement","src":"519:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:20"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:20"},"nodeType":"YulFunctionCall","src":"490:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:20"},"nodeType":"YulFunctionCall","src":"480:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:20"},"nodeType":"YulFunctionCall","src":"473:43:20"},"nodeType":"YulIf","src":"470:63:20"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:20","type":""}],"src":"417:122:20"},{"body":{"nodeType":"YulBlock","src":"597:87:20","statements":[{"nodeType":"YulAssignment","src":"607:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:20"},"nodeType":"YulFunctionCall","src":"616:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:20"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:20"},"nodeType":"YulFunctionCall","src":"645:33:20"},"nodeType":"YulExpressionStatement","src":"645:33:20"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:20","type":""}],"src":"545:139:20"},{"body":{"nodeType":"YulBlock","src":"779:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"796:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"799:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"789:6:20"},"nodeType":"YulFunctionCall","src":"789:12:20"},"nodeType":"YulExpressionStatement","src":"789:12:20"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"690:117:20"},{"body":{"nodeType":"YulBlock","src":"861:54:20","statements":[{"nodeType":"YulAssignment","src":"871:38:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"889:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"896:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"885:3:20"},"nodeType":"YulFunctionCall","src":"885:14:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"905:2:20","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"901:3:20"},"nodeType":"YulFunctionCall","src":"901:7:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"881:3:20"},"nodeType":"YulFunctionCall","src":"881:28:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"871:6:20"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"844:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"854:6:20","type":""}],"src":"813:102:20"},{"body":{"nodeType":"YulBlock","src":"949:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"966:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"969:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"959:6:20"},"nodeType":"YulFunctionCall","src":"959:88:20"},"nodeType":"YulExpressionStatement","src":"959:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1063:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1066:4:20","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1056:6:20"},"nodeType":"YulFunctionCall","src":"1056:15:20"},"nodeType":"YulExpressionStatement","src":"1056:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1087:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1090:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1080:6:20"},"nodeType":"YulFunctionCall","src":"1080:15:20"},"nodeType":"YulExpressionStatement","src":"1080:15:20"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"921:180:20"},{"body":{"nodeType":"YulBlock","src":"1150:238:20","statements":[{"nodeType":"YulVariableDeclaration","src":"1160:58:20","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1182:6:20"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1212:4:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1190:21:20"},"nodeType":"YulFunctionCall","src":"1190:27:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1178:3:20"},"nodeType":"YulFunctionCall","src":"1178:40:20"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1164:10:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"1329:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1331:16:20"},"nodeType":"YulFunctionCall","src":"1331:18:20"},"nodeType":"YulExpressionStatement","src":"1331:18:20"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1272:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"1284:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1269:2:20"},"nodeType":"YulFunctionCall","src":"1269:34:20"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1308:10:20"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1320:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1305:2:20"},"nodeType":"YulFunctionCall","src":"1305:22:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1266:2:20"},"nodeType":"YulFunctionCall","src":"1266:62:20"},"nodeType":"YulIf","src":"1263:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1367:2:20","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1371:10:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1360:6:20"},"nodeType":"YulFunctionCall","src":"1360:22:20"},"nodeType":"YulExpressionStatement","src":"1360:22:20"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1136:6:20","type":""},{"name":"size","nodeType":"YulTypedName","src":"1144:4:20","type":""}],"src":"1107:281:20"},{"body":{"nodeType":"YulBlock","src":"1435:88:20","statements":[{"nodeType":"YulAssignment","src":"1445:30:20","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1455:18:20"},"nodeType":"YulFunctionCall","src":"1455:20:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1445:6:20"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1504:6:20"},{"name":"size","nodeType":"YulIdentifier","src":"1512:4:20"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1484:19:20"},"nodeType":"YulFunctionCall","src":"1484:33:20"},"nodeType":"YulExpressionStatement","src":"1484:33:20"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1419:4:20","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1428:6:20","type":""}],"src":"1394:129:20"},{"body":{"nodeType":"YulBlock","src":"1640:229:20","statements":[{"body":{"nodeType":"YulBlock","src":"1745:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1747:16:20"},"nodeType":"YulFunctionCall","src":"1747:18:20"},"nodeType":"YulExpressionStatement","src":"1747:18:20"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1717:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"1725:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1714:2:20"},"nodeType":"YulFunctionCall","src":"1714:30:20"},"nodeType":"YulIf","src":"1711:56:20"},{"nodeType":"YulAssignment","src":"1777:25:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1789:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"1797:4:20","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1785:3:20"},"nodeType":"YulFunctionCall","src":"1785:17:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1777:4:20"}]},{"nodeType":"YulAssignment","src":"1839:23:20","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1851:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"1857:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1847:3:20"},"nodeType":"YulFunctionCall","src":"1847:15:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1839:4:20"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1624:6:20","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1635:4:20","type":""}],"src":"1529:340:20"},{"body":{"nodeType":"YulBlock","src":"1964:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1981:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1984:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1974:6:20"},"nodeType":"YulFunctionCall","src":"1974:12:20"},"nodeType":"YulExpressionStatement","src":"1974:12:20"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"1875:117:20"},{"body":{"nodeType":"YulBlock","src":"2087:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2104:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2107:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2097:6:20"},"nodeType":"YulFunctionCall","src":"2097:12:20"},"nodeType":"YulExpressionStatement","src":"2097:12:20"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"1998:117:20"},{"body":{"nodeType":"YulBlock","src":"2210:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2227:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2230:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2220:6:20"},"nodeType":"YulFunctionCall","src":"2220:12:20"},"nodeType":"YulExpressionStatement","src":"2220:12:20"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"2121:117:20"},{"body":{"nodeType":"YulBlock","src":"2377:494:20","statements":[{"body":{"nodeType":"YulBlock","src":"2421:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"2423:77:20"},"nodeType":"YulFunctionCall","src":"2423:79:20"},"nodeType":"YulExpressionStatement","src":"2423:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"2398:3:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"2403:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2394:3:20"},"nodeType":"YulFunctionCall","src":"2394:19:20"},{"kind":"number","nodeType":"YulLiteral","src":"2415:4:20","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2390:3:20"},"nodeType":"YulFunctionCall","src":"2390:30:20"},"nodeType":"YulIf","src":"2387:117:20"},{"nodeType":"YulAssignment","src":"2513:30:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2538:4:20","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2522:15:20"},"nodeType":"YulFunctionCall","src":"2522:21:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2513:5:20"}]},{"nodeType":"YulBlock","src":"2553:150:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2588:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2602:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2592:6:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2628:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"2635:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2624:3:20"},"nodeType":"YulFunctionCall","src":"2624:16:20"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2667:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2678:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2663:3:20"},"nodeType":"YulFunctionCall","src":"2663:22:20"},{"name":"end","nodeType":"YulIdentifier","src":"2687:3:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2642:20:20"},"nodeType":"YulFunctionCall","src":"2642:49:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2617:6:20"},"nodeType":"YulFunctionCall","src":"2617:75:20"},"nodeType":"YulExpressionStatement","src":"2617:75:20"}]},{"nodeType":"YulBlock","src":"2713:151:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2748:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2762:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2752:6:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2789:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"2796:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2785:3:20"},"nodeType":"YulFunctionCall","src":"2785:16:20"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2828:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2839:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2824:3:20"},"nodeType":"YulFunctionCall","src":"2824:22:20"},{"name":"end","nodeType":"YulIdentifier","src":"2848:3:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2803:20:20"},"nodeType":"YulFunctionCall","src":"2803:49:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2778:6:20"},"nodeType":"YulFunctionCall","src":"2778:75:20"},"nodeType":"YulExpressionStatement","src":"2778:75:20"}]}]},"name":"abi_decode_t_struct$_Institution_$4160_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2352:9:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2363:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2371:5:20","type":""}],"src":"2293:578:20"},{"body":{"nodeType":"YulBlock","src":"3059:666:20","statements":[{"nodeType":"YulAssignment","src":"3069:119:20","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3180:6:20"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3094:85:20"},"nodeType":"YulFunctionCall","src":"3094:93:20"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3078:15:20"},"nodeType":"YulFunctionCall","src":"3078:110:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3069:5:20"}]},{"nodeType":"YulVariableDeclaration","src":"3197:16:20","value":{"name":"array","nodeType":"YulIdentifier","src":"3208:5:20"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3201:3:20","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3230:5:20"},{"name":"length","nodeType":"YulIdentifier","src":"3237:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3223:6:20"},"nodeType":"YulFunctionCall","src":"3223:21:20"},"nodeType":"YulExpressionStatement","src":"3223:21:20"},{"nodeType":"YulAssignment","src":"3253:23:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3264:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"3271:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3260:3:20"},"nodeType":"YulFunctionCall","src":"3260:16:20"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3253:3:20"}]},{"nodeType":"YulVariableDeclaration","src":"3286:44:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3304:6:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3316:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"3324:4:20","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3312:3:20"},"nodeType":"YulFunctionCall","src":"3312:17:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3300:3:20"},"nodeType":"YulFunctionCall","src":"3300:30:20"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3290:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"3358:103:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"3372:77:20"},"nodeType":"YulFunctionCall","src":"3372:79:20"},"nodeType":"YulExpressionStatement","src":"3372:79:20"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3345:6:20"},{"name":"end","nodeType":"YulIdentifier","src":"3353:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3342:2:20"},"nodeType":"YulFunctionCall","src":"3342:15:20"},"nodeType":"YulIf","src":"3339:122:20"},{"body":{"nodeType":"YulBlock","src":"3546:173:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3561:21:20","value":{"name":"src","nodeType":"YulIdentifier","src":"3579:3:20"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"3565:10:20","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3603:3:20"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"3658:10:20"},{"name":"end","nodeType":"YulIdentifier","src":"3670:3:20"}],"functionName":{"name":"abi_decode_t_struct$_Institution_$4160_memory_ptr","nodeType":"YulIdentifier","src":"3608:49:20"},"nodeType":"YulFunctionCall","src":"3608:66:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3596:6:20"},"nodeType":"YulFunctionCall","src":"3596:79:20"},"nodeType":"YulExpressionStatement","src":"3596:79:20"},{"nodeType":"YulAssignment","src":"3688:21:20","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3699:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"3704:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3695:3:20"},"nodeType":"YulFunctionCall","src":"3695:14:20"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3688:3:20"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3499:3:20"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3504:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3496:2:20"},"nodeType":"YulFunctionCall","src":"3496:15:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3512:25:20","statements":[{"nodeType":"YulAssignment","src":"3514:21:20","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3525:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"3530:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3521:3:20"},"nodeType":"YulFunctionCall","src":"3521:14:20"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3514:3:20"}]}]},"pre":{"nodeType":"YulBlock","src":"3474:21:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3476:17:20","value":{"name":"offset","nodeType":"YulIdentifier","src":"3487:6:20"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3480:3:20","type":""}]}]},"src":"3470:249:20"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3029:6:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"3037:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"3045:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3053:5:20","type":""}],"src":"2928:797:20"},{"body":{"nodeType":"YulBlock","src":"3888:322:20","statements":[{"body":{"nodeType":"YulBlock","src":"3937:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3939:77:20"},"nodeType":"YulFunctionCall","src":"3939:79:20"},"nodeType":"YulExpressionStatement","src":"3939:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3916:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"3924:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3912:3:20"},"nodeType":"YulFunctionCall","src":"3912:17:20"},{"name":"end","nodeType":"YulIdentifier","src":"3931:3:20"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3908:3:20"},"nodeType":"YulFunctionCall","src":"3908:27:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3901:6:20"},"nodeType":"YulFunctionCall","src":"3901:35:20"},"nodeType":"YulIf","src":"3898:122:20"},{"nodeType":"YulVariableDeclaration","src":"4029:34:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4056:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4043:12:20"},"nodeType":"YulFunctionCall","src":"4043:20:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4033:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4072:132:20","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4177:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"4185:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4173:3:20"},"nodeType":"YulFunctionCall","src":"4173:17:20"},{"name":"length","nodeType":"YulIdentifier","src":"4192:6:20"},{"name":"end","nodeType":"YulIdentifier","src":"4200:3:20"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4081:91:20"},"nodeType":"YulFunctionCall","src":"4081:123:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4072:5:20"}]}]},"name":"abi_decode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3866:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"3874:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3882:5:20","type":""}],"src":"3782:428:20"},{"body":{"nodeType":"YulBlock","src":"4353:605:20","statements":[{"body":{"nodeType":"YulBlock","src":"4399:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4401:77:20"},"nodeType":"YulFunctionCall","src":"4401:79:20"},"nodeType":"YulExpressionStatement","src":"4401:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4374:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"4383:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4370:3:20"},"nodeType":"YulFunctionCall","src":"4370:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"4395:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4366:3:20"},"nodeType":"YulFunctionCall","src":"4366:32:20"},"nodeType":"YulIf","src":"4363:119:20"},{"nodeType":"YulBlock","src":"4492:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4507:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4521:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4511:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4536:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4582:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4567:3:20"},"nodeType":"YulFunctionCall","src":"4567:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4591:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4546:20:20"},"nodeType":"YulFunctionCall","src":"4546:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4536:6:20"}]}]},{"nodeType":"YulBlock","src":"4619:332:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4634:46:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4665:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4676:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4661:3:20"},"nodeType":"YulFunctionCall","src":"4661:18:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4648:12:20"},"nodeType":"YulFunctionCall","src":"4648:32:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4638:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"4727:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4729:77:20"},"nodeType":"YulFunctionCall","src":"4729:79:20"},"nodeType":"YulExpressionStatement","src":"4729:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4699:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"4707:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4696:2:20"},"nodeType":"YulFunctionCall","src":"4696:30:20"},"nodeType":"YulIf","src":"4693:117:20"},{"nodeType":"YulAssignment","src":"4824:117:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4913:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4924:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4909:3:20"},"nodeType":"YulFunctionCall","src":"4909:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4933:7:20"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4834:74:20"},"nodeType":"YulFunctionCall","src":"4834:107:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4824:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4315:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4326:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4338:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4346:6:20","type":""}],"src":"4216:742:20"},{"body":{"nodeType":"YulBlock","src":"5009:81:20","statements":[{"nodeType":"YulAssignment","src":"5019:65:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5034:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"5041:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5030:3:20"},"nodeType":"YulFunctionCall","src":"5030:54:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5019:7:20"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4991:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5001:7:20","type":""}],"src":"4964:126:20"},{"body":{"nodeType":"YulBlock","src":"5141:51:20","statements":[{"nodeType":"YulAssignment","src":"5151:35:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5180:5:20"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"5162:17:20"},"nodeType":"YulFunctionCall","src":"5162:24:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5151:7:20"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5123:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5133:7:20","type":""}],"src":"5096:96:20"},{"body":{"nodeType":"YulBlock","src":"5241:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"5298:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5307:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5310:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5300:6:20"},"nodeType":"YulFunctionCall","src":"5300:12:20"},"nodeType":"YulExpressionStatement","src":"5300:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5264:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5289:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5271:17:20"},"nodeType":"YulFunctionCall","src":"5271:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5261:2:20"},"nodeType":"YulFunctionCall","src":"5261:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5254:6:20"},"nodeType":"YulFunctionCall","src":"5254:43:20"},"nodeType":"YulIf","src":"5251:63:20"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5234:5:20","type":""}],"src":"5198:122:20"},{"body":{"nodeType":"YulBlock","src":"5378:87:20","statements":[{"nodeType":"YulAssignment","src":"5388:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5410:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5397:12:20"},"nodeType":"YulFunctionCall","src":"5397:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5388:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5453:5:20"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"5426:26:20"},"nodeType":"YulFunctionCall","src":"5426:33:20"},"nodeType":"YulExpressionStatement","src":"5426:33:20"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5356:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"5364:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5372:5:20","type":""}],"src":"5326:139:20"},{"body":{"nodeType":"YulBlock","src":"5554:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"5600:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5602:77:20"},"nodeType":"YulFunctionCall","src":"5602:79:20"},"nodeType":"YulExpressionStatement","src":"5602:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5575:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"5584:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5571:3:20"},"nodeType":"YulFunctionCall","src":"5571:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"5596:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5567:3:20"},"nodeType":"YulFunctionCall","src":"5567:32:20"},"nodeType":"YulIf","src":"5564:119:20"},{"nodeType":"YulBlock","src":"5693:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5708:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5722:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5712:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5737:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5772:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5783:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5768:3:20"},"nodeType":"YulFunctionCall","src":"5768:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5792:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"5747:20:20"},"nodeType":"YulFunctionCall","src":"5747:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5737:6:20"}]}]},{"nodeType":"YulBlock","src":"5820:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5835:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5849:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5839:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5865:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5900:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5911:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5896:3:20"},"nodeType":"YulFunctionCall","src":"5896:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5920:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5875:20:20"},"nodeType":"YulFunctionCall","src":"5875:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5865:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5516:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5527:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5539:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5547:6:20","type":""}],"src":"5471:474:20"},{"body":{"nodeType":"YulBlock","src":"5995:57:20","statements":[{"nodeType":"YulAssignment","src":"6005:41:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6020:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"6027:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6016:3:20"},"nodeType":"YulFunctionCall","src":"6016:30:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6005:7:20"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5977:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5987:7:20","type":""}],"src":"5951:101:20"},{"body":{"nodeType":"YulBlock","src":"6100:78:20","statements":[{"body":{"nodeType":"YulBlock","src":"6156:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6165:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6168:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6158:6:20"},"nodeType":"YulFunctionCall","src":"6158:12:20"},"nodeType":"YulExpressionStatement","src":"6158:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6123:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6147:5:20"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"6130:16:20"},"nodeType":"YulFunctionCall","src":"6130:23:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6120:2:20"},"nodeType":"YulFunctionCall","src":"6120:34:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6113:6:20"},"nodeType":"YulFunctionCall","src":"6113:42:20"},"nodeType":"YulIf","src":"6110:62:20"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6093:5:20","type":""}],"src":"6058:120:20"},{"body":{"nodeType":"YulBlock","src":"6235:86:20","statements":[{"nodeType":"YulAssignment","src":"6245:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6267:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6254:12:20"},"nodeType":"YulFunctionCall","src":"6254:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6245:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6309:5:20"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"6283:25:20"},"nodeType":"YulFunctionCall","src":"6283:32:20"},"nodeType":"YulExpressionStatement","src":"6283:32:20"}]},"name":"abi_decode_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6213:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"6221:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6229:5:20","type":""}],"src":"6184:137:20"},{"body":{"nodeType":"YulBlock","src":"6392:262:20","statements":[{"body":{"nodeType":"YulBlock","src":"6438:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6440:77:20"},"nodeType":"YulFunctionCall","src":"6440:79:20"},"nodeType":"YulExpressionStatement","src":"6440:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6413:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"6422:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6409:3:20"},"nodeType":"YulFunctionCall","src":"6409:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"6434:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6405:3:20"},"nodeType":"YulFunctionCall","src":"6405:32:20"},"nodeType":"YulIf","src":"6402:119:20"},{"nodeType":"YulBlock","src":"6531:116:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6546:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"6560:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6550:6:20","type":""}]},{"nodeType":"YulAssignment","src":"6575:62:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6609:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"6620:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6605:3:20"},"nodeType":"YulFunctionCall","src":"6605:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6629:7:20"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"6585:19:20"},"nodeType":"YulFunctionCall","src":"6585:52:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6575:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6362:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6373:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6385:6:20","type":""}],"src":"6327:327:20"},{"body":{"nodeType":"YulBlock","src":"6725:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6742:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6765:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"6747:17:20"},"nodeType":"YulFunctionCall","src":"6747:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6735:6:20"},"nodeType":"YulFunctionCall","src":"6735:37:20"},"nodeType":"YulExpressionStatement","src":"6735:37:20"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6713:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6720:3:20","type":""}],"src":"6660:118:20"},{"body":{"nodeType":"YulBlock","src":"6882:124:20","statements":[{"nodeType":"YulAssignment","src":"6892:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6904:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"6915:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6900:3:20"},"nodeType":"YulFunctionCall","src":"6900:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6892:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6972:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6985:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"6996:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6981:3:20"},"nodeType":"YulFunctionCall","src":"6981:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6928:43:20"},"nodeType":"YulFunctionCall","src":"6928:71:20"},"nodeType":"YulExpressionStatement","src":"6928:71:20"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6854:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6866:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6877:4:20","type":""}],"src":"6784:222:20"},{"body":{"nodeType":"YulBlock","src":"7054:48:20","statements":[{"nodeType":"YulAssignment","src":"7064:32:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7089:5:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7082:6:20"},"nodeType":"YulFunctionCall","src":"7082:13:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7075:6:20"},"nodeType":"YulFunctionCall","src":"7075:21:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7064:7:20"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7036:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7046:7:20","type":""}],"src":"7012:90:20"},{"body":{"nodeType":"YulBlock","src":"7148:76:20","statements":[{"body":{"nodeType":"YulBlock","src":"7202:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7211:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7214:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7204:6:20"},"nodeType":"YulFunctionCall","src":"7204:12:20"},"nodeType":"YulExpressionStatement","src":"7204:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7171:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7193:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"7178:14:20"},"nodeType":"YulFunctionCall","src":"7178:21:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7168:2:20"},"nodeType":"YulFunctionCall","src":"7168:32:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7161:6:20"},"nodeType":"YulFunctionCall","src":"7161:40:20"},"nodeType":"YulIf","src":"7158:60:20"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7141:5:20","type":""}],"src":"7108:116:20"},{"body":{"nodeType":"YulBlock","src":"7279:84:20","statements":[{"nodeType":"YulAssignment","src":"7289:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7311:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7298:12:20"},"nodeType":"YulFunctionCall","src":"7298:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7289:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7351:5:20"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"7327:23:20"},"nodeType":"YulFunctionCall","src":"7327:30:20"},"nodeType":"YulExpressionStatement","src":"7327:30:20"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7257:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"7265:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7273:5:20","type":""}],"src":"7230:133:20"},{"body":{"nodeType":"YulBlock","src":"7466:516:20","statements":[{"body":{"nodeType":"YulBlock","src":"7512:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7514:77:20"},"nodeType":"YulFunctionCall","src":"7514:79:20"},"nodeType":"YulExpressionStatement","src":"7514:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7487:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"7496:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7483:3:20"},"nodeType":"YulFunctionCall","src":"7483:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"7508:2:20","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7479:3:20"},"nodeType":"YulFunctionCall","src":"7479:32:20"},"nodeType":"YulIf","src":"7476:119:20"},{"nodeType":"YulBlock","src":"7605:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7620:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7634:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7624:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7649:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7684:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7695:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7680:3:20"},"nodeType":"YulFunctionCall","src":"7680:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7704:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7659:20:20"},"nodeType":"YulFunctionCall","src":"7659:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7649:6:20"}]}]},{"nodeType":"YulBlock","src":"7732:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7747:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7761:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7751:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7777:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7812:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7823:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7808:3:20"},"nodeType":"YulFunctionCall","src":"7808:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7832:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7787:20:20"},"nodeType":"YulFunctionCall","src":"7787:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7777:6:20"}]}]},{"nodeType":"YulBlock","src":"7860:115:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7875:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7889:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7879:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7905:60:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7937:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7948:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7933:3:20"},"nodeType":"YulFunctionCall","src":"7933:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7957:7:20"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"7915:17:20"},"nodeType":"YulFunctionCall","src":"7915:50:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7905:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7420:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7431:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7443:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7451:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7459:6:20","type":""}],"src":"7369:613:20"},{"body":{"nodeType":"YulBlock","src":"8077:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8094:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8097:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8087:6:20"},"nodeType":"YulFunctionCall","src":"8087:12:20"},"nodeType":"YulExpressionStatement","src":"8087:12:20"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"7988:117:20"},{"body":{"nodeType":"YulBlock","src":"8198:478:20","statements":[{"body":{"nodeType":"YulBlock","src":"8247:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8249:77:20"},"nodeType":"YulFunctionCall","src":"8249:79:20"},"nodeType":"YulExpressionStatement","src":"8249:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8226:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8234:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8222:3:20"},"nodeType":"YulFunctionCall","src":"8222:17:20"},{"name":"end","nodeType":"YulIdentifier","src":"8241:3:20"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8218:3:20"},"nodeType":"YulFunctionCall","src":"8218:27:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8211:6:20"},"nodeType":"YulFunctionCall","src":"8211:35:20"},"nodeType":"YulIf","src":"8208:122:20"},{"nodeType":"YulAssignment","src":"8339:30:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8362:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8349:12:20"},"nodeType":"YulFunctionCall","src":"8349:20:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8339:6:20"}]},{"body":{"nodeType":"YulBlock","src":"8412:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"8414:77:20"},"nodeType":"YulFunctionCall","src":"8414:79:20"},"nodeType":"YulExpressionStatement","src":"8414:79:20"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8384:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8392:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8381:2:20"},"nodeType":"YulFunctionCall","src":"8381:30:20"},"nodeType":"YulIf","src":"8378:117:20"},{"nodeType":"YulAssignment","src":"8504:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8520:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8528:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8516:3:20"},"nodeType":"YulFunctionCall","src":"8516:17:20"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"8504:8:20"}]},{"body":{"nodeType":"YulBlock","src":"8587:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"8589:77:20"},"nodeType":"YulFunctionCall","src":"8589:79:20"},"nodeType":"YulExpressionStatement","src":"8589:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"8552:8:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8566:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8574:4:20","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8562:3:20"},"nodeType":"YulFunctionCall","src":"8562:17:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8548:3:20"},"nodeType":"YulFunctionCall","src":"8548:32:20"},{"name":"end","nodeType":"YulIdentifier","src":"8582:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8545:2:20"},"nodeType":"YulFunctionCall","src":"8545:41:20"},"nodeType":"YulIf","src":"8542:128:20"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8165:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"8173:3:20","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"8181:8:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"8191:6:20","type":""}],"src":"8124:552:20"},{"body":{"nodeType":"YulBlock","src":"8767:442:20","statements":[{"body":{"nodeType":"YulBlock","src":"8813:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8815:77:20"},"nodeType":"YulFunctionCall","src":"8815:79:20"},"nodeType":"YulExpressionStatement","src":"8815:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8788:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"8797:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8784:3:20"},"nodeType":"YulFunctionCall","src":"8784:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"8809:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8780:3:20"},"nodeType":"YulFunctionCall","src":"8780:32:20"},"nodeType":"YulIf","src":"8777:119:20"},{"nodeType":"YulBlock","src":"8906:296:20","statements":[{"nodeType":"YulVariableDeclaration","src":"8921:45:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8952:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"8963:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8948:3:20"},"nodeType":"YulFunctionCall","src":"8948:17:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8935:12:20"},"nodeType":"YulFunctionCall","src":"8935:31:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8925:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"9013:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9015:77:20"},"nodeType":"YulFunctionCall","src":"9015:79:20"},"nodeType":"YulExpressionStatement","src":"9015:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8985:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8993:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8982:2:20"},"nodeType":"YulFunctionCall","src":"8982:30:20"},"nodeType":"YulIf","src":"8979:117:20"},{"nodeType":"YulAssignment","src":"9110:82:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9164:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"9175:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9160:3:20"},"nodeType":"YulFunctionCall","src":"9160:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9184:7:20"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"9128:31:20"},"nodeType":"YulFunctionCall","src":"9128:64:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9110:6:20"},{"name":"value1","nodeType":"YulIdentifier","src":"9118:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8729:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8740:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8752:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8760:6:20","type":""}],"src":"8682:527:20"},{"body":{"nodeType":"YulBlock","src":"9281:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"9327:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9329:77:20"},"nodeType":"YulFunctionCall","src":"9329:79:20"},"nodeType":"YulExpressionStatement","src":"9329:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9302:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"9311:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9298:3:20"},"nodeType":"YulFunctionCall","src":"9298:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"9323:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9294:3:20"},"nodeType":"YulFunctionCall","src":"9294:32:20"},"nodeType":"YulIf","src":"9291:119:20"},{"nodeType":"YulBlock","src":"9420:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"9435:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"9449:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9439:6:20","type":""}]},{"nodeType":"YulAssignment","src":"9464:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9499:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"9510:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9495:3:20"},"nodeType":"YulFunctionCall","src":"9495:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9519:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9474:20:20"},"nodeType":"YulFunctionCall","src":"9474:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9464:6:20"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9251:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9262:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9274:6:20","type":""}],"src":"9215:329:20"},{"body":{"nodeType":"YulBlock","src":"9578:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9595:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9598:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9588:6:20"},"nodeType":"YulFunctionCall","src":"9588:88:20"},"nodeType":"YulExpressionStatement","src":"9588:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9692:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9695:4:20","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9685:6:20"},"nodeType":"YulFunctionCall","src":"9685:15:20"},"nodeType":"YulExpressionStatement","src":"9685:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9716:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9719:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9709:6:20"},"nodeType":"YulFunctionCall","src":"9709:15:20"},"nodeType":"YulExpressionStatement","src":"9709:15:20"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9550:180:20"},{"body":{"nodeType":"YulBlock","src":"9832:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9849:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"9854:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9842:6:20"},"nodeType":"YulFunctionCall","src":"9842:19:20"},"nodeType":"YulExpressionStatement","src":"9842:19:20"},{"nodeType":"YulAssignment","src":"9870:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9889:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"9894:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9885:3:20"},"nodeType":"YulFunctionCall","src":"9885:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9870:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9804:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"9809:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9820:11:20","type":""}],"src":"9736:169:20"},{"body":{"nodeType":"YulBlock","src":"10017:66:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10039:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"10047:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10035:3:20"},"nodeType":"YulFunctionCall","src":"10035:14:20"},{"hexValue":"50617963726573743a207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"10051:24:20","type":"","value":"Paycrest: zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10028:6:20"},"nodeType":"YulFunctionCall","src":"10028:48:20"},"nodeType":"YulExpressionStatement","src":"10028:48:20"}]},"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10009:6:20","type":""}],"src":"9911:172:20"},{"body":{"nodeType":"YulBlock","src":"10235:220:20","statements":[{"nodeType":"YulAssignment","src":"10245:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10311:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"10316:2:20","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10252:58:20"},"nodeType":"YulFunctionCall","src":"10252:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10245:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10417:3:20"}],"functionName":{"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulIdentifier","src":"10328:88:20"},"nodeType":"YulFunctionCall","src":"10328:93:20"},"nodeType":"YulExpressionStatement","src":"10328:93:20"},{"nodeType":"YulAssignment","src":"10430:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10441:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"10446:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10437:3:20"},"nodeType":"YulFunctionCall","src":"10437:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10430:3:20"}]}]},"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10223:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10231:3:20","type":""}],"src":"10089:366:20"},{"body":{"nodeType":"YulBlock","src":"10632:248:20","statements":[{"nodeType":"YulAssignment","src":"10642:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10654:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"10665:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10650:3:20"},"nodeType":"YulFunctionCall","src":"10650:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10642:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10689:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"10700:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10685:3:20"},"nodeType":"YulFunctionCall","src":"10685:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10708:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"10714:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10704:3:20"},"nodeType":"YulFunctionCall","src":"10704:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10678:6:20"},"nodeType":"YulFunctionCall","src":"10678:47:20"},"nodeType":"YulExpressionStatement","src":"10678:47:20"},{"nodeType":"YulAssignment","src":"10734:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10868:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10742:124:20"},"nodeType":"YulFunctionCall","src":"10742:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10734:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10612:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10627:4:20","type":""}],"src":"10461:419:20"},{"body":{"nodeType":"YulBlock","src":"10949:52:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10966:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10988:5:20"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"10971:16:20"},"nodeType":"YulFunctionCall","src":"10971:23:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10959:6:20"},"nodeType":"YulFunctionCall","src":"10959:36:20"},"nodeType":"YulExpressionStatement","src":"10959:36:20"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10937:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10944:3:20","type":""}],"src":"10886:115:20"},{"body":{"nodeType":"YulBlock","src":"11103:122:20","statements":[{"nodeType":"YulAssignment","src":"11113:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11125:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11136:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11121:3:20"},"nodeType":"YulFunctionCall","src":"11121:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11113:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11191:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11204:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11215:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11200:3:20"},"nodeType":"YulFunctionCall","src":"11200:17:20"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"11149:41:20"},"nodeType":"YulFunctionCall","src":"11149:69:20"},"nodeType":"YulExpressionStatement","src":"11149:69:20"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11075:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11087:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11098:4:20","type":""}],"src":"11007:218:20"},{"body":{"nodeType":"YulBlock","src":"11296:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11313:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11336:5:20"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"11318:17:20"},"nodeType":"YulFunctionCall","src":"11318:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11306:6:20"},"nodeType":"YulFunctionCall","src":"11306:37:20"},"nodeType":"YulExpressionStatement","src":"11306:37:20"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11284:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11291:3:20","type":""}],"src":"11231:118:20"},{"body":{"nodeType":"YulBlock","src":"11414:50:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11431:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11451:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"11436:14:20"},"nodeType":"YulFunctionCall","src":"11436:21:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11424:6:20"},"nodeType":"YulFunctionCall","src":"11424:34:20"},"nodeType":"YulExpressionStatement","src":"11424:34:20"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11402:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11409:3:20","type":""}],"src":"11355:109:20"},{"body":{"nodeType":"YulBlock","src":"11618:282:20","statements":[{"nodeType":"YulAssignment","src":"11628:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11640:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11651:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11636:3:20"},"nodeType":"YulFunctionCall","src":"11636:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11628:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11708:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11721:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11732:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11717:3:20"},"nodeType":"YulFunctionCall","src":"11717:17:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"11664:43:20"},"nodeType":"YulFunctionCall","src":"11664:71:20"},"nodeType":"YulExpressionStatement","src":"11664:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11789:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11802:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11813:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11798:3:20"},"nodeType":"YulFunctionCall","src":"11798:18:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11745:43:20"},"nodeType":"YulFunctionCall","src":"11745:72:20"},"nodeType":"YulExpressionStatement","src":"11745:72:20"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11865:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11878:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11889:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11874:3:20"},"nodeType":"YulFunctionCall","src":"11874:18:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"11827:37:20"},"nodeType":"YulFunctionCall","src":"11827:66:20"},"nodeType":"YulExpressionStatement","src":"11827:66:20"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11574:9:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11586:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11594:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11602:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11613:4:20","type":""}],"src":"11470:430:20"},{"body":{"nodeType":"YulBlock","src":"11971:31:20","statements":[{"nodeType":"YulAssignment","src":"11982:13:20","value":{"name":"len","nodeType":"YulIdentifier","src":"11992:3:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"11982:6:20"}]}]},"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11949:5:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"11956:3:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"11964:6:20","type":""}],"src":"11906:96:20"},{"body":{"nodeType":"YulBlock","src":"12036:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12053:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12056:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12046:6:20"},"nodeType":"YulFunctionCall","src":"12046:88:20"},"nodeType":"YulExpressionStatement","src":"12046:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12150:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12153:4:20","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12143:6:20"},"nodeType":"YulFunctionCall","src":"12143:15:20"},"nodeType":"YulExpressionStatement","src":"12143:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12174:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12177:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12167:6:20"},"nodeType":"YulFunctionCall","src":"12167:15:20"},"nodeType":"YulExpressionStatement","src":"12167:15:20"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"12008:180:20"},{"body":{"nodeType":"YulBlock","src":"12245:269:20","statements":[{"nodeType":"YulAssignment","src":"12255:22:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12269:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"12275:1:20","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12265:3:20"},"nodeType":"YulFunctionCall","src":"12265:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12255:6:20"}]},{"nodeType":"YulVariableDeclaration","src":"12286:38:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12316:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"12322:1:20","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12312:3:20"},"nodeType":"YulFunctionCall","src":"12312:12:20"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"12290:18:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"12363:51:20","statements":[{"nodeType":"YulAssignment","src":"12377:27:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12391:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"12399:4:20","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12387:3:20"},"nodeType":"YulFunctionCall","src":"12387:17:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12377:6:20"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12343:18:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12336:6:20"},"nodeType":"YulFunctionCall","src":"12336:26:20"},"nodeType":"YulIf","src":"12333:81:20"},{"body":{"nodeType":"YulBlock","src":"12466:42:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"12480:16:20"},"nodeType":"YulFunctionCall","src":"12480:18:20"},"nodeType":"YulExpressionStatement","src":"12480:18:20"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12430:18:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12453:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"12461:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12450:2:20"},"nodeType":"YulFunctionCall","src":"12450:14:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12427:2:20"},"nodeType":"YulFunctionCall","src":"12427:38:20"},"nodeType":"YulIf","src":"12424:84:20"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"12229:4:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12238:6:20","type":""}],"src":"12194:320:20"},{"body":{"nodeType":"YulBlock","src":"12573:87:20","statements":[{"nodeType":"YulAssignment","src":"12583:11:20","value":{"name":"ptr","nodeType":"YulIdentifier","src":"12591:3:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"12583:4:20"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12611:1:20","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"12614:3:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12604:6:20"},"nodeType":"YulFunctionCall","src":"12604:14:20"},"nodeType":"YulExpressionStatement","src":"12604:14:20"},{"nodeType":"YulAssignment","src":"12627:26:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12645:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12648:4:20","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"12635:9:20"},"nodeType":"YulFunctionCall","src":"12635:18:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"12627:4:20"}]}]},"name":"array_dataslot_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"12560:3:20","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"12568:4:20","type":""}],"src":"12520:140:20"},{"body":{"nodeType":"YulBlock","src":"12710:49:20","statements":[{"nodeType":"YulAssignment","src":"12720:33:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12738:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"12745:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12734:3:20"},"nodeType":"YulFunctionCall","src":"12734:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"12750:2:20","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12730:3:20"},"nodeType":"YulFunctionCall","src":"12730:23:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12720:6:20"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12693:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"12703:6:20","type":""}],"src":"12666:93:20"},{"body":{"nodeType":"YulBlock","src":"12818:54:20","statements":[{"nodeType":"YulAssignment","src":"12828:37:20","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"12853:4:20"},{"name":"value","nodeType":"YulIdentifier","src":"12859:5:20"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12849:3:20"},"nodeType":"YulFunctionCall","src":"12849:16:20"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"12828:8:20"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"12793:4:20","type":""},{"name":"value","nodeType":"YulTypedName","src":"12799:5:20","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"12809:8:20","type":""}],"src":"12765:107:20"},{"body":{"nodeType":"YulBlock","src":"12954:317:20","statements":[{"nodeType":"YulVariableDeclaration","src":"12964:35:20","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"12985:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"12997:1:20","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12981:3:20"},"nodeType":"YulFunctionCall","src":"12981:18:20"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"12968:9:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13008:109:20","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"13039:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13050:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"13020:18:20"},"nodeType":"YulFunctionCall","src":"13020:97:20"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"13012:4:20","type":""}]},{"nodeType":"YulAssignment","src":"13126:51:20","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"13157:9:20"},{"name":"toInsert","nodeType":"YulIdentifier","src":"13168:8:20"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"13138:18:20"},"nodeType":"YulFunctionCall","src":"13138:39:20"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"13126:8:20"}]},{"nodeType":"YulAssignment","src":"13186:30:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13199:5:20"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"13210:4:20"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13206:3:20"},"nodeType":"YulFunctionCall","src":"13206:9:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13195:3:20"},"nodeType":"YulFunctionCall","src":"13195:21:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13186:5:20"}]},{"nodeType":"YulAssignment","src":"13225:40:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13238:5:20"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"13249:8:20"},{"name":"mask","nodeType":"YulIdentifier","src":"13259:4:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13245:3:20"},"nodeType":"YulFunctionCall","src":"13245:19:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"13235:2:20"},"nodeType":"YulFunctionCall","src":"13235:30:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"13225:6:20"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12915:5:20","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"12922:10:20","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"12934:8:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"12947:6:20","type":""}],"src":"12878:393:20"},{"body":{"nodeType":"YulBlock","src":"13322:32:20","statements":[{"nodeType":"YulAssignment","src":"13332:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"13343:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"13332:7:20"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13304:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"13314:7:20","type":""}],"src":"13277:77:20"},{"body":{"nodeType":"YulBlock","src":"13392:28:20","statements":[{"nodeType":"YulAssignment","src":"13402:12:20","value":{"name":"value","nodeType":"YulIdentifier","src":"13409:5:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13402:3:20"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13378:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13388:3:20","type":""}],"src":"13360:60:20"},{"body":{"nodeType":"YulBlock","src":"13486:82:20","statements":[{"nodeType":"YulAssignment","src":"13496:66:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13554:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13536:17:20"},"nodeType":"YulFunctionCall","src":"13536:24:20"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"13527:8:20"},"nodeType":"YulFunctionCall","src":"13527:34:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13509:17:20"},"nodeType":"YulFunctionCall","src":"13509:53:20"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"13496:9:20"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13466:5:20","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"13476:9:20","type":""}],"src":"13426:142:20"},{"body":{"nodeType":"YulBlock","src":"13621:28:20","statements":[{"nodeType":"YulAssignment","src":"13631:12:20","value":{"name":"value","nodeType":"YulIdentifier","src":"13638:5:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13631:3:20"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13607:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13617:3:20","type":""}],"src":"13574:75:20"},{"body":{"nodeType":"YulBlock","src":"13731:193:20","statements":[{"nodeType":"YulVariableDeclaration","src":"13741:63:20","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"13796:7:20"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"13765:30:20"},"nodeType":"YulFunctionCall","src":"13765:39:20"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"13745:16:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13820:4:20"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13860:4:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"13854:5:20"},"nodeType":"YulFunctionCall","src":"13854:11:20"},{"name":"offset","nodeType":"YulIdentifier","src":"13867:6:20"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"13899:16:20"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"13875:23:20"},"nodeType":"YulFunctionCall","src":"13875:41:20"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"13826:27:20"},"nodeType":"YulFunctionCall","src":"13826:91:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"13813:6:20"},"nodeType":"YulFunctionCall","src":"13813:105:20"},"nodeType":"YulExpressionStatement","src":"13813:105:20"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"13708:4:20","type":""},{"name":"offset","nodeType":"YulTypedName","src":"13714:6:20","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"13722:7:20","type":""}],"src":"13655:269:20"},{"body":{"nodeType":"YulBlock","src":"13979:24:20","statements":[{"nodeType":"YulAssignment","src":"13989:8:20","value":{"kind":"number","nodeType":"YulLiteral","src":"13996:1:20","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13989:3:20"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13975:3:20","type":""}],"src":"13930:73:20"},{"body":{"nodeType":"YulBlock","src":"14062:136:20","statements":[{"nodeType":"YulVariableDeclaration","src":"14072:46:20","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"14086:30:20"},"nodeType":"YulFunctionCall","src":"14086:32:20"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"14076:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"14171:4:20"},{"name":"offset","nodeType":"YulIdentifier","src":"14177:6:20"},{"name":"zero_0","nodeType":"YulIdentifier","src":"14185:6:20"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"14127:43:20"},"nodeType":"YulFunctionCall","src":"14127:65:20"},"nodeType":"YulExpressionStatement","src":"14127:65:20"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"14048:4:20","type":""},{"name":"offset","nodeType":"YulTypedName","src":"14054:6:20","type":""}],"src":"14009:189:20"},{"body":{"nodeType":"YulBlock","src":"14254:136:20","statements":[{"body":{"nodeType":"YulBlock","src":"14321:63:20","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14365:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"14372:1:20","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"14335:29:20"},"nodeType":"YulFunctionCall","src":"14335:39:20"},"nodeType":"YulExpressionStatement","src":"14335:39:20"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14274:5:20"},{"name":"end","nodeType":"YulIdentifier","src":"14281:3:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14271:2:20"},"nodeType":"YulFunctionCall","src":"14271:14:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14286:26:20","statements":[{"nodeType":"YulAssignment","src":"14288:22:20","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14301:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"14308:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14297:3:20"},"nodeType":"YulFunctionCall","src":"14297:13:20"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"14288:5:20"}]}]},"pre":{"nodeType":"YulBlock","src":"14268:2:20","statements":[]},"src":"14264:120:20"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"14242:5:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"14249:3:20","type":""}],"src":"14204:186:20"},{"body":{"nodeType":"YulBlock","src":"14474:463:20","statements":[{"body":{"nodeType":"YulBlock","src":"14500:430:20","statements":[{"nodeType":"YulVariableDeclaration","src":"14514:53:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"14561:5:20"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"14530:30:20"},"nodeType":"YulFunctionCall","src":"14530:37:20"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"14518:8:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14580:63:20","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"14603:8:20"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"14631:10:20"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"14613:17:20"},"nodeType":"YulFunctionCall","src":"14613:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14599:3:20"},"nodeType":"YulFunctionCall","src":"14599:44:20"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"14584:11:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"14800:27:20","statements":[{"nodeType":"YulAssignment","src":"14802:23:20","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"14817:8:20"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"14802:11:20"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"14784:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"14796:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14781:2:20"},"nodeType":"YulFunctionCall","src":"14781:18:20"},"nodeType":"YulIf","src":"14778:49:20"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"14869:11:20"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"14886:8:20"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"14914:3:20"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"14896:17:20"},"nodeType":"YulFunctionCall","src":"14896:22:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14882:3:20"},"nodeType":"YulFunctionCall","src":"14882:37:20"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"14840:28:20"},"nodeType":"YulFunctionCall","src":"14840:80:20"},"nodeType":"YulExpressionStatement","src":"14840:80:20"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"14491:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"14496:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14488:2:20"},"nodeType":"YulFunctionCall","src":"14488:11:20"},"nodeType":"YulIf","src":"14485:445:20"}]},"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"14450:5:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"14457:3:20","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"14462:10:20","type":""}],"src":"14396:541:20"},{"body":{"nodeType":"YulBlock","src":"15006:54:20","statements":[{"nodeType":"YulAssignment","src":"15016:37:20","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"15041:4:20"},{"name":"value","nodeType":"YulIdentifier","src":"15047:5:20"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15037:3:20"},"nodeType":"YulFunctionCall","src":"15037:16:20"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"15016:8:20"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"14981:4:20","type":""},{"name":"value","nodeType":"YulTypedName","src":"14987:5:20","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"14997:8:20","type":""}],"src":"14943:117:20"},{"body":{"nodeType":"YulBlock","src":"15117:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"15127:68:20","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15176:1:20","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"15179:5:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15172:3:20"},"nodeType":"YulFunctionCall","src":"15172:13:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15191:1:20","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15187:3:20"},"nodeType":"YulFunctionCall","src":"15187:6:20"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"15143:28:20"},"nodeType":"YulFunctionCall","src":"15143:51:20"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15139:3:20"},"nodeType":"YulFunctionCall","src":"15139:56:20"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"15131:4:20","type":""}]},{"nodeType":"YulAssignment","src":"15204:25:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15218:4:20"},{"name":"mask","nodeType":"YulIdentifier","src":"15224:4:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15214:3:20"},"nodeType":"YulFunctionCall","src":"15214:15:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"15204:6:20"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15094:4:20","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"15100:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"15110:6:20","type":""}],"src":"15066:169:20"},{"body":{"nodeType":"YulBlock","src":"15321:214:20","statements":[{"nodeType":"YulAssignment","src":"15454:37:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15481:4:20"},{"name":"len","nodeType":"YulIdentifier","src":"15487:3:20"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"15462:18:20"},"nodeType":"YulFunctionCall","src":"15462:29:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"15454:4:20"}]},{"nodeType":"YulAssignment","src":"15500:29:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15511:4:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15521:1:20","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"15524:3:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15517:3:20"},"nodeType":"YulFunctionCall","src":"15517:11:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"15508:2:20"},"nodeType":"YulFunctionCall","src":"15508:21:20"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"15500:4:20"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15302:4:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"15308:3:20","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"15316:4:20","type":""}],"src":"15240:295:20"},{"body":{"nodeType":"YulBlock","src":"15637:1301:20","statements":[{"nodeType":"YulVariableDeclaration","src":"15648:57:20","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15696:3:20"},{"name":"len","nodeType":"YulIdentifier","src":"15701:3:20"}],"functionName":{"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"15662:33:20"},"nodeType":"YulFunctionCall","src":"15662:43:20"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"15652:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"15790:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"15792:16:20"},"nodeType":"YulFunctionCall","src":"15792:18:20"},"nodeType":"YulExpressionStatement","src":"15792:18:20"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"15762:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"15770:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15759:2:20"},"nodeType":"YulFunctionCall","src":"15759:30:20"},"nodeType":"YulIf","src":"15756:56:20"},{"nodeType":"YulVariableDeclaration","src":"15822:52:20","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15868:4:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"15862:5:20"},"nodeType":"YulFunctionCall","src":"15862:11:20"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"15836:25:20"},"nodeType":"YulFunctionCall","src":"15836:38:20"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"15826:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15966:4:20"},{"name":"oldLen","nodeType":"YulIdentifier","src":"15972:6:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"15980:6:20"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulIdentifier","src":"15921:44:20"},"nodeType":"YulFunctionCall","src":"15921:66:20"},"nodeType":"YulExpressionStatement","src":"15921:66:20"},{"nodeType":"YulVariableDeclaration","src":"15997:18:20","value":{"kind":"number","nodeType":"YulLiteral","src":"16014:1:20","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"16001:9:20","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"16062:624:20","statements":[{"nodeType":"YulVariableDeclaration","src":"16076:37:20","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16095:6:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16107:4:20","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16103:3:20"},"nodeType":"YulFunctionCall","src":"16103:9:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16091:3:20"},"nodeType":"YulFunctionCall","src":"16091:22:20"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"16080:7:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16127:50:20","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16172:4:20"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"16141:30:20"},"nodeType":"YulFunctionCall","src":"16141:36:20"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"16131:6:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16190:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"16199:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16194:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"16258:170:20","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16283:6:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16308:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16313:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16304:3:20"},"nodeType":"YulFunctionCall","src":"16304:19:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16291:12:20"},"nodeType":"YulFunctionCall","src":"16291:33:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16276:6:20"},"nodeType":"YulFunctionCall","src":"16276:49:20"},"nodeType":"YulExpressionStatement","src":"16276:49:20"},{"nodeType":"YulAssignment","src":"16342:24:20","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16356:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"16364:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16352:3:20"},"nodeType":"YulFunctionCall","src":"16352:14:20"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16342:6:20"}]},{"nodeType":"YulAssignment","src":"16383:31:20","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16400:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"16411:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16396:3:20"},"nodeType":"YulFunctionCall","src":"16396:18:20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16383:9:20"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16224:1:20"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"16227:7:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16221:2:20"},"nodeType":"YulFunctionCall","src":"16221:14:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16236:21:20","statements":[{"nodeType":"YulAssignment","src":"16238:17:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16247:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"16250:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16243:3:20"},"nodeType":"YulFunctionCall","src":"16243:12:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16238:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"16217:3:20","statements":[]},"src":"16213:215:20"},{"body":{"nodeType":"YulBlock","src":"16464:163:20","statements":[{"nodeType":"YulVariableDeclaration","src":"16482:50:20","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16516:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16521:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16512:3:20"},"nodeType":"YulFunctionCall","src":"16512:19:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16499:12:20"},"nodeType":"YulFunctionCall","src":"16499:33:20"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"16486:9:20","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16556:6:20"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"16583:9:20"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16598:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"16606:4:20","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16594:3:20"},"nodeType":"YulFunctionCall","src":"16594:17:20"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"16564:18:20"},"nodeType":"YulFunctionCall","src":"16564:48:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16549:6:20"},"nodeType":"YulFunctionCall","src":"16549:64:20"},"nodeType":"YulExpressionStatement","src":"16549:64:20"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"16447:7:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"16456:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16444:2:20"},"nodeType":"YulFunctionCall","src":"16444:19:20"},"nodeType":"YulIf","src":"16441:186:20"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16647:4:20"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16661:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"16669:1:20","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16657:3:20"},"nodeType":"YulFunctionCall","src":"16657:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"16673:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16653:3:20"},"nodeType":"YulFunctionCall","src":"16653:22:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16640:6:20"},"nodeType":"YulFunctionCall","src":"16640:36:20"},"nodeType":"YulExpressionStatement","src":"16640:36:20"}]},"nodeType":"YulCase","src":"16055:631:20","value":{"kind":"number","nodeType":"YulLiteral","src":"16060:1:20","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"16703:229:20","statements":[{"nodeType":"YulVariableDeclaration","src":"16717:14:20","value":{"kind":"number","nodeType":"YulLiteral","src":"16730:1:20","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"16721:5:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"16754:74:20","statements":[{"nodeType":"YulAssignment","src":"16772:42:20","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16798:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16803:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16794:3:20"},"nodeType":"YulFunctionCall","src":"16794:19:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16781:12:20"},"nodeType":"YulFunctionCall","src":"16781:33:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16772:5:20"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"16747:6:20"},"nodeType":"YulIf","src":"16744:84:20"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16848:4:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16907:5:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"16914:6:20"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"16854:52:20"},"nodeType":"YulFunctionCall","src":"16854:67:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16841:6:20"},"nodeType":"YulFunctionCall","src":"16841:81:20"},"nodeType":"YulExpressionStatement","src":"16841:81:20"}]},"nodeType":"YulCase","src":"16695:237:20","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16035:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"16043:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16032:2:20"},"nodeType":"YulFunctionCall","src":"16032:14:20"},"nodeType":"YulSwitch","src":"16025:907:20"}]},"name":"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"15621:4:20","type":""},{"name":"src","nodeType":"YulTypedName","src":"15627:3:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"15632:3:20","type":""}],"src":"15540:1398:20"},{"body":{"nodeType":"YulBlock","src":"17039:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17056:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"17061:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17049:6:20"},"nodeType":"YulFunctionCall","src":"17049:19:20"},"nodeType":"YulExpressionStatement","src":"17049:19:20"},{"nodeType":"YulAssignment","src":"17077:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17096:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17101:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17092:3:20"},"nodeType":"YulFunctionCall","src":"17092:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17077:11:20"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17011:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"17016:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17027:11:20","type":""}],"src":"16944:168:20"},{"body":{"nodeType":"YulBlock","src":"17182:82:20","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17205:3:20"},{"name":"src","nodeType":"YulIdentifier","src":"17210:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"17215:6:20"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"17192:12:20"},"nodeType":"YulFunctionCall","src":"17192:30:20"},"nodeType":"YulExpressionStatement","src":"17192:30:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17242:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"17247:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17238:3:20"},"nodeType":"YulFunctionCall","src":"17238:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"17256:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17231:6:20"},"nodeType":"YulFunctionCall","src":"17231:27:20"},"nodeType":"YulExpressionStatement","src":"17231:27:20"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"17164:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"17169:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"17174:6:20","type":""}],"src":"17118:146:20"},{"body":{"nodeType":"YulBlock","src":"17392:214:20","statements":[{"nodeType":"YulAssignment","src":"17402:77:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17467:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"17472:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17409:57:20"},"nodeType":"YulFunctionCall","src":"17409:70:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17402:3:20"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17526:5:20"},{"name":"pos","nodeType":"YulIdentifier","src":"17533:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"17538:6:20"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17489:36:20"},"nodeType":"YulFunctionCall","src":"17489:56:20"},"nodeType":"YulExpressionStatement","src":"17489:56:20"},{"nodeType":"YulAssignment","src":"17554:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17565:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17592:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"17570:21:20"},"nodeType":"YulFunctionCall","src":"17570:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17561:3:20"},"nodeType":"YulFunctionCall","src":"17561:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17554:3:20"}]}]},"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"17365:5:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"17372:6:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17380:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17388:3:20","type":""}],"src":"17292:314:20"},{"body":{"nodeType":"YulBlock","src":"17738:203:20","statements":[{"nodeType":"YulAssignment","src":"17748:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17760:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"17771:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17756:3:20"},"nodeType":"YulFunctionCall","src":"17756:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17748:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17795:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"17806:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17791:3:20"},"nodeType":"YulFunctionCall","src":"17791:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17814:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"17820:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17810:3:20"},"nodeType":"YulFunctionCall","src":"17810:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17784:6:20"},"nodeType":"YulFunctionCall","src":"17784:47:20"},"nodeType":"YulExpressionStatement","src":"17784:47:20"},{"nodeType":"YulAssignment","src":"17840:94:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17912:6:20"},{"name":"value1","nodeType":"YulIdentifier","src":"17920:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"17929:4:20"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17848:63:20"},"nodeType":"YulFunctionCall","src":"17848:86:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17840:4:20"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17702:9:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17714:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17722:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17733:4:20","type":""}],"src":"17612:329:20"},{"body":{"nodeType":"YulBlock","src":"18053:119:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18075:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"18083:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18071:3:20"},"nodeType":"YulFunctionCall","src":"18071:14:20"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"18087:34:20","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18064:6:20"},"nodeType":"YulFunctionCall","src":"18064:58:20"},"nodeType":"YulExpressionStatement","src":"18064:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18143:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"18151:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18139:3:20"},"nodeType":"YulFunctionCall","src":"18139:15:20"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"18156:8:20","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18132:6:20"},"nodeType":"YulFunctionCall","src":"18132:33:20"},"nodeType":"YulExpressionStatement","src":"18132:33:20"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18045:6:20","type":""}],"src":"17947:225:20"},{"body":{"nodeType":"YulBlock","src":"18324:220:20","statements":[{"nodeType":"YulAssignment","src":"18334:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18400:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18405:2:20","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18341:58:20"},"nodeType":"YulFunctionCall","src":"18341:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18334:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18506:3:20"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"18417:88:20"},"nodeType":"YulFunctionCall","src":"18417:93:20"},"nodeType":"YulExpressionStatement","src":"18417:93:20"},{"nodeType":"YulAssignment","src":"18519:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18530:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18535:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18526:3:20"},"nodeType":"YulFunctionCall","src":"18526:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18519:3:20"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18312:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18320:3:20","type":""}],"src":"18178:366:20"},{"body":{"nodeType":"YulBlock","src":"18721:248:20","statements":[{"nodeType":"YulAssignment","src":"18731:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18743:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"18754:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18739:3:20"},"nodeType":"YulFunctionCall","src":"18739:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18731:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18778:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"18789:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18774:3:20"},"nodeType":"YulFunctionCall","src":"18774:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18797:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"18803:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18793:3:20"},"nodeType":"YulFunctionCall","src":"18793:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18767:6:20"},"nodeType":"YulFunctionCall","src":"18767:47:20"},"nodeType":"YulExpressionStatement","src":"18767:47:20"},{"nodeType":"YulAssignment","src":"18823:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18957:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18831:124:20"},"nodeType":"YulFunctionCall","src":"18831:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18823:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18701:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18716:4:20","type":""}],"src":"18550:419:20"},{"body":{"nodeType":"YulBlock","src":"19081:76:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19103:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"19111:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19099:3:20"},"nodeType":"YulFunctionCall","src":"19099:14:20"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"19115:34:20","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19092:6:20"},"nodeType":"YulFunctionCall","src":"19092:58:20"},"nodeType":"YulExpressionStatement","src":"19092:58:20"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19073:6:20","type":""}],"src":"18975:182:20"},{"body":{"nodeType":"YulBlock","src":"19309:220:20","statements":[{"nodeType":"YulAssignment","src":"19319:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19385:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"19390:2:20","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19326:58:20"},"nodeType":"YulFunctionCall","src":"19326:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19319:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19491:3:20"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"19402:88:20"},"nodeType":"YulFunctionCall","src":"19402:93:20"},"nodeType":"YulExpressionStatement","src":"19402:93:20"},{"nodeType":"YulAssignment","src":"19504:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19515:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"19520:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19511:3:20"},"nodeType":"YulFunctionCall","src":"19511:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19504:3:20"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19297:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19305:3:20","type":""}],"src":"19163:366:20"},{"body":{"nodeType":"YulBlock","src":"19706:248:20","statements":[{"nodeType":"YulAssignment","src":"19716:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19728:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"19739:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19724:3:20"},"nodeType":"YulFunctionCall","src":"19724:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19716:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19763:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"19774:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19759:3:20"},"nodeType":"YulFunctionCall","src":"19759:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19782:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"19788:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19778:3:20"},"nodeType":"YulFunctionCall","src":"19778:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19752:6:20"},"nodeType":"YulFunctionCall","src":"19752:47:20"},"nodeType":"YulExpressionStatement","src":"19752:47:20"},{"nodeType":"YulAssignment","src":"19808:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19942:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19816:124:20"},"nodeType":"YulFunctionCall","src":"19816:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19808:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19686:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19701:4:20","type":""}],"src":"19535:419:20"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct PaycrestSettingManager.Institution\n    function abi_decode_t_struct$_Institution_$4160_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // code\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // name\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_available_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Institution_$4160_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_struct$_Institution_$4160_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(memPtr) {\n\n        mstore(add(memPtr, 0), \"Paycrest: zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_length_t_bytes_calldata_ptr(value, len) -> length {\n\n        length := len\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_bytes_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_bytes_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_bytes_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage(slot, src, len) {\n\n        let newLen := array_length_t_bytes_calldata_ptr(src, len)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_bytes_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := calldataload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value0, value1,  tail)\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100eb57806399e3c0b414610109578063cb79455b14610125578063f2fde38b1461014157610088565b8063322008821461008d578063715018a6146100a957806379a0effb146100b357806384630736146100cf575b600080fd5b6100a760048036038101906100a29190610a3a565b61015d565b005b6100b1610271565b005b6100cd60048036038101906100c89190610af4565b610285565b005b6100e960048036038101906100e49190610b74565b6103d2565b005b6100f361043d565b6040516101009190610bb0565b60405180910390f35b610123600480360381019061011e9190610c03565b610467565b005b61013f600480360381019061013a9190610cb1565b61061c565b005b61015b60048036038101906101569190610cfe565b610673565b005b6101656106f6565b60008151905060005b8181101561026b57609d600085815260200190815260200160002083828151811061019c5761019b610d2b565b5b6020026020010151908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050604051806040016040528084838151811061020157610200610d2b565b5b602002602001015160200151815260200185815250609e600085848151811061022d5761022c610d2b565b5b60200260200101516000015181526020019081526020016000206000820151816000015560208201518160010155905050808060010191505061016e565b50505050565b6102796106f6565b6102836000610774565b565b61028d6106f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390610db7565b60405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036103655780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f720000000000000000000000000000000000000000000082036103ce5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6103da6106f6565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc8ca786c100bc62a0dffbe768b5f0b770d84e8604c5de54b54197b9066bb42a9816040516104329190610de6565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61046f6106f6565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d590610db7565b60405180910390fd5b7f746f6b656e000000000000000000000000000000000000000000000000000000830361055d5780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c697374000000000000000000000000000000000000000000000083036105dc5780609c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161060f93929190610e1f565b60405180910390a1505050565b6106246106f6565b818160689182610635929190611077565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef8282604051610667929190611194565b60405180910390a15050565b61067b6106f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e19061122a565b60405180910390fd5b6106f381610774565b50565b6106fe61083a565b73ffffffffffffffffffffffffffffffffffffffff1661071c61043d565b73ffffffffffffffffffffffffffffffffffffffff1614610772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076990611296565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61086981610856565b811461087457600080fd5b50565b60008135905061088681610860565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108da82610891565b810181811067ffffffffffffffff821117156108f9576108f86108a2565b5b80604052505050565b600061090c610842565b905061091882826108d1565b919050565b600067ffffffffffffffff821115610938576109376108a2565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156109695761096861094e565b5b6109736040610902565b9050600061098384828501610877565b600083015250602061099784828501610877565b60208301525092915050565b60006109b66109b18461091d565b610902565b905080838252602082019050604084028301858111156109d9576109d8610949565b5b835b81811015610a0257806109ee8882610953565b8452602084019350506040810190506109db565b5050509392505050565b600082601f830112610a2157610a2061088c565b5b8135610a318482602086016109a3565b91505092915050565b60008060408385031215610a5157610a5061084c565b5b6000610a5f85828601610877565b925050602083013567ffffffffffffffff811115610a8057610a7f610851565b5b610a8c85828601610a0c565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac182610a96565b9050919050565b610ad181610ab6565b8114610adc57600080fd5b50565b600081359050610aee81610ac8565b92915050565b60008060408385031215610b0b57610b0a61084c565b5b6000610b1985828601610877565b9250506020610b2a85828601610adf565b9150509250929050565b600067ffffffffffffffff82169050919050565b610b5181610b34565b8114610b5c57600080fd5b50565b600081359050610b6e81610b48565b92915050565b600060208284031215610b8a57610b8961084c565b5b6000610b9884828501610b5f565b91505092915050565b610baa81610ab6565b82525050565b6000602082019050610bc56000830184610ba1565b92915050565b60008115159050919050565b610be081610bcb565b8114610beb57600080fd5b50565b600081359050610bfd81610bd7565b92915050565b600080600060608486031215610c1c57610c1b61084c565b5b6000610c2a86828701610877565b9350506020610c3b86828701610adf565b9250506040610c4c86828701610bee565b9150509250925092565b600080fd5b60008083601f840112610c7157610c7061088c565b5b8235905067ffffffffffffffff811115610c8e57610c8d610c56565b5b602083019150836001820283011115610caa57610ca9610949565b5b9250929050565b60008060208385031215610cc857610cc761084c565b5b600083013567ffffffffffffffff811115610ce657610ce5610851565b5b610cf285828601610c5b565b92509250509250929050565b600060208284031215610d1457610d1361084c565b5b6000610d2284828501610adf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b6000610da1601683610d5a565b9150610dac82610d6b565b602082019050919050565b60006020820190508181036000830152610dd081610d94565b9050919050565b610de081610b34565b82525050565b6000602082019050610dfb6000830184610dd7565b92915050565b610e0a81610856565b82525050565b610e1981610bcb565b82525050565b6000606082019050610e346000830186610e01565b610e416020830185610ba1565b610e4e6040830184610e10565b949350505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ea857607f821691505b602082108103610ebb57610eba610e61565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610f237fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ee6565b610f2d8683610ee6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610f74610f6f610f6a84610f45565b610f4f565b610f45565b9050919050565b6000819050919050565b610f8e83610f59565b610fa2610f9a82610f7b565b848454610ef3565b825550505050565b600090565b610fb7610faa565b610fc2818484610f85565b505050565b5b81811015610fe657610fdb600082610faf565b600181019050610fc8565b5050565b601f82111561102b57610ffc81610ec1565b61100584610ed6565b81016020851015611014578190505b61102861102085610ed6565b830182610fc7565b50505b505050565b600082821c905092915050565b600061104e60001984600802611030565b1980831691505092915050565b6000611067838361103d565b9150826002028217905092915050565b6110818383610e56565b67ffffffffffffffff81111561109a576110996108a2565b5b6110a48254610e90565b6110af828285610fea565b6000601f8311600181146110de57600084156110cc578287013590505b6110d6858261105b565b86555061113e565b601f1984166110ec86610ec1565b60005b82811015611114578489013582556001820191506020850194506020810190506110ef565b86831015611131578489013561112d601f89168261103d565b8355505b6001600288020188555050505b50505050505050565b600082825260208201905092915050565b82818337600083830152505050565b60006111738385611147565b9350611180838584611158565b61118983610891565b840190509392505050565b600060208201905081810360008301526111af818486611167565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611214602683610d5a565b915061121f826111b8565b604082019050919050565b6000602082019050818103600083015261124381611207565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611280602083610d5a565b915061128b8261124a565b602082019050919050565b600060208201905081810360008301526112af81611273565b905091905056fea264697066735822122050b41f080926bf4f9f186583798e139b279542447fd028eba1d461cde298594564736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x141 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x32200882 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0xCF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xA3A JUMP JUMPDEST PUSH2 0x15D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB1 PUSH2 0x271 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xAF4 JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE4 SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x3D2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF3 PUSH2 0x43D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0xBB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x123 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11E SWAP2 SWAP1 PUSH2 0xC03 JUMP JUMPDEST PUSH2 0x467 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xCB1 JUMP JUMPDEST PUSH2 0x61C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x156 SWAP2 SWAP1 PUSH2 0xCFE JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x165 PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x9D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x19C JUMPI PUSH2 0x19B PUSH2 0xD2B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x201 JUMPI PUSH2 0x200 PUSH2 0xD2B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9E PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI PUSH2 0x22C PUSH2 0xD2B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x16E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x279 PUSH2 0x6F6 JUMP JUMPDEST PUSH2 0x283 PUSH1 0x0 PUSH2 0x774 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x28D PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F3 SWAP1 PUSH2 0xDB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x365 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x3CE JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x6F6 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xC8CA786C100BC62A0DFFBE768B5F0B770D84E8604C5DE54B54197B9066BB42A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x432 SWAP2 SWAP1 PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x46F PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D5 SWAP1 PUSH2 0xDB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x55D JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x5DC JUMPI DUP1 PUSH1 0x9C PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x60F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x624 PUSH2 0x6F6 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x635 SWAP3 SWAP2 SWAP1 PUSH2 0x1077 JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x667 SWAP3 SWAP2 SWAP1 PUSH2 0x1194 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x67B PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E1 SWAP1 PUSH2 0x122A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6F3 DUP2 PUSH2 0x774 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x6FE PUSH2 0x83A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x71C PUSH2 0x43D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x772 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x769 SWAP1 PUSH2 0x1296 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x869 DUP2 PUSH2 0x856 JUMP JUMPDEST DUP2 EQ PUSH2 0x874 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x886 DUP2 PUSH2 0x860 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x8DA DUP3 PUSH2 0x891 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x8F9 JUMPI PUSH2 0x8F8 PUSH2 0x8A2 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90C PUSH2 0x842 JUMP JUMPDEST SWAP1 POP PUSH2 0x918 DUP3 DUP3 PUSH2 0x8D1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x938 JUMPI PUSH2 0x937 PUSH2 0x8A2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x969 JUMPI PUSH2 0x968 PUSH2 0x94E JUMP JUMPDEST JUMPDEST PUSH2 0x973 PUSH1 0x40 PUSH2 0x902 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x983 DUP5 DUP3 DUP6 ADD PUSH2 0x877 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x997 DUP5 DUP3 DUP6 ADD PUSH2 0x877 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B6 PUSH2 0x9B1 DUP5 PUSH2 0x91D JUMP JUMPDEST PUSH2 0x902 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x9D9 JUMPI PUSH2 0x9D8 PUSH2 0x949 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA02 JUMPI DUP1 PUSH2 0x9EE DUP9 DUP3 PUSH2 0x953 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x9DB JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA21 JUMPI PUSH2 0xA20 PUSH2 0x88C JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA31 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x9A3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA51 JUMPI PUSH2 0xA50 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA5F DUP6 DUP3 DUP7 ADD PUSH2 0x877 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA80 JUMPI PUSH2 0xA7F PUSH2 0x851 JUMP JUMPDEST JUMPDEST PUSH2 0xA8C DUP6 DUP3 DUP7 ADD PUSH2 0xA0C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC1 DUP3 PUSH2 0xA96 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAD1 DUP2 PUSH2 0xAB6 JUMP JUMPDEST DUP2 EQ PUSH2 0xADC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xAEE DUP2 PUSH2 0xAC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB0B JUMPI PUSH2 0xB0A PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB19 DUP6 DUP3 DUP7 ADD PUSH2 0x877 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB2A DUP6 DUP3 DUP7 ADD PUSH2 0xADF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB51 DUP2 PUSH2 0xB34 JUMP JUMPDEST DUP2 EQ PUSH2 0xB5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB6E DUP2 PUSH2 0xB48 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB8A JUMPI PUSH2 0xB89 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB98 DUP5 DUP3 DUP6 ADD PUSH2 0xB5F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBAA DUP2 PUSH2 0xAB6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBC5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBA1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBE0 DUP2 PUSH2 0xBCB JUMP JUMPDEST DUP2 EQ PUSH2 0xBEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBFD DUP2 PUSH2 0xBD7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC1C JUMPI PUSH2 0xC1B PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC2A DUP7 DUP3 DUP8 ADD PUSH2 0x877 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC3B DUP7 DUP3 DUP8 ADD PUSH2 0xADF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xC4C DUP7 DUP3 DUP8 ADD PUSH2 0xBEE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC71 JUMPI PUSH2 0xC70 PUSH2 0x88C JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC8E JUMPI PUSH2 0xC8D PUSH2 0xC56 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xCAA JUMPI PUSH2 0xCA9 PUSH2 0x949 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCC8 JUMPI PUSH2 0xCC7 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCE6 JUMPI PUSH2 0xCE5 PUSH2 0x851 JUMP JUMPDEST JUMPDEST PUSH2 0xCF2 DUP6 DUP3 DUP7 ADD PUSH2 0xC5B JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD14 JUMPI PUSH2 0xD13 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD22 DUP5 DUP3 DUP6 ADD PUSH2 0xADF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA1 PUSH1 0x16 DUP4 PUSH2 0xD5A JUMP JUMPDEST SWAP2 POP PUSH2 0xDAC DUP3 PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDD0 DUP2 PUSH2 0xD94 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDE0 DUP2 PUSH2 0xB34 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDFB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDD7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xE0A DUP2 PUSH2 0x856 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xE19 DUP2 PUSH2 0xBCB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE34 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xE01 JUMP JUMPDEST PUSH2 0xE41 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0xE4E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xE10 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xEA8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xEBB JUMPI PUSH2 0xEBA PUSH2 0xE61 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0xF23 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0xEE6 JUMP JUMPDEST PUSH2 0xF2D DUP7 DUP4 PUSH2 0xEE6 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF74 PUSH2 0xF6F PUSH2 0xF6A DUP5 PUSH2 0xF45 JUMP JUMPDEST PUSH2 0xF4F JUMP JUMPDEST PUSH2 0xF45 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF8E DUP4 PUSH2 0xF59 JUMP JUMPDEST PUSH2 0xFA2 PUSH2 0xF9A DUP3 PUSH2 0xF7B JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0xEF3 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xFB7 PUSH2 0xFAA JUMP JUMPDEST PUSH2 0xFC2 DUP2 DUP5 DUP5 PUSH2 0xF85 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFE6 JUMPI PUSH2 0xFDB PUSH1 0x0 DUP3 PUSH2 0xFAF JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xFC8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x102B JUMPI PUSH2 0xFFC DUP2 PUSH2 0xEC1 JUMP JUMPDEST PUSH2 0x1005 DUP5 PUSH2 0xED6 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x1014 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x1028 PUSH2 0x1020 DUP6 PUSH2 0xED6 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0xFC7 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104E PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x1030 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1067 DUP4 DUP4 PUSH2 0x103D JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1081 DUP4 DUP4 PUSH2 0xE56 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109A JUMPI PUSH2 0x1099 PUSH2 0x8A2 JUMP JUMPDEST JUMPDEST PUSH2 0x10A4 DUP3 SLOAD PUSH2 0xE90 JUMP JUMPDEST PUSH2 0x10AF DUP3 DUP3 DUP6 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x10DE JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x10CC JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x10D6 DUP6 DUP3 PUSH2 0x105B JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x113E JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x10EC DUP7 PUSH2 0xEC1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1114 JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x10EF JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x1131 JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x112D PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x103D JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1173 DUP4 DUP6 PUSH2 0x1147 JUMP JUMPDEST SWAP4 POP PUSH2 0x1180 DUP4 DUP6 DUP5 PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x1189 DUP4 PUSH2 0x891 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11AF DUP2 DUP5 DUP7 PUSH2 0x1167 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1214 PUSH1 0x26 DUP4 PUSH2 0xD5A JUMP JUMPDEST SWAP2 POP PUSH2 0x121F DUP3 PUSH2 0x11B8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1243 DUP2 PUSH2 0x1207 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1280 PUSH1 0x20 DUP4 PUSH2 0xD5A JUMP JUMPDEST SWAP2 POP PUSH2 0x128B DUP3 PUSH2 0x124A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12AF DUP2 PUSH2 0x1273 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP 0xB4 0x1F ADDMOD MULMOD 0x26 0xBF 0x4F SWAP16 XOR PUSH6 0x83798E139B27 SWAP6 TIMESTAMP PREVRANDAO PUSH32 0xD028EBA1D461CDE298594564736F6C6343000812003300000000000000000000 ","sourceMap":"139:2737:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1751:500;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2064:101:0;;;:::i;:::-;;2443:263:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2257:180;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1441:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1401:344:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2712:161;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2314:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1751:500:16;1334:13:0;:11;:13::i;:::-;1868:14:16::1;1885:12;:19;1868:36;;1919:6;1914:331;1935:6;1931:1;:10;1914:331;;;1959:21;:31;1981:8;1959:31;;;;;;;;;;;1996:12;2009:1;1996:15;;;;;;;;:::i;:::-;;;;;;;;1959:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2078:97;;;;;;;;2120:12;2133:1;2120:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2078:97;;;;2152:8;2078:97;;::::0;2026:27:::1;:49;2054:12;2067:1;2054:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2026:49;;;;;;;;;;;:149;;;;;;;;;;;;;;;;;;;2217:3;;;;;;;1914:331;;;;1857:394;1751:500:::0;;:::o;2064:101:0:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;2443:263:16:-;1334:13:0;:11;:13::i;:::-;2559:1:16::1;2542:19;;:5;:19;;::::0;2534:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2602:13;:4;:13:::0;2598:39:::1;;2632:5;2617:12;;:20;;;;;;;;;;;;;;;;;;2598:39;2651:20;:4;:20:::0;2647:52:::1;;2694:5;2673:18;;:26;;;;;;;;;;;;;;;;;;2647:52;2443:263:::0;;:::o;2257:180::-;1334:13:0;:11;:13::i;:::-;2363:19:16::1;2342:18;;:40;;;;;;;;;;;;;;;;;;2397:33;2410:19;2397:33;;;;;;:::i;:::-;;;;;;;;2257:180:::0;:::o;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;1401:344:16:-;1334:13:0;:11;:13::i;:::-;1525:1:16::1;1508:19;;:5;:19;;::::0;1500:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;1568:15;:4;:15:::0;1564:54:::1;;1612:6;1585:17;:24;1603:5;1585:24;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;1564:54;1632:19;:4;:19:::0;1628:55:::1;;1677:6;1653:14;:21;1668:5;1653:21;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;1628:55;1699:39;1718:4;1724:5;1731:6;1699:39;;;;;;;;:::i;:::-;;;;;;;;1401:344:::0;;;:::o;2712:161::-;1334:13:0;:11;:13::i;:::-;2816:10:16::1;;2802:11;:24;;;;;;;:::i;:::-;;2841:25;2855:10;;2841:25;;;;;;;:::i;:::-;;;;;;;;2712:161:::0;;:::o;2314:198:0:-;1334:13;:11;:13::i;:::-;2422:1:::1;2402:22;;:8;:22;;::::0;2394:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;1599:130::-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;2666:187::-;2739:16;2758:6;;;;;;;;;;;2739:25;;2783:8;2774:6;;:17;;;;;;;;;;;;;;;;;;2837:8;2806:40;;2827:8;2806:40;;;;;;;;;;;;2729:124;2666:187;:::o;850:96:6:-;903:7;929:10;922:17;;850:96;:::o;7:75:20:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:117::-;799:1;796;789:12;813:102;854:6;905:2;901:7;896:2;889:5;885:14;881:28;871:38;;813:102;;;:::o;921:180::-;969:77;966:1;959:88;1066:4;1063:1;1056:15;1090:4;1087:1;1080:15;1107:281;1190:27;1212:4;1190:27;:::i;:::-;1182:6;1178:40;1320:6;1308:10;1305:22;1284:18;1272:10;1269:34;1266:62;1263:88;;;1331:18;;:::i;:::-;1263:88;1371:10;1367:2;1360:22;1150:238;1107:281;;:::o;1394:129::-;1428:6;1455:20;;:::i;:::-;1445:30;;1484:33;1512:4;1504:6;1484:33;:::i;:::-;1394:129;;;:::o;1529:340::-;1635:4;1725:18;1717:6;1714:30;1711:56;;;1747:18;;:::i;:::-;1711:56;1797:4;1789:6;1785:17;1777:25;;1857:4;1851;1847:15;1839:23;;1529:340;;;:::o;1875:117::-;1984:1;1981;1974:12;1998:117;2107:1;2104;2097:12;2293:578;2371:5;2415:4;2403:9;2398:3;2394:19;2390:30;2387:117;;;2423:79;;:::i;:::-;2387:117;2522:21;2538:4;2522:21;:::i;:::-;2513:30;;2602:1;2642:49;2687:3;2678:6;2667:9;2663:22;2642:49;:::i;:::-;2635:4;2628:5;2624:16;2617:75;2553:150;2762:2;2803:49;2848:3;2839:6;2828:9;2824:22;2803:49;:::i;:::-;2796:4;2789:5;2785:16;2778:75;2713:151;2293:578;;;;:::o;2928:797::-;3053:5;3078:110;3094:93;3180:6;3094:93;:::i;:::-;3078:110;:::i;:::-;3069:119;;3208:5;3237:6;3230:5;3223:21;3271:4;3264:5;3260:16;3253:23;;3324:4;3316:6;3312:17;3304:6;3300:30;3353:3;3345:6;3342:15;3339:122;;;3372:79;;:::i;:::-;3339:122;3487:6;3470:249;3504:6;3499:3;3496:15;3470:249;;;3579:3;3608:66;3670:3;3658:10;3608:66;:::i;:::-;3603:3;3596:79;3704:4;3699:3;3695:14;3688:21;;3546:173;3530:4;3525:3;3521:14;3514:21;;3470:249;;;3474:21;3059:666;;2928:797;;;;;:::o;3782:428::-;3882:5;3931:3;3924:4;3916:6;3912:17;3908:27;3898:122;;3939:79;;:::i;:::-;3898:122;4056:6;4043:20;4081:123;4200:3;4192:6;4185:4;4177:6;4173:17;4081:123;:::i;:::-;4072:132;;3888:322;3782:428;;;;:::o;4216:742::-;4338:6;4346;4395:2;4383:9;4374:7;4370:23;4366:32;4363:119;;;4401:79;;:::i;:::-;4363:119;4521:1;4546:53;4591:7;4582:6;4571:9;4567:22;4546:53;:::i;:::-;4536:63;;4492:117;4676:2;4665:9;4661:18;4648:32;4707:18;4699:6;4696:30;4693:117;;;4729:79;;:::i;:::-;4693:117;4834:107;4933:7;4924:6;4913:9;4909:22;4834:107;:::i;:::-;4824:117;;4619:332;4216:742;;;;;:::o;4964:126::-;5001:7;5041:42;5034:5;5030:54;5019:65;;4964:126;;;:::o;5096:96::-;5133:7;5162:24;5180:5;5162:24;:::i;:::-;5151:35;;5096:96;;;:::o;5198:122::-;5271:24;5289:5;5271:24;:::i;:::-;5264:5;5261:35;5251:63;;5310:1;5307;5300:12;5251:63;5198:122;:::o;5326:139::-;5372:5;5410:6;5397:20;5388:29;;5426:33;5453:5;5426:33;:::i;:::-;5326:139;;;;:::o;5471:474::-;5539:6;5547;5596:2;5584:9;5575:7;5571:23;5567:32;5564:119;;;5602:79;;:::i;:::-;5564:119;5722:1;5747:53;5792:7;5783:6;5772:9;5768:22;5747:53;:::i;:::-;5737:63;;5693:117;5849:2;5875:53;5920:7;5911:6;5900:9;5896:22;5875:53;:::i;:::-;5865:63;;5820:118;5471:474;;;;;:::o;5951:101::-;5987:7;6027:18;6020:5;6016:30;6005:41;;5951:101;;;:::o;6058:120::-;6130:23;6147:5;6130:23;:::i;:::-;6123:5;6120:34;6110:62;;6168:1;6165;6158:12;6110:62;6058:120;:::o;6184:137::-;6229:5;6267:6;6254:20;6245:29;;6283:32;6309:5;6283:32;:::i;:::-;6184:137;;;;:::o;6327:327::-;6385:6;6434:2;6422:9;6413:7;6409:23;6405:32;6402:119;;;6440:79;;:::i;:::-;6402:119;6560:1;6585:52;6629:7;6620:6;6609:9;6605:22;6585:52;:::i;:::-;6575:62;;6531:116;6327:327;;;;:::o;6660:118::-;6747:24;6765:5;6747:24;:::i;:::-;6742:3;6735:37;6660:118;;:::o;6784:222::-;6877:4;6915:2;6904:9;6900:18;6892:26;;6928:71;6996:1;6985:9;6981:17;6972:6;6928:71;:::i;:::-;6784:222;;;;:::o;7012:90::-;7046:7;7089:5;7082:13;7075:21;7064:32;;7012:90;;;:::o;7108:116::-;7178:21;7193:5;7178:21;:::i;:::-;7171:5;7168:32;7158:60;;7214:1;7211;7204:12;7158:60;7108:116;:::o;7230:133::-;7273:5;7311:6;7298:20;7289:29;;7327:30;7351:5;7327:30;:::i;:::-;7230:133;;;;:::o;7369:613::-;7443:6;7451;7459;7508:2;7496:9;7487:7;7483:23;7479:32;7476:119;;;7514:79;;:::i;:::-;7476:119;7634:1;7659:53;7704:7;7695:6;7684:9;7680:22;7659:53;:::i;:::-;7649:63;;7605:117;7761:2;7787:53;7832:7;7823:6;7812:9;7808:22;7787:53;:::i;:::-;7777:63;;7732:118;7889:2;7915:50;7957:7;7948:6;7937:9;7933:22;7915:50;:::i;:::-;7905:60;;7860:115;7369:613;;;;;:::o;7988:117::-;8097:1;8094;8087:12;8124:552;8181:8;8191:6;8241:3;8234:4;8226:6;8222:17;8218:27;8208:122;;8249:79;;:::i;:::-;8208:122;8362:6;8349:20;8339:30;;8392:18;8384:6;8381:30;8378:117;;;8414:79;;:::i;:::-;8378:117;8528:4;8520:6;8516:17;8504:29;;8582:3;8574:4;8566:6;8562:17;8552:8;8548:32;8545:41;8542:128;;;8589:79;;:::i;:::-;8542:128;8124:552;;;;;:::o;8682:527::-;8752:6;8760;8809:2;8797:9;8788:7;8784:23;8780:32;8777:119;;;8815:79;;:::i;:::-;8777:119;8963:1;8952:9;8948:17;8935:31;8993:18;8985:6;8982:30;8979:117;;;9015:79;;:::i;:::-;8979:117;9128:64;9184:7;9175:6;9164:9;9160:22;9128:64;:::i;:::-;9110:82;;;;8906:296;8682:527;;;;;:::o;9215:329::-;9274:6;9323:2;9311:9;9302:7;9298:23;9294:32;9291:119;;;9329:79;;:::i;:::-;9291:119;9449:1;9474:53;9519:7;9510:6;9499:9;9495:22;9474:53;:::i;:::-;9464:63;;9420:117;9215:329;;;;:::o;9550:180::-;9598:77;9595:1;9588:88;9695:4;9692:1;9685:15;9719:4;9716:1;9709:15;9736:169;9820:11;9854:6;9849:3;9842:19;9894:4;9889:3;9885:14;9870:29;;9736:169;;;;:::o;9911:172::-;10051:24;10047:1;10039:6;10035:14;10028:48;9911:172;:::o;10089:366::-;10231:3;10252:67;10316:2;10311:3;10252:67;:::i;:::-;10245:74;;10328:93;10417:3;10328:93;:::i;:::-;10446:2;10441:3;10437:12;10430:19;;10089:366;;;:::o;10461:419::-;10627:4;10665:2;10654:9;10650:18;10642:26;;10714:9;10708:4;10704:20;10700:1;10689:9;10685:17;10678:47;10742:131;10868:4;10742:131;:::i;:::-;10734:139;;10461:419;;;:::o;10886:115::-;10971:23;10988:5;10971:23;:::i;:::-;10966:3;10959:36;10886:115;;:::o;11007:218::-;11098:4;11136:2;11125:9;11121:18;11113:26;;11149:69;11215:1;11204:9;11200:17;11191:6;11149:69;:::i;:::-;11007:218;;;;:::o;11231:118::-;11318:24;11336:5;11318:24;:::i;:::-;11313:3;11306:37;11231:118;;:::o;11355:109::-;11436:21;11451:5;11436:21;:::i;:::-;11431:3;11424:34;11355:109;;:::o;11470:430::-;11613:4;11651:2;11640:9;11636:18;11628:26;;11664:71;11732:1;11721:9;11717:17;11708:6;11664:71;:::i;:::-;11745:72;11813:2;11802:9;11798:18;11789:6;11745:72;:::i;:::-;11827:66;11889:2;11878:9;11874:18;11865:6;11827:66;:::i;:::-;11470:430;;;;;;:::o;11906:96::-;11964:6;11992:3;11982:13;;11906:96;;;;:::o;12008:180::-;12056:77;12053:1;12046:88;12153:4;12150:1;12143:15;12177:4;12174:1;12167:15;12194:320;12238:6;12275:1;12269:4;12265:12;12255:22;;12322:1;12316:4;12312:12;12343:18;12333:81;;12399:4;12391:6;12387:17;12377:27;;12333:81;12461:2;12453:6;12450:14;12430:18;12427:38;12424:84;;12480:18;;:::i;:::-;12424:84;12245:269;12194:320;;;:::o;12520:140::-;12568:4;12591:3;12583:11;;12614:3;12611:1;12604:14;12648:4;12645:1;12635:18;12627:26;;12520:140;;;:::o;12666:93::-;12703:6;12750:2;12745;12738:5;12734:14;12730:23;12720:33;;12666:93;;;:::o;12765:107::-;12809:8;12859:5;12853:4;12849:16;12828:37;;12765:107;;;;:::o;12878:393::-;12947:6;12997:1;12985:10;12981:18;13020:97;13050:66;13039:9;13020:97;:::i;:::-;13138:39;13168:8;13157:9;13138:39;:::i;:::-;13126:51;;13210:4;13206:9;13199:5;13195:21;13186:30;;13259:4;13249:8;13245:19;13238:5;13235:30;13225:40;;12954:317;;12878:393;;;;;:::o;13277:77::-;13314:7;13343:5;13332:16;;13277:77;;;:::o;13360:60::-;13388:3;13409:5;13402:12;;13360:60;;;:::o;13426:142::-;13476:9;13509:53;13527:34;13536:24;13554:5;13536:24;:::i;:::-;13527:34;:::i;:::-;13509:53;:::i;:::-;13496:66;;13426:142;;;:::o;13574:75::-;13617:3;13638:5;13631:12;;13574:75;;;:::o;13655:269::-;13765:39;13796:7;13765:39;:::i;:::-;13826:91;13875:41;13899:16;13875:41;:::i;:::-;13867:6;13860:4;13854:11;13826:91;:::i;:::-;13820:4;13813:105;13731:193;13655:269;;;:::o;13930:73::-;13975:3;13930:73;:::o;14009:189::-;14086:32;;:::i;:::-;14127:65;14185:6;14177;14171:4;14127:65;:::i;:::-;14062:136;14009:189;;:::o;14204:186::-;14264:120;14281:3;14274:5;14271:14;14264:120;;;14335:39;14372:1;14365:5;14335:39;:::i;:::-;14308:1;14301:5;14297:13;14288:22;;14264:120;;;14204:186;;:::o;14396:541::-;14496:2;14491:3;14488:11;14485:445;;;14530:37;14561:5;14530:37;:::i;:::-;14613:29;14631:10;14613:29;:::i;:::-;14603:8;14599:44;14796:2;14784:10;14781:18;14778:49;;;14817:8;14802:23;;14778:49;14840:80;14896:22;14914:3;14896:22;:::i;:::-;14886:8;14882:37;14869:11;14840:80;:::i;:::-;14500:430;;14485:445;14396:541;;;:::o;14943:117::-;14997:8;15047:5;15041:4;15037:16;15016:37;;14943:117;;;;:::o;15066:169::-;15110:6;15143:51;15191:1;15187:6;15179:5;15176:1;15172:13;15143:51;:::i;:::-;15139:56;15224:4;15218;15214:15;15204:25;;15117:118;15066:169;;;;:::o;15240:295::-;15316:4;15462:29;15487:3;15481:4;15462:29;:::i;:::-;15454:37;;15524:3;15521:1;15517:11;15511:4;15508:21;15500:29;;15240:295;;;;:::o;15540:1398::-;15662:43;15701:3;15696;15662:43;:::i;:::-;15770:18;15762:6;15759:30;15756:56;;;15792:18;;:::i;:::-;15756:56;15836:38;15868:4;15862:11;15836:38;:::i;:::-;15921:66;15980:6;15972;15966:4;15921:66;:::i;:::-;16014:1;16043:2;16035:6;16032:14;16060:1;16055:631;;;;16730:1;16747:6;16744:84;;;16803:9;16798:3;16794:19;16781:33;16772:42;;16744:84;16854:67;16914:6;16907:5;16854:67;:::i;:::-;16848:4;16841:81;16703:229;16025:907;;16055:631;16107:4;16103:9;16095:6;16091:22;16141:36;16172:4;16141:36;:::i;:::-;16199:1;16213:215;16227:7;16224:1;16221:14;16213:215;;;16313:9;16308:3;16304:19;16291:33;16283:6;16276:49;16364:1;16356:6;16352:14;16342:24;;16411:2;16400:9;16396:18;16383:31;;16250:4;16247:1;16243:12;16238:17;;16213:215;;;16456:6;16447:7;16444:19;16441:186;;;16521:9;16516:3;16512:19;16499:33;16564:48;16606:4;16598:6;16594:17;16583:9;16564:48;:::i;:::-;16556:6;16549:64;16464:163;16441:186;16673:1;16669;16661:6;16657:14;16653:22;16647:4;16640:36;16062:624;;;16025:907;;15637:1301;;;15540:1398;;;:::o;16944:168::-;17027:11;17061:6;17056:3;17049:19;17101:4;17096:3;17092:14;17077:29;;16944:168;;;;:::o;17118:146::-;17215:6;17210:3;17205;17192:30;17256:1;17247:6;17242:3;17238:16;17231:27;17118:146;;;:::o;17292:314::-;17388:3;17409:70;17472:6;17467:3;17409:70;:::i;:::-;17402:77;;17489:56;17538:6;17533:3;17526:5;17489:56;:::i;:::-;17570:29;17592:6;17570:29;:::i;:::-;17565:3;17561:39;17554:46;;17292:314;;;;;:::o;17612:329::-;17733:4;17771:2;17760:9;17756:18;17748:26;;17820:9;17814:4;17810:20;17806:1;17795:9;17791:17;17784:47;17848:86;17929:4;17920:6;17912;17848:86;:::i;:::-;17840:94;;17612:329;;;;;:::o;17947:225::-;18087:34;18083:1;18075:6;18071:14;18064:58;18156:8;18151:2;18143:6;18139:15;18132:33;17947:225;:::o;18178:366::-;18320:3;18341:67;18405:2;18400:3;18341:67;:::i;:::-;18334:74;;18417:93;18506:3;18417:93;:::i;:::-;18535:2;18530:3;18526:12;18519:19;;18178:366;;;:::o;18550:419::-;18716:4;18754:2;18743:9;18739:18;18731:26;;18803:9;18797:4;18793:20;18789:1;18778:9;18774:17;18767:47;18831:131;18957:4;18831:131;:::i;:::-;18823:139;;18550:419;;;:::o;18975:182::-;19115:34;19111:1;19103:6;19099:14;19092:58;18975:182;:::o;19163:366::-;19305:3;19326:67;19390:2;19385:3;19326:67;:::i;:::-;19319:74;;19402:93;19491:3;19402:93;:::i;:::-;19520:2;19515:3;19511:12;19504:19;;19163:366;;;:::o;19535:419::-;19701:4;19739:2;19728:9;19724:18;19716:26;;19788:9;19782:4;19778:20;19774:1;19763:9;19759:17;19752:47;19816:131;19942:4;19816:131;:::i;:::-;19808:139;;19535:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"968800","executionCost":"1008","totalCost":"969808"},"external":{"owner()":"2522","renounceOwnership()":"30421","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"infinite","settingManagerBool(bytes32,address,bool)":"infinite","transferOwnership(address)":"30810","updateProtocolAddresses(bytes32,address)":"51602","updateProtocolAggregator(bytes)":"infinite","updateProtocolFees(uint64)":"infinite"}},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"32200882","settingManagerBool(bytes32,address,bool)":"99e3c0b4","transferOwnership(address)":"f2fde38b","updateProtocolAddresses(bytes32,address)":"79a0effb","updateProtocolAggregator(bytes)":"cb79455b","updateProtocolFees(uint64)":"84630736"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"PaycrestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"updateProtocolAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaycrestSettingManager.sol\":\"PaycrestSettingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    struct Institution {\\n        bytes32 code; // usually not more than 8 letters\\n        bytes32 name; // \\n    }\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n    uint256 internal MAX_BPS;\\n    uint64 internal protocolFeePercent; // 5%\\n    address internal feeRecipient;\\n    address internal _aggregatorAddress;\\n    bytes internal _aggregator;\\n    \\n    // this should decrease if more slots are needed on this contract to avoid collisions with base contract\\n    uint256[50] private __gap;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n    mapping(address => bool) internal _isWhitelisted;\\n\\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event PaycrestFees(uint64 protocolFee);\\n    event SetAggregator(bytes aggregator);\\n    event SetFeeRecipient(address feeRecipient);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n        if (what == \\\"whitelist\\\") _isWhitelisted[value] = status;\\n\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function updateProtocolFees(uint64 _protocolFeePercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        emit PaycrestFees(_protocolFeePercent);\\n    }\\n\\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"fee\\\") feeRecipient = value;\\n        if (what == \\\"aggregator\\\") _aggregatorAddress = value;\\n    }\\n\\n    function updateProtocolAggregator(bytes calldata aggregator) external onlyOwner {\\n        _aggregator = aggregator;\\n        emit SetAggregator(aggregator);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa7a73992f19899060ce30182c809c3bd02ce01e4675de7e0ddd1701deccb25f9\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1161,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":4167,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"MAX_BPS","offset":0,"slot":"101","type":"t_uint256"},{"astId":4169,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"protocolFeePercent","offset":0,"slot":"102","type":"t_uint64"},{"astId":4171,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"feeRecipient","offset":8,"slot":"102","type":"t_address"},{"astId":4173,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_aggregatorAddress","offset":0,"slot":"103","type":"t_address"},{"astId":4175,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_aggregator","offset":0,"slot":"104","type":"t_bytes_storage"},{"astId":4179,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"105","type":"t_array(t_uint256)50_storage"},{"astId":4183,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_isTokenSupported","offset":0,"slot":"155","type":"t_mapping(t_address,t_bool)"},{"astId":4187,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_isWhitelisted","offset":0,"slot":"156","type":"t_mapping(t_address,t_bool)"},{"astId":4193,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"supportedInstitutions","offset":0,"slot":"157","type":"t_mapping(t_bytes32,t_array(t_struct(Institution)4160_storage)dyn_storage)"},{"astId":4198,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"supportedInstitutionsByCode","offset":0,"slot":"158","type":"t_mapping(t_bytes32,t_struct(InstitutionByCode)4165_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Institution)4160_storage)dyn_storage":{"base":"t_struct(Institution)4160_storage","encoding":"dynamic_array","label":"struct PaycrestSettingManager.Institution[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_array(t_struct(Institution)4160_storage)dyn_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])","numberOfBytes":"32","value":"t_array(t_struct(Institution)4160_storage)dyn_storage"},"t_mapping(t_bytes32,t_struct(InstitutionByCode)4165_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)","numberOfBytes":"32","value":"t_struct(InstitutionByCode)4165_storage"},"t_struct(Institution)4160_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.Institution","members":[{"astId":4157,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"code","offset":0,"slot":"0","type":"t_bytes32"},{"astId":4159,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"name","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(InstitutionByCode)4165_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.InstitutionByCode","members":[{"astId":4162,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":4164,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"currency","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interface/IPaycrest.sol":{"IPaycrest":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"institutionCode","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"}],"name":"Refunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"validator","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardValidator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"Settled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferSenderFee","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_institutionCode","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAggregator","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAggregatorAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint64","name":"protocolReward","type":"uint64"},{"internalType":"uint256","name":"max_bps","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPaycrest.Order","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"getWhitelistedStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"}],"name":"refund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"address","name":"_liquidityProvider","type":"address"},{"internalType":"uint64","name":"_settlePercent","type":"uint64"},{"internalType":"bool","name":"_isPartner","type":"bool"}],"name":"settle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Chef Photons, Paycrest Team serving high quality drinks; drink responsibly. Factory and global config params","events":{"Deposit(address,uint256,bytes32,uint256,bytes32,bytes32,string)":{"details":"Emitted when deposit is made."},"Refunded(bytes32,bytes32)":{"details":"Emitted when aggregator refund transaction."},"RewardValidator(address,uint256)":{"details":"Emitted when primary validator get therir rewards."},"Settled(bytes32,bytes32,bytes32,address,uint96)":{"details":"Emitted when aggregator settle transaction."},"TransferSenderFee(address,uint256)":{"details":"Emitted when sender get therir rewards."}},"kind":"dev","methods":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":{"details":"See {isTokenSupported}. `amount` must be greater than minimum `_refundable` refundable address must not be zero address","params":{"_amount":"amount in the decimal of `_token` above.","_institutionCode":"institution code of the sender.","_label":"reference of the sender.","_rate":"rate at which sender intended to sell `_amount` of `_token`.","_refundAddress":"address that is going to recieve `_amount` in `_token` when there is a need to refund.","_senderFee":"amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.","_senderFeeRecipient":"address that is going to recieve `_senderFee` in `_token` when there is a need to refund.","_token":"address of the token.","messageHash":"hash must be the result of a hash operation for the verification to be secure. message"},"returns":{"_orderId":"the bytes20 which is the orderId"}},"getAggregator()":{"returns":{"_0":"aggregator public key."}},"getAggregatorAddress()":{"returns":{"_0":"address of `Aggregator`."}},"getFeeDetails()":{"returns":{"max_bps":"maximum amount in bps \"100% == 100_000\".","protocolReward":"amount that will be taken in percentage on all trade."}},"getOrderInfo(bytes32)":{"params":{"_orderId":"transaction Id."}},"getWhitelistedStatus(address)":{"params":{"sender":"address of the sender."},"returns":{"_0":"address of `status`."}},"isTokenSupported(address)":{"params":{"_token":"address of the token to check."},"returns":{"_0":"return the status of `_token` {bool}"}},"refund(bytes32,bytes32)":{"params":{"_label":"reference of the sender.","_orderId":"transaction Id."},"returns":{"_0":"return the status of transaction {bool}"}},"settle(bytes32,bytes32,bytes32,address,uint64,bool)":{"params":{"_isPartner":"is the liquidity provider a partner.","_label":"reference of the sender.","_liquidityProvider":"address of the liquidity provider.","_orderId":"transaction Id.","_settlePercent":"rate at which the transaction is settled."},"returns":{"_0":"return the status of transaction {bool}"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":"2654ec7e","getAggregator()":"3ad59dbc","getAggregatorAddress()":"e8d6e0de","getFeeDetails()":"b810c636","getOrderInfo(bytes32)":"768c6ec0","getWhitelistedStatus(address)":"d8e8de34","isTokenSupported(address)":"75151b63","refund(bytes32,bytes32)":"e4683a79","settle(bytes32,bytes32,bytes32,address,uint64,bool)":"5fe44cac"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolReward\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"max_bps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_isPartner\",\"type\":\"bool\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Chef Photons, Paycrest Team serving high quality drinks; drink responsibly. Factory and global config params\",\"events\":{\"Deposit(address,uint256,bytes32,uint256,bytes32,bytes32,string)\":{\"details\":\"Emitted when deposit is made.\"},\"Refunded(bytes32,bytes32)\":{\"details\":\"Emitted when aggregator refund transaction.\"},\"RewardValidator(address,uint256)\":{\"details\":\"Emitted when primary validator get therir rewards.\"},\"Settled(bytes32,bytes32,bytes32,address,uint96)\":{\"details\":\"Emitted when aggregator settle transaction.\"},\"TransferSenderFee(address,uint256)\":{\"details\":\"Emitted when sender get therir rewards.\"}},\"kind\":\"dev\",\"methods\":{\"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"See {isTokenSupported}. `amount` must be greater than minimum `_refundable` refundable address must not be zero address\",\"params\":{\"_amount\":\"amount in the decimal of `_token` above.\",\"_institutionCode\":\"institution code of the sender.\",\"_label\":\"reference of the sender.\",\"_rate\":\"rate at which sender intended to sell `_amount` of `_token`.\",\"_refundAddress\":\"address that is going to recieve `_amount` in `_token` when there is a need to refund.\",\"_senderFee\":\"amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\",\"_senderFeeRecipient\":\"address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\",\"_token\":\"address of the token.\",\"messageHash\":\"hash must be the result of a hash operation for the verification to be secure. message\"},\"returns\":{\"_orderId\":\"the bytes20 which is the orderId\"}},\"getAggregator()\":{\"returns\":{\"_0\":\"aggregator public key.\"}},\"getAggregatorAddress()\":{\"returns\":{\"_0\":\"address of `Aggregator`.\"}},\"getFeeDetails()\":{\"returns\":{\"max_bps\":\"maximum amount in bps \\\"100% == 100_000\\\".\",\"protocolReward\":\"amount that will be taken in percentage on all trade.\"}},\"getOrderInfo(bytes32)\":{\"params\":{\"_orderId\":\"transaction Id.\"}},\"getWhitelistedStatus(address)\":{\"params\":{\"sender\":\"address of the sender.\"},\"returns\":{\"_0\":\"address of `status`.\"}},\"isTokenSupported(address)\":{\"params\":{\"_token\":\"address of the token to check.\"},\"returns\":{\"_0\":\"return the status of `_token` {bool}\"}},\"refund(bytes32,bytes32)\":{\"params\":{\"_label\":\"reference of the sender.\",\"_orderId\":\"transaction Id.\"},\"returns\":{\"_0\":\"return the status of transaction {bool}\"}},\"settle(bytes32,bytes32,bytes32,address,uint64,bool)\":{\"params\":{\"_isPartner\":\"is the liquidity provider a partner.\",\"_label\":\"reference of the sender.\",\"_liquidityProvider\":\"address of the liquidity provider.\",\"_orderId\":\"transaction Id.\",\"_settlePercent\":\"rate at which the transaction is settled.\"},\"returns\":{\"_0\":\"return the status of transaction {bool}\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)\":{\"notice\":\"lock sender `_amount` of `token` into Paycrest. Requirements: `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\"},\"getAggregator()\":{\"notice\":\"get aggregator public key.\"},\"getAggregatorAddress()\":{\"notice\":\"get address of liquidity aggregator.\"},\"getFeeDetails()\":{\"notice\":\"get every rewards and address on Paycrest.\"},\"getOrderInfo(bytes32)\":{\"notice\":\"get order details.\"},\"getWhitelistedStatus(address)\":{\"notice\":\"get address of sender whitelisting status.\"},\"isTokenSupported(address)\":{\"notice\":\"get supported token from Paycrest.\"},\"refund(bytes32,bytes32)\":{\"notice\":\"refund to the specified refundable address. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `isFulfilled` must be false.\"},\"settle(bytes32,bytes32,bytes32,address,uint64,bool)\":{\"notice\":\"settle transaction and distribute rewards accordingly. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `_primaryValidator` must have stake on the Paycrest staking platform. `_secondaryValidators` must have stake on the Paycrest staking platform. `amount` must be greater than minimum `_refundable` refundable address must not be zero address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interface/IPaycrest.sol\":\"IPaycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interface/IPaycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/**\\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /// @dev Emitted when deposit is made.\\n    event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash);\\n    /// @dev Emitted when aggregator settle transaction.\\n    event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent);\\n    /// @dev Emitted when aggregator refund transaction.\\n    event Refunded(bytes32 indexed orderId, bytes32 label);\\n    /// @dev Emitted when sender get therir rewards.\\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\\n    /// @dev Emitted when primary validator get therir rewards.\\n    event RewardValidator(address indexed validator, uint256 indexed amount);\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    struct TransactionMetadata {\\n        bytes8 identifier;                 //                                                                   slot 0\\n        bytes8 institution;                //                                                                   slot 0\\n        bytes8 name;                       //                                                                   slot 0\\n        bytes8 currency;                   //                                                                   slot 0\\n        uint256 liquidityProviderID;       //                                                                   slot 1\\n    }\\n\\n    struct Order {\\n        address seller;                     //                                                                   slot 0\\n        address token;                      //                                                                   slot 1\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint96 rate;                        //                                                                   slot 1\\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\\n        uint96 currentBPS;                  //                                                                   slot 2 {}\\n        uint256 amount;                     //                                                                   slot 3\\n    }\\n\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /// @notice lock sender `_amount` of `token` into Paycrest.\\n    /// Requirements:\\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _token address of the token.\\n    /// @param _amount amount in the decimal of `_token` above.\\n    /// @param _institutionCode institution code of the sender.\\n    /// @param _label reference of the sender.\\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\\n    /// @param _senderFeeRecipient address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\\n    /// @param _senderFee amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\\n    /// @return _orderId the bytes20 which is the orderId\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        bytes32 _label,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash)  external returns(bytes32 _orderId);\\n\\n    /// @notice settle transaction and distribute rewards accordingly.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _orderId transaction Id.\\n    /// @param _label reference of the sender.\\n    /// @param _liquidityProvider address of the liquidity provider.\\n    /// @param _settlePercent rate at which the transaction is settled.\\n    /// @param _isPartner is the liquidity provider a partner.\\n    /// @return return the status of transaction {bool}\\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address _liquidityProvider, uint64 _settlePercent, bool _isPartner)  external returns(bytes32, address);\\n\\n    /// @notice refund to the specified refundable address.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `isFulfilled` must be false.\\n    /// @param _orderId transaction Id.\\n    /// @param _label reference of the sender.\\n    /// @return return the status of transaction {bool}\\n    function refund(bytes32 _orderId, bytes32 _label)  external returns(bool);\\n\\n    /// @notice get supported token from Paycrest.\\n    /// @param _token address of the token to check.\\n    /// @return return the status of `_token` {bool}\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /// @notice get order details.\\n    /// @param _orderId transaction Id.\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /// @notice get every rewards and address on Paycrest.\\n    /// @return protocolReward amount that will be taken in percentage on all trade.\\n    /// @return max_bps maximum amount in bps \\\"100% == 100_000\\\".\\n    function getFeeDetails() external view returns(\\n        uint64 protocolReward, \\n        uint256 max_bps\\n    );\\n\\n    /// @notice get address of liquidity aggregator.\\n    /// @return address of `Aggregator`.\\n    function getAggregatorAddress() external view returns(address);\\n\\n    /// @notice get aggregator public key.\\n    /// @return aggregator public key.\\n    function getAggregator() external view returns(bytes memory);\\n    \\n    /// @notice get address of sender whitelisting status.\\n    /// @param sender address of the sender.\\n    /// @return address of `status`.\\n    function getWhitelistedStatus(address sender) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x198ea288244ee5a444a202088748913df1d930f9561fda95a120ff81c9bcb04b\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":{"notice":"lock sender `_amount` of `token` into Paycrest. Requirements: `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call."},"getAggregator()":{"notice":"get aggregator public key."},"getAggregatorAddress()":{"notice":"get address of liquidity aggregator."},"getFeeDetails()":{"notice":"get every rewards and address on Paycrest."},"getOrderInfo(bytes32)":{"notice":"get order details."},"getWhitelistedStatus(address)":{"notice":"get address of sender whitelisting status."},"isTokenSupported(address)":{"notice":"get supported token from Paycrest."},"refund(bytes32,bytes32)":{"notice":"refund to the specified refundable address. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `isFulfilled` must be false."},"settle(bytes32,bytes32,bytes32,address,uint64,bool)":{"notice":"settle transaction and distribute rewards accordingly. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `_primaryValidator` must have stake on the Paycrest staking platform. `_secondaryValidators` must have stake on the Paycrest staking platform. `amount` must be greater than minimum `_refundable` refundable address must not be zero address"}},"version":1}}},"contracts/interface/IPaycrestStake.sol":{"IPaycrestStake":{"abi":[{"inputs":[{"internalType":"bytes32","name":"orderId","type":"bytes32"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address[]","name":"validators","type":"address[]"},{"internalType":"uint256","name":"validatorsReward","type":"uint256"}],"name":"rewardValidators","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Chef Photons, Vaultka Team serving high quality drinks; drink responsibly. Factory and global config params","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rewardValidators(bytes32,address,address[],uint256)":"d0e02d3a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"validatorsReward\",\"type\":\"uint256\"}],\"name\":\"rewardValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Chef Photons, Vaultka Team serving high quality drinks; drink responsibly. Factory and global config params\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interface/IPaycrestStake.sol\":\"IPaycrestStake\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IPaycrestStake.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\n/**\\n * @author Chef Photons, Vaultka Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrestStake {\\n    \\n    function rewardValidators(bytes32 orderId, address token, address[] memory validators, uint256 validatorsReward) external returns(bool);\\n    \\n}\\n\",\"keccak256\":\"0x1476f8ed727d736a44957b34783a82261376d8d2473010c473c66ec904ec55b5\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/mocks/MockUSDC.sol":{"MockUSDC":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"burnAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Mock mintable USDC","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2773":{"entryPoint":null,"id":2773,"parameterSlots":2,"returnSlots":0},"@_4614":{"entryPoint":null,"id":4614,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_3314":{"entryPoint":568,"id":3314,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_3303":{"entryPoint":563,"id":3303,"parameterSlots":3,"returnSlots":0},"@_mint_3132":{"entryPoint":198,"id":3132,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack":{"entryPoint":1496,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":1675,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1535,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":1692,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":731,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":573,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1438,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":1616,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1052,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":867,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1013,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":887,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1207,"id":null,"parameterSlots":2,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":752,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":678,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1177,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":877,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1145,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":1569,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":631,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":584,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":927,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":768,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1132,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":985,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e":{"entryPoint":1455,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":781,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":937,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":980,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:7125:20","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:20","statements":[{"nodeType":"YulAssignment","src":"77:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:20"},"nodeType":"YulFunctionCall","src":"87:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:20"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:20","type":""}],"src":"7:99:20"},{"body":{"nodeType":"YulBlock","src":"140:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"157:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"160:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"150:6:20"},"nodeType":"YulFunctionCall","src":"150:88:20"},"nodeType":"YulExpressionStatement","src":"150:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"254:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"257:4:20","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"247:6:20"},"nodeType":"YulFunctionCall","src":"247:15:20"},"nodeType":"YulExpressionStatement","src":"247:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"278:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"281:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"271:6:20"},"nodeType":"YulFunctionCall","src":"271:15:20"},"nodeType":"YulExpressionStatement","src":"271:15:20"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"112:180:20"},{"body":{"nodeType":"YulBlock","src":"326:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"343:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"346:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"336:6:20"},"nodeType":"YulFunctionCall","src":"336:88:20"},"nodeType":"YulExpressionStatement","src":"336:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"443:4:20","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"433:6:20"},"nodeType":"YulFunctionCall","src":"433:15:20"},"nodeType":"YulExpressionStatement","src":"433:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"464:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"467:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"457:6:20"},"nodeType":"YulFunctionCall","src":"457:15:20"},"nodeType":"YulExpressionStatement","src":"457:15:20"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"298:180:20"},{"body":{"nodeType":"YulBlock","src":"535:269:20","statements":[{"nodeType":"YulAssignment","src":"545:22:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"559:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"565:1:20","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"555:3:20"},"nodeType":"YulFunctionCall","src":"555:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"545:6:20"}]},{"nodeType":"YulVariableDeclaration","src":"576:38:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"606:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"612:1:20","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"602:3:20"},"nodeType":"YulFunctionCall","src":"602:12:20"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"580:18:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"653:51:20","statements":[{"nodeType":"YulAssignment","src":"667:27:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"681:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"689:4:20","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"677:3:20"},"nodeType":"YulFunctionCall","src":"677:17:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"667:6:20"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"633:18:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"626:6:20"},"nodeType":"YulFunctionCall","src":"626:26:20"},"nodeType":"YulIf","src":"623:81:20"},{"body":{"nodeType":"YulBlock","src":"756:42:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"770:16:20"},"nodeType":"YulFunctionCall","src":"770:18:20"},"nodeType":"YulExpressionStatement","src":"770:18:20"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"720:18:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"743:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"751:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"740:2:20"},"nodeType":"YulFunctionCall","src":"740:14:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"717:2:20"},"nodeType":"YulFunctionCall","src":"717:38:20"},"nodeType":"YulIf","src":"714:84:20"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"519:4:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"528:6:20","type":""}],"src":"484:320:20"},{"body":{"nodeType":"YulBlock","src":"864:87:20","statements":[{"nodeType":"YulAssignment","src":"874:11:20","value":{"name":"ptr","nodeType":"YulIdentifier","src":"882:3:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"874:4:20"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"902:1:20","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"905:3:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"895:6:20"},"nodeType":"YulFunctionCall","src":"895:14:20"},"nodeType":"YulExpressionStatement","src":"895:14:20"},{"nodeType":"YulAssignment","src":"918:26:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"936:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"939:4:20","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"926:9:20"},"nodeType":"YulFunctionCall","src":"926:18:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"918:4:20"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"851:3:20","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"859:4:20","type":""}],"src":"810:141:20"},{"body":{"nodeType":"YulBlock","src":"1001:49:20","statements":[{"nodeType":"YulAssignment","src":"1011:33:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1029:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"1036:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1025:3:20"},"nodeType":"YulFunctionCall","src":"1025:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"1041:2:20","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"1021:3:20"},"nodeType":"YulFunctionCall","src":"1021:23:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1011:6:20"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"984:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"994:6:20","type":""}],"src":"957:93:20"},{"body":{"nodeType":"YulBlock","src":"1109:54:20","statements":[{"nodeType":"YulAssignment","src":"1119:37:20","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"1144:4:20"},{"name":"value","nodeType":"YulIdentifier","src":"1150:5:20"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1140:3:20"},"nodeType":"YulFunctionCall","src":"1140:16:20"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"1119:8:20"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"1084:4:20","type":""},{"name":"value","nodeType":"YulTypedName","src":"1090:5:20","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"1100:8:20","type":""}],"src":"1056:107:20"},{"body":{"nodeType":"YulBlock","src":"1245:317:20","statements":[{"nodeType":"YulVariableDeclaration","src":"1255:35:20","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"1276:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"1288:1:20","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1272:3:20"},"nodeType":"YulFunctionCall","src":"1272:18:20"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"1259:9:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1299:109:20","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"1330:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1341:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"1311:18:20"},"nodeType":"YulFunctionCall","src":"1311:97:20"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"1303:4:20","type":""}]},{"nodeType":"YulAssignment","src":"1417:51:20","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"1448:9:20"},{"name":"toInsert","nodeType":"YulIdentifier","src":"1459:8:20"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"1429:18:20"},"nodeType":"YulFunctionCall","src":"1429:39:20"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"1417:8:20"}]},{"nodeType":"YulAssignment","src":"1477:30:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1490:5:20"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"1501:4:20"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1497:3:20"},"nodeType":"YulFunctionCall","src":"1497:9:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1486:3:20"},"nodeType":"YulFunctionCall","src":"1486:21:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1477:5:20"}]},{"nodeType":"YulAssignment","src":"1516:40:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1529:5:20"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"1540:8:20"},{"name":"mask","nodeType":"YulIdentifier","src":"1550:4:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1536:3:20"},"nodeType":"YulFunctionCall","src":"1536:19:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1526:2:20"},"nodeType":"YulFunctionCall","src":"1526:30:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1516:6:20"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1206:5:20","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"1213:10:20","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"1225:8:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1238:6:20","type":""}],"src":"1169:393:20"},{"body":{"nodeType":"YulBlock","src":"1613:32:20","statements":[{"nodeType":"YulAssignment","src":"1623:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"1634:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1623:7:20"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1595:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1605:7:20","type":""}],"src":"1568:77:20"},{"body":{"nodeType":"YulBlock","src":"1683:28:20","statements":[{"nodeType":"YulAssignment","src":"1693:12:20","value":{"name":"value","nodeType":"YulIdentifier","src":"1700:5:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1693:3:20"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1669:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1679:3:20","type":""}],"src":"1651:60:20"},{"body":{"nodeType":"YulBlock","src":"1777:82:20","statements":[{"nodeType":"YulAssignment","src":"1787:66:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1845:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1827:17:20"},"nodeType":"YulFunctionCall","src":"1827:24:20"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"1818:8:20"},"nodeType":"YulFunctionCall","src":"1818:34:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1800:17:20"},"nodeType":"YulFunctionCall","src":"1800:53:20"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"1787:9:20"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1757:5:20","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"1767:9:20","type":""}],"src":"1717:142:20"},{"body":{"nodeType":"YulBlock","src":"1912:28:20","statements":[{"nodeType":"YulAssignment","src":"1922:12:20","value":{"name":"value","nodeType":"YulIdentifier","src":"1929:5:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1922:3:20"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1898:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1908:3:20","type":""}],"src":"1865:75:20"},{"body":{"nodeType":"YulBlock","src":"2022:193:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2032:63:20","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"2087:7:20"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2056:30:20"},"nodeType":"YulFunctionCall","src":"2056:39:20"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"2036:16:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2111:4:20"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2151:4:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2145:5:20"},"nodeType":"YulFunctionCall","src":"2145:11:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2158:6:20"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"2190:16:20"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"2166:23:20"},"nodeType":"YulFunctionCall","src":"2166:41:20"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"2117:27:20"},"nodeType":"YulFunctionCall","src":"2117:91:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2104:6:20"},"nodeType":"YulFunctionCall","src":"2104:105:20"},"nodeType":"YulExpressionStatement","src":"2104:105:20"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1999:4:20","type":""},{"name":"offset","nodeType":"YulTypedName","src":"2005:6:20","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"2013:7:20","type":""}],"src":"1946:269:20"},{"body":{"nodeType":"YulBlock","src":"2270:24:20","statements":[{"nodeType":"YulAssignment","src":"2280:8:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2287:1:20","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2280:3:20"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2266:3:20","type":""}],"src":"2221:73:20"},{"body":{"nodeType":"YulBlock","src":"2353:136:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2363:46:20","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"2377:30:20"},"nodeType":"YulFunctionCall","src":"2377:32:20"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"2367:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2462:4:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2468:6:20"},{"name":"zero_0","nodeType":"YulIdentifier","src":"2476:6:20"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2418:43:20"},"nodeType":"YulFunctionCall","src":"2418:65:20"},"nodeType":"YulExpressionStatement","src":"2418:65:20"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2339:4:20","type":""},{"name":"offset","nodeType":"YulTypedName","src":"2345:6:20","type":""}],"src":"2300:189:20"},{"body":{"nodeType":"YulBlock","src":"2545:136:20","statements":[{"body":{"nodeType":"YulBlock","src":"2612:63:20","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2656:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"2663:1:20","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"2626:29:20"},"nodeType":"YulFunctionCall","src":"2626:39:20"},"nodeType":"YulExpressionStatement","src":"2626:39:20"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2565:5:20"},{"name":"end","nodeType":"YulIdentifier","src":"2572:3:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2562:2:20"},"nodeType":"YulFunctionCall","src":"2562:14:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2577:26:20","statements":[{"nodeType":"YulAssignment","src":"2579:22:20","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2592:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"2599:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2588:3:20"},"nodeType":"YulFunctionCall","src":"2588:13:20"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2579:5:20"}]}]},"pre":{"nodeType":"YulBlock","src":"2559:2:20","statements":[]},"src":"2555:120:20"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"2533:5:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2540:3:20","type":""}],"src":"2495:186:20"},{"body":{"nodeType":"YulBlock","src":"2766:464:20","statements":[{"body":{"nodeType":"YulBlock","src":"2792:431:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2806:54:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2854:5:20"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"2822:31:20"},"nodeType":"YulFunctionCall","src":"2822:38:20"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"2810:8:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2873:63:20","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"2896:8:20"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2924:10:20"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"2906:17:20"},"nodeType":"YulFunctionCall","src":"2906:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2892:3:20"},"nodeType":"YulFunctionCall","src":"2892:44:20"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2877:11:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"3093:27:20","statements":[{"nodeType":"YulAssignment","src":"3095:23:20","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"3110:8:20"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3095:11:20"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3077:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"3089:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3074:2:20"},"nodeType":"YulFunctionCall","src":"3074:18:20"},"nodeType":"YulIf","src":"3071:49:20"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3162:11:20"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"3179:8:20"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3207:3:20"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"3189:17:20"},"nodeType":"YulFunctionCall","src":"3189:22:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3175:3:20"},"nodeType":"YulFunctionCall","src":"3175:37:20"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"3133:28:20"},"nodeType":"YulFunctionCall","src":"3133:80:20"},"nodeType":"YulExpressionStatement","src":"3133:80:20"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2783:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"2788:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2780:2:20"},"nodeType":"YulFunctionCall","src":"2780:11:20"},"nodeType":"YulIf","src":"2777:446:20"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2742:5:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"2749:3:20","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2754:10:20","type":""}],"src":"2687:543:20"},{"body":{"nodeType":"YulBlock","src":"3299:54:20","statements":[{"nodeType":"YulAssignment","src":"3309:37:20","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"3334:4:20"},{"name":"value","nodeType":"YulIdentifier","src":"3340:5:20"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3330:3:20"},"nodeType":"YulFunctionCall","src":"3330:16:20"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"3309:8:20"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"3274:4:20","type":""},{"name":"value","nodeType":"YulTypedName","src":"3280:5:20","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"3290:8:20","type":""}],"src":"3236:117:20"},{"body":{"nodeType":"YulBlock","src":"3410:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3420:68:20","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3469:1:20","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"3472:5:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3465:3:20"},"nodeType":"YulFunctionCall","src":"3465:13:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3484:1:20","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3480:3:20"},"nodeType":"YulFunctionCall","src":"3480:6:20"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"3436:28:20"},"nodeType":"YulFunctionCall","src":"3436:51:20"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3432:3:20"},"nodeType":"YulFunctionCall","src":"3432:56:20"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"3424:4:20","type":""}]},{"nodeType":"YulAssignment","src":"3497:25:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3511:4:20"},{"name":"mask","nodeType":"YulIdentifier","src":"3517:4:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3507:3:20"},"nodeType":"YulFunctionCall","src":"3507:15:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3497:6:20"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3387:4:20","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"3393:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"3403:6:20","type":""}],"src":"3359:169:20"},{"body":{"nodeType":"YulBlock","src":"3614:214:20","statements":[{"nodeType":"YulAssignment","src":"3747:37:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3774:4:20"},{"name":"len","nodeType":"YulIdentifier","src":"3780:3:20"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"3755:18:20"},"nodeType":"YulFunctionCall","src":"3755:29:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3747:4:20"}]},{"nodeType":"YulAssignment","src":"3793:29:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3804:4:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3814:1:20","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"3817:3:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3810:3:20"},"nodeType":"YulFunctionCall","src":"3810:11:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3801:2:20"},"nodeType":"YulFunctionCall","src":"3801:21:20"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"3793:4:20"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3595:4:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"3601:3:20","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"3609:4:20","type":""}],"src":"3533:295:20"},{"body":{"nodeType":"YulBlock","src":"3925:1303:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3936:51:20","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3983:3:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3950:32:20"},"nodeType":"YulFunctionCall","src":"3950:37:20"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3940:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"4072:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4074:16:20"},"nodeType":"YulFunctionCall","src":"4074:18:20"},"nodeType":"YulExpressionStatement","src":"4074:18:20"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4044:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"4052:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4041:2:20"},"nodeType":"YulFunctionCall","src":"4041:30:20"},"nodeType":"YulIf","src":"4038:56:20"},{"nodeType":"YulVariableDeclaration","src":"4104:52:20","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4150:4:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4144:5:20"},"nodeType":"YulFunctionCall","src":"4144:11:20"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"4118:25:20"},"nodeType":"YulFunctionCall","src":"4118:38:20"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"4108:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4249:4:20"},{"name":"oldLen","nodeType":"YulIdentifier","src":"4255:6:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"4263:6:20"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"4203:45:20"},"nodeType":"YulFunctionCall","src":"4203:67:20"},"nodeType":"YulExpressionStatement","src":"4203:67:20"},{"nodeType":"YulVariableDeclaration","src":"4280:18:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4297:1:20","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"4284:9:20","type":""}]},{"nodeType":"YulAssignment","src":"4308:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4321:4:20","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4308:9:20"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"4372:611:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4386:37:20","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4405:6:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4417:4:20","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4413:3:20"},"nodeType":"YulFunctionCall","src":"4413:9:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4401:3:20"},"nodeType":"YulFunctionCall","src":"4401:22:20"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"4390:7:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4437:51:20","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4483:4:20"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"4451:31:20"},"nodeType":"YulFunctionCall","src":"4451:37:20"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"4441:6:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4501:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4510:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4505:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"4569:163:20","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4594:6:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4612:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4617:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4608:3:20"},"nodeType":"YulFunctionCall","src":"4608:19:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4602:5:20"},"nodeType":"YulFunctionCall","src":"4602:26:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4587:6:20"},"nodeType":"YulFunctionCall","src":"4587:42:20"},"nodeType":"YulExpressionStatement","src":"4587:42:20"},{"nodeType":"YulAssignment","src":"4646:24:20","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4660:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"4668:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4656:3:20"},"nodeType":"YulFunctionCall","src":"4656:14:20"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4646:6:20"}]},{"nodeType":"YulAssignment","src":"4687:31:20","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4704:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4715:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4700:3:20"},"nodeType":"YulFunctionCall","src":"4700:18:20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4687:9:20"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4535:1:20"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"4538:7:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4532:2:20"},"nodeType":"YulFunctionCall","src":"4532:14:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4547:21:20","statements":[{"nodeType":"YulAssignment","src":"4549:17:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4558:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"4561:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4554:3:20"},"nodeType":"YulFunctionCall","src":"4554:12:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4549:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"4528:3:20","statements":[]},"src":"4524:208:20"},{"body":{"nodeType":"YulBlock","src":"4768:156:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4786:43:20","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4813:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4818:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4809:3:20"},"nodeType":"YulFunctionCall","src":"4809:19:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4803:5:20"},"nodeType":"YulFunctionCall","src":"4803:26:20"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"4790:9:20","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4853:6:20"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"4880:9:20"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4895:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"4903:4:20","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4891:3:20"},"nodeType":"YulFunctionCall","src":"4891:17:20"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"4861:18:20"},"nodeType":"YulFunctionCall","src":"4861:48:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4846:6:20"},"nodeType":"YulFunctionCall","src":"4846:64:20"},"nodeType":"YulExpressionStatement","src":"4846:64:20"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"4751:7:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"4760:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4748:2:20"},"nodeType":"YulFunctionCall","src":"4748:19:20"},"nodeType":"YulIf","src":"4745:179:20"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4944:4:20"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4958:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"4966:1:20","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4954:3:20"},"nodeType":"YulFunctionCall","src":"4954:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"4970:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4950:3:20"},"nodeType":"YulFunctionCall","src":"4950:22:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4937:6:20"},"nodeType":"YulFunctionCall","src":"4937:36:20"},"nodeType":"YulExpressionStatement","src":"4937:36:20"}]},"nodeType":"YulCase","src":"4365:618:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4370:1:20","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"5000:222:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5014:14:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5027:1:20","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5018:5:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"5051:67:20","statements":[{"nodeType":"YulAssignment","src":"5069:35:20","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5088:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"5093:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5084:3:20"},"nodeType":"YulFunctionCall","src":"5084:19:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5078:5:20"},"nodeType":"YulFunctionCall","src":"5078:26:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5069:5:20"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"5044:6:20"},"nodeType":"YulIf","src":"5041:77:20"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5138:4:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5197:5:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"5204:6:20"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"5144:52:20"},"nodeType":"YulFunctionCall","src":"5144:67:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5131:6:20"},"nodeType":"YulFunctionCall","src":"5131:81:20"},"nodeType":"YulExpressionStatement","src":"5131:81:20"}]},"nodeType":"YulCase","src":"4992:230:20","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4345:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"4353:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4342:2:20"},"nodeType":"YulFunctionCall","src":"4342:14:20"},"nodeType":"YulSwitch","src":"4335:887:20"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3914:4:20","type":""},{"name":"src","nodeType":"YulTypedName","src":"3920:3:20","type":""}],"src":"3833:1395:20"},{"body":{"nodeType":"YulBlock","src":"5330:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5347:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"5352:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5340:6:20"},"nodeType":"YulFunctionCall","src":"5340:19:20"},"nodeType":"YulExpressionStatement","src":"5340:19:20"},{"nodeType":"YulAssignment","src":"5368:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5387:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"5392:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5383:3:20"},"nodeType":"YulFunctionCall","src":"5383:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"5368:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5302:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"5307:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"5318:11:20","type":""}],"src":"5234:169:20"},{"body":{"nodeType":"YulBlock","src":"5515:75:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5537:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"5545:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5533:3:20"},"nodeType":"YulFunctionCall","src":"5533:14:20"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"5549:33:20","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5526:6:20"},"nodeType":"YulFunctionCall","src":"5526:57:20"},"nodeType":"YulExpressionStatement","src":"5526:57:20"}]},"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5507:6:20","type":""}],"src":"5409:181:20"},{"body":{"nodeType":"YulBlock","src":"5742:220:20","statements":[{"nodeType":"YulAssignment","src":"5752:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5818:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"5823:2:20","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5759:58:20"},"nodeType":"YulFunctionCall","src":"5759:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5752:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5924:3:20"}],"functionName":{"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulIdentifier","src":"5835:88:20"},"nodeType":"YulFunctionCall","src":"5835:93:20"},"nodeType":"YulExpressionStatement","src":"5835:93:20"},{"nodeType":"YulAssignment","src":"5937:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5948:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"5953:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5944:3:20"},"nodeType":"YulFunctionCall","src":"5944:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5937:3:20"}]}]},"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5730:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5738:3:20","type":""}],"src":"5596:366:20"},{"body":{"nodeType":"YulBlock","src":"6139:248:20","statements":[{"nodeType":"YulAssignment","src":"6149:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6161:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"6172:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6157:3:20"},"nodeType":"YulFunctionCall","src":"6157:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6149:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6196:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"6207:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6192:3:20"},"nodeType":"YulFunctionCall","src":"6192:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6215:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"6221:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6211:3:20"},"nodeType":"YulFunctionCall","src":"6211:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6185:6:20"},"nodeType":"YulFunctionCall","src":"6185:47:20"},"nodeType":"YulExpressionStatement","src":"6185:47:20"},{"nodeType":"YulAssignment","src":"6241:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6375:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6249:124:20"},"nodeType":"YulFunctionCall","src":"6249:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6241:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6119:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6134:4:20","type":""}],"src":"5968:419:20"},{"body":{"nodeType":"YulBlock","src":"6421:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6438:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6441:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6431:6:20"},"nodeType":"YulFunctionCall","src":"6431:88:20"},"nodeType":"YulExpressionStatement","src":"6431:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6535:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6538:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6528:6:20"},"nodeType":"YulFunctionCall","src":"6528:15:20"},"nodeType":"YulExpressionStatement","src":"6528:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6559:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6562:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6552:6:20"},"nodeType":"YulFunctionCall","src":"6552:15:20"},"nodeType":"YulExpressionStatement","src":"6552:15:20"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6393:180:20"},{"body":{"nodeType":"YulBlock","src":"6623:147:20","statements":[{"nodeType":"YulAssignment","src":"6633:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6656:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6638:17:20"},"nodeType":"YulFunctionCall","src":"6638:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6633:1:20"}]},{"nodeType":"YulAssignment","src":"6667:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6690:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6672:17:20"},"nodeType":"YulFunctionCall","src":"6672:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6667:1:20"}]},{"nodeType":"YulAssignment","src":"6701:16:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6712:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"6715:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6708:3:20"},"nodeType":"YulFunctionCall","src":"6708:9:20"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"6701:3:20"}]},{"body":{"nodeType":"YulBlock","src":"6741:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6743:16:20"},"nodeType":"YulFunctionCall","src":"6743:18:20"},"nodeType":"YulExpressionStatement","src":"6743:18:20"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6733:1:20"},{"name":"sum","nodeType":"YulIdentifier","src":"6736:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6730:2:20"},"nodeType":"YulFunctionCall","src":"6730:10:20"},"nodeType":"YulIf","src":"6727:36:20"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6610:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"6613:1:20","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6619:3:20","type":""}],"src":"6579:191:20"},{"body":{"nodeType":"YulBlock","src":"6841:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6858:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6881:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6863:17:20"},"nodeType":"YulFunctionCall","src":"6863:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6851:6:20"},"nodeType":"YulFunctionCall","src":"6851:37:20"},"nodeType":"YulExpressionStatement","src":"6851:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6829:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6836:3:20","type":""}],"src":"6776:118:20"},{"body":{"nodeType":"YulBlock","src":"6998:124:20","statements":[{"nodeType":"YulAssignment","src":"7008:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7020:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"7031:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7016:3:20"},"nodeType":"YulFunctionCall","src":"7016:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7008:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7088:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7101:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"7112:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7097:3:20"},"nodeType":"YulFunctionCall","src":"7097:17:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"7044:43:20"},"nodeType":"YulFunctionCall","src":"7044:71:20"},"nodeType":"YulExpressionStatement","src":"7044:71:20"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6970:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6982:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6993:4:20","type":""}],"src":"6900:222:20"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040518060400160405280600881526020017f4d6f636b554453430000000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f4d5553444300000000000000000000000000000000000000000000000000000081525081600390816200008f9190620004b7565b508060049081620000a19190620004b7565b505050620000c03369d3c21bcecceda1000000620000c660201b60201c565b620006b9565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000138576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200012f90620005ff565b60405180910390fd5b6200014c600083836200023360201b60201c565b806002600082825462000160919062000650565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200021391906200069c565b60405180910390a36200022f600083836200023860201b60201c565b5050565b505050565b505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002bf57607f821691505b602082108103620002d557620002d462000277565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200033f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000300565b6200034b868362000300565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000398620003926200038c8462000363565b6200036d565b62000363565b9050919050565b6000819050919050565b620003b48362000377565b620003cc620003c3826200039f565b8484546200030d565b825550505050565b600090565b620003e3620003d4565b620003f0818484620003a9565b505050565b5b8181101562000418576200040c600082620003d9565b600181019050620003f6565b5050565b601f82111562000467576200043181620002db565b6200043c84620002f0565b810160208510156200044c578190505b620004646200045b85620002f0565b830182620003f5565b50505b505050565b600082821c905092915050565b60006200048c600019846008026200046c565b1980831691505092915050565b6000620004a7838362000479565b9150826002028217905092915050565b620004c2826200023d565b67ffffffffffffffff811115620004de57620004dd62000248565b5b620004ea8254620002a6565b620004f78282856200041c565b600060209050601f8311600181146200052f57600084156200051a578287015190505b62000526858262000499565b86555062000596565b601f1984166200053f86620002db565b60005b82811015620005695784890151825560018201915060208501945060208101905062000542565b8683101562000589578489015162000585601f89168262000479565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000620005e7601f836200059e565b9150620005f482620005af565b602082019050919050565b600060208201905081810360008301526200061a81620005d8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200065d8262000363565b91506200066a8362000363565b925082820190508082111562000685576200068462000621565b5b92915050565b620006968162000363565b82525050565b6000602082019050620006b360008301846200068b565b92915050565b61187580620006c96000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a0712d6811610066578063a0712d681461024d578063a457c2d714610269578063a9059cbb14610299578063dd62ed3e146102c9576100ea565b806370a08231146101f557806395d89b41146102255780639975038c14610243576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806339509351146101a957806342966c68146101d9576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f76102f9565b6040516101049190610f29565b60405180910390f35b61012760048036038101906101229190610fe4565b61038b565b604051610134919061103f565b60405180910390f35b6101456103ae565b6040516101529190611069565b60405180910390f35b61017560048036038101906101709190611084565b6103b8565b604051610182919061103f565b60405180910390f35b6101936103e7565b6040516101a091906110f3565b60405180910390f35b6101c360048036038101906101be9190610fe4565b6103f0565b6040516101d0919061103f565b60405180910390f35b6101f360048036038101906101ee919061110e565b610427565b005b61020f600480360381019061020a919061113b565b610434565b60405161021c9190611069565b60405180910390f35b61022d61047c565b60405161023a9190610f29565b60405180910390f35b61024b61050e565b005b6102676004803603810190610262919061110e565b61056b565b005b610283600480360381019061027e9190610fe4565b610578565b604051610290919061103f565b60405180910390f35b6102b360048036038101906102ae9190610fe4565b6105ef565b6040516102c0919061103f565b60405180910390f35b6102e360048036038101906102de9190611168565b610612565b6040516102f09190611069565b60405180910390f35b606060038054610308906111d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610334906111d7565b80156103815780601f1061035657610100808354040283529160200191610381565b820191906000526020600020905b81548152906001019060200180831161036457829003601f168201915b5050505050905090565b600080610396610699565b90506103a38185856106a1565b600191505092915050565b6000600254905090565b6000806103c3610699565b90506103d085828561086a565b6103db8585856108f6565b60019150509392505050565b60006012905090565b6000806103fb610699565b905061041c81858561040d8589610612565b6104179190611237565b6106a1565b600191505092915050565b6104313382610b6c565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461048b906111d7565b80601f01602080910402602001604051908101604052809291908181526020018280546104b7906111d7565b80156105045780601f106104d957610100808354040283529160200191610504565b820191906000526020600020905b8154815290600101906020018083116104e757829003601f168201915b5050505050905090565b600061051933610434565b90506000811161055e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610555906112b7565b60405180910390fd5b6105683382610b6c565b50565b6105753382610d39565b50565b600080610583610699565b905060006105918286610612565b9050838110156105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90611349565b60405180910390fd5b6105e382868684036106a1565b60019250505092915050565b6000806105fa610699565b90506106078185856108f6565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610710576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610707906113db565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361077f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107769061146d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161085d9190611069565b60405180910390a3505050565b60006108768484610612565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108f057818110156108e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d9906114d9565b60405180910390fd5b6108ef84848484036106a1565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095c9061156b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cb906115fd565b60405180910390fd5b6109df838383610e8f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c9061168f565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b539190611069565b60405180910390a3610b66848484610e94565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd290611721565b60405180910390fd5b610be782600083610e8f565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c64906117b3565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d209190611069565b60405180910390a3610d3483600084610e94565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610da8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9f9061181f565b60405180910390fd5b610db460008383610e8f565b8060026000828254610dc69190611237565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e779190611069565b60405180910390a3610e8b60008383610e94565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ed3578082015181840152602081019050610eb8565b60008484015250505050565b6000601f19601f8301169050919050565b6000610efb82610e99565b610f058185610ea4565b9350610f15818560208601610eb5565b610f1e81610edf565b840191505092915050565b60006020820190508181036000830152610f438184610ef0565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f7b82610f50565b9050919050565b610f8b81610f70565b8114610f9657600080fd5b50565b600081359050610fa881610f82565b92915050565b6000819050919050565b610fc181610fae565b8114610fcc57600080fd5b50565b600081359050610fde81610fb8565b92915050565b60008060408385031215610ffb57610ffa610f4b565b5b600061100985828601610f99565b925050602061101a85828601610fcf565b9150509250929050565b60008115159050919050565b61103981611024565b82525050565b60006020820190506110546000830184611030565b92915050565b61106381610fae565b82525050565b600060208201905061107e600083018461105a565b92915050565b60008060006060848603121561109d5761109c610f4b565b5b60006110ab86828701610f99565b93505060206110bc86828701610f99565b92505060406110cd86828701610fcf565b9150509250925092565b600060ff82169050919050565b6110ed816110d7565b82525050565b600060208201905061110860008301846110e4565b92915050565b60006020828403121561112457611123610f4b565b5b600061113284828501610fcf565b91505092915050565b60006020828403121561115157611150610f4b565b5b600061115f84828501610f99565b91505092915050565b6000806040838503121561117f5761117e610f4b565b5b600061118d85828601610f99565b925050602061119e85828601610f99565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806111ef57607f821691505b602082108103611202576112016111a8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061124282610fae565b915061124d83610fae565b925082820190508082111561126557611264611208565b5b92915050565b7f4d6f636b555344433a204e6f7468696e6720746f206275726e00000000000000600082015250565b60006112a1601983610ea4565b91506112ac8261126b565b602082019050919050565b600060208201905081810360008301526112d081611294565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611333602583610ea4565b915061133e826112d7565b604082019050919050565b6000602082019050818103600083015261136281611326565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006113c5602483610ea4565b91506113d082611369565b604082019050919050565b600060208201905081810360008301526113f4816113b8565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611457602283610ea4565b9150611462826113fb565b604082019050919050565b600060208201905081810360008301526114868161144a565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006114c3601d83610ea4565b91506114ce8261148d565b602082019050919050565b600060208201905081810360008301526114f2816114b6565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611555602583610ea4565b9150611560826114f9565b604082019050919050565b6000602082019050818103600083015261158481611548565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006115e7602383610ea4565b91506115f28261158b565b604082019050919050565b60006020820190508181036000830152611616816115da565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611679602683610ea4565b91506116848261161d565b604082019050919050565b600060208201905081810360008301526116a88161166c565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061170b602183610ea4565b9150611716826116af565b604082019050919050565b6000602082019050818103600083015261173a816116fe565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061179d602283610ea4565b91506117a882611741565b604082019050919050565b600060208201905081810360008301526117cc81611790565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611809601f83610ea4565b9150611814826117d3565b602082019050919050565b60006020820190508181036000830152611838816117fc565b905091905056fea2646970667358221220db80c17952bbfdfde6337cbbe3fe3f03b3b28028fd799fb2393ebc5ad90036ce64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D6F636B55445343000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D55534443000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0x8F SWAP2 SWAP1 PUSH3 0x4B7 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH3 0xA1 SWAP2 SWAP1 PUSH3 0x4B7 JUMP JUMPDEST POP POP POP PUSH3 0xC0 CALLER PUSH10 0xD3C21BCECCEDA1000000 PUSH3 0xC6 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x6B9 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x138 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x12F SWAP1 PUSH3 0x5FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x14C PUSH1 0x0 DUP4 DUP4 PUSH3 0x233 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0x160 SWAP2 SWAP1 PUSH3 0x650 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH3 0x213 SWAP2 SWAP1 PUSH3 0x69C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH3 0x22F PUSH1 0x0 DUP4 DUP4 PUSH3 0x238 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2BF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2D5 JUMPI PUSH3 0x2D4 PUSH3 0x277 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x33F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x300 JUMP JUMPDEST PUSH3 0x34B DUP7 DUP4 PUSH3 0x300 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x398 PUSH3 0x392 PUSH3 0x38C DUP5 PUSH3 0x363 JUMP JUMPDEST PUSH3 0x36D JUMP JUMPDEST PUSH3 0x363 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x3B4 DUP4 PUSH3 0x377 JUMP JUMPDEST PUSH3 0x3CC PUSH3 0x3C3 DUP3 PUSH3 0x39F JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x30D JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x3E3 PUSH3 0x3D4 JUMP JUMPDEST PUSH3 0x3F0 DUP2 DUP5 DUP5 PUSH3 0x3A9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x418 JUMPI PUSH3 0x40C PUSH1 0x0 DUP3 PUSH3 0x3D9 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x3F6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x467 JUMPI PUSH3 0x431 DUP2 PUSH3 0x2DB JUMP JUMPDEST PUSH3 0x43C DUP5 PUSH3 0x2F0 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x44C JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x464 PUSH3 0x45B DUP6 PUSH3 0x2F0 JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x3F5 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x48C PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x46C JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4A7 DUP4 DUP4 PUSH3 0x479 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x4C2 DUP3 PUSH3 0x23D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4DE JUMPI PUSH3 0x4DD PUSH3 0x248 JUMP JUMPDEST JUMPDEST PUSH3 0x4EA DUP3 SLOAD PUSH3 0x2A6 JUMP JUMPDEST PUSH3 0x4F7 DUP3 DUP3 DUP6 PUSH3 0x41C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x52F JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x51A JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x526 DUP6 DUP3 PUSH3 0x499 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x596 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x53F DUP7 PUSH3 0x2DB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x569 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x542 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x589 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x585 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x479 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5E7 PUSH1 0x1F DUP4 PUSH3 0x59E JUMP JUMPDEST SWAP2 POP PUSH3 0x5F4 DUP3 PUSH3 0x5AF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x61A DUP2 PUSH3 0x5D8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x65D DUP3 PUSH3 0x363 JUMP JUMPDEST SWAP2 POP PUSH3 0x66A DUP4 PUSH3 0x363 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH3 0x685 JUMPI PUSH3 0x684 PUSH3 0x621 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x696 DUP2 PUSH3 0x363 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x6B3 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x68B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1875 DUP1 PUSH3 0x6C9 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA0712D68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2C9 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0x9975038C EQ PUSH2 0x243 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1D9 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x13D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x127 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x122 SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x38B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x145 PUSH2 0x3AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x175 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x3B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x193 PUSH2 0x3E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0x10F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x3F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EE SWAP2 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH2 0x427 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x20F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20A SWAP2 SWAP1 PUSH2 0x113B JUMP JUMPDEST PUSH2 0x434 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21C SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22D PUSH2 0x47C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23A SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24B PUSH2 0x50E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x267 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x262 SWAP2 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH2 0x56B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x283 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27E SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x578 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x290 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AE SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C0 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DE SWAP2 SWAP1 PUSH2 0x1168 JUMP JUMPDEST PUSH2 0x612 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F0 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x308 SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x334 SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x381 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x356 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x381 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x364 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x396 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A3 DUP2 DUP6 DUP6 PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C3 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x3D0 DUP6 DUP3 DUP6 PUSH2 0x86A JUMP JUMPDEST PUSH2 0x3DB DUP6 DUP6 DUP6 PUSH2 0x8F6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3FB PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x41C DUP2 DUP6 DUP6 PUSH2 0x40D DUP6 DUP10 PUSH2 0x612 JUMP JUMPDEST PUSH2 0x417 SWAP2 SWAP1 PUSH2 0x1237 JUMP JUMPDEST PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x431 CALLER DUP3 PUSH2 0xB6C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x48B SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4B7 SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x504 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x504 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4E7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 CALLER PUSH2 0x434 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x555 SWAP1 PUSH2 0x12B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x568 CALLER DUP3 PUSH2 0xB6C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x575 CALLER DUP3 PUSH2 0xD39 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x583 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x591 DUP3 DUP7 PUSH2 0x612 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CD SWAP1 PUSH2 0x1349 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E3 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5FA PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x607 DUP2 DUP6 DUP6 PUSH2 0x8F6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x710 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x707 SWAP1 PUSH2 0x13DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x77F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x776 SWAP1 PUSH2 0x146D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x85D SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x876 DUP5 DUP5 PUSH2 0x612 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x8F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x8E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D9 SWAP1 PUSH2 0x14D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8EF DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x6A1 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x965 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x95C SWAP1 PUSH2 0x156B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9CB SWAP1 PUSH2 0x15FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9DF DUP4 DUP4 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xA65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA5C SWAP1 PUSH2 0x168F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xB53 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xB66 DUP5 DUP5 DUP5 PUSH2 0xE94 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBDB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD2 SWAP1 PUSH2 0x1721 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBE7 DUP3 PUSH1 0x0 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xC6D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC64 SWAP1 PUSH2 0x17B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xD20 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xD34 DUP4 PUSH1 0x0 DUP5 PUSH2 0xE94 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD9F SWAP1 PUSH2 0x181F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDB4 PUSH1 0x0 DUP4 DUP4 PUSH2 0xE8F JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xDC6 SWAP2 SWAP1 PUSH2 0x1237 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xE77 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xE8B PUSH1 0x0 DUP4 DUP4 PUSH2 0xE94 JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xED3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFB DUP3 PUSH2 0xE99 JUMP JUMPDEST PUSH2 0xF05 DUP2 DUP6 PUSH2 0xEA4 JUMP JUMPDEST SWAP4 POP PUSH2 0xF15 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xEB5 JUMP JUMPDEST PUSH2 0xF1E DUP2 PUSH2 0xEDF JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF43 DUP2 DUP5 PUSH2 0xEF0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF7B DUP3 PUSH2 0xF50 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF8B DUP2 PUSH2 0xF70 JUMP JUMPDEST DUP2 EQ PUSH2 0xF96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFA8 DUP2 PUSH2 0xF82 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFC1 DUP2 PUSH2 0xFAE JUMP JUMPDEST DUP2 EQ PUSH2 0xFCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFDE DUP2 PUSH2 0xFB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFFB JUMPI PUSH2 0xFFA PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1009 DUP6 DUP3 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x101A DUP6 DUP3 DUP7 ADD PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1039 DUP2 PUSH2 0x1024 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1054 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1030 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1063 DUP2 PUSH2 0xFAE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x107E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x105A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x109D JUMPI PUSH2 0x109C PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10AB DUP7 DUP3 DUP8 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x10BC DUP7 DUP3 DUP8 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x10CD DUP7 DUP3 DUP8 ADD PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10ED DUP2 PUSH2 0x10D7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1108 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x10E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1124 JUMPI PUSH2 0x1123 PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP5 DUP3 DUP6 ADD PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1151 JUMPI PUSH2 0x1150 PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x115F DUP5 DUP3 DUP6 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x117F JUMPI PUSH2 0x117E PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x118D DUP6 DUP3 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x119E DUP6 DUP3 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x11EF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1202 JUMPI PUSH2 0x1201 PUSH2 0x11A8 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1242 DUP3 PUSH2 0xFAE JUMP JUMPDEST SWAP2 POP PUSH2 0x124D DUP4 PUSH2 0xFAE JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1265 JUMPI PUSH2 0x1264 PUSH2 0x1208 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D6F636B555344433A204E6F7468696E6720746F206275726E00000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12A1 PUSH1 0x19 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x12AC DUP3 PUSH2 0x126B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12D0 DUP2 PUSH2 0x1294 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1333 PUSH1 0x25 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x133E DUP3 PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1362 DUP2 PUSH2 0x1326 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13C5 PUSH1 0x24 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x13D0 DUP3 PUSH2 0x1369 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x13F4 DUP2 PUSH2 0x13B8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1457 PUSH1 0x22 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1462 DUP3 PUSH2 0x13FB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1486 DUP2 PUSH2 0x144A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14C3 PUSH1 0x1D DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x14CE DUP3 PUSH2 0x148D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14F2 DUP2 PUSH2 0x14B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1555 PUSH1 0x25 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1560 DUP3 PUSH2 0x14F9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1584 DUP2 PUSH2 0x1548 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E7 PUSH1 0x23 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x15F2 DUP3 PUSH2 0x158B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1616 DUP2 PUSH2 0x15DA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1679 PUSH1 0x26 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1684 DUP3 PUSH2 0x161D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16A8 DUP2 PUSH2 0x166C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170B PUSH1 0x21 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1716 DUP3 PUSH2 0x16AF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x173A DUP2 PUSH2 0x16FE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x179D PUSH1 0x22 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x17A8 DUP3 PUSH2 0x1741 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17CC DUP2 PUSH2 0x1790 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1809 PUSH1 0x1F DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1814 DUP3 PUSH2 0x17D3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1838 DUP2 PUSH2 0x17FC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB DUP1 0xC1 PUSH26 0x52BBFDFDE6337CBBE3FE3F03B3B28028FD799FB2393EBC5AD900 CALLDATASIZE 0xCE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"161:496:19:-:0;;;194:89;;;;;;;;;;1976:113:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2050:5;2042;:13;;;;;;:::i;:::-;;2075:7;2065;:17;;;;;;:::i;:::-;;1976:113;;245:31:19::1;251:10;263:12;245:5;;;:31;;:::i;:::-;161:496:::0;;8567:535:11;8669:1;8650:21;;:7;:21;;;8642:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;8718:49;8747:1;8751:7;8760:6;8718:20;;;:49;;:::i;:::-;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;;;;;8968:6;8946:9;:18;8956:7;8946:18;;;;;;;;;;;;;;;;:28;;;;;;;;;;;9020:7;8999:37;;9016:1;8999:37;;;9029:6;8999:37;;;;;;:::i;:::-;;;;;;;;9047:48;9075:1;9079:7;9088:6;9047:19;;;:48;;:::i;:::-;8567:535;;:::o;12180:121::-;;;;:::o;12889:120::-;;;;:::o;7:99:20:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;5234:169::-;5318:11;5352:6;5347:3;5340:19;5392:4;5387:3;5383:14;5368:29;;5234:169;;;;:::o;5409:181::-;5549:33;5545:1;5537:6;5533:14;5526:57;5409:181;:::o;5596:366::-;5738:3;5759:67;5823:2;5818:3;5759:67;:::i;:::-;5752:74;;5835:93;5924:3;5835:93;:::i;:::-;5953:2;5948:3;5944:12;5937:19;;5596:366;;;:::o;5968:419::-;6134:4;6172:2;6161:9;6157:18;6149:26;;6221:9;6215:4;6211:20;6207:1;6196:9;6192:17;6185:47;6249:131;6375:4;6249:131;:::i;:::-;6241:139;;5968:419;;;:::o;6393:180::-;6441:77;6438:1;6431:88;6538:4;6535:1;6528:15;6562:4;6559:1;6552:15;6579:191;6619:3;6638:20;6656:1;6638:20;:::i;:::-;6633:25;;6672:20;6690:1;6672:20;:::i;:::-;6667:25;;6715:1;6712;6708:9;6701:16;;6736:3;6733:1;6730:10;6727:36;;;6743:18;;:::i;:::-;6727:36;6579:191;;;;:::o;6776:118::-;6863:24;6881:5;6863:24;:::i;:::-;6858:3;6851:37;6776:118;;:::o;6900:222::-;6993:4;7031:2;7020:9;7016:18;7008:26;;7044:71;7112:1;7101:9;7097:17;7088:6;7044:71;:::i;:::-;6900:222;;;;:::o;161:496:19:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_3314":{"entryPoint":3732,"id":3314,"parameterSlots":3,"returnSlots":0},"@_approve_3249":{"entryPoint":1697,"id":3249,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_3303":{"entryPoint":3727,"id":3303,"parameterSlots":3,"returnSlots":0},"@_burn_3204":{"entryPoint":2924,"id":3204,"parameterSlots":2,"returnSlots":0},"@_mint_3132":{"entryPoint":3385,"id":3132,"parameterSlots":2,"returnSlots":0},"@_msgSender_3430":{"entryPoint":1689,"id":3430,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_3292":{"entryPoint":2154,"id":3292,"parameterSlots":3,"returnSlots":0},"@_transfer_3075":{"entryPoint":2294,"id":3075,"parameterSlots":3,"returnSlots":0},"@allowance_2870":{"entryPoint":1554,"id":2870,"parameterSlots":2,"returnSlots":1},"@approve_2895":{"entryPoint":907,"id":2895,"parameterSlots":2,"returnSlots":1},"@balanceOf_2827":{"entryPoint":1076,"id":2827,"parameterSlots":1,"returnSlots":1},"@burnAll_4662":{"entryPoint":1294,"id":4662,"parameterSlots":0,"returnSlots":0},"@burn_4638":{"entryPoint":1063,"id":4638,"parameterSlots":1,"returnSlots":0},"@decimals_2803":{"entryPoint":999,"id":2803,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_2998":{"entryPoint":1400,"id":2998,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_2957":{"entryPoint":1008,"id":2957,"parameterSlots":2,"returnSlots":1},"@mint_4626":{"entryPoint":1387,"id":4626,"parameterSlots":1,"returnSlots":0},"@name_2783":{"entryPoint":761,"id":2783,"parameterSlots":0,"returnSlots":1},"@symbol_2793":{"entryPoint":1148,"id":2793,"parameterSlots":0,"returnSlots":1},"@totalSupply_2813":{"entryPoint":942,"id":2813,"parameterSlots":0,"returnSlots":1},"@transferFrom_2928":{"entryPoint":952,"id":2928,"parameterSlots":3,"returnSlots":1},"@transfer_2852":{"entryPoint":1519,"id":2852,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address":{"entryPoint":3993,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":4047,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4411,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":4456,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":4228,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4068,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":4366,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":4144,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":3824,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":5594,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack":{"entryPoint":6032,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":5194,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":5302,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":5740,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack":{"entryPoint":5886,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":5448,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":5048,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":4902,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack":{"entryPoint":6140,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98_to_t_string_memory_ptr_fromStack":{"entryPoint":4756,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":4186,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":4324,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":4159,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3881,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5629,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6067,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5229,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5337,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5775,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5921,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5483,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5083,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4937,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6175,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4791,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":4201,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":4339,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":3737,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3748,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4663,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":3952,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":4132,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":3920,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4014,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":4311,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":3765,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":4567,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4616,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":4520,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":3915,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":3807,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":5515,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd":{"entryPoint":5953,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":5115,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":5261,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":5661,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f":{"entryPoint":5807,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":5369,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":4969,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":4823,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e":{"entryPoint":6099,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98":{"entryPoint":4715,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":3970,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":4024,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:18043:20","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:20","statements":[{"nodeType":"YulAssignment","src":"77:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:20"},"nodeType":"YulFunctionCall","src":"87:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:20"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:20","type":""}],"src":"7:99:20"},{"body":{"nodeType":"YulBlock","src":"208:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"225:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"230:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"218:6:20"},"nodeType":"YulFunctionCall","src":"218:19:20"},"nodeType":"YulExpressionStatement","src":"218:19:20"},{"nodeType":"YulAssignment","src":"246:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"265:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"270:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"261:3:20"},"nodeType":"YulFunctionCall","src":"261:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"246:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"180:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"185:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"196:11:20","type":""}],"src":"112:169:20"},{"body":{"nodeType":"YulBlock","src":"349:184:20","statements":[{"nodeType":"YulVariableDeclaration","src":"359:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"368:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"363:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"428:63:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"453:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"458:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"449:3:20"},"nodeType":"YulFunctionCall","src":"449:11:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"472:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"477:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"468:3:20"},"nodeType":"YulFunctionCall","src":"468:11:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"462:5:20"},"nodeType":"YulFunctionCall","src":"462:18:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"442:6:20"},"nodeType":"YulFunctionCall","src":"442:39:20"},"nodeType":"YulExpressionStatement","src":"442:39:20"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"389:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"392:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"386:2:20"},"nodeType":"YulFunctionCall","src":"386:13:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"400:19:20","statements":[{"nodeType":"YulAssignment","src":"402:15:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"411:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"414:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"407:3:20"},"nodeType":"YulFunctionCall","src":"407:10:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"402:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"382:3:20","statements":[]},"src":"378:113:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"511:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"516:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"507:3:20"},"nodeType":"YulFunctionCall","src":"507:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"525:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"500:6:20"},"nodeType":"YulFunctionCall","src":"500:27:20"},"nodeType":"YulExpressionStatement","src":"500:27:20"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"331:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"336:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"341:6:20","type":""}],"src":"287:246:20"},{"body":{"nodeType":"YulBlock","src":"587:54:20","statements":[{"nodeType":"YulAssignment","src":"597:38:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"615:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"622:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"611:3:20"},"nodeType":"YulFunctionCall","src":"611:14:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"631:2:20","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"627:3:20"},"nodeType":"YulFunctionCall","src":"627:7:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"607:3:20"},"nodeType":"YulFunctionCall","src":"607:28:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"597:6:20"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"570:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"580:6:20","type":""}],"src":"539:102:20"},{"body":{"nodeType":"YulBlock","src":"739:285:20","statements":[{"nodeType":"YulVariableDeclaration","src":"749:53:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"796:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"763:32:20"},"nodeType":"YulFunctionCall","src":"763:39:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"753:6:20","type":""}]},{"nodeType":"YulAssignment","src":"811:78:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"877:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"882:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"818:58:20"},"nodeType":"YulFunctionCall","src":"818:71:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"811:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"937:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"944:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"933:3:20"},"nodeType":"YulFunctionCall","src":"933:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"951:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"956:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"898:34:20"},"nodeType":"YulFunctionCall","src":"898:65:20"},"nodeType":"YulExpressionStatement","src":"898:65:20"},{"nodeType":"YulAssignment","src":"972:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"983:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1010:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"988:21:20"},"nodeType":"YulFunctionCall","src":"988:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"979:3:20"},"nodeType":"YulFunctionCall","src":"979:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"972:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"720:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"727:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"735:3:20","type":""}],"src":"647:377:20"},{"body":{"nodeType":"YulBlock","src":"1148:195:20","statements":[{"nodeType":"YulAssignment","src":"1158:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1170:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1181:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1166:3:20"},"nodeType":"YulFunctionCall","src":"1166:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1158:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1205:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1216:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1201:3:20"},"nodeType":"YulFunctionCall","src":"1201:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1224:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"1230:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1220:3:20"},"nodeType":"YulFunctionCall","src":"1220:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1194:6:20"},"nodeType":"YulFunctionCall","src":"1194:47:20"},"nodeType":"YulExpressionStatement","src":"1194:47:20"},{"nodeType":"YulAssignment","src":"1250:86:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1322:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"1331:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1258:63:20"},"nodeType":"YulFunctionCall","src":"1258:78:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1250:4:20"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1120:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1132:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1143:4:20","type":""}],"src":"1030:313:20"},{"body":{"nodeType":"YulBlock","src":"1389:35:20","statements":[{"nodeType":"YulAssignment","src":"1399:19:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1415:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1409:5:20"},"nodeType":"YulFunctionCall","src":"1409:9:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1399:6:20"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1382:6:20","type":""}],"src":"1349:75:20"},{"body":{"nodeType":"YulBlock","src":"1519:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1536:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1539:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1529:6:20"},"nodeType":"YulFunctionCall","src":"1529:12:20"},"nodeType":"YulExpressionStatement","src":"1529:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1430:117:20"},{"body":{"nodeType":"YulBlock","src":"1642:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1659:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1662:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1652:6:20"},"nodeType":"YulFunctionCall","src":"1652:12:20"},"nodeType":"YulExpressionStatement","src":"1652:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"1553:117:20"},{"body":{"nodeType":"YulBlock","src":"1721:81:20","statements":[{"nodeType":"YulAssignment","src":"1731:65:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1746:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"1753:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1742:3:20"},"nodeType":"YulFunctionCall","src":"1742:54:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1731:7:20"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1703:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1713:7:20","type":""}],"src":"1676:126:20"},{"body":{"nodeType":"YulBlock","src":"1853:51:20","statements":[{"nodeType":"YulAssignment","src":"1863:35:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1892:5:20"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1874:17:20"},"nodeType":"YulFunctionCall","src":"1874:24:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1863:7:20"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1835:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1845:7:20","type":""}],"src":"1808:96:20"},{"body":{"nodeType":"YulBlock","src":"1953:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"2010:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2019:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2022:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2012:6:20"},"nodeType":"YulFunctionCall","src":"2012:12:20"},"nodeType":"YulExpressionStatement","src":"2012:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1976:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2001:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1983:17:20"},"nodeType":"YulFunctionCall","src":"1983:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1973:2:20"},"nodeType":"YulFunctionCall","src":"1973:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1966:6:20"},"nodeType":"YulFunctionCall","src":"1966:43:20"},"nodeType":"YulIf","src":"1963:63:20"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1946:5:20","type":""}],"src":"1910:122:20"},{"body":{"nodeType":"YulBlock","src":"2090:87:20","statements":[{"nodeType":"YulAssignment","src":"2100:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2122:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2109:12:20"},"nodeType":"YulFunctionCall","src":"2109:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2100:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2165:5:20"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2138:26:20"},"nodeType":"YulFunctionCall","src":"2138:33:20"},"nodeType":"YulExpressionStatement","src":"2138:33:20"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2068:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2076:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2084:5:20","type":""}],"src":"2038:139:20"},{"body":{"nodeType":"YulBlock","src":"2228:32:20","statements":[{"nodeType":"YulAssignment","src":"2238:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"2249:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2238:7:20"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2210:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2220:7:20","type":""}],"src":"2183:77:20"},{"body":{"nodeType":"YulBlock","src":"2309:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"2366:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2375:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2378:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2368:6:20"},"nodeType":"YulFunctionCall","src":"2368:12:20"},"nodeType":"YulExpressionStatement","src":"2368:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2332:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2357:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2339:17:20"},"nodeType":"YulFunctionCall","src":"2339:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2329:2:20"},"nodeType":"YulFunctionCall","src":"2329:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2322:6:20"},"nodeType":"YulFunctionCall","src":"2322:43:20"},"nodeType":"YulIf","src":"2319:63:20"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2302:5:20","type":""}],"src":"2266:122:20"},{"body":{"nodeType":"YulBlock","src":"2446:87:20","statements":[{"nodeType":"YulAssignment","src":"2456:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2478:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2465:12:20"},"nodeType":"YulFunctionCall","src":"2465:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2456:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2521:5:20"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2494:26:20"},"nodeType":"YulFunctionCall","src":"2494:33:20"},"nodeType":"YulExpressionStatement","src":"2494:33:20"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2424:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2432:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2440:5:20","type":""}],"src":"2394:139:20"},{"body":{"nodeType":"YulBlock","src":"2622:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"2668:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2670:77:20"},"nodeType":"YulFunctionCall","src":"2670:79:20"},"nodeType":"YulExpressionStatement","src":"2670:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2643:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"2652:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2639:3:20"},"nodeType":"YulFunctionCall","src":"2639:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"2664:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2635:3:20"},"nodeType":"YulFunctionCall","src":"2635:32:20"},"nodeType":"YulIf","src":"2632:119:20"},{"nodeType":"YulBlock","src":"2761:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2776:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2790:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2780:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2805:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2840:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2851:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2836:3:20"},"nodeType":"YulFunctionCall","src":"2836:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2860:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2815:20:20"},"nodeType":"YulFunctionCall","src":"2815:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2805:6:20"}]}]},{"nodeType":"YulBlock","src":"2888:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2903:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2917:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2907:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2933:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2968:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2979:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2964:3:20"},"nodeType":"YulFunctionCall","src":"2964:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2988:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2943:20:20"},"nodeType":"YulFunctionCall","src":"2943:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2933:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2584:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2595:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2607:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2615:6:20","type":""}],"src":"2539:474:20"},{"body":{"nodeType":"YulBlock","src":"3061:48:20","statements":[{"nodeType":"YulAssignment","src":"3071:32:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3096:5:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3089:6:20"},"nodeType":"YulFunctionCall","src":"3089:13:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3082:6:20"},"nodeType":"YulFunctionCall","src":"3082:21:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3071:7:20"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3043:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3053:7:20","type":""}],"src":"3019:90:20"},{"body":{"nodeType":"YulBlock","src":"3174:50:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3191:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3211:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3196:14:20"},"nodeType":"YulFunctionCall","src":"3196:21:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3184:6:20"},"nodeType":"YulFunctionCall","src":"3184:34:20"},"nodeType":"YulExpressionStatement","src":"3184:34:20"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3162:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3169:3:20","type":""}],"src":"3115:109:20"},{"body":{"nodeType":"YulBlock","src":"3322:118:20","statements":[{"nodeType":"YulAssignment","src":"3332:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3344:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3355:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3340:3:20"},"nodeType":"YulFunctionCall","src":"3340:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3332:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3406:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3419:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3430:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3415:3:20"},"nodeType":"YulFunctionCall","src":"3415:17:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3368:37:20"},"nodeType":"YulFunctionCall","src":"3368:65:20"},"nodeType":"YulExpressionStatement","src":"3368:65:20"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3294:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3306:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3317:4:20","type":""}],"src":"3230:210:20"},{"body":{"nodeType":"YulBlock","src":"3511:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3528:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3551:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3533:17:20"},"nodeType":"YulFunctionCall","src":"3533:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3521:6:20"},"nodeType":"YulFunctionCall","src":"3521:37:20"},"nodeType":"YulExpressionStatement","src":"3521:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3499:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3506:3:20","type":""}],"src":"3446:118:20"},{"body":{"nodeType":"YulBlock","src":"3668:124:20","statements":[{"nodeType":"YulAssignment","src":"3678:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3690:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3701:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3686:3:20"},"nodeType":"YulFunctionCall","src":"3686:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3678:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3758:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3771:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3782:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3767:3:20"},"nodeType":"YulFunctionCall","src":"3767:17:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3714:43:20"},"nodeType":"YulFunctionCall","src":"3714:71:20"},"nodeType":"YulExpressionStatement","src":"3714:71:20"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3640:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3652:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3663:4:20","type":""}],"src":"3570:222:20"},{"body":{"nodeType":"YulBlock","src":"3898:519:20","statements":[{"body":{"nodeType":"YulBlock","src":"3944:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3946:77:20"},"nodeType":"YulFunctionCall","src":"3946:79:20"},"nodeType":"YulExpressionStatement","src":"3946:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3919:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"3928:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3915:3:20"},"nodeType":"YulFunctionCall","src":"3915:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"3940:2:20","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3911:3:20"},"nodeType":"YulFunctionCall","src":"3911:32:20"},"nodeType":"YulIf","src":"3908:119:20"},{"nodeType":"YulBlock","src":"4037:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4052:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4066:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4056:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4081:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4116:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4127:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4112:3:20"},"nodeType":"YulFunctionCall","src":"4112:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4136:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4091:20:20"},"nodeType":"YulFunctionCall","src":"4091:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4081:6:20"}]}]},{"nodeType":"YulBlock","src":"4164:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4179:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4193:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4183:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4209:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4244:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4255:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4240:3:20"},"nodeType":"YulFunctionCall","src":"4240:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4264:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4219:20:20"},"nodeType":"YulFunctionCall","src":"4219:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4209:6:20"}]}]},{"nodeType":"YulBlock","src":"4292:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4307:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4321:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4311:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4337:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4372:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4383:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4368:3:20"},"nodeType":"YulFunctionCall","src":"4368:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4392:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4347:20:20"},"nodeType":"YulFunctionCall","src":"4347:53:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4337:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3852:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3863:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3875:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3883:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3891:6:20","type":""}],"src":"3798:619:20"},{"body":{"nodeType":"YulBlock","src":"4466:43:20","statements":[{"nodeType":"YulAssignment","src":"4476:27:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4491:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"4498:4:20","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4487:3:20"},"nodeType":"YulFunctionCall","src":"4487:16:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4476:7:20"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4448:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4458:7:20","type":""}],"src":"4423:86:20"},{"body":{"nodeType":"YulBlock","src":"4576:51:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4593:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4614:5:20"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"4598:15:20"},"nodeType":"YulFunctionCall","src":"4598:22:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4586:6:20"},"nodeType":"YulFunctionCall","src":"4586:35:20"},"nodeType":"YulExpressionStatement","src":"4586:35:20"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4564:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4571:3:20","type":""}],"src":"4515:112:20"},{"body":{"nodeType":"YulBlock","src":"4727:120:20","statements":[{"nodeType":"YulAssignment","src":"4737:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4749:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4760:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4745:3:20"},"nodeType":"YulFunctionCall","src":"4745:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4737:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4813:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4826:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4837:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4822:3:20"},"nodeType":"YulFunctionCall","src":"4822:17:20"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"4773:39:20"},"nodeType":"YulFunctionCall","src":"4773:67:20"},"nodeType":"YulExpressionStatement","src":"4773:67:20"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4699:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4711:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4722:4:20","type":""}],"src":"4633:214:20"},{"body":{"nodeType":"YulBlock","src":"4919:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"4965:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4967:77:20"},"nodeType":"YulFunctionCall","src":"4967:79:20"},"nodeType":"YulExpressionStatement","src":"4967:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4940:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"4949:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4936:3:20"},"nodeType":"YulFunctionCall","src":"4936:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"4961:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4932:3:20"},"nodeType":"YulFunctionCall","src":"4932:32:20"},"nodeType":"YulIf","src":"4929:119:20"},{"nodeType":"YulBlock","src":"5058:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5073:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5087:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5077:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5102:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5137:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5148:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5133:3:20"},"nodeType":"YulFunctionCall","src":"5133:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5157:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5112:20:20"},"nodeType":"YulFunctionCall","src":"5112:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5102:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4889:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4900:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4912:6:20","type":""}],"src":"4853:329:20"},{"body":{"nodeType":"YulBlock","src":"5254:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"5300:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5302:77:20"},"nodeType":"YulFunctionCall","src":"5302:79:20"},"nodeType":"YulExpressionStatement","src":"5302:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5275:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"5284:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5271:3:20"},"nodeType":"YulFunctionCall","src":"5271:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"5296:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5267:3:20"},"nodeType":"YulFunctionCall","src":"5267:32:20"},"nodeType":"YulIf","src":"5264:119:20"},{"nodeType":"YulBlock","src":"5393:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5408:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5422:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5412:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5437:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5472:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5483:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5468:3:20"},"nodeType":"YulFunctionCall","src":"5468:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5492:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5447:20:20"},"nodeType":"YulFunctionCall","src":"5447:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5437:6:20"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5224:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5235:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5247:6:20","type":""}],"src":"5188:329:20"},{"body":{"nodeType":"YulBlock","src":"5606:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"5652:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5654:77:20"},"nodeType":"YulFunctionCall","src":"5654:79:20"},"nodeType":"YulExpressionStatement","src":"5654:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5627:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"5636:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5623:3:20"},"nodeType":"YulFunctionCall","src":"5623:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"5648:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5619:3:20"},"nodeType":"YulFunctionCall","src":"5619:32:20"},"nodeType":"YulIf","src":"5616:119:20"},{"nodeType":"YulBlock","src":"5745:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5760:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5774:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5764:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5789:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5824:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5835:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5820:3:20"},"nodeType":"YulFunctionCall","src":"5820:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5844:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5799:20:20"},"nodeType":"YulFunctionCall","src":"5799:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5789:6:20"}]}]},{"nodeType":"YulBlock","src":"5872:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5887:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5901:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5891:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5917:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5952:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5963:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5948:3:20"},"nodeType":"YulFunctionCall","src":"5948:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5972:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5927:20:20"},"nodeType":"YulFunctionCall","src":"5927:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5917:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5568:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5579:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5591:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5599:6:20","type":""}],"src":"5523:474:20"},{"body":{"nodeType":"YulBlock","src":"6031:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6048:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6051:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6041:6:20"},"nodeType":"YulFunctionCall","src":"6041:88:20"},"nodeType":"YulExpressionStatement","src":"6041:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6145:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6148:4:20","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6138:6:20"},"nodeType":"YulFunctionCall","src":"6138:15:20"},"nodeType":"YulExpressionStatement","src":"6138:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6169:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6172:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6162:6:20"},"nodeType":"YulFunctionCall","src":"6162:15:20"},"nodeType":"YulExpressionStatement","src":"6162:15:20"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"6003:180:20"},{"body":{"nodeType":"YulBlock","src":"6240:269:20","statements":[{"nodeType":"YulAssignment","src":"6250:22:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6264:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"6270:1:20","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6260:3:20"},"nodeType":"YulFunctionCall","src":"6260:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6250:6:20"}]},{"nodeType":"YulVariableDeclaration","src":"6281:38:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6311:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"6317:1:20","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6307:3:20"},"nodeType":"YulFunctionCall","src":"6307:12:20"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6285:18:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"6358:51:20","statements":[{"nodeType":"YulAssignment","src":"6372:27:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6386:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"6394:4:20","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6382:3:20"},"nodeType":"YulFunctionCall","src":"6382:17:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6372:6:20"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6338:18:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6331:6:20"},"nodeType":"YulFunctionCall","src":"6331:26:20"},"nodeType":"YulIf","src":"6328:81:20"},{"body":{"nodeType":"YulBlock","src":"6461:42:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"6475:16:20"},"nodeType":"YulFunctionCall","src":"6475:18:20"},"nodeType":"YulExpressionStatement","src":"6475:18:20"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6425:18:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6448:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"6456:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6445:2:20"},"nodeType":"YulFunctionCall","src":"6445:14:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6422:2:20"},"nodeType":"YulFunctionCall","src":"6422:38:20"},"nodeType":"YulIf","src":"6419:84:20"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6224:4:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6233:6:20","type":""}],"src":"6189:320:20"},{"body":{"nodeType":"YulBlock","src":"6543:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6560:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6563:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6553:6:20"},"nodeType":"YulFunctionCall","src":"6553:88:20"},"nodeType":"YulExpressionStatement","src":"6553:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6657:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6660:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6650:6:20"},"nodeType":"YulFunctionCall","src":"6650:15:20"},"nodeType":"YulExpressionStatement","src":"6650:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6681:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6684:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6674:6:20"},"nodeType":"YulFunctionCall","src":"6674:15:20"},"nodeType":"YulExpressionStatement","src":"6674:15:20"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6515:180:20"},{"body":{"nodeType":"YulBlock","src":"6745:147:20","statements":[{"nodeType":"YulAssignment","src":"6755:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6778:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6760:17:20"},"nodeType":"YulFunctionCall","src":"6760:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6755:1:20"}]},{"nodeType":"YulAssignment","src":"6789:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6812:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6794:17:20"},"nodeType":"YulFunctionCall","src":"6794:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6789:1:20"}]},{"nodeType":"YulAssignment","src":"6823:16:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6834:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"6837:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6830:3:20"},"nodeType":"YulFunctionCall","src":"6830:9:20"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"6823:3:20"}]},{"body":{"nodeType":"YulBlock","src":"6863:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6865:16:20"},"nodeType":"YulFunctionCall","src":"6865:18:20"},"nodeType":"YulExpressionStatement","src":"6865:18:20"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6855:1:20"},{"name":"sum","nodeType":"YulIdentifier","src":"6858:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6852:2:20"},"nodeType":"YulFunctionCall","src":"6852:10:20"},"nodeType":"YulIf","src":"6849:36:20"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6732:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"6735:1:20","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6741:3:20","type":""}],"src":"6701:191:20"},{"body":{"nodeType":"YulBlock","src":"7004:69:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7026:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"7034:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7022:3:20"},"nodeType":"YulFunctionCall","src":"7022:14:20"},{"hexValue":"4d6f636b555344433a204e6f7468696e6720746f206275726e","kind":"string","nodeType":"YulLiteral","src":"7038:27:20","type":"","value":"MockUSDC: Nothing to burn"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7015:6:20"},"nodeType":"YulFunctionCall","src":"7015:51:20"},"nodeType":"YulExpressionStatement","src":"7015:51:20"}]},"name":"store_literal_in_memory_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6996:6:20","type":""}],"src":"6898:175:20"},{"body":{"nodeType":"YulBlock","src":"7225:220:20","statements":[{"nodeType":"YulAssignment","src":"7235:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7301:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"7306:2:20","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7242:58:20"},"nodeType":"YulFunctionCall","src":"7242:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7235:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7407:3:20"}],"functionName":{"name":"store_literal_in_memory_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98","nodeType":"YulIdentifier","src":"7318:88:20"},"nodeType":"YulFunctionCall","src":"7318:93:20"},"nodeType":"YulExpressionStatement","src":"7318:93:20"},{"nodeType":"YulAssignment","src":"7420:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7431:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"7436:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7427:3:20"},"nodeType":"YulFunctionCall","src":"7427:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7420:3:20"}]}]},"name":"abi_encode_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7213:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7221:3:20","type":""}],"src":"7079:366:20"},{"body":{"nodeType":"YulBlock","src":"7622:248:20","statements":[{"nodeType":"YulAssignment","src":"7632:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7644:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"7655:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7640:3:20"},"nodeType":"YulFunctionCall","src":"7640:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7632:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7679:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"7690:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7675:3:20"},"nodeType":"YulFunctionCall","src":"7675:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7698:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"7704:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7694:3:20"},"nodeType":"YulFunctionCall","src":"7694:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7668:6:20"},"nodeType":"YulFunctionCall","src":"7668:47:20"},"nodeType":"YulExpressionStatement","src":"7668:47:20"},{"nodeType":"YulAssignment","src":"7724:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7858:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7732:124:20"},"nodeType":"YulFunctionCall","src":"7732:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7724:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7602:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7617:4:20","type":""}],"src":"7451:419:20"},{"body":{"nodeType":"YulBlock","src":"7982:118:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8004:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8012:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8000:3:20"},"nodeType":"YulFunctionCall","src":"8000:14:20"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"8016:34:20","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7993:6:20"},"nodeType":"YulFunctionCall","src":"7993:58:20"},"nodeType":"YulExpressionStatement","src":"7993:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8072:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8080:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8068:3:20"},"nodeType":"YulFunctionCall","src":"8068:15:20"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"8085:7:20","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8061:6:20"},"nodeType":"YulFunctionCall","src":"8061:32:20"},"nodeType":"YulExpressionStatement","src":"8061:32:20"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7974:6:20","type":""}],"src":"7876:224:20"},{"body":{"nodeType":"YulBlock","src":"8252:220:20","statements":[{"nodeType":"YulAssignment","src":"8262:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8328:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"8333:2:20","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8269:58:20"},"nodeType":"YulFunctionCall","src":"8269:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8262:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8434:3:20"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"8345:88:20"},"nodeType":"YulFunctionCall","src":"8345:93:20"},"nodeType":"YulExpressionStatement","src":"8345:93:20"},{"nodeType":"YulAssignment","src":"8447:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8458:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"8463:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8454:3:20"},"nodeType":"YulFunctionCall","src":"8454:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8447:3:20"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8240:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8248:3:20","type":""}],"src":"8106:366:20"},{"body":{"nodeType":"YulBlock","src":"8649:248:20","statements":[{"nodeType":"YulAssignment","src":"8659:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8671:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"8682:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8667:3:20"},"nodeType":"YulFunctionCall","src":"8667:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8659:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8706:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"8717:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8702:3:20"},"nodeType":"YulFunctionCall","src":"8702:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8725:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"8731:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8721:3:20"},"nodeType":"YulFunctionCall","src":"8721:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8695:6:20"},"nodeType":"YulFunctionCall","src":"8695:47:20"},"nodeType":"YulExpressionStatement","src":"8695:47:20"},{"nodeType":"YulAssignment","src":"8751:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8885:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8759:124:20"},"nodeType":"YulFunctionCall","src":"8759:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8751:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8629:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8644:4:20","type":""}],"src":"8478:419:20"},{"body":{"nodeType":"YulBlock","src":"9009:117:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9031:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"9039:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9027:3:20"},"nodeType":"YulFunctionCall","src":"9027:14:20"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"9043:34:20","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9020:6:20"},"nodeType":"YulFunctionCall","src":"9020:58:20"},"nodeType":"YulExpressionStatement","src":"9020:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9099:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"9107:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9095:3:20"},"nodeType":"YulFunctionCall","src":"9095:15:20"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"9112:6:20","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9088:6:20"},"nodeType":"YulFunctionCall","src":"9088:31:20"},"nodeType":"YulExpressionStatement","src":"9088:31:20"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9001:6:20","type":""}],"src":"8903:223:20"},{"body":{"nodeType":"YulBlock","src":"9278:220:20","statements":[{"nodeType":"YulAssignment","src":"9288:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9354:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"9359:2:20","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9295:58:20"},"nodeType":"YulFunctionCall","src":"9295:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9288:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9460:3:20"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"9371:88:20"},"nodeType":"YulFunctionCall","src":"9371:93:20"},"nodeType":"YulExpressionStatement","src":"9371:93:20"},{"nodeType":"YulAssignment","src":"9473:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9484:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"9489:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9480:3:20"},"nodeType":"YulFunctionCall","src":"9480:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9473:3:20"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9266:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9274:3:20","type":""}],"src":"9132:366:20"},{"body":{"nodeType":"YulBlock","src":"9675:248:20","statements":[{"nodeType":"YulAssignment","src":"9685:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9697:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"9708:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9693:3:20"},"nodeType":"YulFunctionCall","src":"9693:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9685:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9732:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"9743:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9728:3:20"},"nodeType":"YulFunctionCall","src":"9728:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9751:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"9757:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9747:3:20"},"nodeType":"YulFunctionCall","src":"9747:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9721:6:20"},"nodeType":"YulFunctionCall","src":"9721:47:20"},"nodeType":"YulExpressionStatement","src":"9721:47:20"},{"nodeType":"YulAssignment","src":"9777:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9911:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9785:124:20"},"nodeType":"YulFunctionCall","src":"9785:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9777:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9655:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9670:4:20","type":""}],"src":"9504:419:20"},{"body":{"nodeType":"YulBlock","src":"10035:115:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10057:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"10065:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10053:3:20"},"nodeType":"YulFunctionCall","src":"10053:14:20"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"10069:34:20","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10046:6:20"},"nodeType":"YulFunctionCall","src":"10046:58:20"},"nodeType":"YulExpressionStatement","src":"10046:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10125:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"10133:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10121:3:20"},"nodeType":"YulFunctionCall","src":"10121:15:20"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"10138:4:20","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10114:6:20"},"nodeType":"YulFunctionCall","src":"10114:29:20"},"nodeType":"YulExpressionStatement","src":"10114:29:20"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10027:6:20","type":""}],"src":"9929:221:20"},{"body":{"nodeType":"YulBlock","src":"10302:220:20","statements":[{"nodeType":"YulAssignment","src":"10312:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10378:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"10383:2:20","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10319:58:20"},"nodeType":"YulFunctionCall","src":"10319:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10312:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10484:3:20"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"10395:88:20"},"nodeType":"YulFunctionCall","src":"10395:93:20"},"nodeType":"YulExpressionStatement","src":"10395:93:20"},{"nodeType":"YulAssignment","src":"10497:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10508:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"10513:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10504:3:20"},"nodeType":"YulFunctionCall","src":"10504:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10497:3:20"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10290:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10298:3:20","type":""}],"src":"10156:366:20"},{"body":{"nodeType":"YulBlock","src":"10699:248:20","statements":[{"nodeType":"YulAssignment","src":"10709:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10721:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"10732:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10717:3:20"},"nodeType":"YulFunctionCall","src":"10717:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10709:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10756:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"10767:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10752:3:20"},"nodeType":"YulFunctionCall","src":"10752:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10775:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"10781:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10771:3:20"},"nodeType":"YulFunctionCall","src":"10771:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10745:6:20"},"nodeType":"YulFunctionCall","src":"10745:47:20"},"nodeType":"YulExpressionStatement","src":"10745:47:20"},{"nodeType":"YulAssignment","src":"10801:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10935:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10809:124:20"},"nodeType":"YulFunctionCall","src":"10809:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10801:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10679:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10694:4:20","type":""}],"src":"10528:419:20"},{"body":{"nodeType":"YulBlock","src":"11059:73:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11081:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"11089:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11077:3:20"},"nodeType":"YulFunctionCall","src":"11077:14:20"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"11093:31:20","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11070:6:20"},"nodeType":"YulFunctionCall","src":"11070:55:20"},"nodeType":"YulExpressionStatement","src":"11070:55:20"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11051:6:20","type":""}],"src":"10953:179:20"},{"body":{"nodeType":"YulBlock","src":"11284:220:20","statements":[{"nodeType":"YulAssignment","src":"11294:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11360:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"11365:2:20","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11301:58:20"},"nodeType":"YulFunctionCall","src":"11301:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11294:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11466:3:20"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"11377:88:20"},"nodeType":"YulFunctionCall","src":"11377:93:20"},"nodeType":"YulExpressionStatement","src":"11377:93:20"},{"nodeType":"YulAssignment","src":"11479:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11490:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"11495:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11486:3:20"},"nodeType":"YulFunctionCall","src":"11486:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11479:3:20"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11272:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11280:3:20","type":""}],"src":"11138:366:20"},{"body":{"nodeType":"YulBlock","src":"11681:248:20","statements":[{"nodeType":"YulAssignment","src":"11691:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11703:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11714:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11699:3:20"},"nodeType":"YulFunctionCall","src":"11699:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11691:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11738:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11749:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11734:3:20"},"nodeType":"YulFunctionCall","src":"11734:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11757:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"11763:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11753:3:20"},"nodeType":"YulFunctionCall","src":"11753:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11727:6:20"},"nodeType":"YulFunctionCall","src":"11727:47:20"},"nodeType":"YulExpressionStatement","src":"11727:47:20"},{"nodeType":"YulAssignment","src":"11783:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11917:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11791:124:20"},"nodeType":"YulFunctionCall","src":"11791:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11783:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11661:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11676:4:20","type":""}],"src":"11510:419:20"},{"body":{"nodeType":"YulBlock","src":"12041:118:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12063:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"12071:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12059:3:20"},"nodeType":"YulFunctionCall","src":"12059:14:20"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"12075:34:20","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12052:6:20"},"nodeType":"YulFunctionCall","src":"12052:58:20"},"nodeType":"YulExpressionStatement","src":"12052:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12131:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"12139:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12127:3:20"},"nodeType":"YulFunctionCall","src":"12127:15:20"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"12144:7:20","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12120:6:20"},"nodeType":"YulFunctionCall","src":"12120:32:20"},"nodeType":"YulExpressionStatement","src":"12120:32:20"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12033:6:20","type":""}],"src":"11935:224:20"},{"body":{"nodeType":"YulBlock","src":"12311:220:20","statements":[{"nodeType":"YulAssignment","src":"12321:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12387:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"12392:2:20","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12328:58:20"},"nodeType":"YulFunctionCall","src":"12328:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12321:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12493:3:20"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"12404:88:20"},"nodeType":"YulFunctionCall","src":"12404:93:20"},"nodeType":"YulExpressionStatement","src":"12404:93:20"},{"nodeType":"YulAssignment","src":"12506:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12517:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"12522:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12513:3:20"},"nodeType":"YulFunctionCall","src":"12513:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12506:3:20"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12299:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12307:3:20","type":""}],"src":"12165:366:20"},{"body":{"nodeType":"YulBlock","src":"12708:248:20","statements":[{"nodeType":"YulAssignment","src":"12718:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12730:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12741:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12726:3:20"},"nodeType":"YulFunctionCall","src":"12726:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12718:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12765:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12776:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12761:3:20"},"nodeType":"YulFunctionCall","src":"12761:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12784:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"12790:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12780:3:20"},"nodeType":"YulFunctionCall","src":"12780:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12754:6:20"},"nodeType":"YulFunctionCall","src":"12754:47:20"},"nodeType":"YulExpressionStatement","src":"12754:47:20"},{"nodeType":"YulAssignment","src":"12810:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12944:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12818:124:20"},"nodeType":"YulFunctionCall","src":"12818:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12810:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12688:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12703:4:20","type":""}],"src":"12537:419:20"},{"body":{"nodeType":"YulBlock","src":"13068:116:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13090:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"13098:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13086:3:20"},"nodeType":"YulFunctionCall","src":"13086:14:20"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"13102:34:20","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13079:6:20"},"nodeType":"YulFunctionCall","src":"13079:58:20"},"nodeType":"YulExpressionStatement","src":"13079:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13158:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"13166:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13154:3:20"},"nodeType":"YulFunctionCall","src":"13154:15:20"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"13171:5:20","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13147:6:20"},"nodeType":"YulFunctionCall","src":"13147:30:20"},"nodeType":"YulExpressionStatement","src":"13147:30:20"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13060:6:20","type":""}],"src":"12962:222:20"},{"body":{"nodeType":"YulBlock","src":"13336:220:20","statements":[{"nodeType":"YulAssignment","src":"13346:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13412:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"13417:2:20","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13353:58:20"},"nodeType":"YulFunctionCall","src":"13353:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13346:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13518:3:20"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"13429:88:20"},"nodeType":"YulFunctionCall","src":"13429:93:20"},"nodeType":"YulExpressionStatement","src":"13429:93:20"},{"nodeType":"YulAssignment","src":"13531:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13542:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"13547:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13538:3:20"},"nodeType":"YulFunctionCall","src":"13538:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13531:3:20"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13324:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13332:3:20","type":""}],"src":"13190:366:20"},{"body":{"nodeType":"YulBlock","src":"13733:248:20","statements":[{"nodeType":"YulAssignment","src":"13743:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13755:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13766:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13751:3:20"},"nodeType":"YulFunctionCall","src":"13751:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13743:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13790:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13801:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13786:3:20"},"nodeType":"YulFunctionCall","src":"13786:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13809:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"13815:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13805:3:20"},"nodeType":"YulFunctionCall","src":"13805:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13779:6:20"},"nodeType":"YulFunctionCall","src":"13779:47:20"},"nodeType":"YulExpressionStatement","src":"13779:47:20"},{"nodeType":"YulAssignment","src":"13835:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13969:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13843:124:20"},"nodeType":"YulFunctionCall","src":"13843:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13835:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13713:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13728:4:20","type":""}],"src":"13562:419:20"},{"body":{"nodeType":"YulBlock","src":"14093:119:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14115:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"14123:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14111:3:20"},"nodeType":"YulFunctionCall","src":"14111:14:20"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"14127:34:20","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14104:6:20"},"nodeType":"YulFunctionCall","src":"14104:58:20"},"nodeType":"YulExpressionStatement","src":"14104:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14183:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"14191:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14179:3:20"},"nodeType":"YulFunctionCall","src":"14179:15:20"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"14196:8:20","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14172:6:20"},"nodeType":"YulFunctionCall","src":"14172:33:20"},"nodeType":"YulExpressionStatement","src":"14172:33:20"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14085:6:20","type":""}],"src":"13987:225:20"},{"body":{"nodeType":"YulBlock","src":"14364:220:20","statements":[{"nodeType":"YulAssignment","src":"14374:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14440:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"14445:2:20","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14381:58:20"},"nodeType":"YulFunctionCall","src":"14381:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14374:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14546:3:20"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"14457:88:20"},"nodeType":"YulFunctionCall","src":"14457:93:20"},"nodeType":"YulExpressionStatement","src":"14457:93:20"},{"nodeType":"YulAssignment","src":"14559:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14570:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"14575:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14566:3:20"},"nodeType":"YulFunctionCall","src":"14566:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14559:3:20"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14352:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14360:3:20","type":""}],"src":"14218:366:20"},{"body":{"nodeType":"YulBlock","src":"14761:248:20","statements":[{"nodeType":"YulAssignment","src":"14771:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14783:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14794:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14779:3:20"},"nodeType":"YulFunctionCall","src":"14779:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14771:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14818:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14829:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14814:3:20"},"nodeType":"YulFunctionCall","src":"14814:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14837:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"14843:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14833:3:20"},"nodeType":"YulFunctionCall","src":"14833:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14807:6:20"},"nodeType":"YulFunctionCall","src":"14807:47:20"},"nodeType":"YulExpressionStatement","src":"14807:47:20"},{"nodeType":"YulAssignment","src":"14863:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14997:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14871:124:20"},"nodeType":"YulFunctionCall","src":"14871:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14863:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14741:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14756:4:20","type":""}],"src":"14590:419:20"},{"body":{"nodeType":"YulBlock","src":"15121:114:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15143:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"15151:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15139:3:20"},"nodeType":"YulFunctionCall","src":"15139:14:20"},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"15155:34:20","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15132:6:20"},"nodeType":"YulFunctionCall","src":"15132:58:20"},"nodeType":"YulExpressionStatement","src":"15132:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15211:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"15219:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15207:3:20"},"nodeType":"YulFunctionCall","src":"15207:15:20"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"15224:3:20","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15200:6:20"},"nodeType":"YulFunctionCall","src":"15200:28:20"},"nodeType":"YulExpressionStatement","src":"15200:28:20"}]},"name":"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15113:6:20","type":""}],"src":"15015:220:20"},{"body":{"nodeType":"YulBlock","src":"15387:220:20","statements":[{"nodeType":"YulAssignment","src":"15397:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15463:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15468:2:20","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15404:58:20"},"nodeType":"YulFunctionCall","src":"15404:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15397:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15569:3:20"}],"functionName":{"name":"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","nodeType":"YulIdentifier","src":"15480:88:20"},"nodeType":"YulFunctionCall","src":"15480:93:20"},"nodeType":"YulExpressionStatement","src":"15480:93:20"},{"nodeType":"YulAssignment","src":"15582:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15593:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15598:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15589:3:20"},"nodeType":"YulFunctionCall","src":"15589:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15582:3:20"}]}]},"name":"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15375:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15383:3:20","type":""}],"src":"15241:366:20"},{"body":{"nodeType":"YulBlock","src":"15784:248:20","statements":[{"nodeType":"YulAssignment","src":"15794:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15806:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"15817:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15802:3:20"},"nodeType":"YulFunctionCall","src":"15802:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15794:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15841:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"15852:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15837:3:20"},"nodeType":"YulFunctionCall","src":"15837:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15860:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"15866:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15856:3:20"},"nodeType":"YulFunctionCall","src":"15856:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15830:6:20"},"nodeType":"YulFunctionCall","src":"15830:47:20"},"nodeType":"YulExpressionStatement","src":"15830:47:20"},{"nodeType":"YulAssignment","src":"15886:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16020:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15894:124:20"},"nodeType":"YulFunctionCall","src":"15894:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15886:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15764:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15779:4:20","type":""}],"src":"15613:419:20"},{"body":{"nodeType":"YulBlock","src":"16144:115:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16166:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"16174:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16162:3:20"},"nodeType":"YulFunctionCall","src":"16162:14:20"},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e","kind":"string","nodeType":"YulLiteral","src":"16178:34:20","type":"","value":"ERC20: burn amount exceeds balan"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16155:6:20"},"nodeType":"YulFunctionCall","src":"16155:58:20"},"nodeType":"YulExpressionStatement","src":"16155:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16234:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"16242:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16230:3:20"},"nodeType":"YulFunctionCall","src":"16230:15:20"},{"hexValue":"6365","kind":"string","nodeType":"YulLiteral","src":"16247:4:20","type":"","value":"ce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16223:6:20"},"nodeType":"YulFunctionCall","src":"16223:29:20"},"nodeType":"YulExpressionStatement","src":"16223:29:20"}]},"name":"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16136:6:20","type":""}],"src":"16038:221:20"},{"body":{"nodeType":"YulBlock","src":"16411:220:20","statements":[{"nodeType":"YulAssignment","src":"16421:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16487:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"16492:2:20","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16428:58:20"},"nodeType":"YulFunctionCall","src":"16428:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16421:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16593:3:20"}],"functionName":{"name":"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","nodeType":"YulIdentifier","src":"16504:88:20"},"nodeType":"YulFunctionCall","src":"16504:93:20"},"nodeType":"YulExpressionStatement","src":"16504:93:20"},{"nodeType":"YulAssignment","src":"16606:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16617:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"16622:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16613:3:20"},"nodeType":"YulFunctionCall","src":"16613:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16606:3:20"}]}]},"name":"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16399:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16407:3:20","type":""}],"src":"16265:366:20"},{"body":{"nodeType":"YulBlock","src":"16808:248:20","statements":[{"nodeType":"YulAssignment","src":"16818:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16830:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"16841:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16826:3:20"},"nodeType":"YulFunctionCall","src":"16826:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16818:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16865:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"16876:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16861:3:20"},"nodeType":"YulFunctionCall","src":"16861:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16884:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"16890:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16880:3:20"},"nodeType":"YulFunctionCall","src":"16880:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16854:6:20"},"nodeType":"YulFunctionCall","src":"16854:47:20"},"nodeType":"YulExpressionStatement","src":"16854:47:20"},{"nodeType":"YulAssignment","src":"16910:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17044:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16918:124:20"},"nodeType":"YulFunctionCall","src":"16918:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16910:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16788:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16803:4:20","type":""}],"src":"16637:419:20"},{"body":{"nodeType":"YulBlock","src":"17168:75:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17190:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"17198:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17186:3:20"},"nodeType":"YulFunctionCall","src":"17186:14:20"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"17202:33:20","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17179:6:20"},"nodeType":"YulFunctionCall","src":"17179:57:20"},"nodeType":"YulExpressionStatement","src":"17179:57:20"}]},"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17160:6:20","type":""}],"src":"17062:181:20"},{"body":{"nodeType":"YulBlock","src":"17395:220:20","statements":[{"nodeType":"YulAssignment","src":"17405:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17471:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17476:2:20","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17412:58:20"},"nodeType":"YulFunctionCall","src":"17412:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17405:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17577:3:20"}],"functionName":{"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulIdentifier","src":"17488:88:20"},"nodeType":"YulFunctionCall","src":"17488:93:20"},"nodeType":"YulExpressionStatement","src":"17488:93:20"},{"nodeType":"YulAssignment","src":"17590:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17601:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17606:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17597:3:20"},"nodeType":"YulFunctionCall","src":"17597:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17590:3:20"}]}]},"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17383:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17391:3:20","type":""}],"src":"17249:366:20"},{"body":{"nodeType":"YulBlock","src":"17792:248:20","statements":[{"nodeType":"YulAssignment","src":"17802:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17814:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"17825:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17810:3:20"},"nodeType":"YulFunctionCall","src":"17810:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17802:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17849:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"17860:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17845:3:20"},"nodeType":"YulFunctionCall","src":"17845:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17868:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"17874:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17864:3:20"},"nodeType":"YulFunctionCall","src":"17864:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17838:6:20"},"nodeType":"YulFunctionCall","src":"17838:47:20"},"nodeType":"YulExpressionStatement","src":"17838:47:20"},{"nodeType":"YulAssignment","src":"17894:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18028:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17902:124:20"},"nodeType":"YulFunctionCall","src":"17902:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17894:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17772:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17787:4:20","type":""}],"src":"17621:419:20"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98(memPtr) {\n\n        mstore(add(memPtr, 0), \"MockUSDC: Nothing to burn\")\n\n    }\n\n    function abi_encode_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: burn from the zero addres\")\n\n        mstore(add(memPtr, 32), \"s\")\n\n    }\n\n    function abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: burn amount exceeds balan\")\n\n        mstore(add(memPtr, 32), \"ce\")\n\n    }\n\n    function abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a0712d6811610066578063a0712d681461024d578063a457c2d714610269578063a9059cbb14610299578063dd62ed3e146102c9576100ea565b806370a08231146101f557806395d89b41146102255780639975038c14610243576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806339509351146101a957806342966c68146101d9576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f76102f9565b6040516101049190610f29565b60405180910390f35b61012760048036038101906101229190610fe4565b61038b565b604051610134919061103f565b60405180910390f35b6101456103ae565b6040516101529190611069565b60405180910390f35b61017560048036038101906101709190611084565b6103b8565b604051610182919061103f565b60405180910390f35b6101936103e7565b6040516101a091906110f3565b60405180910390f35b6101c360048036038101906101be9190610fe4565b6103f0565b6040516101d0919061103f565b60405180910390f35b6101f360048036038101906101ee919061110e565b610427565b005b61020f600480360381019061020a919061113b565b610434565b60405161021c9190611069565b60405180910390f35b61022d61047c565b60405161023a9190610f29565b60405180910390f35b61024b61050e565b005b6102676004803603810190610262919061110e565b61056b565b005b610283600480360381019061027e9190610fe4565b610578565b604051610290919061103f565b60405180910390f35b6102b360048036038101906102ae9190610fe4565b6105ef565b6040516102c0919061103f565b60405180910390f35b6102e360048036038101906102de9190611168565b610612565b6040516102f09190611069565b60405180910390f35b606060038054610308906111d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610334906111d7565b80156103815780601f1061035657610100808354040283529160200191610381565b820191906000526020600020905b81548152906001019060200180831161036457829003601f168201915b5050505050905090565b600080610396610699565b90506103a38185856106a1565b600191505092915050565b6000600254905090565b6000806103c3610699565b90506103d085828561086a565b6103db8585856108f6565b60019150509392505050565b60006012905090565b6000806103fb610699565b905061041c81858561040d8589610612565b6104179190611237565b6106a1565b600191505092915050565b6104313382610b6c565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461048b906111d7565b80601f01602080910402602001604051908101604052809291908181526020018280546104b7906111d7565b80156105045780601f106104d957610100808354040283529160200191610504565b820191906000526020600020905b8154815290600101906020018083116104e757829003601f168201915b5050505050905090565b600061051933610434565b90506000811161055e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610555906112b7565b60405180910390fd5b6105683382610b6c565b50565b6105753382610d39565b50565b600080610583610699565b905060006105918286610612565b9050838110156105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90611349565b60405180910390fd5b6105e382868684036106a1565b60019250505092915050565b6000806105fa610699565b90506106078185856108f6565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610710576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610707906113db565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361077f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107769061146d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161085d9190611069565b60405180910390a3505050565b60006108768484610612565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108f057818110156108e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d9906114d9565b60405180910390fd5b6108ef84848484036106a1565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095c9061156b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cb906115fd565b60405180910390fd5b6109df838383610e8f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c9061168f565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b539190611069565b60405180910390a3610b66848484610e94565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd290611721565b60405180910390fd5b610be782600083610e8f565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c64906117b3565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d209190611069565b60405180910390a3610d3483600084610e94565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610da8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9f9061181f565b60405180910390fd5b610db460008383610e8f565b8060026000828254610dc69190611237565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e779190611069565b60405180910390a3610e8b60008383610e94565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ed3578082015181840152602081019050610eb8565b60008484015250505050565b6000601f19601f8301169050919050565b6000610efb82610e99565b610f058185610ea4565b9350610f15818560208601610eb5565b610f1e81610edf565b840191505092915050565b60006020820190508181036000830152610f438184610ef0565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f7b82610f50565b9050919050565b610f8b81610f70565b8114610f9657600080fd5b50565b600081359050610fa881610f82565b92915050565b6000819050919050565b610fc181610fae565b8114610fcc57600080fd5b50565b600081359050610fde81610fb8565b92915050565b60008060408385031215610ffb57610ffa610f4b565b5b600061100985828601610f99565b925050602061101a85828601610fcf565b9150509250929050565b60008115159050919050565b61103981611024565b82525050565b60006020820190506110546000830184611030565b92915050565b61106381610fae565b82525050565b600060208201905061107e600083018461105a565b92915050565b60008060006060848603121561109d5761109c610f4b565b5b60006110ab86828701610f99565b93505060206110bc86828701610f99565b92505060406110cd86828701610fcf565b9150509250925092565b600060ff82169050919050565b6110ed816110d7565b82525050565b600060208201905061110860008301846110e4565b92915050565b60006020828403121561112457611123610f4b565b5b600061113284828501610fcf565b91505092915050565b60006020828403121561115157611150610f4b565b5b600061115f84828501610f99565b91505092915050565b6000806040838503121561117f5761117e610f4b565b5b600061118d85828601610f99565b925050602061119e85828601610f99565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806111ef57607f821691505b602082108103611202576112016111a8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061124282610fae565b915061124d83610fae565b925082820190508082111561126557611264611208565b5b92915050565b7f4d6f636b555344433a204e6f7468696e6720746f206275726e00000000000000600082015250565b60006112a1601983610ea4565b91506112ac8261126b565b602082019050919050565b600060208201905081810360008301526112d081611294565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611333602583610ea4565b915061133e826112d7565b604082019050919050565b6000602082019050818103600083015261136281611326565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006113c5602483610ea4565b91506113d082611369565b604082019050919050565b600060208201905081810360008301526113f4816113b8565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611457602283610ea4565b9150611462826113fb565b604082019050919050565b600060208201905081810360008301526114868161144a565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006114c3601d83610ea4565b91506114ce8261148d565b602082019050919050565b600060208201905081810360008301526114f2816114b6565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611555602583610ea4565b9150611560826114f9565b604082019050919050565b6000602082019050818103600083015261158481611548565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006115e7602383610ea4565b91506115f28261158b565b604082019050919050565b60006020820190508181036000830152611616816115da565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611679602683610ea4565b91506116848261161d565b604082019050919050565b600060208201905081810360008301526116a88161166c565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061170b602183610ea4565b9150611716826116af565b604082019050919050565b6000602082019050818103600083015261173a816116fe565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061179d602283610ea4565b91506117a882611741565b604082019050919050565b600060208201905081810360008301526117cc81611790565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611809601f83610ea4565b9150611814826117d3565b602082019050919050565b60006020820190508181036000830152611838816117fc565b905091905056fea2646970667358221220db80c17952bbfdfde6337cbbe3fe3f03b3b28028fd799fb2393ebc5ad90036ce64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA0712D68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2C9 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0x9975038C EQ PUSH2 0x243 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1D9 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x13D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x127 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x122 SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x38B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x145 PUSH2 0x3AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x175 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x3B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x193 PUSH2 0x3E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0x10F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x3F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EE SWAP2 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH2 0x427 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x20F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20A SWAP2 SWAP1 PUSH2 0x113B JUMP JUMPDEST PUSH2 0x434 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21C SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22D PUSH2 0x47C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23A SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24B PUSH2 0x50E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x267 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x262 SWAP2 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH2 0x56B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x283 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27E SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x578 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x290 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AE SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C0 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DE SWAP2 SWAP1 PUSH2 0x1168 JUMP JUMPDEST PUSH2 0x612 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F0 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x308 SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x334 SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x381 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x356 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x381 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x364 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x396 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A3 DUP2 DUP6 DUP6 PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C3 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x3D0 DUP6 DUP3 DUP6 PUSH2 0x86A JUMP JUMPDEST PUSH2 0x3DB DUP6 DUP6 DUP6 PUSH2 0x8F6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3FB PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x41C DUP2 DUP6 DUP6 PUSH2 0x40D DUP6 DUP10 PUSH2 0x612 JUMP JUMPDEST PUSH2 0x417 SWAP2 SWAP1 PUSH2 0x1237 JUMP JUMPDEST PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x431 CALLER DUP3 PUSH2 0xB6C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x48B SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4B7 SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x504 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x504 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4E7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 CALLER PUSH2 0x434 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x555 SWAP1 PUSH2 0x12B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x568 CALLER DUP3 PUSH2 0xB6C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x575 CALLER DUP3 PUSH2 0xD39 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x583 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x591 DUP3 DUP7 PUSH2 0x612 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CD SWAP1 PUSH2 0x1349 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E3 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5FA PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x607 DUP2 DUP6 DUP6 PUSH2 0x8F6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x710 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x707 SWAP1 PUSH2 0x13DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x77F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x776 SWAP1 PUSH2 0x146D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x85D SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x876 DUP5 DUP5 PUSH2 0x612 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x8F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x8E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D9 SWAP1 PUSH2 0x14D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8EF DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x6A1 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x965 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x95C SWAP1 PUSH2 0x156B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9CB SWAP1 PUSH2 0x15FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9DF DUP4 DUP4 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xA65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA5C SWAP1 PUSH2 0x168F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xB53 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xB66 DUP5 DUP5 DUP5 PUSH2 0xE94 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBDB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD2 SWAP1 PUSH2 0x1721 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBE7 DUP3 PUSH1 0x0 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xC6D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC64 SWAP1 PUSH2 0x17B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xD20 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xD34 DUP4 PUSH1 0x0 DUP5 PUSH2 0xE94 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD9F SWAP1 PUSH2 0x181F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDB4 PUSH1 0x0 DUP4 DUP4 PUSH2 0xE8F JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xDC6 SWAP2 SWAP1 PUSH2 0x1237 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xE77 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xE8B PUSH1 0x0 DUP4 DUP4 PUSH2 0xE94 JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xED3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFB DUP3 PUSH2 0xE99 JUMP JUMPDEST PUSH2 0xF05 DUP2 DUP6 PUSH2 0xEA4 JUMP JUMPDEST SWAP4 POP PUSH2 0xF15 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xEB5 JUMP JUMPDEST PUSH2 0xF1E DUP2 PUSH2 0xEDF JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF43 DUP2 DUP5 PUSH2 0xEF0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF7B DUP3 PUSH2 0xF50 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF8B DUP2 PUSH2 0xF70 JUMP JUMPDEST DUP2 EQ PUSH2 0xF96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFA8 DUP2 PUSH2 0xF82 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFC1 DUP2 PUSH2 0xFAE JUMP JUMPDEST DUP2 EQ PUSH2 0xFCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFDE DUP2 PUSH2 0xFB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFFB JUMPI PUSH2 0xFFA PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1009 DUP6 DUP3 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x101A DUP6 DUP3 DUP7 ADD PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1039 DUP2 PUSH2 0x1024 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1054 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1030 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1063 DUP2 PUSH2 0xFAE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x107E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x105A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x109D JUMPI PUSH2 0x109C PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10AB DUP7 DUP3 DUP8 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x10BC DUP7 DUP3 DUP8 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x10CD DUP7 DUP3 DUP8 ADD PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10ED DUP2 PUSH2 0x10D7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1108 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x10E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1124 JUMPI PUSH2 0x1123 PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP5 DUP3 DUP6 ADD PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1151 JUMPI PUSH2 0x1150 PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x115F DUP5 DUP3 DUP6 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x117F JUMPI PUSH2 0x117E PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x118D DUP6 DUP3 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x119E DUP6 DUP3 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x11EF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1202 JUMPI PUSH2 0x1201 PUSH2 0x11A8 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1242 DUP3 PUSH2 0xFAE JUMP JUMPDEST SWAP2 POP PUSH2 0x124D DUP4 PUSH2 0xFAE JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1265 JUMPI PUSH2 0x1264 PUSH2 0x1208 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D6F636B555344433A204E6F7468696E6720746F206275726E00000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12A1 PUSH1 0x19 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x12AC DUP3 PUSH2 0x126B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12D0 DUP2 PUSH2 0x1294 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1333 PUSH1 0x25 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x133E DUP3 PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1362 DUP2 PUSH2 0x1326 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13C5 PUSH1 0x24 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x13D0 DUP3 PUSH2 0x1369 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x13F4 DUP2 PUSH2 0x13B8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1457 PUSH1 0x22 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1462 DUP3 PUSH2 0x13FB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1486 DUP2 PUSH2 0x144A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14C3 PUSH1 0x1D DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x14CE DUP3 PUSH2 0x148D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14F2 DUP2 PUSH2 0x14B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1555 PUSH1 0x25 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1560 DUP3 PUSH2 0x14F9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1584 DUP2 PUSH2 0x1548 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E7 PUSH1 0x23 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x15F2 DUP3 PUSH2 0x158B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1616 DUP2 PUSH2 0x15DA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1679 PUSH1 0x26 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1684 DUP3 PUSH2 0x161D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16A8 DUP2 PUSH2 0x166C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170B PUSH1 0x21 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1716 DUP3 PUSH2 0x16AF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x173A DUP2 PUSH2 0x16FE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x179D PUSH1 0x22 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x17A8 DUP3 PUSH2 0x1741 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17CC DUP2 PUSH2 0x1790 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1809 PUSH1 0x1F DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1814 DUP3 PUSH2 0x17D3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1838 DUP2 PUSH2 0x17FC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB DUP1 0xC1 PUSH26 0x52BBFDFDE6337CBBE3FE3F03B3B28028FD799FB2393EBC5AD900 CALLDATASIZE 0xCE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"161:496:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98:11;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3242:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5190:286;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3091:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5871:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;378:83:19;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3406:125:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2365:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;467:188:19;;;:::i;:::-;;289:83;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6592:427:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3727:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3974:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2154:98;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;4530:13;4546:12;:10;:12::i;:::-;4530:28;;4568:32;4577:5;4584:7;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;:::o;3242:106::-;3303:7;3329:12;;3322:19;;3242:106;:::o;5190:286::-;5317:4;5333:15;5351:12;:10;:12::i;:::-;5333:30;;5373:38;5389:4;5395:7;5404:6;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;5465:4;5458:11;;;5190:286;;;;;:::o;3091:91::-;3149:5;3173:2;3166:9;;3091:91;:::o;5871:234::-;5959:4;5975:13;5991:12;:10;:12::i;:::-;5975:28;;6013:64;6022:5;6029:7;6066:10;6038:25;6048:5;6055:7;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;:::-;6094:4;6087:11;;;5871:234;;;;:::o;378:83:19:-;428:26;434:10;446:7;428:5;:26::i;:::-;378:83;:::o;3406:125:11:-;3480:7;3506:9;:18;3516:7;3506:18;;;;;;;;;;;;;;;;3499:25;;3406:125;;;:::o;2365:102::-;2421:13;2453:7;2446:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:102;:::o;467:188:19:-;505:18;526:21;536:10;526:9;:21::i;:::-;505:42;;578:1;565:10;:14;557:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;619:29;625:10;637;619:5;:29::i;:::-;495:160;467:188::o;289:83::-;339:26;345:10;357:7;339:5;:26::i;:::-;289:83;:::o;6592:427:11:-;6685:4;6701:13;6717:12;:10;:12::i;:::-;6701:28;;6739:24;6766:25;6776:5;6783:7;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;:::-;7008:4;7001:11;;;;6592:427;;;;:::o;3727:189::-;3806:4;3822:13;3838:12;:10;:12::i;:::-;3822:28;;3860;3870:5;3877:2;3881:6;3860:9;:28::i;:::-;3905:4;3898:11;;;3727:189;;;;:::o;3974:149::-;4063:7;4089:11;:18;4101:5;4089:18;;;;;;;;;;;;;;;:27;4108:7;4089:27;;;;;;;;;;;;;;;;4082:34;;3974:149;;;;:::o;640:96:14:-;693:7;719:10;712:17;;640:96;:::o;10504:370:11:-;10652:1;10635:19;;:5;:19;;;10627:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10732:1;10713:21;;:7;:21;;;10705:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10814:6;10784:11;:18;10796:5;10784:18;;;;;;;;;;;;;;;:27;10803:7;10784:27;;;;;;;;;;;;;;;:36;;;;10851:7;10835:32;;10844:5;10835:32;;;10860:6;10835:32;;;;;;:::i;:::-;;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;11371:17;11351:16;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11347:243;11275:321;11155:441;;;:::o;7473:818::-;7615:1;7599:18;;:4;:18;;;7591:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;7691:1;7677:16;;:2;:16;;;7669:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;7744:38;7765:4;7771:2;7775:6;7744:20;:38::i;:::-;7793:19;7815:9;:15;7825:4;7815:15;;;;;;;;;;;;;;;;7793:37;;7863:6;7848:11;:21;;7840:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;7978:6;7964:11;:20;7946:9;:15;7956:4;7946:15;;;;;;;;;;;;;;;:38;;;;8178:6;8161:9;:13;8171:2;8161:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8225:2;8210:26;;8219:4;8210:26;;;8229:6;8210:26;;;;;;:::i;:::-;;;;;;;;8247:37;8267:4;8273:2;8277:6;8247:19;:37::i;:::-;7581:710;7473:818;;;:::o;9422:659::-;9524:1;9505:21;;:7;:21;;;9497:67;;;;;;;;;;;;:::i;:::-;;;;;;;;;9575:49;9596:7;9613:1;9617:6;9575:20;:49::i;:::-;9635:22;9660:9;:18;9670:7;9660:18;;;;;;;;;;;;;;;;9635:43;;9714:6;9696:14;:24;;9688:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;9831:6;9814:14;:23;9793:9;:18;9803:7;9793:18;;;;;;;;;;;;;;;:44;;;;9946:6;9930:12;;:22;;;;;;;;;;;10004:1;9978:37;;9987:7;9978:37;;;10008:6;9978:37;;;;;;:::i;:::-;;;;;;;;10026:48;10046:7;10063:1;10067:6;10026:19;:48::i;:::-;9487:594;9422:659;;:::o;8567:535::-;8669:1;8650:21;;:7;:21;;;8642:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;8718:49;8747:1;8751:7;8760:6;8718:20;:49::i;:::-;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;;;;;8968:6;8946:9;:18;8956:7;8946:18;;;;;;;;;;;;;;;;:28;;;;;;;;;;;9020:7;8999:37;;9016:1;8999:37;;;9029:6;8999:37;;;;;;:::i;:::-;;;;;;;;9047:48;9075:1;9079:7;9088:6;9047:19;:48::i;:::-;8567:535;;:::o;12180:121::-;;;;:::o;12889:120::-;;;;:::o;7:99:20:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1430:117::-;1539:1;1536;1529:12;1676:126;1713:7;1753:42;1746:5;1742:54;1731:65;;1676:126;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:122::-;1983:24;2001:5;1983:24;:::i;:::-;1976:5;1973:35;1963:63;;2022:1;2019;2012:12;1963:63;1910:122;:::o;2038:139::-;2084:5;2122:6;2109:20;2100:29;;2138:33;2165:5;2138:33;:::i;:::-;2038:139;;;;:::o;2183:77::-;2220:7;2249:5;2238:16;;2183:77;;;:::o;2266:122::-;2339:24;2357:5;2339:24;:::i;:::-;2332:5;2329:35;2319:63;;2378:1;2375;2368:12;2319:63;2266:122;:::o;2394:139::-;2440:5;2478:6;2465:20;2456:29;;2494:33;2521:5;2494:33;:::i;:::-;2394:139;;;;:::o;2539:474::-;2607:6;2615;2664:2;2652:9;2643:7;2639:23;2635:32;2632:119;;;2670:79;;:::i;:::-;2632:119;2790:1;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2761:117;2917:2;2943:53;2988:7;2979:6;2968:9;2964:22;2943:53;:::i;:::-;2933:63;;2888:118;2539:474;;;;;:::o;3019:90::-;3053:7;3096:5;3089:13;3082:21;3071:32;;3019:90;;;:::o;3115:109::-;3196:21;3211:5;3196:21;:::i;:::-;3191:3;3184:34;3115:109;;:::o;3230:210::-;3317:4;3355:2;3344:9;3340:18;3332:26;;3368:65;3430:1;3419:9;3415:17;3406:6;3368:65;:::i;:::-;3230:210;;;;:::o;3446:118::-;3533:24;3551:5;3533:24;:::i;:::-;3528:3;3521:37;3446:118;;:::o;3570:222::-;3663:4;3701:2;3690:9;3686:18;3678:26;;3714:71;3782:1;3771:9;3767:17;3758:6;3714:71;:::i;:::-;3570:222;;;;:::o;3798:619::-;3875:6;3883;3891;3940:2;3928:9;3919:7;3915:23;3911:32;3908:119;;;3946:79;;:::i;:::-;3908:119;4066:1;4091:53;4136:7;4127:6;4116:9;4112:22;4091:53;:::i;:::-;4081:63;;4037:117;4193:2;4219:53;4264:7;4255:6;4244:9;4240:22;4219:53;:::i;:::-;4209:63;;4164:118;4321:2;4347:53;4392:7;4383:6;4372:9;4368:22;4347:53;:::i;:::-;4337:63;;4292:118;3798:619;;;;;:::o;4423:86::-;4458:7;4498:4;4491:5;4487:16;4476:27;;4423:86;;;:::o;4515:112::-;4598:22;4614:5;4598:22;:::i;:::-;4593:3;4586:35;4515:112;;:::o;4633:214::-;4722:4;4760:2;4749:9;4745:18;4737:26;;4773:67;4837:1;4826:9;4822:17;4813:6;4773:67;:::i;:::-;4633:214;;;;:::o;4853:329::-;4912:6;4961:2;4949:9;4940:7;4936:23;4932:32;4929:119;;;4967:79;;:::i;:::-;4929:119;5087:1;5112:53;5157:7;5148:6;5137:9;5133:22;5112:53;:::i;:::-;5102:63;;5058:117;4853:329;;;;:::o;5188:::-;5247:6;5296:2;5284:9;5275:7;5271:23;5267:32;5264:119;;;5302:79;;:::i;:::-;5264:119;5422:1;5447:53;5492:7;5483:6;5472:9;5468:22;5447:53;:::i;:::-;5437:63;;5393:117;5188:329;;;;:::o;5523:474::-;5591:6;5599;5648:2;5636:9;5627:7;5623:23;5619:32;5616:119;;;5654:79;;:::i;:::-;5616:119;5774:1;5799:53;5844:7;5835:6;5824:9;5820:22;5799:53;:::i;:::-;5789:63;;5745:117;5901:2;5927:53;5972:7;5963:6;5952:9;5948:22;5927:53;:::i;:::-;5917:63;;5872:118;5523:474;;;;;:::o;6003:180::-;6051:77;6048:1;6041:88;6148:4;6145:1;6138:15;6172:4;6169:1;6162:15;6189:320;6233:6;6270:1;6264:4;6260:12;6250:22;;6317:1;6311:4;6307:12;6338:18;6328:81;;6394:4;6386:6;6382:17;6372:27;;6328:81;6456:2;6448:6;6445:14;6425:18;6422:38;6419:84;;6475:18;;:::i;:::-;6419:84;6240:269;6189:320;;;:::o;6515:180::-;6563:77;6560:1;6553:88;6660:4;6657:1;6650:15;6684:4;6681:1;6674:15;6701:191;6741:3;6760:20;6778:1;6760:20;:::i;:::-;6755:25;;6794:20;6812:1;6794:20;:::i;:::-;6789:25;;6837:1;6834;6830:9;6823:16;;6858:3;6855:1;6852:10;6849:36;;;6865:18;;:::i;:::-;6849:36;6701:191;;;;:::o;6898:175::-;7038:27;7034:1;7026:6;7022:14;7015:51;6898:175;:::o;7079:366::-;7221:3;7242:67;7306:2;7301:3;7242:67;:::i;:::-;7235:74;;7318:93;7407:3;7318:93;:::i;:::-;7436:2;7431:3;7427:12;7420:19;;7079:366;;;:::o;7451:419::-;7617:4;7655:2;7644:9;7640:18;7632:26;;7704:9;7698:4;7694:20;7690:1;7679:9;7675:17;7668:47;7732:131;7858:4;7732:131;:::i;:::-;7724:139;;7451:419;;;:::o;7876:224::-;8016:34;8012:1;8004:6;8000:14;7993:58;8085:7;8080:2;8072:6;8068:15;8061:32;7876:224;:::o;8106:366::-;8248:3;8269:67;8333:2;8328:3;8269:67;:::i;:::-;8262:74;;8345:93;8434:3;8345:93;:::i;:::-;8463:2;8458:3;8454:12;8447:19;;8106:366;;;:::o;8478:419::-;8644:4;8682:2;8671:9;8667:18;8659:26;;8731:9;8725:4;8721:20;8717:1;8706:9;8702:17;8695:47;8759:131;8885:4;8759:131;:::i;:::-;8751:139;;8478:419;;;:::o;8903:223::-;9043:34;9039:1;9031:6;9027:14;9020:58;9112:6;9107:2;9099:6;9095:15;9088:31;8903:223;:::o;9132:366::-;9274:3;9295:67;9359:2;9354:3;9295:67;:::i;:::-;9288:74;;9371:93;9460:3;9371:93;:::i;:::-;9489:2;9484:3;9480:12;9473:19;;9132:366;;;:::o;9504:419::-;9670:4;9708:2;9697:9;9693:18;9685:26;;9757:9;9751:4;9747:20;9743:1;9732:9;9728:17;9721:47;9785:131;9911:4;9785:131;:::i;:::-;9777:139;;9504:419;;;:::o;9929:221::-;10069:34;10065:1;10057:6;10053:14;10046:58;10138:4;10133:2;10125:6;10121:15;10114:29;9929:221;:::o;10156:366::-;10298:3;10319:67;10383:2;10378:3;10319:67;:::i;:::-;10312:74;;10395:93;10484:3;10395:93;:::i;:::-;10513:2;10508:3;10504:12;10497:19;;10156:366;;;:::o;10528:419::-;10694:4;10732:2;10721:9;10717:18;10709:26;;10781:9;10775:4;10771:20;10767:1;10756:9;10752:17;10745:47;10809:131;10935:4;10809:131;:::i;:::-;10801:139;;10528:419;;;:::o;10953:179::-;11093:31;11089:1;11081:6;11077:14;11070:55;10953:179;:::o;11138:366::-;11280:3;11301:67;11365:2;11360:3;11301:67;:::i;:::-;11294:74;;11377:93;11466:3;11377:93;:::i;:::-;11495:2;11490:3;11486:12;11479:19;;11138:366;;;:::o;11510:419::-;11676:4;11714:2;11703:9;11699:18;11691:26;;11763:9;11757:4;11753:20;11749:1;11738:9;11734:17;11727:47;11791:131;11917:4;11791:131;:::i;:::-;11783:139;;11510:419;;;:::o;11935:224::-;12075:34;12071:1;12063:6;12059:14;12052:58;12144:7;12139:2;12131:6;12127:15;12120:32;11935:224;:::o;12165:366::-;12307:3;12328:67;12392:2;12387:3;12328:67;:::i;:::-;12321:74;;12404:93;12493:3;12404:93;:::i;:::-;12522:2;12517:3;12513:12;12506:19;;12165:366;;;:::o;12537:419::-;12703:4;12741:2;12730:9;12726:18;12718:26;;12790:9;12784:4;12780:20;12776:1;12765:9;12761:17;12754:47;12818:131;12944:4;12818:131;:::i;:::-;12810:139;;12537:419;;;:::o;12962:222::-;13102:34;13098:1;13090:6;13086:14;13079:58;13171:5;13166:2;13158:6;13154:15;13147:30;12962:222;:::o;13190:366::-;13332:3;13353:67;13417:2;13412:3;13353:67;:::i;:::-;13346:74;;13429:93;13518:3;13429:93;:::i;:::-;13547:2;13542:3;13538:12;13531:19;;13190:366;;;:::o;13562:419::-;13728:4;13766:2;13755:9;13751:18;13743:26;;13815:9;13809:4;13805:20;13801:1;13790:9;13786:17;13779:47;13843:131;13969:4;13843:131;:::i;:::-;13835:139;;13562:419;;;:::o;13987:225::-;14127:34;14123:1;14115:6;14111:14;14104:58;14196:8;14191:2;14183:6;14179:15;14172:33;13987:225;:::o;14218:366::-;14360:3;14381:67;14445:2;14440:3;14381:67;:::i;:::-;14374:74;;14457:93;14546:3;14457:93;:::i;:::-;14575:2;14570:3;14566:12;14559:19;;14218:366;;;:::o;14590:419::-;14756:4;14794:2;14783:9;14779:18;14771:26;;14843:9;14837:4;14833:20;14829:1;14818:9;14814:17;14807:47;14871:131;14997:4;14871:131;:::i;:::-;14863:139;;14590:419;;;:::o;15015:220::-;15155:34;15151:1;15143:6;15139:14;15132:58;15224:3;15219:2;15211:6;15207:15;15200:28;15015:220;:::o;15241:366::-;15383:3;15404:67;15468:2;15463:3;15404:67;:::i;:::-;15397:74;;15480:93;15569:3;15480:93;:::i;:::-;15598:2;15593:3;15589:12;15582:19;;15241:366;;;:::o;15613:419::-;15779:4;15817:2;15806:9;15802:18;15794:26;;15866:9;15860:4;15856:20;15852:1;15841:9;15837:17;15830:47;15894:131;16020:4;15894:131;:::i;:::-;15886:139;;15613:419;;;:::o;16038:221::-;16178:34;16174:1;16166:6;16162:14;16155:58;16247:4;16242:2;16234:6;16230:15;16223:29;16038:221;:::o;16265:366::-;16407:3;16428:67;16492:2;16487:3;16428:67;:::i;:::-;16421:74;;16504:93;16593:3;16504:93;:::i;:::-;16622:2;16617:3;16613:12;16606:19;;16265:366;;;:::o;16637:419::-;16803:4;16841:2;16830:9;16826:18;16818:26;;16890:9;16884:4;16880:20;16876:1;16865:9;16861:17;16854:47;16918:131;17044:4;16918:131;:::i;:::-;16910:139;;16637:419;;;:::o;17062:181::-;17202:33;17198:1;17190:6;17186:14;17179:57;17062:181;:::o;17249:366::-;17391:3;17412:67;17476:2;17471:3;17412:67;:::i;:::-;17405:74;;17488:93;17577:3;17488:93;:::i;:::-;17606:2;17601:3;17597:12;17590:19;;17249:366;;;:::o;17621:419::-;17787:4;17825:2;17814:9;17810:18;17802:26;;17874:9;17868:4;17864:20;17860:1;17849:9;17845:17;17838:47;17902:131;18028:4;17902:131;:::i;:::-;17894:139;;17621:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1252200","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2864","burn(uint256)":"infinite","burnAll()":"36156","decimals()":"388","decreaseAllowance(address,uint256)":"infinite","increaseAllowance(address,uint256)":"infinite","mint(uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2505","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnAll()":"9975038c","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","mint(uint256)":"a0712d68","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Mock mintable USDC\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockUSDC.sol\":\"MockUSDC\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/mocks/MockUSDC.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @dev Mock mintable USDC\\ncontract MockUSDC is ERC20 {\\n    constructor() ERC20(\\\"MockUDSC\\\", \\\"MUSDC\\\") {\\n        _mint(msg.sender, 1_000_000E18);\\n    }\\n\\n    function mint(uint256 _amount) external {\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    function burn(uint256 _amount) external {\\n        _burn(msg.sender, _amount);\\n    }\\n\\n    function burnAll() external {\\n        uint256 _balanceOf = balanceOf(msg.sender);\\n        require(_balanceOf > 0, \\\"MockUSDC: Nothing to burn\\\");\\n        _burn(msg.sender, _balanceOf);\\n    }\\n}\\n\",\"keccak256\":\"0x61bfaf33e40f454343e9596b92d243cef6ee3004b64eabf67895c8117d1ce6a5\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2744,"contract":"contracts/mocks/MockUSDC.sol:MockUSDC","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":2750,"contract":"contracts/mocks/MockUSDC.sol:MockUSDC","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":2752,"contract":"contracts/mocks/MockUSDC.sol:MockUSDC","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":2754,"contract":"contracts/mocks/MockUSDC.sol:MockUSDC","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":2756,"contract":"contracts/mocks/MockUSDC.sol:MockUSDC","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}