{"id":"d6782dfbdf474ebddc272ed2310f7e1e","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"contracts/interface/IPaycrest.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n/**\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\n * Factory and global config params\n */\ninterface IPaycrest {\n    \n    /* ##################################################################\n                                EVENTS\n    ################################################################## */\n    /// @dev Emitted when deposit is made.\n    event Deposit(bytes32 indexed orderId, uint256 indexed amount, uint256 indexed rate, bytes32 institutionCode, string messageHash);\n    /// @dev Emitted when aggregator settle transaction.\n    event Settled(bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent);\n    /// @dev Emitted when aggregator refund transaction.\n    event Refunded(bytes32 indexed orderId);\n    /// @dev Emitted when sender get therir rewards.\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\n\n    /* ##################################################################\n                                CUSTOM ERRORS\n    ################################################################## */\n    /// @notice Revert when caller is not an aggregator\n    error OnlyAggregator();\n    /// @notice Revert with invalid signer\n    error InvalidSigner();\n    /// @notice Revert when input amount is zero\n    error Unsuported();\n    /// @notice Revert when trx has been fulfilled\n    error OrderFulfilled();\n    /// @notice Revert when rewards are not been distributed.\n    error UnableToProcessRewards();\n    error InvalidInstitutionCode();\n    error NotWhitelisted();\n\n    /* ##################################################################\n                                STRUCTS\n    ################################################################## */\n    struct TransactionMetadata {\n        bytes8 identifier;                 //                                                                   slot 0\n        bytes8 institution;                //                                                                   slot 0\n        bytes8 name;                       //                                                                   slot 0\n        bytes8 currency;                   //                                                                   slot 0\n        uint256 liquidityProviderID;       //                                                                   slot 1\n    }\n\n    struct Order {\n        address seller;                     //                                                                   slot 0\n        address token;                      //                                                                   slot 1\n        address senderFeeRecipient;\n        uint256 senderFee;\n        uint96 rate;                        //                                                                   slot 1\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\n        uint96 currentBPS;                  //                                                                   slot 2 {}\n        uint256 amount;                     //                                                                   slot 3\n    }\n\n\n    /* ##################################################################\n                                EXTERNAL CALLS\n    ################################################################## */\n    /// @notice lock sender `_amount` of `token` into Paycrest.\n    /// Requirements:\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\n    /// `amount` must be greater than minimum\n    /// `_refundable` refundable address must not be zero address\n    /// @param _token address of the token.\n    /// @param _amount amount in the decimal of `_token` above.\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\n    /// @return _orderId the bytes20 which is the orderId\n    function createOrder(address _token, \n        uint256 _amount, \n        bytes32 _institutionCode,\n        uint96 _rate, \n        address _senderFeeRecipient,\n        uint256 _senderFee,\n        address _refundAddress, \n        string calldata messageHash)  external returns(bytes32 _orderId);\n\n    /// @notice settle transaction and distribute rewards accordingly.\n    /// Requirements:\n    /// {only aggregators call}.\n    /// `_orderId` it must be less than total ids.\n    /// `_orderId` it must be an open Id.\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\n    /// `amount` must be greater than minimum\n    /// `_refundable` refundable address must not be zero address\n    /// @param _orderId transaction Id.\n    /// @param _primaryValidator address primary validator.\n    /// @param _secondaryValidators arrays of secondary validators.\n    /// @param _liquidityProvider address of the liquidity provider.\n    /// @param _settlePercent rate at which the transaction is settled.\n    /// @return return the status of transaction {bool}\n    function settle(bytes32 _orderId, address _primaryValidator, address[] calldata _secondaryValidators, address _liquidityProvider, uint96 _settlePercent)  external returns(bool);\n\n    /// @notice refund to the specified refundable address.\n    /// Requirements:\n    /// {only aggregators call}.\n    /// `_orderId` it must be less than total ids.\n    /// `_orderId` it must be an open Id.\n    /// `isFulfilled` must be false.\n    /// @param _orderId transaction Id.\n    /// @return return the status of transaction {bool}\n    function refund(bytes32 _orderId)  external returns(bool);\n\n    /// @notice get supported token from Paycrest.\n    /// @param _token address of the token to check.\n    /// @return return the status of `_token` {bool}\n    function isTokenSupported(address _token) external view returns(bool);\n\n    /// @notice get order details.\n    /// @param _orderId transaction Id.\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\n\n    /// @notice get every rewards and address on Paycrest.\n    /// @return protocolReward amount that will be taken in percentage on all trade.\n    /// @return primaryValidatorReward amount that will be given to primary validator in percentage from `protocolReward`\n    /// @return secondaryValidatorReward amount that will be shared between secondary validator in percentage from `protocolReward`\n    /// @return max_bps maximum amount in bps \"100% == 100_000\".\n    function getFeeDetails() external view returns(\n        uint64 protocolReward, \n        uint64 primaryValidatorReward, \n        uint64 secondaryValidatorReward,\n        uint256 max_bps\n    );\n\n    /// @notice get address of liquidity aggregator.\n    /// @return address of `liquidityAggregator`.\n    function getLiquidityAggregator() external view returns(address);\n\n    \n    /// @notice get address of sender whitelisting status.\n    /// @param sender address of the sender.\n    /// @return address of `status`.\n    function getWhitelistedStatus(address sender) external view returns(bool);\n\n}\n"},"contracts/interface/IPaycrestStake.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\n\n/**\n * @author Chef Photons, Vaultka Team serving high quality drinks; drink responsibly.\n * Factory and global config params\n */\ninterface IPaycrestStake {\n    \n    function rewardValidators(bytes32 orderId, address token, address primaryValidator, address[] memory secondaryValidators, uint256 primaryValidatorsReward, uint256 secondaryValidatorsReward) external returns(bool);\n    \n}\n"},"contracts/interface/IPaycrestValidator.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\n\n/**\n * @author Chef Photons, Vaultka Team serving high quality drinks; drink responsibly.\n * Factory and global config params\n */\ninterface IPaycrestValidator {\n    function rewardValidators(bytes32 orderId, address token, address primaryValidator, address[] memory secondaryValidators, uint256 primaryValidatorsReward, uint256 secondaryValidatorsReward) external returns(bool);\n}\n"},"contracts/mocks/MockUSDC.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/// @dev Mock mintable USDC\ncontract MockUSDC is ERC20 {\n    constructor() ERC20(\"MockUDSC\", \"MUSDC\") {}\n\n    function decimals() public view virtual override returns (uint8) {\n        return 6;\n    }\n\n    function mint(uint256 _amount) external {\n        _mint(msg.sender, _amount);\n    }\n\n    function burn(uint256 _amount) external {\n        _burn(msg.sender, _amount);\n    }\n\n    function burnAll() external {\n        uint256 _balanceOf = balanceOf(msg.sender);\n        require(_balanceOf > 0, \"MockUSDC: Nothing to burn\");\n        _burn(msg.sender, _balanceOf);\n    }\n}\n"},"contracts/Paycrest.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport {PaycrestSettingManager} from \"./PaycrestSettingManager.sol\";\nimport {IPaycrestStake} from \"./interface/IPaycrestStake.sol\";\nimport {IPaycrest, IERC20} from \"./interface/IPaycrest.sol\";\ncontract Paycrest is IPaycrest, PaycrestSettingManager { \n    using SafeERC20Upgradeable for IERC20;\n    using ECDSAUpgradeable for bytes32;\n    struct fee {\n        uint256 protocolFee;\n        uint256 liquidityProviderAmount;\n        uint256 primaryValidatorReward;\n        uint256 secondaryValidatorsReward;\n    }\n    mapping(bytes32 => Order) private order;\n    mapping(address => uint256) private _nonce;\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address _usdc) external initializer {    \n        _isTokenSupported[_usdc] = true;    \n        __Ownable_init();\n    }\n    // constructor(address _usdc) {\n    //     _isTokenSupported[_usdc] = true;\n    // }\n\n    modifier onlyAggregator {\n        if(msg.sender != _liquidityAggregator) revert OnlyAggregator();\n        _;\n    }\n    \n    /* ##################################################################\n                                USER CALLS\n    ################################################################## */\n    /** @dev See {createOrder-IPaycrest}. */\n    function createOrder(\n        address _token, \n        uint256 _amount, \n        bytes32 _institutionCode,\n        uint96 _rate, \n        address _senderFeeRecipient,\n        uint256 _senderFee,\n        address _refundAddress, \n        string calldata messageHash\n    )  external returns(bytes32 orderId) {\n        // sender must be a whitelisted address\n        // if(!_isWhitelisted[msg.sender]) revert NotWhitelisted();\n        // checks that are required\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _institutionCode);\n        // first transfer token from msg.sender\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n        // increase users nonce to avoid replay attacks\n        _nonce[msg.sender] ++;\n        // generate transaction id for the transaction\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\n        // update transaction\n        order[orderId] = Order({\n            seller: msg.sender,\n            token: _token,\n            senderFeeRecipient: _senderFeeRecipient,\n            senderFee: _senderFee,\n            rate: _rate,\n            isFulfilled: false,\n            refundAddress: _refundAddress,\n            currentBPS: uint96(MAX_BPS),\n            amount: _amount\n        });\n        // emit deposit event\n        emit Deposit(orderId, _amount, _rate, _institutionCode, messageHash);\n    }\n\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, bytes32 _institutionCode) internal view {\n        if(!_isTokenSupported[_token]) revert TokenNotSupported();\n        if(_amount == 0) revert AmountIsZero();\n        if(_refundAddress == address(0)) revert ThrowZeroAddress();\n        if(_senderFeeRecipient == address(0)) revert ThrowZeroAddress();\n        if(supportedInstitutionsByCode[_institutionCode].name == bytes32(0)) revert InvalidInstitutionCode();\n    }\n\n    /* ##################################################################\n                                AGGREGATOR FUNCTIONS\n    ################################################################## */\n    /** @dev See {settle-IPaycrest}. */\n    function settle(\n        bytes32 _orderId, \n        address _primaryValidator, \n        address[] calldata _secondaryValidators, \n        address _liquidityProvider, \n        uint96 _settlePercent\n        )  external onlyAggregator() returns(bool) {\n        // ensure the transaction has not been fulfilled\n        if(order[_orderId].isFulfilled) revert OrderFulfilled();\n        // load the token into memory\n        address token = order[_orderId].token;\n        // substract sum of amount based on the input _settlePercent\n        order[_orderId].currentBPS -= _settlePercent;\n        // if transaction amount is zero\n        if(order[_orderId].currentBPS == 0) {\n            // update the transaction to be fulfilled\n            order[_orderId].isFulfilled = true;\n        }\n\n        // load the fees and transfer associated protocol fees to protocol fee recipient\n        ( fee memory _feeParams  ) = _calculateFees(_orderId, _settlePercent);\n        uint256 _fee = order[_orderId].senderFee;\n        if (_fee > 0) {\n            // transfer sender fee\n            transferSenderFee(_orderId);\n        }\n        // transfer protocol fee\n        IERC20(token).transfer(feeRecipient, _feeParams.protocolFee);\n        // // transfer to liquidity provider \n        IERC20(token).transfer(_liquidityProvider, _feeParams.liquidityProviderAmount);\n        IERC20(token).transfer(address(PaycrestStakingContract), (_feeParams.primaryValidatorReward + _feeParams.secondaryValidatorsReward));\n        // // distribute rewards\n        bool status = IPaycrestStake(PaycrestStakingContract).rewardValidators(\n            _orderId,\n            token,\n            _primaryValidator, \n            _secondaryValidators, \n            _feeParams.primaryValidatorReward, \n            _feeParams.secondaryValidatorsReward\n        );\n        if(!status) revert UnableToProcessRewards();\n        // emit event\n        emit Settled(_orderId, _liquidityProvider, _settlePercent);\n        return true;\n    }\n\n    function transferSenderFee(bytes32 _orderId) internal {\n        address recipient = order[_orderId].senderFeeRecipient;\n        uint256 _fee = order[_orderId].senderFee;\n        // transfer sender fee\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\n        // emmit event\n        emit TransferSenderFee(recipient, _fee);\n    }\n\n    /** @dev See {refund-IPaycrest}. */\n    function refund(bytes32 _orderId)  external onlyAggregator() returns(bool) {\n        // ensure the transaction has not been fulfilled\n        if(order[_orderId].isFulfilled) revert OrderFulfilled();\n        // reser state values\n        order[_orderId].isFulfilled = true;\n        order[_orderId].currentBPS = 0;\n        // transfer to seller \n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, order[_orderId].amount);\n        // emit\n        emit Refunded(_orderId);\n        return true;\n    }\n\n    function _calculateFees(bytes32 _orderId, uint96 _settlePercent) private view returns(fee memory _feeParams ) {\n        // get the total amount associated with the orderId\n        uint256 amount = order[_orderId].amount;\n        // get sender fee from amount\n        amount = amount - order[_orderId].senderFee;\n        // get the settled percent that is scheduled for this amount\n        _feeParams.liquidityProviderAmount = (amount * _settlePercent) / MAX_BPS;\n        // deduct protocol fees from the new total amount\n        _feeParams.protocolFee = (_feeParams.liquidityProviderAmount * protocolFeePercent) / MAX_BPS; \n        // substract total fees from the new amount after getting the scheduled amount\n        _feeParams.liquidityProviderAmount = (_feeParams.liquidityProviderAmount - _feeParams.protocolFee);\n        // get primary validators fees primaryValidatorsReward\n        _feeParams.primaryValidatorReward = (_feeParams.protocolFee * primaryValidatorFeePercent) / MAX_BPS;\n        // get primary validators fees secondaryValidatorsReward\n        _feeParams.secondaryValidatorsReward = (_feeParams.protocolFee * secondaryValidatorFeePercent) / MAX_BPS;\n        // update new protocol fee\n        _feeParams.protocolFee = _feeParams.protocolFee - (_feeParams.primaryValidatorReward + _feeParams.secondaryValidatorsReward);\n    }\n    \n    /* ##################################################################\n                                VIEW CALLS\n    ################################################################## */\n    /** @dev See {getOrderInfo-IPaycrest}. */\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\n        return order[_orderId];\n    }\n\n    /** @dev See {isTokenSupported-IPaycrest}. */\n    function isTokenSupported(address _token) external view returns(bool) {\n        return _isTokenSupported[_token];\n    }\n\n    /** @dev See {getSupportedInstitutionName-IPaycrest}. */\n    function getSupportedInstitutionName(bytes32 code) external view returns (InstitutionByCode memory) {\n        return supportedInstitutionsByCode[code];\n    }\n\n    function getSupportedInstitutions(bytes32 currency) external view returns (Institution[] memory) {\n        Institution[] memory institutions = supportedInstitutions[currency];\n        uint256 length = institutions.length;\n        Institution[] memory result = new Institution[](length);\n        \n        for (uint256 i = 0; i < length; ) {\n            result[i] = institutions[i];\n            unchecked {\n                i++;\n            }\n        }\n        \n        return result;\n    }\n\n    /** @dev See {getFeeDetails-IPaycrest}. */\n    function getFeeDetails() external view returns(\n        uint64, \n        uint64, \n        uint64,\n        uint256\n    ) {\n        return(protocolFeePercent, primaryValidatorFeePercent, secondaryValidatorFeePercent, MAX_BPS);\n    }\n\n    /** @dev See {getLiquidityAggregator-IPaycrest}. */\n    function getLiquidityAggregator() external view returns(address) {\n        return _liquidityAggregator;\n    }\n\n    /** @dev See {getWhitelistedStatus-IPaycrest}. */\n    function getWhitelistedStatus(address sender) external view returns(bool) {\n        return _isWhitelisted[sender];\n    }\n\n}\n"},"contracts/PaycrestSettingManager.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract PaycrestSettingManager is OwnableUpgradeable { \n    struct Institution {\n        bytes32 code; // usually not more than 8 letters\n        bytes32 name; // \n    }\n    struct InstitutionByCode {\n        bytes32 name;\n        bytes32 currency;\n    }\n    uint256 internal MAX_BPS = 100_000;\n    uint64 internal protocolFeePercent = 5000; // 5%\n    uint64 internal primaryValidatorFeePercent = 500; // 0.5%\n    uint64 internal secondaryValidatorFeePercent = 500; // 0.5%\n    address internal feeRecipient;\n    address internal PaycrestStakingContract;\n    address internal _liquidityAggregator;\n\n    mapping(address => bool) internal _isTokenSupported;\n    mapping(address => bool) internal _isWhitelisted;\n\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\n\n    /// @notice Revert when zero address is passed in\n    error ThrowZeroAddress();\n    /// @notice Revert when zero address is passed in\n    error ThrowZeroValue();\n    /// @notice Revert when zero address is passed in\n    error InvalidParameter(bytes32 what);\n    /// @notice Revert when invalid token is provided\n    error TokenNotSupported();\n    /// @notice Revert when input amount is zero\n    error AmountIsZero();\n\n    event SettingManagerBool(bytes32 what, address value, bool status);\n    event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status);\n    event PaycrestFees(uint64 protocolFee, uint64 primaryValidator, uint64 secondaryValidator);\n    \n    /* ##################################################################\n                                OWNER FUNCTIONS\n    ################################################################## */\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\n        if (value == address(0)) revert ThrowZeroAddress();\n        if (what == \"token\") _isTokenSupported[value] = status;\n        if (what == \"whitelist\") _isWhitelisted[value] = status;\n        else revert InvalidParameter(what);\n        emit SettingManagerBool(what, value, status);\n    }\n\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \n        uint256 length = institutions.length;\n        for (uint i = 0; i < length; ) {\n            supportedInstitutions[currency].push(institutions[i]);\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\n                name: institutions[i].name, currency: currency\n            });\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function updateProtocolFees(uint64 _protocolFeePercent, uint64 _primaryValidatorPercent, uint64 _secondaryValidatorPercent) external onlyOwner {\n        protocolFeePercent = _protocolFeePercent;\n        primaryValidatorFeePercent = _primaryValidatorPercent;\n        secondaryValidatorFeePercent = _secondaryValidatorPercent;\n        emit PaycrestFees(_protocolFeePercent, _primaryValidatorPercent, _secondaryValidatorPercent);\n    }\n\n    function updateFeeRecipient(bytes32 what, address value) external onlyOwner {\n        if (value == address(0)) revert ThrowZeroAddress();\n        if (what == \"fee\") feeRecipient = value;\n        if (what == \"aggregator\") _liquidityAggregator = value;\n        else if (what == \"stake\") PaycrestStakingContract = value;\n    }\n\n}\n"},"contracts/PaycrestValidator.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\nimport  \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\ncontract PaycrestValidator is OwnableUpgradeable, ReentrancyGuardUpgradeable { \n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    \n    address private Paycrest;    \n    bool private initialization;\n    mapping(address => uint256) private minimumAmount;\n    mapping(address => mapping (address => uint256)) private _balance;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address _paycrest) external initializer {    \n        Paycrest = _paycrest;   \n        initialization = true;\n        __Ownable_init();\n        __ReentrancyGuard_init();\n    }\n\n    event NewTokenSupported(address indexed token, uint256 indexed minimumStakeAmount);\n    event Initialized(bool indexed status);\n    event Staked(address indexed user, uint256 indexed amount);\n    event Withdrawn(address indexed user, uint256 indexed amount);\n    event RewardValidators(\n        bytes32 orderId, \n        address token, \n        address indexed validator, \n        uint256 indexed validatorsReward\n    );\n\n    error ThrowInitPaused();\n    error TokenNotSupported();\n    error MinimumRequired();\n    error Insufficient();\n    error ThrowPaycrest();\n\n    modifier OnlyPaycrest() {\n        if(msg.sender != Paycrest) revert ThrowPaycrest();\n        _;\n    }\n\n    function setMinimumAmountForTokens(address _token, uint256 minimumStakeAmount) external onlyOwner {\n        minimumAmount[_token] = minimumStakeAmount;\n        emit NewTokenSupported(_token, minimumStakeAmount);\n    }\n\n    function initialized(bool status) external onlyOwner {\n        initialization = status;\n        emit Initialized(status);\n    }\n\n    function stake(address token, uint256 amount)  external {\n        if(!initialization) revert ThrowInitPaused();\n        if(!_isTokenSupported(token)) revert TokenNotSupported();\n        if(amount < minimumAmount[token]) revert MinimumRequired();\n        IERC20Upgradeable(token).transferFrom(msg.sender, address(this), amount);\n        _balance[msg.sender][token] += amount;\n        emit Staked(msg.sender, amount);\n    }\n\n    function withdraw(uint256 amount, address token, address recipient) external nonReentrant() {\n        uint256 previouslyStakedAmount = _balance[msg.sender][token];\n        if(amount > previouslyStakedAmount) revert Insufficient();\n        _balance[msg.sender][token] -= amount;\n        IERC20Upgradeable(token).transfer(recipient, amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    function rewardValidators(\n        bytes32 orderId, \n        address token, \n        address primaryValidator, \n        address[] memory secondaryValidators,\n        uint256 primaryValidatorsReward, \n        uint256 secondaryValidatorsReward\n    ) external OnlyPaycrest() returns(bool) {\n        uint256 lengthOfSecondaryValidators = secondaryValidators.length;\n        uint256 secondaryValidatorsShares = secondaryValidatorsReward / lengthOfSecondaryValidators;\n        for(uint256 i = 0; i < lengthOfSecondaryValidators; ) {\n            _balance[secondaryValidators[i]][token] += secondaryValidatorsShares;\n            emit RewardValidators(orderId, token, secondaryValidators[i], secondaryValidatorsShares);\n            unchecked {\n                i++;\n            }\n        }\n        _balance[primaryValidator][token] += primaryValidatorsReward;\n        emit RewardValidators(orderId, token, primaryValidator, primaryValidatorsReward);\n        return true;\n    }\n\n\n    function _isTokenSupported(address token) private view returns(bool) {\n        (, bytes memory result) = Paycrest.staticcall(abi.encodeWithSignature(\"isTokenSupported(address)\", token));\n        return abi.decode(result, (bool));\n    }\n\n    function getPaycrest() external view returns(address) {\n        return Paycrest;\n    }\n\n    function getInitializationState() external view returns(bool) {\n        return initialization;\n    }\n\n    function getMinimumAmountRequiredFor(address token) external view returns(uint256) {\n        return minimumAmount[token];\n    }\n\n    function getValidatorInfo(address user, address token) external view returns(uint256) {\n        return _balance[user][token];\n    }\n\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1204],"ContextUpgradeable":[1246],"Initializable":[300],"OwnableUpgradeable":[131]},"id":132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":1247,"src":"127:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":301,"src":"169:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Initializable","nameLocations":["748:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"748:13:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"748:13:0"},{"baseName":{"id":7,"name":"ContextUpgradeable","nameLocations":["763:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":1246,"src":"763:18:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"763:18:0"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"213:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":131,"linearizedBaseContracts":[131,1246,300],"name":"OwnableUpgradeable","nameLocation":"726:18:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":10,"mutability":"mutable","name":"_owner","nameLocation":"804:6:0","nodeType":"VariableDeclaration","scope":131,"src":"788:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":16,"name":"OwnershipTransferred","nameLocation":"823:20:0","nodeType":"EventDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:0","nodeType":"VariableDeclaration","scope":16,"src":"844:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:0","nodeType":"VariableDeclaration","scope":16,"src":"875:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:0"},"src":"817:84:0"},{"body":{"id":25,"nodeType":"Block","src":"1055:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"1065:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"1065:26:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"907:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":26,"implemented":true,"kind":"function","modifiers":[{"id":20,"kind":"modifierInvocation","modifierName":{"id":19,"name":"onlyInitializing","nameLocations":["1038:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1038:16:0"},"nodeType":"ModifierInvocation","src":"1038:16:0"}],"name":"__Ownable_init","nameLocation":"1012:14:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"1026:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"1055:0:0"},"scope":131,"src":"1003:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":36,"nodeType":"Block","src":"1166:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":32,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"1195:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":31,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"1176:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"1176:32:0"}]},"id":37,"implemented":true,"kind":"function","modifiers":[{"id":29,"kind":"modifierInvocation","modifierName":{"id":28,"name":"onlyInitializing","nameLocations":["1149:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1149:16:0"},"nodeType":"ModifierInvocation","src":"1149:16:0"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"1137:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"1166:0:0"},"scope":131,"src":"1104:111:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":44,"nodeType":"Block","src":"1324:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":40,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1334:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"ExpressionStatement","src":"1334:13:0"},{"id":43,"nodeType":"PlaceholderStatement","src":"1357:1:0"}]},"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"1221:77:0","text":" @dev Throws if called by any account other than the owner."},"id":45,"name":"onlyOwner","nameLocation":"1312:9:0","nodeType":"ModifierDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"1321:2:0"},"src":"1303:62:0","virtual":false,"visibility":"internal"},{"body":{"id":53,"nodeType":"Block","src":"1496:30:0","statements":[{"expression":{"id":51,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1513:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":50,"id":52,"nodeType":"Return","src":"1506:13:0"}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1371:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":54,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[],"src":"1455:2:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1487:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:0"},"scope":131,"src":"1441:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":67,"nodeType":"Block","src":"1644:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":59,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1662:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":61,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"1673:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":58,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1654:68:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1532:62:0","text":" @dev Throws if the sender is not the owner."},"id":68,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1619:2:0"},"returnParameters":{"id":57,"nodeType":"ParameterList","parameters":[],"src":"1644:0:0"},"scope":131,"src":"1599:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":81,"nodeType":"Block","src":"2118:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":77,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":76,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2147:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:0","typeDescriptions":{}}},"id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2147:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":74,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2128:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"ExpressionStatement","src":"2128:30:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1735:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":82,"implemented":true,"kind":"function","modifiers":[{"id":72,"kind":"modifierInvocation","modifierName":{"id":71,"name":"onlyOwner","nameLocations":["2108:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2108:9:0"},"nodeType":"ModifierInvocation","src":"2108:9:0"}],"name":"renounceOwnership","nameLocation":"2073:17:0","nodeType":"FunctionDefinition","parameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"2090:2:0"},"returnParameters":{"id":73,"nodeType":"ParameterList","parameters":[],"src":"2118:0:0"},"scope":131,"src":"2064:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":104,"nodeType":"Block","src":"2384:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":91,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2402:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2422:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"2414:7:0","typeDescriptions":{}}},"id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2402:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":97,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":90,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2394:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":99,"nodeType":"ExpressionStatement","src":"2394:73:0"},{"expression":{"arguments":[{"id":101,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2496:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2477:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":103,"nodeType":"ExpressionStatement","src":"2477:28:0"}]},"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"2171:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":105,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2374:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2374:9:0"},"nodeType":"ModifierInvocation","src":"2374:9:0"}],"name":"transferOwnership","nameLocation":"2323:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"newOwner","nameLocation":"2349:8:0","nodeType":"VariableDeclaration","scope":105,"src":"2341:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2340:18:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2384:0:0"},"scope":131,"src":"2314:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":124,"nodeType":"Block","src":"2729:124:0","statements":[{"assignments":[112],"declarations":[{"constant":false,"id":112,"mutability":"mutable","name":"oldOwner","nameLocation":"2747:8:0","nodeType":"VariableDeclaration","scope":124,"src":"2739:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":114,"initialValue":{"id":113,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2758:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2739:25:0"},{"expression":{"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":115,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2774:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":116,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2783:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2774:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":118,"nodeType":"ExpressionStatement","src":"2774:17:0"},{"eventCall":{"arguments":[{"id":120,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"2827:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":121,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2837:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":119,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"2806:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":123,"nodeType":"EmitStatement","src":"2801:45:0"}]},"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2518:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":125,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2675:18:0","nodeType":"FunctionDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"newOwner","nameLocation":"2702:8:0","nodeType":"VariableDeclaration","scope":125,"src":"2694:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:18:0"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[],"src":"2729:0:0"},"scope":131,"src":"2666:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"2859:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":130,"mutability":"mutable","name":"__gap","nameLocation":"3138:5:0","nodeType":"VariableDeclaration","scope":131,"src":"3118:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":129,"length":{"hexValue":"3439","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3126:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3118:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":132,"src":"708:2438:0","usedErrors":[]}],"src":"102:3045:0"},"id":0},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1204],"Initializable":[300]},"id":301,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":133,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":134,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":301,"sourceUnit":1205,"src":"138:44:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"184:2209:1","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":300,"linearizedBaseContracts":[300],"name":"Initializable","nameLocation":"2412:13:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":136,"nodeType":"StructuredDocumentation","src":"2432:109:1","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":138,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:1","nodeType":"VariableDeclaration","scope":300,"src":"2546:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":137,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"2579:91:1","text":" @dev Indicates that the contract is in the process of being initialized."},"id":141,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:1","nodeType":"VariableDeclaration","scope":300,"src":"2675:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":140,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":142,"nodeType":"StructuredDocumentation","src":"2708:90:1","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":146,"name":"Initialized","nameLocation":"2809:11:1","nodeType":"EventDefinition","parameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":144,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:1","nodeType":"VariableDeclaration","scope":146,"src":"2821:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":143,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:1"},"src":"2803:33:1"},{"body":{"id":201,"nodeType":"Block","src":"3269:483:1","statements":[{"assignments":[150],"declarations":[{"constant":false,"id":150,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:1","nodeType":"VariableDeclaration","scope":201,"src":"3279:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":149,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":153,"initialValue":{"id":152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:1","subExpression":{"id":151,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3302:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":155,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3347:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":156,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3365:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":160,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:1","subExpression":{"arguments":[{"arguments":[{"id":165,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$300","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$300","typeString":"contract Initializable"}],"id":164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:1","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":161,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"3388:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1204_$","typeString":"type(library AddressUpgradeable)"}},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:1","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":892,"src":"3388:29:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":169,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3436:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":173,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":154,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":177,"nodeType":"ExpressionStatement","src":"3325:201:1"},{"expression":{"id":180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":178,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3536:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":181,"nodeType":"ExpressionStatement","src":"3536:16:1"},{"condition":{"id":182,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3566:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":188,"nodeType":"IfStatement","src":"3562:65:1","trueBody":{"id":187,"nodeType":"Block","src":"3582:45:1","statements":[{"expression":{"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":183,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3596:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":186,"nodeType":"ExpressionStatement","src":"3596:20:1"}]}},{"id":189,"nodeType":"PlaceholderStatement","src":"3636:1:1"},{"condition":{"id":190,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3651:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":200,"nodeType":"IfStatement","src":"3647:99:1","trueBody":{"id":199,"nodeType":"Block","src":"3667:79:1","statements":[{"expression":{"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":191,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3681:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":194,"nodeType":"ExpressionStatement","src":"3681:21:1"},{"eventCall":{"arguments":[{"hexValue":"31","id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":195,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"3721:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":198,"nodeType":"EmitStatement","src":"3716:19:1"}]}}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"2842:399:1","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":202,"name":"initializer","nameLocation":"3255:11:1","nodeType":"ModifierDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[],"src":"3266:2:1"},"src":"3246:506:1","virtual":false,"visibility":"internal"},{"body":{"id":234,"nodeType":"Block","src":"4863:255:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:1","subExpression":{"id":208,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"4882:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":210,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"4899:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":211,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"4914:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":207,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":216,"nodeType":"ExpressionStatement","src":"4873:99:1"},{"expression":{"id":219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":217,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"4982:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":218,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"4997:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":220,"nodeType":"ExpressionStatement","src":"4982:22:1"},{"expression":{"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":221,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5014:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":224,"nodeType":"ExpressionStatement","src":"5014:20:1"},{"id":225,"nodeType":"PlaceholderStatement","src":"5044:1:1"},{"expression":{"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":226,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5055:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":229,"nodeType":"ExpressionStatement","src":"5055:21:1"},{"eventCall":{"arguments":[{"id":231,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"5103:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":230,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"5091:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":233,"nodeType":"EmitStatement","src":"5086:25:1"}]},"documentation":{"id":203,"nodeType":"StructuredDocumentation","src":"3758:1062:1","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":235,"name":"reinitializer","nameLocation":"4834:13:1","nodeType":"ModifierDefinition","parameters":{"id":206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"version","nameLocation":"4854:7:1","nodeType":"VariableDeclaration","scope":235,"src":"4848:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":204,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:1"},"src":"4825:293:1","virtual":false,"visibility":"internal"},{"body":{"id":244,"nodeType":"Block","src":"5356:97:1","statements":[{"expression":{"arguments":[{"id":239,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5374:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":238,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":242,"nodeType":"ExpressionStatement","src":"5366:69:1"},{"id":243,"nodeType":"PlaceholderStatement","src":"5445:1:1"}]},"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"5124:199:1","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":245,"name":"onlyInitializing","nameLocation":"5337:16:1","nodeType":"ModifierDefinition","parameters":{"id":237,"nodeType":"ParameterList","parameters":[],"src":"5353:2:1"},"src":"5328:125:1","virtual":false,"visibility":"internal"},{"body":{"id":280,"nodeType":"Block","src":"5988:231:1","statements":[{"expression":{"arguments":[{"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:1","subExpression":{"id":250,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"6007:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":249,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"ExpressionStatement","src":"5998:66:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":255,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6078:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":257,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":256,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:1","memberName":"max","nodeType":"MemberAccess","src":"6094:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":279,"nodeType":"IfStatement","src":"6074:139:1","trueBody":{"id":278,"nodeType":"Block","src":"6111:102:1","statements":[{"expression":{"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":262,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6125:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":264,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":263,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:1","memberName":"max","nodeType":"MemberAccess","src":"6140:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":269,"nodeType":"ExpressionStatement","src":"6125:30:1"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":272,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":271,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:1","memberName":"max","nodeType":"MemberAccess","src":"6186:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":270,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"6174:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":277,"nodeType":"EmitStatement","src":"6169:33:1"}]}}]},"documentation":{"id":246,"nodeType":"StructuredDocumentation","src":"5459:475:1","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":281,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:1","nodeType":"FunctionDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[],"src":"5968:2:1"},"returnParameters":{"id":248,"nodeType":"ParameterList","parameters":[],"src":"5988:0:1"},"scope":300,"src":"5939:280:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":289,"nodeType":"Block","src":"6393:36:1","statements":[{"expression":{"id":287,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6410:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":286,"id":288,"nodeType":"Return","src":"6403:19:1"}]},"documentation":{"id":282,"nodeType":"StructuredDocumentation","src":"6225:99:1","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":290,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:1","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[],"src":"6360:2:1"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":290,"src":"6386:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":284,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:1"},"scope":300,"src":"6329:100:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":298,"nodeType":"Block","src":"6601:37:1","statements":[{"expression":{"id":296,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"6618:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":295,"id":297,"nodeType":"Return","src":"6611:20:1"}]},"documentation":{"id":291,"nodeType":"StructuredDocumentation","src":"6435:105:1","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":299,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:1","nodeType":"FunctionDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[],"src":"6569:2:1"},"returnParameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":299,"src":"6595:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":293,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:1"},"scope":300,"src":"6545:93:1","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":301,"src":"2394:4246:1","usedErrors":[]}],"src":"113:6528:1"},"id":1},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1204],"Initializable":[300],"ReentrancyGuardUpgradeable":[384]},"id":385,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":302,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":303,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":301,"src":"136:42:2","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":305,"name":"Initializable","nameLocations":["979:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"979:13:2"},"id":306,"nodeType":"InheritanceSpecifier","src":"979:13:2"}],"canonicalName":"ReentrancyGuardUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":304,"nodeType":"StructuredDocumentation","src":"180:750:2","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":384,"linearizedBaseContracts":[384,300],"name":"ReentrancyGuardUpgradeable","nameLocation":"949:26:2","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":309,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1772:12:2","nodeType":"VariableDeclaration","scope":384,"src":"1747:41:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":307,"name":"uint256","nodeType":"ElementaryTypeName","src":"1747:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1787:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":312,"mutability":"constant","name":"_ENTERED","nameLocation":"1819:8:2","nodeType":"VariableDeclaration","scope":384,"src":"1794:37:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":310,"name":"uint256","nodeType":"ElementaryTypeName","src":"1794:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1830:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":314,"mutability":"mutable","name":"_status","nameLocation":"1854:7:2","nodeType":"VariableDeclaration","scope":384,"src":"1838:23:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":313,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":322,"nodeType":"Block","src":"1928:51:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":319,"name":"__ReentrancyGuard_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"1938:32:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":321,"nodeType":"ExpressionStatement","src":"1938:34:2"}]},"id":323,"implemented":true,"kind":"function","modifiers":[{"id":317,"kind":"modifierInvocation","modifierName":{"id":316,"name":"onlyInitializing","nameLocations":["1911:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1911:16:2"},"nodeType":"ModifierInvocation","src":"1911:16:2"}],"name":"__ReentrancyGuard_init","nameLocation":"1877:22:2","nodeType":"FunctionDefinition","parameters":{"id":315,"nodeType":"ParameterList","parameters":[],"src":"1899:2:2"},"returnParameters":{"id":318,"nodeType":"ParameterList","parameters":[],"src":"1928:0:2"},"scope":384,"src":"1868:111:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":332,"nodeType":"Block","src":"2055:39:2","statements":[{"expression":{"id":330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":328,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2065:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":329,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"2075:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2065:22:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":331,"nodeType":"ExpressionStatement","src":"2065:22:2"}]},"id":333,"implemented":true,"kind":"function","modifiers":[{"id":326,"kind":"modifierInvocation","modifierName":{"id":325,"name":"onlyInitializing","nameLocations":["2038:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"2038:16:2"},"nodeType":"ModifierInvocation","src":"2038:16:2"}],"name":"__ReentrancyGuard_init_unchained","nameLocation":"1994:32:2","nodeType":"FunctionDefinition","parameters":{"id":324,"nodeType":"ParameterList","parameters":[],"src":"2026:2:2"},"returnParameters":{"id":327,"nodeType":"ParameterList","parameters":[],"src":"2055:0:2"},"scope":384,"src":"1985:109:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":343,"nodeType":"Block","src":"2495:79:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":336,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"2505:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":338,"nodeType":"ExpressionStatement","src":"2505:21:2"},{"id":339,"nodeType":"PlaceholderStatement","src":"2536:1:2"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":340,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"2547:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2547:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":342,"nodeType":"ExpressionStatement","src":"2547:20:2"}]},"documentation":{"id":334,"nodeType":"StructuredDocumentation","src":"2100:366:2","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":344,"name":"nonReentrant","nameLocation":"2480:12:2","nodeType":"ModifierDefinition","parameters":{"id":335,"nodeType":"ParameterList","parameters":[],"src":"2492:2:2"},"src":"2471:103:2","virtual":false,"visibility":"internal"},{"body":{"id":358,"nodeType":"Block","src":"2619:248:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":348,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2712:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":349,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"2723:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2712:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2733:33:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":347,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2704:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2704:63:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":353,"nodeType":"ExpressionStatement","src":"2704:63:2"},{"expression":{"id":356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":354,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2842:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":355,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"2852:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2842:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":357,"nodeType":"ExpressionStatement","src":"2842:18:2"}]},"id":359,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2589:19:2","nodeType":"FunctionDefinition","parameters":{"id":345,"nodeType":"ParameterList","parameters":[],"src":"2608:2:2"},"returnParameters":{"id":346,"nodeType":"ParameterList","parameters":[],"src":"2619:0:2"},"scope":384,"src":"2580:287:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":366,"nodeType":"Block","src":"2911:171:2","statements":[{"expression":{"id":364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":362,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"3053:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":363,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"3063:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3053:22:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":365,"nodeType":"ExpressionStatement","src":"3053:22:2"}]},"id":367,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2882:18:2","nodeType":"FunctionDefinition","parameters":{"id":360,"nodeType":"ParameterList","parameters":[],"src":"2900:2:2"},"returnParameters":{"id":361,"nodeType":"ParameterList","parameters":[],"src":"2911:0:2"},"scope":384,"src":"2873:209:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":377,"nodeType":"Block","src":"3325:43:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":373,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"3342:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":374,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"3353:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3342:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":372,"id":376,"nodeType":"Return","src":"3335:26:2"}]},"documentation":{"id":368,"nodeType":"StructuredDocumentation","src":"3088:168:2","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":378,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3270:23:2","nodeType":"FunctionDefinition","parameters":{"id":369,"nodeType":"ParameterList","parameters":[],"src":"3293:2:2"},"returnParameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":378,"src":"3319:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":370,"name":"bool","nodeType":"ElementaryTypeName","src":"3319:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3318:6:2"},"scope":384,"src":"3261:107:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":379,"nodeType":"StructuredDocumentation","src":"3374:254:2","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":383,"mutability":"mutable","name":"__gap","nameLocation":"3653:5:2","nodeType":"VariableDeclaration","scope":384,"src":"3633:25:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":380,"name":"uint256","nodeType":"ElementaryTypeName","src":"3633:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":382,"length":{"hexValue":"3439","id":381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3641:2:2","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3633:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":385,"src":"931:2730:2","usedErrors":[]}],"src":"112:3550:2"},"id":2},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[462]},"id":463,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":386,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":387,"nodeType":"StructuredDocumentation","src":"131:70:3","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":462,"linearizedBaseContracts":[462],"name":"IERC20Upgradeable","nameLocation":"212:17:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":388,"nodeType":"StructuredDocumentation","src":"236:158:3","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":396,"name":"Transfer","nameLocation":"405:8:3","nodeType":"EventDefinition","parameters":{"id":395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:3","nodeType":"VariableDeclaration","scope":396,"src":"414:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":392,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:3","nodeType":"VariableDeclaration","scope":396,"src":"436:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":391,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":394,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:3","nodeType":"VariableDeclaration","scope":396,"src":"456:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":393,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:3"},"src":"399:72:3"},{"anonymous":false,"documentation":{"id":397,"nodeType":"StructuredDocumentation","src":"477:148:3","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":405,"name":"Approval","nameLocation":"636:8:3","nodeType":"EventDefinition","parameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":399,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:3","nodeType":"VariableDeclaration","scope":405,"src":"645:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":398,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":401,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:3","nodeType":"VariableDeclaration","scope":405,"src":"668:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":400,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":403,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:3","nodeType":"VariableDeclaration","scope":405,"src":"693:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":402,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:3"},"src":"630:78:3"},{"documentation":{"id":406,"nodeType":"StructuredDocumentation","src":"714:66:3","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":411,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:3","nodeType":"FunctionDefinition","parameters":{"id":407,"nodeType":"ParameterList","parameters":[],"src":"805:2:3"},"returnParameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":411,"src":"831:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":408,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:3"},"scope":462,"src":"785:55:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"846:72:3","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":419,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:3","nodeType":"FunctionDefinition","parameters":{"id":415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"mutability":"mutable","name":"account","nameLocation":"950:7:3","nodeType":"VariableDeclaration","scope":419,"src":"942:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":413,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:3"},"returnParameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":419,"src":"982:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":416,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:3"},"scope":462,"src":"923:68:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":420,"nodeType":"StructuredDocumentation","src":"997:202:3","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":429,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:3","nodeType":"FunctionDefinition","parameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":422,"mutability":"mutable","name":"to","nameLocation":"1230:2:3","nodeType":"VariableDeclaration","scope":429,"src":"1222:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":421,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":424,"mutability":"mutable","name":"amount","nameLocation":"1242:6:3","nodeType":"VariableDeclaration","scope":429,"src":"1234:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":423,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:3"},"returnParameters":{"id":428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":429,"src":"1268:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":426,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:3"},"scope":462,"src":"1204:70:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":430,"nodeType":"StructuredDocumentation","src":"1280:264:3","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":439,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:3","nodeType":"FunctionDefinition","parameters":{"id":435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":432,"mutability":"mutable","name":"owner","nameLocation":"1576:5:3","nodeType":"VariableDeclaration","scope":439,"src":"1568:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":431,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":434,"mutability":"mutable","name":"spender","nameLocation":"1591:7:3","nodeType":"VariableDeclaration","scope":439,"src":"1583:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":433,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:3"},"returnParameters":{"id":438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":439,"src":"1623:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":436,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:3"},"scope":462,"src":"1549:83:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":440,"nodeType":"StructuredDocumentation","src":"1638:642:3","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":449,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:3","nodeType":"FunctionDefinition","parameters":{"id":445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"spender","nameLocation":"2310:7:3","nodeType":"VariableDeclaration","scope":449,"src":"2302:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":441,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":444,"mutability":"mutable","name":"amount","nameLocation":"2327:6:3","nodeType":"VariableDeclaration","scope":449,"src":"2319:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":443,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:3"},"returnParameters":{"id":448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":449,"src":"2353:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":446,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:3"},"scope":462,"src":"2285:74:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":450,"nodeType":"StructuredDocumentation","src":"2365:287:3","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":461,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:3","nodeType":"FunctionDefinition","parameters":{"id":457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"from","nameLocation":"2687:4:3","nodeType":"VariableDeclaration","scope":461,"src":"2679:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":451,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":454,"mutability":"mutable","name":"to","nameLocation":"2701:2:3","nodeType":"VariableDeclaration","scope":461,"src":"2693:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"2693:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":456,"mutability":"mutable","name":"amount","nameLocation":"2713:6:3","nodeType":"VariableDeclaration","scope":461,"src":"2705:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":455,"name":"uint256","nodeType":"ElementaryTypeName","src":"2705:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:42:3"},"returnParameters":{"id":460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":461,"src":"2739:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":458,"name":"bool","nodeType":"ElementaryTypeName","src":"2739:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2738:6:3"},"scope":462,"src":"2657:88:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":463,"src":"202:2545:3","usedErrors":[]}],"src":"106:2642:3"},"id":3},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[498]},"id":499,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":464,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":465,"nodeType":"StructuredDocumentation","src":"148:480:4","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":498,"linearizedBaseContracts":[498],"name":"IERC20PermitUpgradeable","nameLocation":"639:23:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":466,"nodeType":"StructuredDocumentation","src":"669:792:4","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":483,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1475:6:4","nodeType":"FunctionDefinition","parameters":{"id":481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":468,"mutability":"mutable","name":"owner","nameLocation":"1499:5:4","nodeType":"VariableDeclaration","scope":483,"src":"1491:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":467,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":470,"mutability":"mutable","name":"spender","nameLocation":"1522:7:4","nodeType":"VariableDeclaration","scope":483,"src":"1514:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":469,"name":"address","nodeType":"ElementaryTypeName","src":"1514:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":472,"mutability":"mutable","name":"value","nameLocation":"1547:5:4","nodeType":"VariableDeclaration","scope":483,"src":"1539:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":471,"name":"uint256","nodeType":"ElementaryTypeName","src":"1539:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":474,"mutability":"mutable","name":"deadline","nameLocation":"1570:8:4","nodeType":"VariableDeclaration","scope":483,"src":"1562:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":473,"name":"uint256","nodeType":"ElementaryTypeName","src":"1562:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":476,"mutability":"mutable","name":"v","nameLocation":"1594:1:4","nodeType":"VariableDeclaration","scope":483,"src":"1588:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":475,"name":"uint8","nodeType":"ElementaryTypeName","src":"1588:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":478,"mutability":"mutable","name":"r","nameLocation":"1613:1:4","nodeType":"VariableDeclaration","scope":483,"src":"1605:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1605:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":480,"mutability":"mutable","name":"s","nameLocation":"1632:1:4","nodeType":"VariableDeclaration","scope":483,"src":"1624:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":479,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1624:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1481:158:4"},"returnParameters":{"id":482,"nodeType":"ParameterList","parameters":[],"src":"1648:0:4"},"scope":498,"src":"1466:183:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":484,"nodeType":"StructuredDocumentation","src":"1655:294:4","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":491,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1963:6:4","nodeType":"FunctionDefinition","parameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"owner","nameLocation":"1978:5:4","nodeType":"VariableDeclaration","scope":491,"src":"1970:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":485,"name":"address","nodeType":"ElementaryTypeName","src":"1970:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1969:15:4"},"returnParameters":{"id":490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":491,"src":"2008:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":488,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2007:9:4"},"scope":498,"src":"1954:63:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":492,"nodeType":"StructuredDocumentation","src":"2023:128:4","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":497,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2218:16:4","nodeType":"FunctionDefinition","parameters":{"id":493,"nodeType":"ParameterList","parameters":[],"src":"2234:2:4"},"returnParameters":{"id":496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":495,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":497,"src":"2260:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":494,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2260:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2259:9:4"},"scope":498,"src":"2209:60:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":499,"src":"629:1642:4","usedErrors":[]}],"src":"123:2149:4"},"id":4},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1204],"IERC20PermitUpgradeable":[498],"IERC20Upgradeable":[462],"SafeERC20Upgradeable":[874]},"id":875,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":500,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":501,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":875,"sourceUnit":463,"src":"140:34:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","file":"../extensions/IERC20PermitUpgradeable.sol","id":502,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":875,"sourceUnit":499,"src":"175:51:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../../utils/AddressUpgradeable.sol","id":503,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":875,"sourceUnit":1205,"src":"227:47:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20Upgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"276:457:5","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":874,"linearizedBaseContracts":[874],"name":"SafeERC20Upgradeable","nameLocation":"742:20:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":507,"libraryName":{"id":505,"name":"AddressUpgradeable","nameLocations":["775:18:5"],"nodeType":"IdentifierPath","referencedDeclaration":1204,"src":"775:18:5"},"nodeType":"UsingForDirective","src":"769:37:5","typeName":{"id":506,"name":"address","nodeType":"ElementaryTypeName","src":"798:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":530,"nodeType":"Block","src":"1079:103:5","statements":[{"expression":{"arguments":[{"id":519,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"1109:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":522,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"1139:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1145:8:5","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":429,"src":"1139:14:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1154:8:5","memberName":"selector","nodeType":"MemberAccess","src":"1139:23:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":525,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":513,"src":"1164:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":526,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"1168:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":520,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1116:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":521,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1120:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1116:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1116:58:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":518,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"1089:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:86:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":529,"nodeType":"ExpressionStatement","src":"1089:86:5"}]},"documentation":{"id":508,"nodeType":"StructuredDocumentation","src":"812:179:5","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":531,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1005:12:5","nodeType":"FunctionDefinition","parameters":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"token","nameLocation":"1036:5:5","nodeType":"VariableDeclaration","scope":531,"src":"1018:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":510,"nodeType":"UserDefinedTypeName","pathNode":{"id":509,"name":"IERC20Upgradeable","nameLocations":["1018:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"1018:17:5"},"referencedDeclaration":462,"src":"1018:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":513,"mutability":"mutable","name":"to","nameLocation":"1051:2:5","nodeType":"VariableDeclaration","scope":531,"src":"1043:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":512,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":515,"mutability":"mutable","name":"value","nameLocation":"1063:5:5","nodeType":"VariableDeclaration","scope":531,"src":"1055:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":514,"name":"uint256","nodeType":"ElementaryTypeName","src":"1055:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:52:5"},"returnParameters":{"id":517,"nodeType":"ParameterList","parameters":[],"src":"1079:0:5"},"scope":874,"src":"996:186:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":557,"nodeType":"Block","src":"1522:113:5","statements":[{"expression":{"arguments":[{"id":545,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"1552:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":548,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"1582:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1588:12:5","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":461,"src":"1582:18:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1601:8:5","memberName":"selector","nodeType":"MemberAccess","src":"1582:27:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":551,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1611:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":552,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"1617:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":553,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"1621:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":546,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1559:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1563:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1559:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1559:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":544,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"1532:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:96:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":556,"nodeType":"ExpressionStatement","src":"1532:96:5"}]},"documentation":{"id":532,"nodeType":"StructuredDocumentation","src":"1188:228:5","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":558,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1430:16:5","nodeType":"FunctionDefinition","parameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":535,"mutability":"mutable","name":"token","nameLocation":"1465:5:5","nodeType":"VariableDeclaration","scope":558,"src":"1447:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":534,"nodeType":"UserDefinedTypeName","pathNode":{"id":533,"name":"IERC20Upgradeable","nameLocations":["1447:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"1447:17:5"},"referencedDeclaration":462,"src":"1447:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":537,"mutability":"mutable","name":"from","nameLocation":"1480:4:5","nodeType":"VariableDeclaration","scope":558,"src":"1472:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":536,"name":"address","nodeType":"ElementaryTypeName","src":"1472:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":539,"mutability":"mutable","name":"to","nameLocation":"1494:2:5","nodeType":"VariableDeclaration","scope":558,"src":"1486:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":538,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":541,"mutability":"mutable","name":"value","nameLocation":"1506:5:5","nodeType":"VariableDeclaration","scope":558,"src":"1498:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":540,"name":"uint256","nodeType":"ElementaryTypeName","src":"1498:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1446:66:5"},"returnParameters":{"id":543,"nodeType":"ParameterList","parameters":[],"src":"1522:0:5"},"scope":874,"src":"1421:214:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":601,"nodeType":"Block","src":"1982:497:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":570,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"2231:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2240:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2231:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":573,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2230:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":578,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2271:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$874","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$874","typeString":"library SafeERC20Upgradeable"}],"id":577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2263:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":576,"name":"address","nodeType":"ElementaryTypeName","src":"2263:7:5","typeDescriptions":{}}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":580,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2278:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":574,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"2247:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2253:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":439,"src":"2247:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2290:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2247:44:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":584,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2246:46:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2230:62:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2306:56:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":569,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2209:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2209:163:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":588,"nodeType":"ExpressionStatement","src":"2209:163:5"},{"expression":{"arguments":[{"id":590,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"2402:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":593,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"2432:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2438:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":449,"src":"2432:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2446:8:5","memberName":"selector","nodeType":"MemberAccess","src":"2432:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":596,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2456:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"2465:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":591,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2409:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2413:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2409:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2409:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":589,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2382:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:90:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":600,"nodeType":"ExpressionStatement","src":"2382:90:5"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"1641:249:5","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":602,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1904:11:5","nodeType":"FunctionDefinition","parameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":562,"mutability":"mutable","name":"token","nameLocation":"1934:5:5","nodeType":"VariableDeclaration","scope":602,"src":"1916:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":561,"nodeType":"UserDefinedTypeName","pathNode":{"id":560,"name":"IERC20Upgradeable","nameLocations":["1916:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"1916:17:5"},"referencedDeclaration":462,"src":"1916:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":564,"mutability":"mutable","name":"spender","nameLocation":"1949:7:5","nodeType":"VariableDeclaration","scope":602,"src":"1941:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":563,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":566,"mutability":"mutable","name":"value","nameLocation":"1966:5:5","nodeType":"VariableDeclaration","scope":602,"src":"1958:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":565,"name":"uint256","nodeType":"ElementaryTypeName","src":"1958:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1915:57:5"},"returnParameters":{"id":568,"nodeType":"ParameterList","parameters":[],"src":"1982:0:5"},"scope":874,"src":"1895:584:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":638,"nodeType":"Block","src":"2767:194:5","statements":[{"assignments":[614],"declarations":[{"constant":false,"id":614,"mutability":"mutable","name":"oldAllowance","nameLocation":"2785:12:5","nodeType":"VariableDeclaration","scope":638,"src":"2777:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":613,"name":"uint256","nodeType":"ElementaryTypeName","src":"2777:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":623,"initialValue":{"arguments":[{"arguments":[{"id":619,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2824:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$874","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$874","typeString":"library SafeERC20Upgradeable"}],"id":618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2816:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":617,"name":"address","nodeType":"ElementaryTypeName","src":"2816:7:5","typeDescriptions":{}}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2816:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":621,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"2831:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":615,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"2800:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":439,"src":"2800:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2800:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2777:62:5"},{"expression":{"arguments":[{"id":625,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"2869:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":628,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"2899:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2905:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":449,"src":"2899:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2913:8:5","memberName":"selector","nodeType":"MemberAccess","src":"2899:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":631,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"2923:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":632,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"2932:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":633,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"2947:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2932:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":626,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2876:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2880:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2876:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2876:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":624,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2849:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2849:105:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":637,"nodeType":"ExpressionStatement","src":"2849:105:5"}]},"documentation":{"id":603,"nodeType":"StructuredDocumentation","src":"2485:180:5","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":639,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2679:21:5","nodeType":"FunctionDefinition","parameters":{"id":611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":606,"mutability":"mutable","name":"token","nameLocation":"2719:5:5","nodeType":"VariableDeclaration","scope":639,"src":"2701:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":605,"nodeType":"UserDefinedTypeName","pathNode":{"id":604,"name":"IERC20Upgradeable","nameLocations":["2701:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"2701:17:5"},"referencedDeclaration":462,"src":"2701:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":608,"mutability":"mutable","name":"spender","nameLocation":"2734:7:5","nodeType":"VariableDeclaration","scope":639,"src":"2726:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":607,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":610,"mutability":"mutable","name":"value","nameLocation":"2751:5:5","nodeType":"VariableDeclaration","scope":639,"src":"2743:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":609,"name":"uint256","nodeType":"ElementaryTypeName","src":"2743:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2700:57:5"},"returnParameters":{"id":612,"nodeType":"ParameterList","parameters":[],"src":"2767:0:5"},"scope":874,"src":"2670:291:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":683,"nodeType":"Block","src":"3249:321:5","statements":[{"id":682,"nodeType":"UncheckedBlock","src":"3259:305:5","statements":[{"assignments":[651],"declarations":[{"constant":false,"id":651,"mutability":"mutable","name":"oldAllowance","nameLocation":"3291:12:5","nodeType":"VariableDeclaration","scope":682,"src":"3283:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":650,"name":"uint256","nodeType":"ElementaryTypeName","src":"3283:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":660,"initialValue":{"arguments":[{"arguments":[{"id":656,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3330:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$874","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$874","typeString":"library SafeERC20Upgradeable"}],"id":655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3322:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"3322:7:5","typeDescriptions":{}}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3322:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":658,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"3337:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":652,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"3306:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3312:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":439,"src":"3306:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3306:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3283:62:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":662,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"3367:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":663,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"3383:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3367:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3390:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":661,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3359:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":667,"nodeType":"ExpressionStatement","src":"3359:75:5"},{"expression":{"arguments":[{"id":669,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"3468:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":672,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"3498:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3504:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":449,"src":"3498:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3512:8:5","memberName":"selector","nodeType":"MemberAccess","src":"3498:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":675,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"3522:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":676,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"3531:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"3546:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3531:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":670,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3475:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3479:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3475:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3475:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":668,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"3448:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3448:105:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":681,"nodeType":"ExpressionStatement","src":"3448:105:5"}]}]},"documentation":{"id":640,"nodeType":"StructuredDocumentation","src":"2967:180:5","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":684,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3161:21:5","nodeType":"FunctionDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":643,"mutability":"mutable","name":"token","nameLocation":"3201:5:5","nodeType":"VariableDeclaration","scope":684,"src":"3183:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":642,"nodeType":"UserDefinedTypeName","pathNode":{"id":641,"name":"IERC20Upgradeable","nameLocations":["3183:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"3183:17:5"},"referencedDeclaration":462,"src":"3183:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":645,"mutability":"mutable","name":"spender","nameLocation":"3216:7:5","nodeType":"VariableDeclaration","scope":684,"src":"3208:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":644,"name":"address","nodeType":"ElementaryTypeName","src":"3208:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":647,"mutability":"mutable","name":"value","nameLocation":"3233:5:5","nodeType":"VariableDeclaration","scope":684,"src":"3225:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":646,"name":"uint256","nodeType":"ElementaryTypeName","src":"3225:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3182:57:5"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[],"src":"3249:0:5"},"scope":874,"src":"3152:418:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":730,"nodeType":"Block","src":"3977:333:5","statements":[{"assignments":[696],"declarations":[{"constant":false,"id":696,"mutability":"mutable","name":"approvalCall","nameLocation":"4000:12:5","nodeType":"VariableDeclaration","scope":730,"src":"3987:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":695,"name":"bytes","nodeType":"ElementaryTypeName","src":"3987:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":705,"initialValue":{"arguments":[{"expression":{"expression":{"id":699,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4038:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4044:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":449,"src":"4038:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4052:8:5","memberName":"selector","nodeType":"MemberAccess","src":"4038:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":702,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"4062:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":703,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"4071:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":697,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4015:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4019:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4015:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4015:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3987:90:5"},{"condition":{"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4092:45:5","subExpression":{"arguments":[{"id":707,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4117:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"id":708,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"4124:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":706,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"4093:23:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20Upgradeable,bytes memory) returns (bool)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4093:44:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":729,"nodeType":"IfStatement","src":"4088:216:5","trueBody":{"id":728,"nodeType":"Block","src":"4139:165:5","statements":[{"expression":{"arguments":[{"id":712,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4173:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":715,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4203:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4209:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":449,"src":"4203:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4217:8:5","memberName":"selector","nodeType":"MemberAccess","src":"4203:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":718,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"4227:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4236:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":713,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4180:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4184:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4180:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4180:58:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":711,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"4153:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4153:86:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":722,"nodeType":"ExpressionStatement","src":"4153:86:5"},{"expression":{"arguments":[{"id":724,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4273:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"id":725,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"4280:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":723,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"4253:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4253:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":727,"nodeType":"ExpressionStatement","src":"4253:40:5"}]}}]},"documentation":{"id":685,"nodeType":"StructuredDocumentation","src":"3576:308:5","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":731,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3898:12:5","nodeType":"FunctionDefinition","parameters":{"id":693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"token","nameLocation":"3929:5:5","nodeType":"VariableDeclaration","scope":731,"src":"3911:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":687,"nodeType":"UserDefinedTypeName","pathNode":{"id":686,"name":"IERC20Upgradeable","nameLocations":["3911:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"3911:17:5"},"referencedDeclaration":462,"src":"3911:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":690,"mutability":"mutable","name":"spender","nameLocation":"3944:7:5","nodeType":"VariableDeclaration","scope":731,"src":"3936:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":689,"name":"address","nodeType":"ElementaryTypeName","src":"3936:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"value","nameLocation":"3961:5:5","nodeType":"VariableDeclaration","scope":731,"src":"3953:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":691,"name":"uint256","nodeType":"ElementaryTypeName","src":"3953:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3910:57:5"},"returnParameters":{"id":694,"nodeType":"ParameterList","parameters":[],"src":"3977:0:5"},"scope":874,"src":"3889:421:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":787,"nodeType":"Block","src":"4688:257:5","statements":[{"assignments":[753],"declarations":[{"constant":false,"id":753,"mutability":"mutable","name":"nonceBefore","nameLocation":"4706:11:5","nodeType":"VariableDeclaration","scope":787,"src":"4698:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":752,"name":"uint256","nodeType":"ElementaryTypeName","src":"4698:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":758,"initialValue":{"arguments":[{"id":756,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"4733:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":754,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"4720:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$498","typeString":"contract IERC20PermitUpgradeable"}},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4726:6:5","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":491,"src":"4720:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4720:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4698:41:5"},{"expression":{"arguments":[{"id":762,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"4762:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":763,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"4769:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":764,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"4778:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":765,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"4785:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":766,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"4795:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":767,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"4798:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":768,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"4801:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":759,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"4749:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$498","typeString":"contract IERC20PermitUpgradeable"}},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4755:6:5","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":483,"src":"4749:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4749:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":770,"nodeType":"ExpressionStatement","src":"4749:54:5"},{"assignments":[772],"declarations":[{"constant":false,"id":772,"mutability":"mutable","name":"nonceAfter","nameLocation":"4821:10:5","nodeType":"VariableDeclaration","scope":787,"src":"4813:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":771,"name":"uint256","nodeType":"ElementaryTypeName","src":"4813:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":777,"initialValue":{"arguments":[{"id":775,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"4847:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":773,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"4834:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$498","typeString":"contract IERC20PermitUpgradeable"}},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4840:6:5","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":491,"src":"4834:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4813:40:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":779,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"4871:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":780,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"4885:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4899:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4885:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4871:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4902:35:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":778,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4863:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4863:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":786,"nodeType":"ExpressionStatement","src":"4863:75:5"}]},"documentation":{"id":732,"nodeType":"StructuredDocumentation","src":"4316:141:5","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":788,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4471:10:5","nodeType":"FunctionDefinition","parameters":{"id":750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":735,"mutability":"mutable","name":"token","nameLocation":"4515:5:5","nodeType":"VariableDeclaration","scope":788,"src":"4491:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$498","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":734,"nodeType":"UserDefinedTypeName","pathNode":{"id":733,"name":"IERC20PermitUpgradeable","nameLocations":["4491:23:5"],"nodeType":"IdentifierPath","referencedDeclaration":498,"src":"4491:23:5"},"referencedDeclaration":498,"src":"4491:23:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$498","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"internal"},{"constant":false,"id":737,"mutability":"mutable","name":"owner","nameLocation":"4538:5:5","nodeType":"VariableDeclaration","scope":788,"src":"4530:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":736,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":739,"mutability":"mutable","name":"spender","nameLocation":"4561:7:5","nodeType":"VariableDeclaration","scope":788,"src":"4553:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":738,"name":"address","nodeType":"ElementaryTypeName","src":"4553:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":741,"mutability":"mutable","name":"value","nameLocation":"4586:5:5","nodeType":"VariableDeclaration","scope":788,"src":"4578:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":740,"name":"uint256","nodeType":"ElementaryTypeName","src":"4578:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":743,"mutability":"mutable","name":"deadline","nameLocation":"4609:8:5","nodeType":"VariableDeclaration","scope":788,"src":"4601:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":742,"name":"uint256","nodeType":"ElementaryTypeName","src":"4601:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":745,"mutability":"mutable","name":"v","nameLocation":"4633:1:5","nodeType":"VariableDeclaration","scope":788,"src":"4627:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":744,"name":"uint8","nodeType":"ElementaryTypeName","src":"4627:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":747,"mutability":"mutable","name":"r","nameLocation":"4652:1:5","nodeType":"VariableDeclaration","scope":788,"src":"4644:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":746,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":749,"mutability":"mutable","name":"s","nameLocation":"4671:1:5","nodeType":"VariableDeclaration","scope":788,"src":"4663:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":748,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4663:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4481:197:5"},"returnParameters":{"id":751,"nodeType":"ParameterList","parameters":[],"src":"4688:0:5"},"scope":874,"src":"4462:483:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":824,"nodeType":"Block","src":"5409:572:5","statements":[{"assignments":[798],"declarations":[{"constant":false,"id":798,"mutability":"mutable","name":"returndata","nameLocation":"5771:10:5","nodeType":"VariableDeclaration","scope":824,"src":"5758:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":797,"name":"bytes","nodeType":"ElementaryTypeName","src":"5758:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":807,"initialValue":{"arguments":[{"id":804,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"5812:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5818:34:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":801,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"5792:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}],"id":800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5784:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":799,"name":"address","nodeType":"ElementaryTypeName","src":"5784:7:5","typeDescriptions":{}}},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5799:12:5","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":964,"src":"5784:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5758:95:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":809,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"5871:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5882:6:5","memberName":"length","nodeType":"MemberAccess","src":"5871:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5892:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5871:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":815,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"5908:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5921:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":816,"name":"bool","nodeType":"ElementaryTypeName","src":"5921:4:5","typeDescriptions":{}}}],"id":818,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5920:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":813,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5897:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5901:6:5","memberName":"decode","nodeType":"MemberAccess","src":"5897:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5897:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5871:56:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5929:44:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":808,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5863:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5863:111:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":823,"nodeType":"ExpressionStatement","src":"5863:111:5"}]},"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"4951:372:5","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":825,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5337:19:5","nodeType":"FunctionDefinition","parameters":{"id":795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":792,"mutability":"mutable","name":"token","nameLocation":"5375:5:5","nodeType":"VariableDeclaration","scope":825,"src":"5357:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":791,"nodeType":"UserDefinedTypeName","pathNode":{"id":790,"name":"IERC20Upgradeable","nameLocations":["5357:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"5357:17:5"},"referencedDeclaration":462,"src":"5357:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":794,"mutability":"mutable","name":"data","nameLocation":"5395:4:5","nodeType":"VariableDeclaration","scope":825,"src":"5382:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":793,"name":"bytes","nodeType":"ElementaryTypeName","src":"5382:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5356:44:5"},"returnParameters":{"id":796,"nodeType":"ParameterList","parameters":[],"src":"5409:0:5"},"scope":874,"src":"5328:653:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":872,"nodeType":"Block","src":"6582:516:5","statements":[{"assignments":[837,839],"declarations":[{"constant":false,"id":837,"mutability":"mutable","name":"success","nameLocation":"6883:7:5","nodeType":"VariableDeclaration","scope":872,"src":"6878:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":836,"name":"bool","nodeType":"ElementaryTypeName","src":"6878:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":839,"mutability":"mutable","name":"returndata","nameLocation":"6905:10:5","nodeType":"VariableDeclaration","scope":872,"src":"6892:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":838,"name":"bytes","nodeType":"ElementaryTypeName","src":"6892:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":847,"initialValue":{"arguments":[{"id":845,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"6939:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":842,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"6927:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}],"id":841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6919:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":840,"name":"address","nodeType":"ElementaryTypeName","src":"6919:7:5","typeDescriptions":{}}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6934:4:5","memberName":"call","nodeType":"MemberAccess","src":"6919:19:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6877:67:5"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":848,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"6973:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":849,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"6985:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6996:6:5","memberName":"length","nodeType":"MemberAccess","src":"6985:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7006:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6985:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":855,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"7022:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7035:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":856,"name":"bool","nodeType":"ElementaryTypeName","src":"7035:4:5","typeDescriptions":{}}}],"id":858,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7034:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":853,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7011:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7015:6:5","memberName":"decode","nodeType":"MemberAccess","src":"7011:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7011:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6985:56:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":861,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6984:58:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:69:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":867,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"7084:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}],"id":866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7076:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":865,"name":"address","nodeType":"ElementaryTypeName","src":"7076:7:5","typeDescriptions":{}}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7076:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":863,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"7046:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1204_$","typeString":"type(library AddressUpgradeable)"}},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7065:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":892,"src":"7046:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7046:45:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:118:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":835,"id":871,"nodeType":"Return","src":"6954:137:5"}]},"documentation":{"id":826,"nodeType":"StructuredDocumentation","src":"5987:490:5","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":873,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6491:23:5","nodeType":"FunctionDefinition","parameters":{"id":832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"mutability":"mutable","name":"token","nameLocation":"6533:5:5","nodeType":"VariableDeclaration","scope":873,"src":"6515:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":828,"nodeType":"UserDefinedTypeName","pathNode":{"id":827,"name":"IERC20Upgradeable","nameLocations":["6515:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"6515:17:5"},"referencedDeclaration":462,"src":"6515:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":831,"mutability":"mutable","name":"data","nameLocation":"6553:4:5","nodeType":"VariableDeclaration","scope":873,"src":"6540:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":830,"name":"bytes","nodeType":"ElementaryTypeName","src":"6540:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6514:44:5"},"returnParameters":{"id":835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":834,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":873,"src":"6576:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":833,"name":"bool","nodeType":"ElementaryTypeName","src":"6576:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6575:6:5"},"scope":874,"src":"6482:616:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":875,"src":"734:6366:5","usedErrors":[]}],"src":"115:6986:5"},"id":5},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1204]},"id":1205,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":876,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":877,"nodeType":"StructuredDocumentation","src":"126:67:6","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1204,"linearizedBaseContracts":[1204],"name":"AddressUpgradeable","nameLocation":"202:18:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":891,"nodeType":"Block","src":"1489:254:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":885,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"1713:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:6","memberName":"code","nodeType":"MemberAccess","src":"1713:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:6","memberName":"length","nodeType":"MemberAccess","src":"1713:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":884,"id":890,"nodeType":"Return","src":"1706:30:6"}]},"documentation":{"id":878,"nodeType":"StructuredDocumentation","src":"227:1191:6","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":892,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:6","nodeType":"FunctionDefinition","parameters":{"id":881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":880,"mutability":"mutable","name":"account","nameLocation":"1451:7:6","nodeType":"VariableDeclaration","scope":892,"src":"1443:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":879,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:6"},"returnParameters":{"id":884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":892,"src":"1483:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":882,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:6"},"scope":1204,"src":"1423:320:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":925,"nodeType":"Block","src":"2729:241:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":903,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1204","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1204","typeString":"library AddressUpgradeable"}],"id":902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":901,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:6","typeDescriptions":{}}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:6","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":906,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"2772:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":900,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":910,"nodeType":"ExpressionStatement","src":"2739:73:6"},{"assignments":[912,null],"declarations":[{"constant":false,"id":912,"mutability":"mutable","name":"success","nameLocation":"2829:7:6","nodeType":"VariableDeclaration","scope":925,"src":"2824:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":911,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":919,"initialValue":{"arguments":[{"hexValue":"","id":917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":913,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":895,"src":"2842:9:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:6","memberName":"call","nodeType":"MemberAccess","src":"2842:14:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":915,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"2864:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:6"},{"expression":{"arguments":[{"id":921,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"2893:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":920,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":924,"nodeType":"ExpressionStatement","src":"2885:78:6"}]},"documentation":{"id":893,"nodeType":"StructuredDocumentation","src":"1749:904:6","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":926,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:6","nodeType":"FunctionDefinition","parameters":{"id":898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":895,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:6","nodeType":"VariableDeclaration","scope":926,"src":"2677:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":894,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:6","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":897,"mutability":"mutable","name":"amount","nameLocation":"2712:6:6","nodeType":"VariableDeclaration","scope":926,"src":"2704:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":896,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:6"},"returnParameters":{"id":899,"nodeType":"ParameterList","parameters":[],"src":"2729:0:6"},"scope":1204,"src":"2658:312:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":943,"nodeType":"Block","src":"3801:96:6","statements":[{"expression":{"arguments":[{"id":937,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"3840:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":938,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"3848:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":936,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[984,1028],"referencedDeclaration":1028,"src":"3818:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":935,"id":942,"nodeType":"Return","src":"3811:79:6"}]},"documentation":{"id":927,"nodeType":"StructuredDocumentation","src":"2976:731:6","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":944,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:6","nodeType":"FunctionDefinition","parameters":{"id":932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"target","nameLocation":"3742:6:6","nodeType":"VariableDeclaration","scope":944,"src":"3734:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":928,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":931,"mutability":"mutable","name":"data","nameLocation":"3763:4:6","nodeType":"VariableDeclaration","scope":944,"src":"3750:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":930,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:6"},"returnParameters":{"id":935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":944,"src":"3787:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":933,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:6"},"scope":1204,"src":"3712:185:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":963,"nodeType":"Block","src":"4266:76:6","statements":[{"expression":{"arguments":[{"id":957,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"4305:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":958,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"4313:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":960,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"4322:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":956,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[984,1028],"referencedDeclaration":1028,"src":"4283:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":955,"id":962,"nodeType":"Return","src":"4276:59:6"}]},"documentation":{"id":945,"nodeType":"StructuredDocumentation","src":"3903:211:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":964,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:6","nodeType":"FunctionDefinition","parameters":{"id":952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"target","nameLocation":"4158:6:6","nodeType":"VariableDeclaration","scope":964,"src":"4150:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":946,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":949,"mutability":"mutable","name":"data","nameLocation":"4187:4:6","nodeType":"VariableDeclaration","scope":964,"src":"4174:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":948,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":951,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:6","nodeType":"VariableDeclaration","scope":964,"src":"4201:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":950,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:6"},"returnParameters":{"id":955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":964,"src":"4252:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":953,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:6"},"scope":1204,"src":"4119:223:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":983,"nodeType":"Block","src":"4817:111:6","statements":[{"expression":{"arguments":[{"id":977,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"4856:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":978,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"4864:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":979,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"4870:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":976,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[984,1028],"referencedDeclaration":1028,"src":"4834:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":975,"id":982,"nodeType":"Return","src":"4827:94:6"}]},"documentation":{"id":965,"nodeType":"StructuredDocumentation","src":"4348:351:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":984,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:6","nodeType":"FunctionDefinition","parameters":{"id":972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"target","nameLocation":"4743:6:6","nodeType":"VariableDeclaration","scope":984,"src":"4735:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":966,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":969,"mutability":"mutable","name":"data","nameLocation":"4764:4:6","nodeType":"VariableDeclaration","scope":984,"src":"4751:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":968,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":971,"mutability":"mutable","name":"value","nameLocation":"4778:5:6","nodeType":"VariableDeclaration","scope":984,"src":"4770:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":970,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:6"},"returnParameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":984,"src":"4803:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":973,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:6"},"scope":1204,"src":"4704:224:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1027,"nodeType":"Block","src":"5355:267:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1001,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1204","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1204","typeString":"library AddressUpgradeable"}],"id":1000,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:6","typeDescriptions":{}}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:6","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1004,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"5398:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":998,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1008,"nodeType":"ExpressionStatement","src":"5365:81:6"},{"assignments":[1010,1012],"declarations":[{"constant":false,"id":1010,"mutability":"mutable","name":"success","nameLocation":"5462:7:6","nodeType":"VariableDeclaration","scope":1027,"src":"5457:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1009,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1012,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:6","nodeType":"VariableDeclaration","scope":1027,"src":"5471:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1011,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1019,"initialValue":{"arguments":[{"id":1017,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"5524:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1013,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"5498:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:6","memberName":"call","nodeType":"MemberAccess","src":"5498:11:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1015,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"5517:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:6"},{"expression":{"arguments":[{"id":1021,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"5573:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1022,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"5581:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1023,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"5590:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1024,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"5602:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1020,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"5546:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":997,"id":1026,"nodeType":"Return","src":"5539:76:6"}]},"documentation":{"id":985,"nodeType":"StructuredDocumentation","src":"4934:237:6","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1028,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:6","nodeType":"FunctionDefinition","parameters":{"id":994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":987,"mutability":"mutable","name":"target","nameLocation":"5224:6:6","nodeType":"VariableDeclaration","scope":1028,"src":"5216:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":986,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":989,"mutability":"mutable","name":"data","nameLocation":"5253:4:6","nodeType":"VariableDeclaration","scope":1028,"src":"5240:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":988,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":991,"mutability":"mutable","name":"value","nameLocation":"5275:5:6","nodeType":"VariableDeclaration","scope":1028,"src":"5267:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":990,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":993,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:6","nodeType":"VariableDeclaration","scope":1028,"src":"5290:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":992,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:6"},"returnParameters":{"id":997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1028,"src":"5341:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":995,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:6"},"scope":1204,"src":"5176:446:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1044,"nodeType":"Block","src":"5899:97:6","statements":[{"expression":{"arguments":[{"id":1039,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"5935:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1040,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"5943:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1038,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1045,1074],"referencedDeclaration":1074,"src":"5916:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1037,"id":1043,"nodeType":"Return","src":"5909:80:6"}]},"documentation":{"id":1029,"nodeType":"StructuredDocumentation","src":"5628:166:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1045,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:6","nodeType":"FunctionDefinition","parameters":{"id":1034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1031,"mutability":"mutable","name":"target","nameLocation":"5835:6:6","nodeType":"VariableDeclaration","scope":1045,"src":"5827:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1030,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1033,"mutability":"mutable","name":"data","nameLocation":"5856:4:6","nodeType":"VariableDeclaration","scope":1045,"src":"5843:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1032,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:6"},"returnParameters":{"id":1037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1036,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1045,"src":"5885:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1035,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:6"},"scope":1204,"src":"5799:197:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1073,"nodeType":"Block","src":"6338:168:6","statements":[{"assignments":[1058,1060],"declarations":[{"constant":false,"id":1058,"mutability":"mutable","name":"success","nameLocation":"6354:7:6","nodeType":"VariableDeclaration","scope":1073,"src":"6349:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1057,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1060,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:6","nodeType":"VariableDeclaration","scope":1073,"src":"6363:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1059,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1065,"initialValue":{"arguments":[{"id":1063,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"6408:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1061,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"6390:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:6","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:6","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:6"},{"expression":{"arguments":[{"id":1067,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"6457:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1068,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"6465:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1069,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"6474:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1070,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1052,"src":"6486:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1066,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"6430:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1056,"id":1072,"nodeType":"Return","src":"6423:76:6"}]},"documentation":{"id":1046,"nodeType":"StructuredDocumentation","src":"6002:173:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1074,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:6","nodeType":"FunctionDefinition","parameters":{"id":1053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1048,"mutability":"mutable","name":"target","nameLocation":"6225:6:6","nodeType":"VariableDeclaration","scope":1074,"src":"6217:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1047,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1050,"mutability":"mutable","name":"data","nameLocation":"6254:4:6","nodeType":"VariableDeclaration","scope":1074,"src":"6241:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1049,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1052,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:6","nodeType":"VariableDeclaration","scope":1074,"src":"6268:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1051,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:6"},"returnParameters":{"id":1056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1074,"src":"6324:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1054,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:6"},"scope":1204,"src":"6180:326:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1090,"nodeType":"Block","src":"6782:101:6","statements":[{"expression":{"arguments":[{"id":1085,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"6820:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1086,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"6828:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1084,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1091,1120],"referencedDeclaration":1120,"src":"6799:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1083,"id":1089,"nodeType":"Return","src":"6792:84:6"}]},"documentation":{"id":1075,"nodeType":"StructuredDocumentation","src":"6512:168:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1091,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:6","nodeType":"FunctionDefinition","parameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1077,"mutability":"mutable","name":"target","nameLocation":"6723:6:6","nodeType":"VariableDeclaration","scope":1091,"src":"6715:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1076,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1079,"mutability":"mutable","name":"data","nameLocation":"6744:4:6","nodeType":"VariableDeclaration","scope":1091,"src":"6731:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1078,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:6"},"returnParameters":{"id":1083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1082,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1091,"src":"6768:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1081,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:6"},"scope":1204,"src":"6685:198:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1119,"nodeType":"Block","src":"7224:170:6","statements":[{"assignments":[1104,1106],"declarations":[{"constant":false,"id":1104,"mutability":"mutable","name":"success","nameLocation":"7240:7:6","nodeType":"VariableDeclaration","scope":1119,"src":"7235:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1103,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1106,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:6","nodeType":"VariableDeclaration","scope":1119,"src":"7249:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1105,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1111,"initialValue":{"arguments":[{"id":1109,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"7296:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1107,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"7276:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:6","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:6","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:6"},{"expression":{"arguments":[{"id":1113,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"7345:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1114,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"7353:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1115,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"7362:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1116,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"7374:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1112,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"7318:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1102,"id":1118,"nodeType":"Return","src":"7311:76:6"}]},"documentation":{"id":1092,"nodeType":"StructuredDocumentation","src":"6889:175:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1120,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:6","nodeType":"FunctionDefinition","parameters":{"id":1099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1094,"mutability":"mutable","name":"target","nameLocation":"7116:6:6","nodeType":"VariableDeclaration","scope":1120,"src":"7108:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1093,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1096,"mutability":"mutable","name":"data","nameLocation":"7145:4:6","nodeType":"VariableDeclaration","scope":1120,"src":"7132:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1095,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1098,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:6","nodeType":"VariableDeclaration","scope":1120,"src":"7159:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1097,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:6"},"returnParameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1120,"src":"7210:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1100,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:6"},"scope":1204,"src":"7069:325:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1158,"nodeType":"Block","src":"7876:434:6","statements":[{"condition":{"id":1134,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"7890:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1156,"nodeType":"Block","src":"8246:58:6","statements":[{"expression":{"arguments":[{"id":1152,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"8268:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1153,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"8280:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1151,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"8260:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1155,"nodeType":"ExpressionStatement","src":"8260:33:6"}]},"id":1157,"nodeType":"IfStatement","src":"7886:418:6","trueBody":{"id":1150,"nodeType":"Block","src":"7899:341:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1135,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"7917:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:6","memberName":"length","nodeType":"MemberAccess","src":"7917:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1147,"nodeType":"IfStatement","src":"7913:286:6","trueBody":{"id":1146,"nodeType":"Block","src":"7941:258:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1141,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"8143:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1140,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"8132:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1139,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1145,"nodeType":"ExpressionStatement","src":"8124:60:6"}]}},{"expression":{"id":1148,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"8219:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1133,"id":1149,"nodeType":"Return","src":"8212:17:6"}]}}]},"documentation":{"id":1121,"nodeType":"StructuredDocumentation","src":"7400:277:6","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1159,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:6","nodeType":"FunctionDefinition","parameters":{"id":1130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1123,"mutability":"mutable","name":"target","nameLocation":"7735:6:6","nodeType":"VariableDeclaration","scope":1159,"src":"7727:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1122,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1125,"mutability":"mutable","name":"success","nameLocation":"7756:7:6","nodeType":"VariableDeclaration","scope":1159,"src":"7751:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1124,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1127,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:6","nodeType":"VariableDeclaration","scope":1159,"src":"7773:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1126,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1129,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:6","nodeType":"VariableDeclaration","scope":1159,"src":"7806:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1128,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:6"},"returnParameters":{"id":1133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1159,"src":"7862:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1131,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:6"},"scope":1204,"src":"7682:628:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1182,"nodeType":"Block","src":"8691:135:6","statements":[{"condition":{"id":1171,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"8705:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1180,"nodeType":"Block","src":"8762:58:6","statements":[{"expression":{"arguments":[{"id":1176,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8784:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1177,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"8796:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1175,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"8776:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1179,"nodeType":"ExpressionStatement","src":"8776:33:6"}]},"id":1181,"nodeType":"IfStatement","src":"8701:119:6","trueBody":{"id":1174,"nodeType":"Block","src":"8714:42:6","statements":[{"expression":{"id":1172,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8735:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1170,"id":1173,"nodeType":"Return","src":"8728:17:6"}]}}]},"documentation":{"id":1160,"nodeType":"StructuredDocumentation","src":"8316:210:6","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1183,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:6","nodeType":"FunctionDefinition","parameters":{"id":1167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1162,"mutability":"mutable","name":"success","nameLocation":"8571:7:6","nodeType":"VariableDeclaration","scope":1183,"src":"8566:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1161,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1164,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:6","nodeType":"VariableDeclaration","scope":1183,"src":"8588:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1163,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1166,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:6","nodeType":"VariableDeclaration","scope":1183,"src":"8621:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1165,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:6"},"returnParameters":{"id":1170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1169,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1183,"src":"8677:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1168,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:6"},"scope":1204,"src":"8531:295:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1202,"nodeType":"Block","src":"8915:457:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1190,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"8991:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:6","memberName":"length","nodeType":"MemberAccess","src":"8991:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1200,"nodeType":"Block","src":"9321:45:6","statements":[{"expression":{"arguments":[{"id":1197,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"9342:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1196,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1199,"nodeType":"ExpressionStatement","src":"9335:20:6"}]},"id":1201,"nodeType":"IfStatement","src":"8987:379:6","trueBody":{"id":1195,"nodeType":"Block","src":"9014:301:6","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:6","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:6","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:6"},"nodeType":"YulFunctionCall","src":"9213:17:6"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:6","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:6"},"nodeType":"YulFunctionCall","src":"9254:19:6"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:6"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:6"},"nodeType":"YulFunctionCall","src":"9247:44:6"},"nodeType":"YulExpressionStatement","src":"9247:44:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1185,"isOffset":false,"isSlot":false,"src":"9219:10:6","valueSize":1},{"declaration":1185,"isOffset":false,"isSlot":false,"src":"9262:10:6","valueSize":1}],"id":1194,"nodeType":"InlineAssembly","src":"9163:142:6"}]}}]},"id":1203,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:6","nodeType":"FunctionDefinition","parameters":{"id":1188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1185,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:6","nodeType":"VariableDeclaration","scope":1203,"src":"8849:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1184,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1187,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:6","nodeType":"VariableDeclaration","scope":1203,"src":"8874:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1186,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:6"},"returnParameters":{"id":1189,"nodeType":"ParameterList","parameters":[],"src":"8915:0:6"},"scope":1204,"src":"8832:540:6","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1205,"src":"194:9180:6","usedErrors":[]}],"src":"101:9274:6"},"id":6},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1204],"ContextUpgradeable":[1246],"Initializable":[300]},"id":1247,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1206,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1207,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1247,"sourceUnit":301,"src":"110:42:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1209,"name":"Initializable","nameLocations":["691:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"691:13:7"},"id":1210,"nodeType":"InheritanceSpecifier","src":"691:13:7"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1208,"nodeType":"StructuredDocumentation","src":"154:496:7","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1246,"linearizedBaseContracts":[1246,300],"name":"ContextUpgradeable","nameLocation":"669:18:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1215,"nodeType":"Block","src":"763:7:7","statements":[]},"id":1216,"implemented":true,"kind":"function","modifiers":[{"id":1213,"kind":"modifierInvocation","modifierName":{"id":1212,"name":"onlyInitializing","nameLocations":["746:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"746:16:7"},"nodeType":"ModifierInvocation","src":"746:16:7"}],"name":"__Context_init","nameLocation":"720:14:7","nodeType":"FunctionDefinition","parameters":{"id":1211,"nodeType":"ParameterList","parameters":[],"src":"734:2:7"},"returnParameters":{"id":1214,"nodeType":"ParameterList","parameters":[],"src":"763:0:7"},"scope":1246,"src":"711:59:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1221,"nodeType":"Block","src":"838:7:7","statements":[]},"id":1222,"implemented":true,"kind":"function","modifiers":[{"id":1219,"kind":"modifierInvocation","modifierName":{"id":1218,"name":"onlyInitializing","nameLocations":["821:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"821:16:7"},"nodeType":"ModifierInvocation","src":"821:16:7"}],"name":"__Context_init_unchained","nameLocation":"785:24:7","nodeType":"FunctionDefinition","parameters":{"id":1217,"nodeType":"ParameterList","parameters":[],"src":"809:2:7"},"returnParameters":{"id":1220,"nodeType":"ParameterList","parameters":[],"src":"838:0:7"},"scope":1246,"src":"776:69:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1230,"nodeType":"Block","src":"912:34:7","statements":[{"expression":{"expression":{"id":1227,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:7","memberName":"sender","nodeType":"MemberAccess","src":"929:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1226,"id":1229,"nodeType":"Return","src":"922:17:7"}]},"id":1231,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:7","nodeType":"FunctionDefinition","parameters":{"id":1223,"nodeType":"ParameterList","parameters":[],"src":"869:2:7"},"returnParameters":{"id":1226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1231,"src":"903:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1224,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:7"},"scope":1246,"src":"850:96:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1239,"nodeType":"Block","src":"1019:32:7","statements":[{"expression":{"expression":{"id":1236,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:7","memberName":"data","nodeType":"MemberAccess","src":"1036:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1235,"id":1238,"nodeType":"Return","src":"1029:15:7"}]},"id":1240,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:7","nodeType":"FunctionDefinition","parameters":{"id":1232,"nodeType":"ParameterList","parameters":[],"src":"969:2:7"},"returnParameters":{"id":1235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1234,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1240,"src":"1003:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1233,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:7"},"scope":1246,"src":"952:99:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1241,"nodeType":"StructuredDocumentation","src":"1057:254:7","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1245,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:7","nodeType":"VariableDeclaration","scope":1246,"src":"1316:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1242,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1244,"length":{"hexValue":"3530","id":1243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:7","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1247,"src":"651:693:7","usedErrors":[]}],"src":"86:1259:7"},"id":7},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2707],"SignedMathUpgradeable":[2812],"StringsUpgradeable":[1475]},"id":1476,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1248,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1249,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1476,"sourceUnit":2708,"src":"126:36:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":1250,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1476,"sourceUnit":2813,"src":"163:42:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1251,"nodeType":"StructuredDocumentation","src":"207:34:8","text":" @dev String operations."},"fullyImplemented":true,"id":1475,"linearizedBaseContracts":[1475],"name":"StringsUpgradeable","nameLocation":"250:18:8","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1254,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:8","nodeType":"VariableDeclaration","scope":1475,"src":"275:54:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1252,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1257,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:8","nodeType":"VariableDeclaration","scope":1475,"src":"335:43:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1255,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:8","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1304,"nodeType":"Block","src":"551:636:8","statements":[{"id":1303,"nodeType":"UncheckedBlock","src":"561:620:8","statements":[{"assignments":[1266],"declarations":[{"constant":false,"id":1266,"mutability":"mutable","name":"length","nameLocation":"593:6:8","nodeType":"VariableDeclaration","scope":1303,"src":"585:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1265,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1273,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1269,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1260,"src":"624:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1267,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"602:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2707_$","typeString":"type(library MathUpgradeable)"}},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"618:5:8","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2544,"src":"602:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:8"},{"assignments":[1275],"declarations":[{"constant":false,"id":1275,"mutability":"mutable","name":"buffer","nameLocation":"662:6:8","nodeType":"VariableDeclaration","scope":1303,"src":"648:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1274,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1280,"initialValue":{"arguments":[{"id":1278,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"682:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1277,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1276,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"671:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:8"},{"assignments":[1282],"declarations":[{"constant":false,"id":1282,"mutability":"mutable","name":"ptr","nameLocation":"711:3:8","nodeType":"VariableDeclaration","scope":1303,"src":"703:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1281,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1283,"nodeType":"VariableDeclarationStatement","src":"703:11:8"},{"AST":{"nodeType":"YulBlock","src":"784:67:8","statements":[{"nodeType":"YulAssignment","src":"802:35:8","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"813:6:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:2:8","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"829:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"821:3:8"},"nodeType":"YulFunctionCall","src":"821:15:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"809:3:8"},"nodeType":"YulFunctionCall","src":"809:28:8"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"802:3:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1275,"isOffset":false,"isSlot":false,"src":"813:6:8","valueSize":1},{"declaration":1266,"isOffset":false,"isSlot":false,"src":"829:6:8","valueSize":1},{"declaration":1282,"isOffset":false,"isSlot":false,"src":"802:3:8","valueSize":1}],"id":1284,"nodeType":"InlineAssembly","src":"775:76:8"},{"body":{"id":1299,"nodeType":"Block","src":"877:267:8","statements":[{"expression":{"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:8","subExpression":{"id":1286,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"895:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1288,"nodeType":"ExpressionStatement","src":"895:5:8"},{"AST":{"nodeType":"YulBlock","src":"978:84:8","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1008:3:8"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1022:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"1029:2:8","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1018:3:8"},"nodeType":"YulFunctionCall","src":"1018:14:8"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"1034:8:8"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1013:4:8"},"nodeType":"YulFunctionCall","src":"1013:30:8"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1000:7:8"},"nodeType":"YulFunctionCall","src":"1000:44:8"},"nodeType":"YulExpressionStatement","src":"1000:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1254,"isOffset":false,"isSlot":false,"src":"1034:8:8","valueSize":1},{"declaration":1282,"isOffset":false,"isSlot":false,"src":"1008:3:8","valueSize":1},{"declaration":1260,"isOffset":false,"isSlot":false,"src":"1022:5:8","valueSize":1}],"id":1289,"nodeType":"InlineAssembly","src":"969:93:8"},{"expression":{"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1290,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1260,"src":"1079:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1293,"nodeType":"ExpressionStatement","src":"1079:11:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1260,"src":"1112:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1298,"nodeType":"IfStatement","src":"1108:21:8","trueBody":{"id":1297,"nodeType":"Break","src":"1124:5:8"}}]},"condition":{"hexValue":"74727565","id":1285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1300,"nodeType":"WhileStatement","src":"864:280:8"},{"expression":{"id":1301,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"1164:6:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1264,"id":1302,"nodeType":"Return","src":"1157:13:8"}]}]},"documentation":{"id":1258,"nodeType":"StructuredDocumentation","src":"385:90:8","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1305,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:8","nodeType":"FunctionDefinition","parameters":{"id":1261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1260,"mutability":"mutable","name":"value","nameLocation":"506:5:8","nodeType":"VariableDeclaration","scope":1305,"src":"498:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1259,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:8"},"returnParameters":{"id":1264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1305,"src":"536:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1262,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:8"},"scope":1475,"src":"480:707:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1332,"nodeType":"Block","src":"1357:114:8","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1317,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"1398:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:8","trueExpression":{"hexValue":"2d","id":1320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1326,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"1455:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1324,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"1429:21:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$2812_$","typeString":"type(library SignedMathUpgradeable)"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:3:8","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2811,"src":"1429:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1323,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1305,1333],"referencedDeclaration":1305,"src":"1420:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1420:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1315,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1385:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1381:82:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1314,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1313,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:8","typeDescriptions":{}}},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:90:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1312,"id":1331,"nodeType":"Return","src":"1367:97:8"}]},"documentation":{"id":1306,"nodeType":"StructuredDocumentation","src":"1193:89:8","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1333,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:8","nodeType":"FunctionDefinition","parameters":{"id":1309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"value","nameLocation":"1312:5:8","nodeType":"VariableDeclaration","scope":1333,"src":"1305:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1307,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:8"},"returnParameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1333,"src":"1342:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1310,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:8"},"scope":1475,"src":"1287:184:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1352,"nodeType":"Block","src":"1650:111:8","statements":[{"id":1351,"nodeType":"UncheckedBlock","src":"1660:95:8","statements":[{"expression":{"arguments":[{"id":1342,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"1703:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1345,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"1733:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1343,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"1710:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2707_$","typeString":"type(library MathUpgradeable)"}},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:8","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2667,"src":"1710:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1341,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1353,1429,1449],"referencedDeclaration":1429,"src":"1691:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1340,"id":1350,"nodeType":"Return","src":"1684:60:8"}]}]},"documentation":{"id":1334,"nodeType":"StructuredDocumentation","src":"1477:94:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1353,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:8","nodeType":"FunctionDefinition","parameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"value","nameLocation":"1605:5:8","nodeType":"VariableDeclaration","scope":1353,"src":"1597:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:8"},"returnParameters":{"id":1340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1353,"src":"1635:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1338,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:8"},"scope":1475,"src":"1576:185:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1428,"nodeType":"Block","src":"1974:347:8","statements":[{"assignments":[1364],"declarations":[{"constant":false,"id":1364,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:8","nodeType":"VariableDeclaration","scope":1428,"src":"1984:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1363,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1373,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1368,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"2020:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1365,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2006:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:8"},{"expression":{"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1374,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"2041:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1376,"indexExpression":{"hexValue":"30","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1379,"nodeType":"ExpressionStatement","src":"2041:15:8"},{"expression":{"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1380,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"2066:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1382,"indexExpression":{"hexValue":"31","id":1381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1385,"nodeType":"ExpressionStatement","src":"2066:15:8"},{"body":{"id":1414,"nodeType":"Block","src":"2136:83:8","statements":[{"expression":{"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1400,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"2150:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1402,"indexExpression":{"id":1401,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"2157:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1403,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"2162:8:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1407,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"2171:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:8","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1409,"nodeType":"ExpressionStatement","src":"2150:33:8"},{"expression":{"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1410,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"2197:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1413,"nodeType":"ExpressionStatement","src":"2197:11:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1394,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"2124:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1415,"initializationExpression":{"assignments":[1387],"declarations":[{"constant":false,"id":1387,"mutability":"mutable","name":"i","nameLocation":"2104:1:8","nodeType":"VariableDeclaration","scope":1415,"src":"2096:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1386,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1393,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1389,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"2112:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:8"},"loopExpression":{"expression":{"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:8","subExpression":{"id":1397,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"2133:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1399,"nodeType":"ExpressionStatement","src":"2131:3:8"},"nodeType":"ForStatement","src":"2091:128:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1417,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"2236:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1416,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1422,"nodeType":"ExpressionStatement","src":"2228:55:8"},{"expression":{"arguments":[{"id":1425,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"2307:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1423,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:8","typeDescriptions":{}}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1362,"id":1427,"nodeType":"Return","src":"2293:21:8"}]},"documentation":{"id":1354,"nodeType":"StructuredDocumentation","src":"1767:112:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1429,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:8","nodeType":"FunctionDefinition","parameters":{"id":1359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1356,"mutability":"mutable","name":"value","nameLocation":"1913:5:8","nodeType":"VariableDeclaration","scope":1429,"src":"1905:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1355,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1358,"mutability":"mutable","name":"length","nameLocation":"1928:6:8","nodeType":"VariableDeclaration","scope":1429,"src":"1920:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1357,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:8"},"returnParameters":{"id":1362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1429,"src":"1959:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1360,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:8"},"scope":1475,"src":"1884:437:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1448,"nodeType":"Block","src":"2546:76:8","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1442,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"2591:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1440,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:8","typeDescriptions":{}}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1439,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1438,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:8","typeDescriptions":{}}},"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1445,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"2599:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1437,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1353,1429,1449],"referencedDeclaration":1429,"src":"2563:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1436,"id":1447,"nodeType":"Return","src":"2556:59:8"}]},"documentation":{"id":1430,"nodeType":"StructuredDocumentation","src":"2327:141:8","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1449,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:8","nodeType":"FunctionDefinition","parameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1432,"mutability":"mutable","name":"addr","nameLocation":"2502:4:8","nodeType":"VariableDeclaration","scope":1449,"src":"2494:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1431,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:8"},"returnParameters":{"id":1436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1449,"src":"2531:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1434,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:8"},"scope":1475,"src":"2473:149:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1473,"nodeType":"Block","src":"2777:66:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1462,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"2810:1:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1460,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:8","typeDescriptions":{}}},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1459,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1468,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"2833:1:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1466,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:8","typeDescriptions":{}}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1465,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1458,"id":1472,"nodeType":"Return","src":"2787:49:8"}]},"documentation":{"id":1450,"nodeType":"StructuredDocumentation","src":"2628:66:8","text":" @dev Returns true if the two strings are equal."},"id":1474,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:8","nodeType":"FunctionDefinition","parameters":{"id":1455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1452,"mutability":"mutable","name":"a","nameLocation":"2728:1:8","nodeType":"VariableDeclaration","scope":1474,"src":"2714:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1451,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1454,"mutability":"mutable","name":"b","nameLocation":"2745:1:8","nodeType":"VariableDeclaration","scope":1474,"src":"2731:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1453,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:8"},"returnParameters":{"id":1458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1457,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1474,"src":"2771:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1456,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:8"},"scope":1475,"src":"2699:144:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1476,"src":"242:2603:8","usedErrors":[]}],"src":"101:2745:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[1841],"MathUpgradeable":[2707],"SignedMathUpgradeable":[2812],"StringsUpgradeable":[1475]},"id":1842,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1477,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":1478,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1842,"sourceUnit":1476,"src":"137:35:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1479,"nodeType":"StructuredDocumentation","src":"174:205:9","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":1841,"linearizedBaseContracts":[1841],"name":"ECDSAUpgradeable","nameLocation":"388:16:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":1485,"members":[{"id":1480,"name":"NoError","nameLocation":"439:7:9","nodeType":"EnumValue","src":"439:7:9"},{"id":1481,"name":"InvalidSignature","nameLocation":"456:16:9","nodeType":"EnumValue","src":"456:16:9"},{"id":1482,"name":"InvalidSignatureLength","nameLocation":"482:22:9","nodeType":"EnumValue","src":"482:22:9"},{"id":1483,"name":"InvalidSignatureS","nameLocation":"514:17:9","nodeType":"EnumValue","src":"514:17:9"},{"id":1484,"name":"InvalidSignatureV","nameLocation":"541:17:9","nodeType":"EnumValue","src":"541:17:9"}],"name":"RecoverError","nameLocation":"416:12:9","nodeType":"EnumDefinition","src":"411:175:9"},{"body":{"id":1528,"nodeType":"Block","src":"646:457:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1491,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"660:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1492,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"669:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"682:7:9","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1480,"src":"669:20:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1497,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"756:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1498,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"765:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"778:16:9","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1481,"src":"765:29:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1506,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"865:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1507,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"874:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"887:22:9","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"874:35:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1515,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"987:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1516,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"996:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:17:9","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1483,"src":"996:30:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1524,"nodeType":"IfStatement","src":"983:114:9","trueBody":{"id":1523,"nodeType":"Block","src":"1028:69:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":1520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":1519,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1522,"nodeType":"ExpressionStatement","src":"1042:44:9"}]}},"id":1525,"nodeType":"IfStatement","src":"861:236:9","trueBody":{"id":1514,"nodeType":"Block","src":"911:66:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":1510,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:41:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1513,"nodeType":"ExpressionStatement","src":"925:41:9"}]}},"id":1526,"nodeType":"IfStatement","src":"752:345:9","trueBody":{"id":1505,"nodeType":"Block","src":"796:59:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":1502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":1501,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1504,"nodeType":"ExpressionStatement","src":"810:34:9"}]}},"id":1527,"nodeType":"IfStatement","src":"656:441:9","trueBody":{"id":1496,"nodeType":"Block","src":"691:55:9","statements":[{"functionReturnParameters":1490,"id":1495,"nodeType":"Return","src":"705:7:9"}]}}]},"id":1529,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:9","nodeType":"FunctionDefinition","parameters":{"id":1489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1488,"mutability":"mutable","name":"error","nameLocation":"626:5:9","nodeType":"VariableDeclaration","scope":1529,"src":"613:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1487,"nodeType":"UserDefinedTypeName","pathNode":{"id":1486,"name":"RecoverError","nameLocations":["613:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"613:12:9"},"referencedDeclaration":1485,"src":"613:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:9"},"returnParameters":{"id":1490,"nodeType":"ParameterList","parameters":[],"src":"646:0:9"},"scope":1841,"src":"592:511:9","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1574,"nodeType":"Block","src":"2271:626:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1542,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"2285:9:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:9","memberName":"length","nodeType":"MemberAccess","src":"2285:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:9","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1572,"nodeType":"Block","src":"2810:81:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1565,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1564,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:9","typeDescriptions":{}}},"id":1567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1568,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"2844:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2857:22:9","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"2844:35:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1570,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1541,"id":1571,"nodeType":"Return","src":"2824:56:9"}]},"id":1573,"nodeType":"IfStatement","src":"2281:610:9","trueBody":{"id":1563,"nodeType":"Block","src":"2309:495:9","statements":[{"assignments":[1547],"declarations":[{"constant":false,"id":1547,"mutability":"mutable","name":"r","nameLocation":"2331:1:9","nodeType":"VariableDeclaration","scope":1563,"src":"2323:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1546,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1548,"nodeType":"VariableDeclarationStatement","src":"2323:9:9"},{"assignments":[1550],"declarations":[{"constant":false,"id":1550,"mutability":"mutable","name":"s","nameLocation":"2354:1:9","nodeType":"VariableDeclaration","scope":1563,"src":"2346:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1549,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1551,"nodeType":"VariableDeclarationStatement","src":"2346:9:9"},{"assignments":[1553],"declarations":[{"constant":false,"id":1553,"mutability":"mutable","name":"v","nameLocation":"2375:1:9","nodeType":"VariableDeclaration","scope":1563,"src":"2369:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1552,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1554,"nodeType":"VariableDeclarationStatement","src":"2369:7:9"},{"AST":{"nodeType":"YulBlock","src":"2577:171:9","statements":[{"nodeType":"YulAssignment","src":"2595:32:9","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2610:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2621:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:9"},"nodeType":"YulFunctionCall","src":"2606:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:9"},"nodeType":"YulFunctionCall","src":"2600:27:9"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2595:1:9"}]},{"nodeType":"YulAssignment","src":"2644:32:9","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2659:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2670:4:9","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2655:3:9"},"nodeType":"YulFunctionCall","src":"2655:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2649:5:9"},"nodeType":"YulFunctionCall","src":"2649:27:9"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2644:1:9"}]},{"nodeType":"YulAssignment","src":"2693:41:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:9","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2716:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2727:4:9","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:9"},"nodeType":"YulFunctionCall","src":"2712:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2706:5:9"},"nodeType":"YulFunctionCall","src":"2706:27:9"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2698:4:9"},"nodeType":"YulFunctionCall","src":"2698:36:9"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2693:1:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1547,"isOffset":false,"isSlot":false,"src":"2595:1:9","valueSize":1},{"declaration":1550,"isOffset":false,"isSlot":false,"src":"2644:1:9","valueSize":1},{"declaration":1534,"isOffset":false,"isSlot":false,"src":"2610:9:9","valueSize":1},{"declaration":1534,"isOffset":false,"isSlot":false,"src":"2659:9:9","valueSize":1},{"declaration":1534,"isOffset":false,"isSlot":false,"src":"2716:9:9","valueSize":1},{"declaration":1553,"isOffset":false,"isSlot":false,"src":"2693:1:9","valueSize":1}],"id":1555,"nodeType":"InlineAssembly","src":"2568:180:9"},{"expression":{"arguments":[{"id":1557,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"2779:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1558,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"2785:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1559,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"2788:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1560,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"2791:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1556,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1575,1649,1743],"referencedDeclaration":1743,"src":"2768:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1541,"id":1562,"nodeType":"Return","src":"2761:32:9"}]}}]},"documentation":{"id":1530,"nodeType":"StructuredDocumentation","src":"1109:1053:9","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":1575,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:9","nodeType":"FunctionDefinition","parameters":{"id":1535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1532,"mutability":"mutable","name":"hash","nameLocation":"2195:4:9","nodeType":"VariableDeclaration","scope":1575,"src":"2187:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1531,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1534,"mutability":"mutable","name":"signature","nameLocation":"2214:9:9","nodeType":"VariableDeclaration","scope":1575,"src":"2201:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1533,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:9"},"returnParameters":{"id":1541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1537,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1575,"src":"2248:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1536,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1575,"src":"2257:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1539,"nodeType":"UserDefinedTypeName","pathNode":{"id":1538,"name":"RecoverError","nameLocations":["2257:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"2257:12:9"},"referencedDeclaration":1485,"src":"2257:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:9"},"scope":1841,"src":"2167:730:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1601,"nodeType":"Block","src":"3770:140:9","statements":[{"assignments":[1586,1589],"declarations":[{"constant":false,"id":1586,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:9","nodeType":"VariableDeclaration","scope":1601,"src":"3781:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1585,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1589,"mutability":"mutable","name":"error","nameLocation":"3813:5:9","nodeType":"VariableDeclaration","scope":1601,"src":"3800:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1588,"nodeType":"UserDefinedTypeName","pathNode":{"id":1587,"name":"RecoverError","nameLocations":["3800:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"3800:12:9"},"referencedDeclaration":1485,"src":"3800:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1594,"initialValue":{"arguments":[{"id":1591,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"3833:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1592,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"3839:9:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1590,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1575,1649,1743],"referencedDeclaration":1575,"src":"3822:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:9"},{"expression":{"arguments":[{"id":1596,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"3871:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1595,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"3859:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1485_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1598,"nodeType":"ExpressionStatement","src":"3859:18:9"},{"expression":{"id":1599,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"3894:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1584,"id":1600,"nodeType":"Return","src":"3887:16:9"}]},"documentation":{"id":1576,"nodeType":"StructuredDocumentation","src":"2903:775:9","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":1602,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:9","nodeType":"FunctionDefinition","parameters":{"id":1581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1578,"mutability":"mutable","name":"hash","nameLocation":"3708:4:9","nodeType":"VariableDeclaration","scope":1602,"src":"3700:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1577,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1580,"mutability":"mutable","name":"signature","nameLocation":"3727:9:9","nodeType":"VariableDeclaration","scope":1602,"src":"3714:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1579,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:9"},"returnParameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1602,"src":"3761:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1582,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:9"},"scope":1841,"src":"3683:227:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1648,"nodeType":"Block","src":"4267:203:9","statements":[{"assignments":[1618],"declarations":[{"constant":false,"id":1618,"mutability":"mutable","name":"s","nameLocation":"4285:1:9","nodeType":"VariableDeclaration","scope":1648,"src":"4277:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4277:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1625,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1619,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"4289:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4302:66:9","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4294:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1620,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4294:7:9","typeDescriptions":{}}},"id":1623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4294:75:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4289:80:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4277:92:9"},{"assignments":[1627],"declarations":[{"constant":false,"id":1627,"mutability":"mutable","name":"v","nameLocation":"4385:1:9","nodeType":"VariableDeclaration","scope":1648,"src":"4379:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1626,"name":"uint8","nodeType":"ElementaryTypeName","src":"4379:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1640,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1632,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"4404:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4396:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1630,"name":"uint256","nodeType":"ElementaryTypeName","src":"4396:7:9","typeDescriptions":{}}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4396:11:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4411:3:9","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4396:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1636,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4395:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4418:2:9","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4395:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4389:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1628,"name":"uint8","nodeType":"ElementaryTypeName","src":"4389:5:9","typeDescriptions":{}}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4389:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4379:42:9"},{"expression":{"arguments":[{"id":1642,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"4449:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1643,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"4455:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1644,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"4458:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1645,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"4461:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1641,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1575,1649,1743],"referencedDeclaration":1743,"src":"4438:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1616,"id":1647,"nodeType":"Return","src":"4431:32:9"}]},"documentation":{"id":1603,"nodeType":"StructuredDocumentation","src":"3916:243:9","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":1649,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:9","nodeType":"FunctionDefinition","parameters":{"id":1610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1605,"mutability":"mutable","name":"hash","nameLocation":"4192:4:9","nodeType":"VariableDeclaration","scope":1649,"src":"4184:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1604,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4184:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1607,"mutability":"mutable","name":"r","nameLocation":"4206:1:9","nodeType":"VariableDeclaration","scope":1649,"src":"4198:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4198:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1609,"mutability":"mutable","name":"vs","nameLocation":"4217:2:9","nodeType":"VariableDeclaration","scope":1649,"src":"4209:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1608,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4209:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:37:9"},"returnParameters":{"id":1616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1649,"src":"4244:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1611,"name":"address","nodeType":"ElementaryTypeName","src":"4244:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1615,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1649,"src":"4253:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1614,"nodeType":"UserDefinedTypeName","pathNode":{"id":1613,"name":"RecoverError","nameLocations":["4253:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"4253:12:9"},"referencedDeclaration":1485,"src":"4253:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4243:23:9"},"scope":1841,"src":"4164:306:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1678,"nodeType":"Block","src":"4721:136:9","statements":[{"assignments":[1662,1665],"declarations":[{"constant":false,"id":1662,"mutability":"mutable","name":"recovered","nameLocation":"4740:9:9","nodeType":"VariableDeclaration","scope":1678,"src":"4732:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1661,"name":"address","nodeType":"ElementaryTypeName","src":"4732:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1665,"mutability":"mutable","name":"error","nameLocation":"4764:5:9","nodeType":"VariableDeclaration","scope":1678,"src":"4751:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1664,"nodeType":"UserDefinedTypeName","pathNode":{"id":1663,"name":"RecoverError","nameLocations":["4751:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"4751:12:9"},"referencedDeclaration":1485,"src":"4751:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1671,"initialValue":{"arguments":[{"id":1667,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"4784:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1668,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"4790:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1669,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"4793:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1666,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1575,1649,1743],"referencedDeclaration":1649,"src":"4773:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4773:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4731:65:9"},{"expression":{"arguments":[{"id":1673,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"4818:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1672,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"4806:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1485_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1675,"nodeType":"ExpressionStatement","src":"4806:18:9"},{"expression":{"id":1676,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"4841:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1660,"id":1677,"nodeType":"Return","src":"4834:16:9"}]},"documentation":{"id":1650,"nodeType":"StructuredDocumentation","src":"4476:154:9","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":1679,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4644:7:9","nodeType":"FunctionDefinition","parameters":{"id":1657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1652,"mutability":"mutable","name":"hash","nameLocation":"4660:4:9","nodeType":"VariableDeclaration","scope":1679,"src":"4652:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4652:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1654,"mutability":"mutable","name":"r","nameLocation":"4674:1:9","nodeType":"VariableDeclaration","scope":1679,"src":"4666:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1653,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4666:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1656,"mutability":"mutable","name":"vs","nameLocation":"4685:2:9","nodeType":"VariableDeclaration","scope":1679,"src":"4677:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1655,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4677:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4651:37:9"},"returnParameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1679,"src":"4712:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1658,"name":"address","nodeType":"ElementaryTypeName","src":"4712:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4711:9:9"},"scope":1841,"src":"4635:222:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1742,"nodeType":"Block","src":"5142:1345:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1698,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"6038:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6030:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1696,"name":"uint256","nodeType":"ElementaryTypeName","src":"6030:7:9","typeDescriptions":{}}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6030:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6043:66:9","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6030:79:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1711,"nodeType":"IfStatement","src":"6026:161:9","trueBody":{"id":1710,"nodeType":"Block","src":"6111:76:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1703,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1702,"name":"address","nodeType":"ElementaryTypeName","src":"6133:7:9","typeDescriptions":{}}},"id":1705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6133:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1706,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"6145:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6158:17:9","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1483,"src":"6145:30:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1708,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6132:44:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1695,"id":1709,"nodeType":"Return","src":"6125:51:9"}]}},{"assignments":[1713],"declarations":[{"constant":false,"id":1713,"mutability":"mutable","name":"signer","nameLocation":"6289:6:9","nodeType":"VariableDeclaration","scope":1742,"src":"6281:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1712,"name":"address","nodeType":"ElementaryTypeName","src":"6281:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1720,"initialValue":{"arguments":[{"id":1715,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"6308:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1716,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"6314:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1717,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"6317:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1718,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"6320:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1714,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6298:9:9","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6281:41:9"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1721,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"6336:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6354:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6346:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1722,"name":"address","nodeType":"ElementaryTypeName","src":"6346:7:9","typeDescriptions":{}}},"id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6336:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1736,"nodeType":"IfStatement","src":"6332:101:9","trueBody":{"id":1735,"nodeType":"Block","src":"6358:75:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6388:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1728,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6380:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1727,"name":"address","nodeType":"ElementaryTypeName","src":"6380:7:9","typeDescriptions":{}}},"id":1730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6380:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1731,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"6392:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6405:16:9","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1481,"src":"6392:29:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1733,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6379:43:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1695,"id":1734,"nodeType":"Return","src":"6372:50:9"}]}},{"expression":{"components":[{"id":1737,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"6451:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1738,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"6459:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6472:7:9","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1480,"src":"6459:20:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1740,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6450:30:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1695,"id":1741,"nodeType":"Return","src":"6443:37:9"}]},"documentation":{"id":1680,"nodeType":"StructuredDocumentation","src":"4863:163:9","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":1743,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5040:10:9","nodeType":"FunctionDefinition","parameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1682,"mutability":"mutable","name":"hash","nameLocation":"5059:4:9","nodeType":"VariableDeclaration","scope":1743,"src":"5051:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1681,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5051:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1684,"mutability":"mutable","name":"v","nameLocation":"5071:1:9","nodeType":"VariableDeclaration","scope":1743,"src":"5065:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1683,"name":"uint8","nodeType":"ElementaryTypeName","src":"5065:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1686,"mutability":"mutable","name":"r","nameLocation":"5082:1:9","nodeType":"VariableDeclaration","scope":1743,"src":"5074:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1685,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5074:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1688,"mutability":"mutable","name":"s","nameLocation":"5093:1:9","nodeType":"VariableDeclaration","scope":1743,"src":"5085:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1687,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5085:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5050:45:9"},"returnParameters":{"id":1695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1691,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1743,"src":"5119:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1690,"name":"address","nodeType":"ElementaryTypeName","src":"5119:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1743,"src":"5128:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1693,"nodeType":"UserDefinedTypeName","pathNode":{"id":1692,"name":"RecoverError","nameLocations":["5128:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"5128:12:9"},"referencedDeclaration":1485,"src":"5128:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5118:23:9"},"scope":1841,"src":"5031:1456:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1775,"nodeType":"Block","src":"6714:138:9","statements":[{"assignments":[1758,1761],"declarations":[{"constant":false,"id":1758,"mutability":"mutable","name":"recovered","nameLocation":"6733:9:9","nodeType":"VariableDeclaration","scope":1775,"src":"6725:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1757,"name":"address","nodeType":"ElementaryTypeName","src":"6725:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1761,"mutability":"mutable","name":"error","nameLocation":"6757:5:9","nodeType":"VariableDeclaration","scope":1775,"src":"6744:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1760,"nodeType":"UserDefinedTypeName","pathNode":{"id":1759,"name":"RecoverError","nameLocations":["6744:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"6744:12:9"},"referencedDeclaration":1485,"src":"6744:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1768,"initialValue":{"arguments":[{"id":1763,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"6777:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1764,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"6783:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1765,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"6786:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1766,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"6789:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1762,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1575,1649,1743],"referencedDeclaration":1743,"src":"6766:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6724:67:9"},{"expression":{"arguments":[{"id":1770,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"6813:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1769,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"6801:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1485_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1772,"nodeType":"ExpressionStatement","src":"6801:18:9"},{"expression":{"id":1773,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"6836:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1756,"id":1774,"nodeType":"Return","src":"6829:16:9"}]},"documentation":{"id":1744,"nodeType":"StructuredDocumentation","src":"6493:122:9","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1776,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6629:7:9","nodeType":"FunctionDefinition","parameters":{"id":1753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1746,"mutability":"mutable","name":"hash","nameLocation":"6645:4:9","nodeType":"VariableDeclaration","scope":1776,"src":"6637:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1745,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6637:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1748,"mutability":"mutable","name":"v","nameLocation":"6657:1:9","nodeType":"VariableDeclaration","scope":1776,"src":"6651:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1747,"name":"uint8","nodeType":"ElementaryTypeName","src":"6651:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1750,"mutability":"mutable","name":"r","nameLocation":"6668:1:9","nodeType":"VariableDeclaration","scope":1776,"src":"6660:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1749,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6660:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1752,"mutability":"mutable","name":"s","nameLocation":"6679:1:9","nodeType":"VariableDeclaration","scope":1776,"src":"6671:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1751,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6671:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6636:45:9"},"returnParameters":{"id":1756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1776,"src":"6705:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1754,"name":"address","nodeType":"ElementaryTypeName","src":"6705:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6704:9:9"},"scope":1841,"src":"6620:232:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1785,"nodeType":"Block","src":"7228:310:9","statements":[{"AST":{"nodeType":"YulBlock","src":"7384:148:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7405:4:9","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7411:34:9","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7398:6:9"},"nodeType":"YulFunctionCall","src":"7398:48:9"},"nodeType":"YulExpressionStatement","src":"7398:48:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7466:4:9","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7472:4:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7459:6:9"},"nodeType":"YulFunctionCall","src":"7459:18:9"},"nodeType":"YulExpressionStatement","src":"7459:18:9"},{"nodeType":"YulAssignment","src":"7490:32:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7511:4:9","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7517:4:9","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7501:9:9"},"nodeType":"YulFunctionCall","src":"7501:21:9"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7490:7:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1779,"isOffset":false,"isSlot":false,"src":"7472:4:9","valueSize":1},{"declaration":1782,"isOffset":false,"isSlot":false,"src":"7490:7:9","valueSize":1}],"id":1784,"nodeType":"InlineAssembly","src":"7375:157:9"}]},"documentation":{"id":1777,"nodeType":"StructuredDocumentation","src":"6858:279:9","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1786,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7151:22:9","nodeType":"FunctionDefinition","parameters":{"id":1780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1779,"mutability":"mutable","name":"hash","nameLocation":"7182:4:9","nodeType":"VariableDeclaration","scope":1786,"src":"7174:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1778,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7174:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7173:14:9"},"returnParameters":{"id":1783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1782,"mutability":"mutable","name":"message","nameLocation":"7219:7:9","nodeType":"VariableDeclaration","scope":1786,"src":"7211:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1781,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7211:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7210:17:9"},"scope":1841,"src":"7142:396:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1807,"nodeType":"Block","src":"7903:127:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7947:32:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":1800,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"8009:1:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8011:6:9","memberName":"length","nodeType":"MemberAccess","src":"8009:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1798,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"7981:18:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1475_$","typeString":"type(library StringsUpgradeable)"}},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8000:8:9","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1305,"src":"7981:27:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7981:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1803,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"8020:1:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1795,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7930:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7934:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"7930:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7930:92:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1794,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7920:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7920:103:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1793,"id":1806,"nodeType":"Return","src":"7913:110:9"}]},"documentation":{"id":1787,"nodeType":"StructuredDocumentation","src":"7544:274:9","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1808,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7832:22:9","nodeType":"FunctionDefinition","parameters":{"id":1790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1789,"mutability":"mutable","name":"s","nameLocation":"7868:1:9","nodeType":"VariableDeclaration","scope":1808,"src":"7855:14:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1788,"name":"bytes","nodeType":"ElementaryTypeName","src":"7855:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7854:16:9"},"returnParameters":{"id":1793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1792,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1808,"src":"7894:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1791,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7894:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7893:9:9"},"scope":1841,"src":"7823:207:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1819,"nodeType":"Block","src":"8476:290:9","statements":[{"AST":{"nodeType":"YulBlock","src":"8538:222:9","statements":[{"nodeType":"YulVariableDeclaration","src":"8552:22:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8569:4:9","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8563:5:9"},"nodeType":"YulFunctionCall","src":"8563:11:9"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8556:3:9","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8594:3:9"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8599:10:9","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8587:6:9"},"nodeType":"YulFunctionCall","src":"8587:23:9"},"nodeType":"YulExpressionStatement","src":"8587:23:9"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8634:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8639:4:9","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8630:3:9"},"nodeType":"YulFunctionCall","src":"8630:14:9"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8646:15:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8623:6:9"},"nodeType":"YulFunctionCall","src":"8623:39:9"},"nodeType":"YulExpressionStatement","src":"8623:39:9"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8686:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8691:4:9","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8682:3:9"},"nodeType":"YulFunctionCall","src":"8682:14:9"},{"name":"structHash","nodeType":"YulIdentifier","src":"8698:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8675:6:9"},"nodeType":"YulFunctionCall","src":"8675:34:9"},"nodeType":"YulExpressionStatement","src":"8675:34:9"},{"nodeType":"YulAssignment","src":"8722:28:9","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8740:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8745:4:9","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8730:9:9"},"nodeType":"YulFunctionCall","src":"8730:20:9"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8722:4:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1816,"isOffset":false,"isSlot":false,"src":"8722:4:9","valueSize":1},{"declaration":1811,"isOffset":false,"isSlot":false,"src":"8646:15:9","valueSize":1},{"declaration":1813,"isOffset":false,"isSlot":false,"src":"8698:10:9","valueSize":1}],"id":1818,"nodeType":"InlineAssembly","src":"8529:231:9"}]},"documentation":{"id":1809,"nodeType":"StructuredDocumentation","src":"8036:328:9","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":1820,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8378:15:9","nodeType":"FunctionDefinition","parameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1811,"mutability":"mutable","name":"domainSeparator","nameLocation":"8402:15:9","nodeType":"VariableDeclaration","scope":1820,"src":"8394:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1810,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8394:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1813,"mutability":"mutable","name":"structHash","nameLocation":"8427:10:9","nodeType":"VariableDeclaration","scope":1820,"src":"8419:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1812,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8419:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8393:45:9"},"returnParameters":{"id":1817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1816,"mutability":"mutable","name":"data","nameLocation":"8470:4:9","nodeType":"VariableDeclaration","scope":1820,"src":"8462:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1815,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8462:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8461:14:9"},"scope":1841,"src":"8369:397:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1839,"nodeType":"Block","src":"9081:80:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":1833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9125:10:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":1834,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"9137:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1835,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"9148:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1831,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9108:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1832,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9112:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"9108:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9108:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1830,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9098:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9098:56:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1829,"id":1838,"nodeType":"Return","src":"9091:63:9"}]},"documentation":{"id":1821,"nodeType":"StructuredDocumentation","src":"8772:193:9","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":1840,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8979:31:9","nodeType":"FunctionDefinition","parameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"validator","nameLocation":"9019:9:9","nodeType":"VariableDeclaration","scope":1840,"src":"9011:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1822,"name":"address","nodeType":"ElementaryTypeName","src":"9011:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"data","nameLocation":"9043:4:9","nodeType":"VariableDeclaration","scope":1840,"src":"9030:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1824,"name":"bytes","nodeType":"ElementaryTypeName","src":"9030:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9010:38:9"},"returnParameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1840,"src":"9072:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1827,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9072:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9071:9:9"},"scope":1841,"src":"8970:191:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1842,"src":"380:8783:9","usedErrors":[]}],"src":"112:9052:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2707]},"id":2708,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1843,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1844,"nodeType":"StructuredDocumentation","src":"128:73:10","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2707,"linearizedBaseContracts":[2707],"name":"MathUpgradeable","nameLocation":"210:15:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":1848,"members":[{"id":1845,"name":"Down","nameLocation":"256:4:10","nodeType":"EnumValue","src":"256:4:10"},{"id":1846,"name":"Up","nameLocation":"298:2:10","nodeType":"EnumValue","src":"298:2:10"},{"id":1847,"name":"Zero","nameLocation":"329:4:10","nodeType":"EnumValue","src":"329:4:10"}],"name":"Rounding","nameLocation":"237:8:10","nodeType":"EnumDefinition","src":"232:122:10"},{"body":{"id":1865,"nodeType":"Block","src":"491:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1858,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"508:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1859,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"512:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1862,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"520:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:10","trueExpression":{"id":1861,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"516:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1857,"id":1864,"nodeType":"Return","src":"501:20:10"}]},"documentation":{"id":1849,"nodeType":"StructuredDocumentation","src":"360:59:10","text":" @dev Returns the largest of two numbers."},"id":1866,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:10","nodeType":"FunctionDefinition","parameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1851,"mutability":"mutable","name":"a","nameLocation":"445:1:10","nodeType":"VariableDeclaration","scope":1866,"src":"437:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1850,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1853,"mutability":"mutable","name":"b","nameLocation":"456:1:10","nodeType":"VariableDeclaration","scope":1866,"src":"448:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1852,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:10"},"returnParameters":{"id":1857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1866,"src":"482:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1855,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:10"},"scope":2707,"src":"424:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1883,"nodeType":"Block","src":"666:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1876,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"683:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1877,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"687:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1880,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"695:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:10","trueExpression":{"id":1879,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"691:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1875,"id":1882,"nodeType":"Return","src":"676:20:10"}]},"documentation":{"id":1867,"nodeType":"StructuredDocumentation","src":"534:60:10","text":" @dev Returns the smallest of two numbers."},"id":1884,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:10","nodeType":"FunctionDefinition","parameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1869,"mutability":"mutable","name":"a","nameLocation":"620:1:10","nodeType":"VariableDeclaration","scope":1884,"src":"612:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1868,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1871,"mutability":"mutable","name":"b","nameLocation":"631:1:10","nodeType":"VariableDeclaration","scope":1884,"src":"623:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:10"},"returnParameters":{"id":1875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1874,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1884,"src":"657:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1873,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:10"},"scope":2707,"src":"599:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1906,"nodeType":"Block","src":"887:82:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1894,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"942:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1895,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"946:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1897,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1898,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"952:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1899,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"956:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1901,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1893,"id":1905,"nodeType":"Return","src":"934:28:10"}]},"documentation":{"id":1885,"nodeType":"StructuredDocumentation","src":"709:102:10","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1907,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:10","nodeType":"FunctionDefinition","parameters":{"id":1890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1887,"mutability":"mutable","name":"a","nameLocation":"841:1:10","nodeType":"VariableDeclaration","scope":1907,"src":"833:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1886,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1889,"mutability":"mutable","name":"b","nameLocation":"852:1:10","nodeType":"VariableDeclaration","scope":1907,"src":"844:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1888,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:10"},"returnParameters":{"id":1893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1907,"src":"878:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1891,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:10"},"scope":2707,"src":"816:153:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1931,"nodeType":"Block","src":"1239:123:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1917,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"1327:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1921,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"1341:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1924,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1925,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"1350:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:10","trueExpression":{"hexValue":"30","id":1920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1916,"id":1930,"nodeType":"Return","src":"1320:35:10"}]},"documentation":{"id":1908,"nodeType":"StructuredDocumentation","src":"975:188:10","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1932,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:10","nodeType":"FunctionDefinition","parameters":{"id":1913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1910,"mutability":"mutable","name":"a","nameLocation":"1193:1:10","nodeType":"VariableDeclaration","scope":1932,"src":"1185:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1909,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1912,"mutability":"mutable","name":"b","nameLocation":"1204:1:10","nodeType":"VariableDeclaration","scope":1932,"src":"1196:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1911,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:10"},"returnParameters":{"id":1916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1915,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1932,"src":"1230:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1914,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:10"},"scope":2707,"src":"1168:194:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2054,"nodeType":"Block","src":"1776:4115:10","statements":[{"id":2053,"nodeType":"UncheckedBlock","src":"1786:4099:10","statements":[{"assignments":[1945],"declarations":[{"constant":false,"id":1945,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:10","nodeType":"VariableDeclaration","scope":2053,"src":"2107:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1944,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1946,"nodeType":"VariableDeclarationStatement","src":"2107:13:10"},{"assignments":[1948],"declarations":[{"constant":false,"id":1948,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:10","nodeType":"VariableDeclaration","scope":2053,"src":"2179:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1947,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1949,"nodeType":"VariableDeclarationStatement","src":"2179:13:10"},{"AST":{"nodeType":"YulBlock","src":"2259:157:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2277:30:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2294:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2297:1:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2304:1:10","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2300:3:10"},"nodeType":"YulFunctionCall","src":"2300:6:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2287:6:10"},"nodeType":"YulFunctionCall","src":"2287:20:10"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2281:2:10","type":""}]},{"nodeType":"YulAssignment","src":"2324:18:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2337:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2340:1:10"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2333:3:10"},"nodeType":"YulFunctionCall","src":"2333:9:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2324:5:10"}]},{"nodeType":"YulAssignment","src":"2359:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2376:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2380:5:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2372:3:10"},"nodeType":"YulFunctionCall","src":"2372:14:10"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2391:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2395:5:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2388:2:10"},"nodeType":"YulFunctionCall","src":"2388:13:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2368:3:10"},"nodeType":"YulFunctionCall","src":"2368:34:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2359:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1945,"isOffset":false,"isSlot":false,"src":"2324:5:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"2380:5:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"2395:5:10","valueSize":1},{"declaration":1948,"isOffset":false,"isSlot":false,"src":"2359:5:10","valueSize":1},{"declaration":1935,"isOffset":false,"isSlot":false,"src":"2294:1:10","valueSize":1},{"declaration":1935,"isOffset":false,"isSlot":false,"src":"2337:1:10","valueSize":1},{"declaration":1937,"isOffset":false,"isSlot":false,"src":"2297:1:10","valueSize":1},{"declaration":1937,"isOffset":false,"isSlot":false,"src":"2340:1:10","valueSize":1}],"id":1950,"nodeType":"InlineAssembly","src":"2250:166:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1951,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"2497:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1959,"nodeType":"IfStatement","src":"2493:368:10","trueBody":{"id":1958,"nodeType":"Block","src":"2509:352:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1954,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"2827:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1955,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"2835:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1943,"id":1957,"nodeType":"Return","src":"2820:26:10"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1961,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"2971:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1962,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"2985:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":1964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":1960,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:53:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1966,"nodeType":"ExpressionStatement","src":"2963:53:10"},{"assignments":[1968],"declarations":[{"constant":false,"id":1968,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:10","nodeType":"VariableDeclaration","scope":2053,"src":"3272:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1967,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1969,"nodeType":"VariableDeclarationStatement","src":"3272:17:10"},{"AST":{"nodeType":"YulBlock","src":"3312:291:10","statements":[{"nodeType":"YulAssignment","src":"3381:38:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3401:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"3404:1:10"},{"name":"denominator","nodeType":"YulIdentifier","src":"3407:11:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3394:6:10"},"nodeType":"YulFunctionCall","src":"3394:25:10"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3381:9:10"}]},{"nodeType":"YulAssignment","src":"3501:41:10","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3514:5:10"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3524:9:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"3535:5:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3521:2:10"},"nodeType":"YulFunctionCall","src":"3521:20:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:10"},"nodeType":"YulFunctionCall","src":"3510:32:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3501:5:10"}]},{"nodeType":"YulAssignment","src":"3559:30:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3572:5:10"},{"name":"remainder","nodeType":"YulIdentifier","src":"3579:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3568:3:10"},"nodeType":"YulFunctionCall","src":"3568:21:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3559:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1939,"isOffset":false,"isSlot":false,"src":"3407:11:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"3535:5:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"3559:5:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"3572:5:10","valueSize":1},{"declaration":1948,"isOffset":false,"isSlot":false,"src":"3501:5:10","valueSize":1},{"declaration":1948,"isOffset":false,"isSlot":false,"src":"3514:5:10","valueSize":1},{"declaration":1968,"isOffset":false,"isSlot":false,"src":"3381:9:10","valueSize":1},{"declaration":1968,"isOffset":false,"isSlot":false,"src":"3524:9:10","valueSize":1},{"declaration":1968,"isOffset":false,"isSlot":false,"src":"3579:9:10","valueSize":1},{"declaration":1935,"isOffset":false,"isSlot":false,"src":"3401:1:10","valueSize":1},{"declaration":1937,"isOffset":false,"isSlot":false,"src":"3404:1:10","valueSize":1}],"id":1970,"nodeType":"InlineAssembly","src":"3303:300:10"},{"assignments":[1972],"declarations":[{"constant":false,"id":1972,"mutability":"mutable","name":"twos","nameLocation":"3918:4:10","nodeType":"VariableDeclaration","scope":2053,"src":"3910:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1971,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1980,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1973,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"3925:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:10","subExpression":{"id":1974,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"3941:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:10"},{"AST":{"nodeType":"YulBlock","src":"3980:362:10","statements":[{"nodeType":"YulAssignment","src":"4045:37:10","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4064:11:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4077:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4060:3:10"},"nodeType":"YulFunctionCall","src":"4060:22:10"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4045:11:10"}]},{"nodeType":"YulAssignment","src":"4149:25:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4162:5:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4169:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4158:3:10"},"nodeType":"YulFunctionCall","src":"4158:16:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4149:5:10"}]},{"nodeType":"YulAssignment","src":"4289:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4309:1:10","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4312:4:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4305:3:10"},"nodeType":"YulFunctionCall","src":"4305:12:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4319:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4301:3:10"},"nodeType":"YulFunctionCall","src":"4301:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4326:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:10"},"nodeType":"YulFunctionCall","src":"4297:31:10"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4289:4:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1939,"isOffset":false,"isSlot":false,"src":"4045:11:10","valueSize":1},{"declaration":1939,"isOffset":false,"isSlot":false,"src":"4064:11:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"4149:5:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"4162:5:10","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"4077:4:10","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"4169:4:10","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"4289:4:10","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"4312:4:10","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"4319:4:10","valueSize":1}],"id":1981,"nodeType":"InlineAssembly","src":"3971:371:10"},{"expression":{"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1982,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"4408:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1983,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"4417:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1984,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"4425:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1987,"nodeType":"ExpressionStatement","src":"4408:21:10"},{"assignments":[1989],"declarations":[{"constant":false,"id":1989,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:10","nodeType":"VariableDeclaration","scope":2053,"src":"4747:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1988,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1996,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1991,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"4770:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1993,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:10"},{"expression":{"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1997,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5003:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1999,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"5018:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2000,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5032:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2004,"nodeType":"ExpressionStatement","src":"5003:36:10"},{"expression":{"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2005,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5072:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2007,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"5087:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2008,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5101:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2012,"nodeType":"ExpressionStatement","src":"5072:36:10"},{"expression":{"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2013,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5142:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2015,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"5157:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2016,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5171:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2020,"nodeType":"ExpressionStatement","src":"5142:36:10"},{"expression":{"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2021,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5212:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2023,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"5227:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2024,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5241:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2028,"nodeType":"ExpressionStatement","src":"5212:36:10"},{"expression":{"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2029,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5282:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2031,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"5297:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2032,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5311:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2036,"nodeType":"ExpressionStatement","src":"5282:36:10"},{"expression":{"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2037,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5353:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2039,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"5368:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2040,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5382:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2044,"nodeType":"ExpressionStatement","src":"5353:36:10"},{"expression":{"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2045,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"5823:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2046,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"5832:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2047,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5840:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2050,"nodeType":"ExpressionStatement","src":"5823:24:10"},{"expression":{"id":2051,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"5868:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1943,"id":2052,"nodeType":"Return","src":"5861:13:10"}]}]},"documentation":{"id":1933,"nodeType":"StructuredDocumentation","src":"1368:305:10","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2055,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:10","nodeType":"FunctionDefinition","parameters":{"id":1940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1935,"mutability":"mutable","name":"x","nameLocation":"1702:1:10","nodeType":"VariableDeclaration","scope":2055,"src":"1694:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1934,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1937,"mutability":"mutable","name":"y","nameLocation":"1713:1:10","nodeType":"VariableDeclaration","scope":2055,"src":"1705:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1936,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1939,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:10","nodeType":"VariableDeclaration","scope":2055,"src":"1716:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1938,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:10"},"returnParameters":{"id":1943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1942,"mutability":"mutable","name":"result","nameLocation":"1768:6:10","nodeType":"VariableDeclaration","scope":2055,"src":"1760:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1941,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:10"},"scope":2707,"src":"1678:4213:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2098,"nodeType":"Block","src":"6133:189:10","statements":[{"assignments":[2071],"declarations":[{"constant":false,"id":2071,"mutability":"mutable","name":"result","nameLocation":"6151:6:10","nodeType":"VariableDeclaration","scope":2098,"src":"6143:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2070,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2077,"initialValue":{"arguments":[{"id":2073,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6167:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2074,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"6170:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2075,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"6173:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2072,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2055,2099],"referencedDeclaration":2055,"src":"6160:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6160:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2078,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"6199:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2079,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"6211:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1848_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6220:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1846,"src":"6211:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2083,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6233:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2084,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"6236:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2085,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"6239:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2082,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6226:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2095,"nodeType":"IfStatement","src":"6195:98:10","trueBody":{"id":2094,"nodeType":"Block","src":"6257:36:10","statements":[{"expression":{"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2090,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"6271:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2093,"nodeType":"ExpressionStatement","src":"6271:11:10"}]}},{"expression":{"id":2096,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"6309:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2069,"id":2097,"nodeType":"Return","src":"6302:13:10"}]},"documentation":{"id":2056,"nodeType":"StructuredDocumentation","src":"5897:121:10","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2099,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:10","nodeType":"FunctionDefinition","parameters":{"id":2066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2058,"mutability":"mutable","name":"x","nameLocation":"6047:1:10","nodeType":"VariableDeclaration","scope":2099,"src":"6039:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2057,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2060,"mutability":"mutable","name":"y","nameLocation":"6058:1:10","nodeType":"VariableDeclaration","scope":2099,"src":"6050:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2059,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2062,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:10","nodeType":"VariableDeclaration","scope":2099,"src":"6061:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2061,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2065,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:10","nodeType":"VariableDeclaration","scope":2099,"src":"6082:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2064,"nodeType":"UserDefinedTypeName","pathNode":{"id":2063,"name":"Rounding","nameLocations":["6082:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1848,"src":"6082:8:10"},"referencedDeclaration":1848,"src":"6082:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:10"},"returnParameters":{"id":2069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2068,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2099,"src":"6124:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2067,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:10"},"scope":2707,"src":"6023:299:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2210,"nodeType":"Block","src":"6598:1585:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2107,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"6612:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2113,"nodeType":"IfStatement","src":"6608:45:10","trueBody":{"id":2112,"nodeType":"Block","src":"6620:33:10","statements":[{"expression":{"hexValue":"30","id":2110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2106,"id":2111,"nodeType":"Return","src":"6634:8:10"}]}},{"assignments":[2115],"declarations":[{"constant":false,"id":2115,"mutability":"mutable","name":"result","nameLocation":"7340:6:10","nodeType":"VariableDeclaration","scope":2210,"src":"7332:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2114,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2124,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2118,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"7360:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2117,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2379,2415],"referencedDeclaration":2379,"src":"7355:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2122,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:10"},{"id":2209,"nodeType":"UncheckedBlock","src":"7769:408:10","statements":[{"expression":{"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2125,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7793:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2126,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7803:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2127,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"7812:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2128,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7816:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2131,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2135,"nodeType":"ExpressionStatement","src":"7793:35:10"},{"expression":{"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2136,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7842:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2137,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7852:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2138,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"7861:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2139,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7865:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2142,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2146,"nodeType":"ExpressionStatement","src":"7842:35:10"},{"expression":{"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2147,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7891:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2148,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7901:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2149,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"7910:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2150,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7914:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2153,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2157,"nodeType":"ExpressionStatement","src":"7891:35:10"},{"expression":{"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2158,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7940:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2159,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7950:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2160,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"7959:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2161,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7963:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2164,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2168,"nodeType":"ExpressionStatement","src":"7940:35:10"},{"expression":{"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2169,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7989:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2170,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7999:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2171,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"8008:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2172,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8012:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2175,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2179,"nodeType":"ExpressionStatement","src":"7989:35:10"},{"expression":{"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2180,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8038:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2181,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8048:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2182,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"8057:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2183,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8061:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2186,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2190,"nodeType":"ExpressionStatement","src":"8038:35:10"},{"expression":{"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2191,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8087:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2192,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8097:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2193,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"8106:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2194,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8110:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2197,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2201,"nodeType":"ExpressionStatement","src":"8087:35:10"},{"expression":{"arguments":[{"id":2203,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8147:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2204,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"8155:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2205,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8159:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2202,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"8143:3:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2106,"id":2208,"nodeType":"Return","src":"8136:30:10"}]}]},"documentation":{"id":2100,"nodeType":"StructuredDocumentation","src":"6328:208:10","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2211,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:10","nodeType":"FunctionDefinition","parameters":{"id":2103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2102,"mutability":"mutable","name":"a","nameLocation":"6563:1:10","nodeType":"VariableDeclaration","scope":2211,"src":"6555:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2101,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:10"},"returnParameters":{"id":2106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2211,"src":"6589:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2104,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:10"},"scope":2707,"src":"6541:1642:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2246,"nodeType":"Block","src":"8359:161:10","statements":[{"id":2245,"nodeType":"UncheckedBlock","src":"8369:145:10","statements":[{"assignments":[2223],"declarations":[{"constant":false,"id":2223,"mutability":"mutable","name":"result","nameLocation":"8401:6:10","nodeType":"VariableDeclaration","scope":2245,"src":"8393:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2222,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2227,"initialValue":{"arguments":[{"id":2225,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"8415:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2224,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2211,2247],"referencedDeclaration":2211,"src":"8410:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8410:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2228,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"8438:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2229,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"8448:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2230,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"8460:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1848_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8469:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1846,"src":"8460:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2233,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"8475:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2234,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"8484:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2236,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"8493:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:10","trueExpression":{"hexValue":"31","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2242,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2221,"id":2244,"nodeType":"Return","src":"8431:72:10"}]}]},"documentation":{"id":2212,"nodeType":"StructuredDocumentation","src":"8189:89:10","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2247,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:10","nodeType":"FunctionDefinition","parameters":{"id":2218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2214,"mutability":"mutable","name":"a","nameLocation":"8305:1:10","nodeType":"VariableDeclaration","scope":2247,"src":"8297:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2213,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2217,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:10","nodeType":"VariableDeclaration","scope":2247,"src":"8308:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2216,"nodeType":"UserDefinedTypeName","pathNode":{"id":2215,"name":"Rounding","nameLocations":["8308:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1848,"src":"8308:8:10"},"referencedDeclaration":1848,"src":"8308:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:10"},"returnParameters":{"id":2221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2247,"src":"8350:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2219,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:10"},"scope":2707,"src":"8283:237:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2378,"nodeType":"Block","src":"8705:922:10","statements":[{"assignments":[2256],"declarations":[{"constant":false,"id":2256,"mutability":"mutable","name":"result","nameLocation":"8723:6:10","nodeType":"VariableDeclaration","scope":2378,"src":"8715:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2255,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2258,"initialValue":{"hexValue":"30","id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:10"},{"id":2375,"nodeType":"UncheckedBlock","src":"8743:855:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8771:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2273,"nodeType":"IfStatement","src":"8767:99:10","trueBody":{"id":2272,"nodeType":"Block","src":"8789:77:10","statements":[{"expression":{"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2264,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8807:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2267,"nodeType":"ExpressionStatement","src":"8807:13:10"},{"expression":{"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2268,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"8838:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2271,"nodeType":"ExpressionStatement","src":"8838:13:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2274,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8883:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2288,"nodeType":"IfStatement","src":"8879:96:10","trueBody":{"id":2287,"nodeType":"Block","src":"8900:75:10","statements":[{"expression":{"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2279,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8918:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2282,"nodeType":"ExpressionStatement","src":"8918:12:10"},{"expression":{"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2283,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"8948:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2286,"nodeType":"ExpressionStatement","src":"8948:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2289,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8992:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2303,"nodeType":"IfStatement","src":"8988:96:10","trueBody":{"id":2302,"nodeType":"Block","src":"9009:75:10","statements":[{"expression":{"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9027:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2297,"nodeType":"ExpressionStatement","src":"9027:12:10"},{"expression":{"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2298,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9057:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2301,"nodeType":"ExpressionStatement","src":"9057:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2304,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9101:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2318,"nodeType":"IfStatement","src":"9097:96:10","trueBody":{"id":2317,"nodeType":"Block","src":"9118:75:10","statements":[{"expression":{"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2309,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9136:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2312,"nodeType":"ExpressionStatement","src":"9136:12:10"},{"expression":{"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2313,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9166:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2316,"nodeType":"ExpressionStatement","src":"9166:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2319,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9210:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2333,"nodeType":"IfStatement","src":"9206:93:10","trueBody":{"id":2332,"nodeType":"Block","src":"9226:73:10","statements":[{"expression":{"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2324,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9244:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2327,"nodeType":"ExpressionStatement","src":"9244:11:10"},{"expression":{"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2328,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9273:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2331,"nodeType":"ExpressionStatement","src":"9273:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2334,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9316:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2348,"nodeType":"IfStatement","src":"9312:93:10","trueBody":{"id":2347,"nodeType":"Block","src":"9332:73:10","statements":[{"expression":{"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2339,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9350:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2342,"nodeType":"ExpressionStatement","src":"9350:11:10"},{"expression":{"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2343,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9379:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2346,"nodeType":"ExpressionStatement","src":"9379:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2349,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9422:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2363,"nodeType":"IfStatement","src":"9418:93:10","trueBody":{"id":2362,"nodeType":"Block","src":"9438:73:10","statements":[{"expression":{"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2354,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9456:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2357,"nodeType":"ExpressionStatement","src":"9456:11:10"},{"expression":{"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2358,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9485:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2361,"nodeType":"ExpressionStatement","src":"9485:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2364,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9528:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2374,"nodeType":"IfStatement","src":"9524:64:10","trueBody":{"id":2373,"nodeType":"Block","src":"9544:44:10","statements":[{"expression":{"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2369,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9562:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2372,"nodeType":"ExpressionStatement","src":"9562:11:10"}]}}]},{"expression":{"id":2376,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9614:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2254,"id":2377,"nodeType":"Return","src":"9607:13:10"}]},"documentation":{"id":2248,"nodeType":"StructuredDocumentation","src":"8526:113:10","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2379,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:10","nodeType":"FunctionDefinition","parameters":{"id":2251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2250,"mutability":"mutable","name":"value","nameLocation":"8666:5:10","nodeType":"VariableDeclaration","scope":2379,"src":"8658:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2249,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:10"},"returnParameters":{"id":2254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2253,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2379,"src":"8696:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2252,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:10"},"scope":2707,"src":"8644:983:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2414,"nodeType":"Block","src":"9860:165:10","statements":[{"id":2413,"nodeType":"UncheckedBlock","src":"9870:149:10","statements":[{"assignments":[2391],"declarations":[{"constant":false,"id":2391,"mutability":"mutable","name":"result","nameLocation":"9902:6:10","nodeType":"VariableDeclaration","scope":2413,"src":"9894:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2390,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2395,"initialValue":{"arguments":[{"id":2393,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"9916:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2392,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2379,2415],"referencedDeclaration":2379,"src":"9911:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2396,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"9943:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2397,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"9953:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2398,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"9965:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1848_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9974:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1846,"src":"9965:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2402,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"9985:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"9994:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:10","trueExpression":{"hexValue":"31","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2410,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2389,"id":2412,"nodeType":"Return","src":"9936:72:10"}]}]},"documentation":{"id":2380,"nodeType":"StructuredDocumentation","src":"9633:142:10","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2415,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:10","nodeType":"FunctionDefinition","parameters":{"id":2386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2382,"mutability":"mutable","name":"value","nameLocation":"9802:5:10","nodeType":"VariableDeclaration","scope":2415,"src":"9794:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2381,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2385,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:10","nodeType":"VariableDeclaration","scope":2415,"src":"9809:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2384,"nodeType":"UserDefinedTypeName","pathNode":{"id":2383,"name":"Rounding","nameLocations":["9809:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1848,"src":"9809:8:10"},"referencedDeclaration":1848,"src":"9809:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:10"},"returnParameters":{"id":2389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2415,"src":"9851:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2387,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:10"},"scope":2707,"src":"9780:245:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2543,"nodeType":"Block","src":"10212:854:10","statements":[{"assignments":[2424],"declarations":[{"constant":false,"id":2424,"mutability":"mutable","name":"result","nameLocation":"10230:6:10","nodeType":"VariableDeclaration","scope":2543,"src":"10222:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2423,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2426,"initialValue":{"hexValue":"30","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:10"},{"id":2540,"nodeType":"UncheckedBlock","src":"10250:787:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10278:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2443,"nodeType":"IfStatement","src":"10274:103:10","trueBody":{"id":2442,"nodeType":"Block","src":"10297:80:10","statements":[{"expression":{"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10315:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2435,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2437,"nodeType":"ExpressionStatement","src":"10315:17:10"},{"expression":{"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2438,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"10350:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2441,"nodeType":"ExpressionStatement","src":"10350:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10394:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2460,"nodeType":"IfStatement","src":"10390:103:10","trueBody":{"id":2459,"nodeType":"Block","src":"10413:80:10","statements":[{"expression":{"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2449,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10431:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2454,"nodeType":"ExpressionStatement","src":"10431:17:10"},{"expression":{"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2455,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"10466:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2458,"nodeType":"ExpressionStatement","src":"10466:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2461,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10510:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2477,"nodeType":"IfStatement","src":"10506:103:10","trueBody":{"id":2476,"nodeType":"Block","src":"10529:80:10","statements":[{"expression":{"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2466,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10547:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2469,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2471,"nodeType":"ExpressionStatement","src":"10547:17:10"},{"expression":{"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2472,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"10582:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2475,"nodeType":"ExpressionStatement","src":"10582:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2478,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10626:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2494,"nodeType":"IfStatement","src":"10622:100:10","trueBody":{"id":2493,"nodeType":"Block","src":"10644:78:10","statements":[{"expression":{"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2483,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10662:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2488,"nodeType":"ExpressionStatement","src":"10662:16:10"},{"expression":{"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2489,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"10696:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2492,"nodeType":"ExpressionStatement","src":"10696:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2495,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10739:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2498,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2511,"nodeType":"IfStatement","src":"10735:100:10","trueBody":{"id":2510,"nodeType":"Block","src":"10757:78:10","statements":[{"expression":{"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2500,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10775:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2505,"nodeType":"ExpressionStatement","src":"10775:16:10"},{"expression":{"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2506,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"10809:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2509,"nodeType":"ExpressionStatement","src":"10809:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10852:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2528,"nodeType":"IfStatement","src":"10848:100:10","trueBody":{"id":2527,"nodeType":"Block","src":"10870:78:10","statements":[{"expression":{"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2517,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10888:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2522,"nodeType":"ExpressionStatement","src":"10888:16:10"},{"expression":{"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2523,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"10922:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2526,"nodeType":"ExpressionStatement","src":"10922:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2529,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10965:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2539,"nodeType":"IfStatement","src":"10961:66:10","trueBody":{"id":2538,"nodeType":"Block","src":"10983:44:10","statements":[{"expression":{"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2534,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"11001:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2537,"nodeType":"ExpressionStatement","src":"11001:11:10"}]}}]},{"expression":{"id":2541,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"11053:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2422,"id":2542,"nodeType":"Return","src":"11046:13:10"}]},"documentation":{"id":2416,"nodeType":"StructuredDocumentation","src":"10031:114:10","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2544,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:10","nodeType":"FunctionDefinition","parameters":{"id":2419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2418,"mutability":"mutable","name":"value","nameLocation":"10173:5:10","nodeType":"VariableDeclaration","scope":2544,"src":"10165:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2417,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:10"},"returnParameters":{"id":2422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2544,"src":"10203:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2420,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:10"},"scope":2707,"src":"10150:916:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2579,"nodeType":"Block","src":"11301:167:10","statements":[{"id":2578,"nodeType":"UncheckedBlock","src":"11311:151:10","statements":[{"assignments":[2556],"declarations":[{"constant":false,"id":2556,"mutability":"mutable","name":"result","nameLocation":"11343:6:10","nodeType":"VariableDeclaration","scope":2578,"src":"11335:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2555,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2560,"initialValue":{"arguments":[{"id":2558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"11358:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2557,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2544,2580],"referencedDeclaration":2544,"src":"11352:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11352:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2561,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"11385:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2562,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"11395:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2563,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"11407:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1848_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11416:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1846,"src":"11407:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2567,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"11428:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2569,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"11437:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:10","trueExpression":{"hexValue":"31","id":2572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2575,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2554,"id":2577,"nodeType":"Return","src":"11378:73:10"}]}]},"documentation":{"id":2545,"nodeType":"StructuredDocumentation","src":"11072:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2580,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:10","nodeType":"FunctionDefinition","parameters":{"id":2551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2547,"mutability":"mutable","name":"value","nameLocation":"11243:5:10","nodeType":"VariableDeclaration","scope":2580,"src":"11235:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2546,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2550,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:10","nodeType":"VariableDeclaration","scope":2580,"src":"11250:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2549,"nodeType":"UserDefinedTypeName","pathNode":{"id":2548,"name":"Rounding","nameLocations":["11250:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1848,"src":"11250:8:10"},"referencedDeclaration":1848,"src":"11250:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:10"},"returnParameters":{"id":2554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2580,"src":"11292:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2552,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:10"},"scope":2707,"src":"11220:248:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2666,"nodeType":"Block","src":"11782:600:10","statements":[{"assignments":[2589],"declarations":[{"constant":false,"id":2589,"mutability":"mutable","name":"result","nameLocation":"11800:6:10","nodeType":"VariableDeclaration","scope":2666,"src":"11792:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2588,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2591,"initialValue":{"hexValue":"30","id":2590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:10"},{"id":2663,"nodeType":"UncheckedBlock","src":"11820:533:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"11848:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2606,"nodeType":"IfStatement","src":"11844:98:10","trueBody":{"id":2605,"nodeType":"Block","src":"11866:76:10","statements":[{"expression":{"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"11884:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2600,"nodeType":"ExpressionStatement","src":"11884:13:10"},{"expression":{"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2601,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"11915:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2604,"nodeType":"ExpressionStatement","src":"11915:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2607,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"11959:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2621,"nodeType":"IfStatement","src":"11955:95:10","trueBody":{"id":2620,"nodeType":"Block","src":"11976:74:10","statements":[{"expression":{"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"11994:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2615,"nodeType":"ExpressionStatement","src":"11994:12:10"},{"expression":{"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2616,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"12024:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2619,"nodeType":"ExpressionStatement","src":"12024:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2622,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"12067:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2636,"nodeType":"IfStatement","src":"12063:95:10","trueBody":{"id":2635,"nodeType":"Block","src":"12084:74:10","statements":[{"expression":{"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2627,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"12102:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2630,"nodeType":"ExpressionStatement","src":"12102:12:10"},{"expression":{"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2631,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"12132:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2634,"nodeType":"ExpressionStatement","src":"12132:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"12175:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2651,"nodeType":"IfStatement","src":"12171:95:10","trueBody":{"id":2650,"nodeType":"Block","src":"12192:74:10","statements":[{"expression":{"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2642,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"12210:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2645,"nodeType":"ExpressionStatement","src":"12210:12:10"},{"expression":{"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2646,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"12240:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2649,"nodeType":"ExpressionStatement","src":"12240:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2652,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"12283:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2662,"nodeType":"IfStatement","src":"12279:64:10","trueBody":{"id":2661,"nodeType":"Block","src":"12299:44:10","statements":[{"expression":{"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2657,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"12317:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2660,"nodeType":"ExpressionStatement","src":"12317:11:10"}]}}]},{"expression":{"id":2664,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"12369:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2587,"id":2665,"nodeType":"Return","src":"12362:13:10"}]},"documentation":{"id":2581,"nodeType":"StructuredDocumentation","src":"11474:240:10","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2667,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:10","nodeType":"FunctionDefinition","parameters":{"id":2584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2583,"mutability":"mutable","name":"value","nameLocation":"11743:5:10","nodeType":"VariableDeclaration","scope":2667,"src":"11735:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2582,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:10"},"returnParameters":{"id":2587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2667,"src":"11773:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2585,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:10"},"scope":2707,"src":"11719:663:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2705,"nodeType":"Block","src":"12619:174:10","statements":[{"id":2704,"nodeType":"UncheckedBlock","src":"12629:158:10","statements":[{"assignments":[2679],"declarations":[{"constant":false,"id":2679,"mutability":"mutable","name":"result","nameLocation":"12661:6:10","nodeType":"VariableDeclaration","scope":2704,"src":"12653:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2678,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2683,"initialValue":{"arguments":[{"id":2681,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"12677:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2680,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2667,2706],"referencedDeclaration":2667,"src":"12670:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12670:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2684,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"12704:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2685,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"12714:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2686,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"12726:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1848_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2687,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12735:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1846,"src":"12726:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2690,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"12747:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2693,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2695,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"12762:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:10","trueExpression":{"hexValue":"31","id":2698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2701,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2677,"id":2703,"nodeType":"Return","src":"12697:79:10"}]}]},"documentation":{"id":2668,"nodeType":"StructuredDocumentation","src":"12388:144:10","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2706,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:10","nodeType":"FunctionDefinition","parameters":{"id":2674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2670,"mutability":"mutable","name":"value","nameLocation":"12561:5:10","nodeType":"VariableDeclaration","scope":2706,"src":"12553:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2669,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2673,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:10","nodeType":"VariableDeclaration","scope":2706,"src":"12568:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2672,"nodeType":"UserDefinedTypeName","pathNode":{"id":2671,"name":"Rounding","nameLocations":["12568:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1848,"src":"12568:8:10"},"referencedDeclaration":1848,"src":"12568:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:10"},"returnParameters":{"id":2677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2676,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2706,"src":"12610:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2675,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:10"},"scope":2707,"src":"12537:256:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2708,"src":"202:12593:10","usedErrors":[]}],"src":"103:12693:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[2812]},"id":2813,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2709,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2710,"nodeType":"StructuredDocumentation","src":"134:80:11","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2812,"linearizedBaseContracts":[2812],"name":"SignedMathUpgradeable","nameLocation":"223:21:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2727,"nodeType":"Block","src":"386:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2720,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"403:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2721,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"407:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2724,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"415:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:11","trueExpression":{"id":2723,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"411:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2719,"id":2726,"nodeType":"Return","src":"396:20:11"}]},"documentation":{"id":2711,"nodeType":"StructuredDocumentation","src":"251:66:11","text":" @dev Returns the largest of two signed numbers."},"id":2728,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:11","nodeType":"FunctionDefinition","parameters":{"id":2716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2713,"mutability":"mutable","name":"a","nameLocation":"342:1:11","nodeType":"VariableDeclaration","scope":2728,"src":"335:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2712,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2715,"mutability":"mutable","name":"b","nameLocation":"352:1:11","nodeType":"VariableDeclaration","scope":2728,"src":"345:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2714,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:11"},"returnParameters":{"id":2719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2728,"src":"378:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2717,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:11"},"scope":2812,"src":"322:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2745,"nodeType":"Block","src":"565:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2738,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2731,"src":"582:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2739,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"586:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2742,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"594:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:11","trueExpression":{"id":2741,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2731,"src":"590:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2737,"id":2744,"nodeType":"Return","src":"575:20:11"}]},"documentation":{"id":2729,"nodeType":"StructuredDocumentation","src":"429:67:11","text":" @dev Returns the smallest of two signed numbers."},"id":2746,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:11","nodeType":"FunctionDefinition","parameters":{"id":2734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2731,"mutability":"mutable","name":"a","nameLocation":"521:1:11","nodeType":"VariableDeclaration","scope":2746,"src":"514:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2730,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2733,"mutability":"mutable","name":"b","nameLocation":"531:1:11","nodeType":"VariableDeclaration","scope":2746,"src":"524:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2732,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:11"},"returnParameters":{"id":2737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2736,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2746,"src":"557:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2735,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:11"},"scope":2812,"src":"501:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2789,"nodeType":"Block","src":"807:162:11","statements":[{"assignments":[2757],"declarations":[{"constant":false,"id":2757,"mutability":"mutable","name":"x","nameLocation":"876:1:11","nodeType":"VariableDeclaration","scope":2789,"src":"869:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2756,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2770,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2758,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"881:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2759,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"885:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2761,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2762,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"892:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2763,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"896:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2765,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2768,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:11"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2771,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2757,"src":"921:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2776,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2757,"src":"941:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2774,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:11","typeDescriptions":{}}},"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:11","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2772,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:11","typeDescriptions":{}}},"id":2780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2781,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"955:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2782,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"959:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2784,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2786,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2755,"id":2788,"nodeType":"Return","src":"914:48:11"}]},"documentation":{"id":2747,"nodeType":"StructuredDocumentation","src":"608:126:11","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2790,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:11","nodeType":"FunctionDefinition","parameters":{"id":2752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2749,"mutability":"mutable","name":"a","nameLocation":"763:1:11","nodeType":"VariableDeclaration","scope":2790,"src":"756:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2748,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2751,"mutability":"mutable","name":"b","nameLocation":"773:1:11","nodeType":"VariableDeclaration","scope":2790,"src":"766:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2750,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:11"},"returnParameters":{"id":2755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2790,"src":"799:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2753,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:11"},"scope":2812,"src":"739:230:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2810,"nodeType":"Block","src":"1113:158:11","statements":[{"id":2809,"nodeType":"UncheckedBlock","src":"1123:142:11","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2800,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"1238:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:11","subExpression":{"id":2804,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"1252:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:11","trueExpression":{"id":2803,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"1247:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2798,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:11","typeDescriptions":{}}},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2797,"id":2808,"nodeType":"Return","src":"1223:31:11"}]}]},"documentation":{"id":2791,"nodeType":"StructuredDocumentation","src":"975:78:11","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2811,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:11","nodeType":"FunctionDefinition","parameters":{"id":2794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2793,"mutability":"mutable","name":"n","nameLocation":"1078:1:11","nodeType":"VariableDeclaration","scope":2811,"src":"1071:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2792,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:11"},"returnParameters":{"id":2797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2811,"src":"1104:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2795,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:11"},"scope":2812,"src":"1058:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2813,"src":"215:1058:11","usedErrors":[]}],"src":"109:1165:11"},"id":11},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[3524],"ERC20":[3399],"IERC20":[3477],"IERC20Metadata":[3502]},"id":3400,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2814,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":2815,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3400,"sourceUnit":3478,"src":"130:22:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":2816,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3400,"sourceUnit":3503,"src":"153:41:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":2817,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3400,"sourceUnit":3525,"src":"195:33:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2819,"name":"Context","nameLocations":["1419:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3524,"src":"1419:7:12"},"id":2820,"nodeType":"InheritanceSpecifier","src":"1419:7:12"},{"baseName":{"id":2821,"name":"IERC20","nameLocations":["1428:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":3477,"src":"1428:6:12"},"id":2822,"nodeType":"InheritanceSpecifier","src":"1428:6:12"},{"baseName":{"id":2823,"name":"IERC20Metadata","nameLocations":["1436:14:12"],"nodeType":"IdentifierPath","referencedDeclaration":3502,"src":"1436:14:12"},"id":2824,"nodeType":"InheritanceSpecifier","src":"1436:14:12"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":2818,"nodeType":"StructuredDocumentation","src":"230:1170:12","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":3399,"linearizedBaseContracts":[3399,3502,3477,3524],"name":"ERC20","nameLocation":"1410:5:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2828,"mutability":"mutable","name":"_balances","nameLocation":"1493:9:12","nodeType":"VariableDeclaration","scope":3399,"src":"1457:45:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2827,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2825,"name":"address","nodeType":"ElementaryTypeName","src":"1465:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1457:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2826,"name":"uint256","nodeType":"ElementaryTypeName","src":"1476:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":2834,"mutability":"mutable","name":"_allowances","nameLocation":"1565:11:12","nodeType":"VariableDeclaration","scope":3399,"src":"1509:67:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":2833,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2829,"name":"address","nodeType":"ElementaryTypeName","src":"1517:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1509:47:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2832,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2830,"name":"address","nodeType":"ElementaryTypeName","src":"1536:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1528:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2831,"name":"uint256","nodeType":"ElementaryTypeName","src":"1547:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":2836,"mutability":"mutable","name":"_totalSupply","nameLocation":"1599:12:12","nodeType":"VariableDeclaration","scope":3399,"src":"1583:28:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2835,"name":"uint256","nodeType":"ElementaryTypeName","src":"1583:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2838,"mutability":"mutable","name":"_name","nameLocation":"1633:5:12","nodeType":"VariableDeclaration","scope":3399,"src":"1618:20:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2837,"name":"string","nodeType":"ElementaryTypeName","src":"1618:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2840,"mutability":"mutable","name":"_symbol","nameLocation":"1659:7:12","nodeType":"VariableDeclaration","scope":3399,"src":"1644:22:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2839,"name":"string","nodeType":"ElementaryTypeName","src":"1644:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":2856,"nodeType":"Block","src":"2032:57:12","statements":[{"expression":{"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2848,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"2042:5:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2849,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"2050:5:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2042:13:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2851,"nodeType":"ExpressionStatement","src":"2042:13:12"},{"expression":{"id":2854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2852,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"2065:7:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2853,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"2075:7:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2065:17:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2855,"nodeType":"ExpressionStatement","src":"2065:17:12"}]},"documentation":{"id":2841,"nodeType":"StructuredDocumentation","src":"1673:298:12","text":" @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."},"id":2857,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2843,"mutability":"mutable","name":"name_","nameLocation":"2002:5:12","nodeType":"VariableDeclaration","scope":2857,"src":"1988:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2842,"name":"string","nodeType":"ElementaryTypeName","src":"1988:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2845,"mutability":"mutable","name":"symbol_","nameLocation":"2023:7:12","nodeType":"VariableDeclaration","scope":2857,"src":"2009:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2844,"name":"string","nodeType":"ElementaryTypeName","src":"2009:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1987:44:12"},"returnParameters":{"id":2847,"nodeType":"ParameterList","parameters":[],"src":"2032:0:12"},"scope":3399,"src":"1976:113:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3489],"body":{"id":2866,"nodeType":"Block","src":"2223:29:12","statements":[{"expression":{"id":2864,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"2240:5:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2863,"id":2865,"nodeType":"Return","src":"2233:12:12"}]},"documentation":{"id":2858,"nodeType":"StructuredDocumentation","src":"2095:54:12","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":2867,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2163:4:12","nodeType":"FunctionDefinition","overrides":{"id":2860,"nodeType":"OverrideSpecifier","overrides":[],"src":"2190:8:12"},"parameters":{"id":2859,"nodeType":"ParameterList","parameters":[],"src":"2167:2:12"},"returnParameters":{"id":2863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2867,"src":"2208:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2861,"name":"string","nodeType":"ElementaryTypeName","src":"2208:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2207:15:12"},"scope":3399,"src":"2154:98:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3495],"body":{"id":2876,"nodeType":"Block","src":"2436:31:12","statements":[{"expression":{"id":2874,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"2453:7:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2873,"id":2875,"nodeType":"Return","src":"2446:14:12"}]},"documentation":{"id":2868,"nodeType":"StructuredDocumentation","src":"2258:102:12","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":2877,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2374:6:12","nodeType":"FunctionDefinition","overrides":{"id":2870,"nodeType":"OverrideSpecifier","overrides":[],"src":"2403:8:12"},"parameters":{"id":2869,"nodeType":"ParameterList","parameters":[],"src":"2380:2:12"},"returnParameters":{"id":2873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2872,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2877,"src":"2421:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2871,"name":"string","nodeType":"ElementaryTypeName","src":"2421:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2420:15:12"},"scope":3399,"src":"2365:102:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3501],"body":{"id":2886,"nodeType":"Block","src":"3156:26:12","statements":[{"expression":{"hexValue":"3138","id":2884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3173:2:12","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":2883,"id":2885,"nodeType":"Return","src":"3166:9:12"}]},"documentation":{"id":2878,"nodeType":"StructuredDocumentation","src":"2473:613:12","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":2887,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3100:8:12","nodeType":"FunctionDefinition","overrides":{"id":2880,"nodeType":"OverrideSpecifier","overrides":[],"src":"3131:8:12"},"parameters":{"id":2879,"nodeType":"ParameterList","parameters":[],"src":"3108:2:12"},"returnParameters":{"id":2883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2882,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2887,"src":"3149:5:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2881,"name":"uint8","nodeType":"ElementaryTypeName","src":"3149:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3148:7:12"},"scope":3399,"src":"3091:91:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3426],"body":{"id":2896,"nodeType":"Block","src":"3312:36:12","statements":[{"expression":{"id":2894,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"3329:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2893,"id":2895,"nodeType":"Return","src":"3322:19:12"}]},"documentation":{"id":2888,"nodeType":"StructuredDocumentation","src":"3188:49:12","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":2897,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3251:11:12","nodeType":"FunctionDefinition","overrides":{"id":2890,"nodeType":"OverrideSpecifier","overrides":[],"src":"3285:8:12"},"parameters":{"id":2889,"nodeType":"ParameterList","parameters":[],"src":"3262:2:12"},"returnParameters":{"id":2893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2897,"src":"3303:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2891,"name":"uint256","nodeType":"ElementaryTypeName","src":"3303:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3302:9:12"},"scope":3399,"src":"3242:106:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3434],"body":{"id":2910,"nodeType":"Block","src":"3489:42:12","statements":[{"expression":{"baseExpression":{"id":2906,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"3506:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2908,"indexExpression":{"id":2907,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"3516:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3506:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2905,"id":2909,"nodeType":"Return","src":"3499:25:12"}]},"documentation":{"id":2898,"nodeType":"StructuredDocumentation","src":"3354:47:12","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":2911,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3415:9:12","nodeType":"FunctionDefinition","overrides":{"id":2902,"nodeType":"OverrideSpecifier","overrides":[],"src":"3462:8:12"},"parameters":{"id":2901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2900,"mutability":"mutable","name":"account","nameLocation":"3433:7:12","nodeType":"VariableDeclaration","scope":2911,"src":"3425:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2899,"name":"address","nodeType":"ElementaryTypeName","src":"3425:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3424:17:12"},"returnParameters":{"id":2905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2904,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2911,"src":"3480:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2903,"name":"uint256","nodeType":"ElementaryTypeName","src":"3480:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3479:9:12"},"scope":3399,"src":"3406:125:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3444],"body":{"id":2935,"nodeType":"Block","src":"3812:104:12","statements":[{"assignments":[2923],"declarations":[{"constant":false,"id":2923,"mutability":"mutable","name":"owner","nameLocation":"3830:5:12","nodeType":"VariableDeclaration","scope":2935,"src":"3822:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2922,"name":"address","nodeType":"ElementaryTypeName","src":"3822:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2926,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2924,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"3838:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3838:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3822:28:12"},{"expression":{"arguments":[{"id":2928,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"3870:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2929,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"3877:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2930,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"3881:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2927,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"3860:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3860:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2932,"nodeType":"ExpressionStatement","src":"3860:28:12"},{"expression":{"hexValue":"74727565","id":2933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3905:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2921,"id":2934,"nodeType":"Return","src":"3898:11:12"}]},"documentation":{"id":2912,"nodeType":"StructuredDocumentation","src":"3537:185:12","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":2936,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3736:8:12","nodeType":"FunctionDefinition","overrides":{"id":2918,"nodeType":"OverrideSpecifier","overrides":[],"src":"3788:8:12"},"parameters":{"id":2917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2914,"mutability":"mutable","name":"to","nameLocation":"3753:2:12","nodeType":"VariableDeclaration","scope":2936,"src":"3745:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2913,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2916,"mutability":"mutable","name":"amount","nameLocation":"3765:6:12","nodeType":"VariableDeclaration","scope":2936,"src":"3757:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2915,"name":"uint256","nodeType":"ElementaryTypeName","src":"3757:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3744:28:12"},"returnParameters":{"id":2921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2920,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2936,"src":"3806:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2919,"name":"bool","nodeType":"ElementaryTypeName","src":"3806:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3805:6:12"},"scope":3399,"src":"3727:189:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3454],"body":{"id":2953,"nodeType":"Block","src":"4072:51:12","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":2947,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"4089:11:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":2949,"indexExpression":{"id":2948,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"4101:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4089:18:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2951,"indexExpression":{"id":2950,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"4108:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4089:27:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2946,"id":2952,"nodeType":"Return","src":"4082:34:12"}]},"documentation":{"id":2937,"nodeType":"StructuredDocumentation","src":"3922:47:12","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":2954,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3983:9:12","nodeType":"FunctionDefinition","overrides":{"id":2943,"nodeType":"OverrideSpecifier","overrides":[],"src":"4045:8:12"},"parameters":{"id":2942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2939,"mutability":"mutable","name":"owner","nameLocation":"4001:5:12","nodeType":"VariableDeclaration","scope":2954,"src":"3993:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2938,"name":"address","nodeType":"ElementaryTypeName","src":"3993:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2941,"mutability":"mutable","name":"spender","nameLocation":"4016:7:12","nodeType":"VariableDeclaration","scope":2954,"src":"4008:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2940,"name":"address","nodeType":"ElementaryTypeName","src":"4008:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3992:32:12"},"returnParameters":{"id":2946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2945,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2954,"src":"4063:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2944,"name":"uint256","nodeType":"ElementaryTypeName","src":"4063:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4062:9:12"},"scope":3399,"src":"3974:149:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3464],"body":{"id":2978,"nodeType":"Block","src":"4520:108:12","statements":[{"assignments":[2966],"declarations":[{"constant":false,"id":2966,"mutability":"mutable","name":"owner","nameLocation":"4538:5:12","nodeType":"VariableDeclaration","scope":2978,"src":"4530:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2965,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2969,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2967,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"4546:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4546:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4530:28:12"},{"expression":{"arguments":[{"id":2971,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"4577:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2972,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"4584:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2973,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"4593:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2970,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"4568:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4568:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2975,"nodeType":"ExpressionStatement","src":"4568:32:12"},{"expression":{"hexValue":"74727565","id":2976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4617:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2964,"id":2977,"nodeType":"Return","src":"4610:11:12"}]},"documentation":{"id":2955,"nodeType":"StructuredDocumentation","src":"4129:297:12","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":2979,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4440:7:12","nodeType":"FunctionDefinition","overrides":{"id":2961,"nodeType":"OverrideSpecifier","overrides":[],"src":"4496:8:12"},"parameters":{"id":2960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2957,"mutability":"mutable","name":"spender","nameLocation":"4456:7:12","nodeType":"VariableDeclaration","scope":2979,"src":"4448:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2956,"name":"address","nodeType":"ElementaryTypeName","src":"4448:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2959,"mutability":"mutable","name":"amount","nameLocation":"4473:6:12","nodeType":"VariableDeclaration","scope":2979,"src":"4465:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2958,"name":"uint256","nodeType":"ElementaryTypeName","src":"4465:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4447:33:12"},"returnParameters":{"id":2964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2979,"src":"4514:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2962,"name":"bool","nodeType":"ElementaryTypeName","src":"4514:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4513:6:12"},"scope":3399,"src":"4431:197:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3476],"body":{"id":3011,"nodeType":"Block","src":"5323:153:12","statements":[{"assignments":[2993],"declarations":[{"constant":false,"id":2993,"mutability":"mutable","name":"spender","nameLocation":"5341:7:12","nodeType":"VariableDeclaration","scope":3011,"src":"5333:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2992,"name":"address","nodeType":"ElementaryTypeName","src":"5333:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2996,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2994,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"5351:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5351:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5333:30:12"},{"expression":{"arguments":[{"id":2998,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"5389:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2999,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"5395:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3000,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"5404:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2997,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"5373:15:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3002,"nodeType":"ExpressionStatement","src":"5373:38:12"},{"expression":{"arguments":[{"id":3004,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"5431:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3005,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"5437:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3006,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"5441:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3003,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"5421:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5421:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3008,"nodeType":"ExpressionStatement","src":"5421:27:12"},{"expression":{"hexValue":"74727565","id":3009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5465:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2991,"id":3010,"nodeType":"Return","src":"5458:11:12"}]},"documentation":{"id":2980,"nodeType":"StructuredDocumentation","src":"4634:551:12","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":3012,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5199:12:12","nodeType":"FunctionDefinition","overrides":{"id":2988,"nodeType":"OverrideSpecifier","overrides":[],"src":"5299:8:12"},"parameters":{"id":2987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2982,"mutability":"mutable","name":"from","nameLocation":"5229:4:12","nodeType":"VariableDeclaration","scope":3012,"src":"5221:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2981,"name":"address","nodeType":"ElementaryTypeName","src":"5221:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2984,"mutability":"mutable","name":"to","nameLocation":"5251:2:12","nodeType":"VariableDeclaration","scope":3012,"src":"5243:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2983,"name":"address","nodeType":"ElementaryTypeName","src":"5243:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2986,"mutability":"mutable","name":"amount","nameLocation":"5271:6:12","nodeType":"VariableDeclaration","scope":3012,"src":"5263:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2985,"name":"uint256","nodeType":"ElementaryTypeName","src":"5263:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5211:72:12"},"returnParameters":{"id":2991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2990,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3012,"src":"5317:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2989,"name":"bool","nodeType":"ElementaryTypeName","src":"5317:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5316:6:12"},"scope":3399,"src":"5190:286:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3040,"nodeType":"Block","src":"5965:140:12","statements":[{"assignments":[3023],"declarations":[{"constant":false,"id":3023,"mutability":"mutable","name":"owner","nameLocation":"5983:5:12","nodeType":"VariableDeclaration","scope":3040,"src":"5975:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3022,"name":"address","nodeType":"ElementaryTypeName","src":"5975:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3026,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3024,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"5991:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5991:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5975:28:12"},{"expression":{"arguments":[{"id":3028,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"6022:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3029,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"6029:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3031,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"6048:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3032,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"6055:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3030,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"6038:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6038:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3034,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3017,"src":"6066:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6038:38:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3027,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"6013:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6013:64:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3037,"nodeType":"ExpressionStatement","src":"6013:64:12"},{"expression":{"hexValue":"74727565","id":3038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6094:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3021,"id":3039,"nodeType":"Return","src":"6087:11:12"}]},"documentation":{"id":3013,"nodeType":"StructuredDocumentation","src":"5482:384:12","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":3041,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"5880:17:12","nodeType":"FunctionDefinition","parameters":{"id":3018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3015,"mutability":"mutable","name":"spender","nameLocation":"5906:7:12","nodeType":"VariableDeclaration","scope":3041,"src":"5898:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3014,"name":"address","nodeType":"ElementaryTypeName","src":"5898:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3017,"mutability":"mutable","name":"addedValue","nameLocation":"5923:10:12","nodeType":"VariableDeclaration","scope":3041,"src":"5915:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3016,"name":"uint256","nodeType":"ElementaryTypeName","src":"5915:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5897:37:12"},"returnParameters":{"id":3021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3020,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3041,"src":"5959:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3019,"name":"bool","nodeType":"ElementaryTypeName","src":"5959:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5958:6:12"},"scope":3399,"src":"5871:234:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3081,"nodeType":"Block","src":"6691:328:12","statements":[{"assignments":[3052],"declarations":[{"constant":false,"id":3052,"mutability":"mutable","name":"owner","nameLocation":"6709:5:12","nodeType":"VariableDeclaration","scope":3081,"src":"6701:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3051,"name":"address","nodeType":"ElementaryTypeName","src":"6701:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3055,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3053,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"6717:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6717:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6701:28:12"},{"assignments":[3057],"declarations":[{"constant":false,"id":3057,"mutability":"mutable","name":"currentAllowance","nameLocation":"6747:16:12","nodeType":"VariableDeclaration","scope":3081,"src":"6739:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3056,"name":"uint256","nodeType":"ElementaryTypeName","src":"6739:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3062,"initialValue":{"arguments":[{"id":3059,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"6776:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3060,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"6783:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3058,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"6766:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6739:52:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3064,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"6809:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3065,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"6829:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6809:35:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6846:39:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":3063,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6801:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:85:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3069,"nodeType":"ExpressionStatement","src":"6801:85:12"},{"id":3078,"nodeType":"UncheckedBlock","src":"6896:95:12","statements":[{"expression":{"arguments":[{"id":3071,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"6929:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3072,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"6936:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3073,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"6945:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3074,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"6964:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6945:34:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3070,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"6920:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6920:60:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3077,"nodeType":"ExpressionStatement","src":"6920:60:12"}]},{"expression":{"hexValue":"74727565","id":3079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7008:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3050,"id":3080,"nodeType":"Return","src":"7001:11:12"}]},"documentation":{"id":3042,"nodeType":"StructuredDocumentation","src":"6111:476:12","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":3082,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6601:17:12","nodeType":"FunctionDefinition","parameters":{"id":3047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3044,"mutability":"mutable","name":"spender","nameLocation":"6627:7:12","nodeType":"VariableDeclaration","scope":3082,"src":"6619:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3043,"name":"address","nodeType":"ElementaryTypeName","src":"6619:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3046,"mutability":"mutable","name":"subtractedValue","nameLocation":"6644:15:12","nodeType":"VariableDeclaration","scope":3082,"src":"6636:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3045,"name":"uint256","nodeType":"ElementaryTypeName","src":"6636:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6618:42:12"},"returnParameters":{"id":3050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3082,"src":"6685:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3048,"name":"bool","nodeType":"ElementaryTypeName","src":"6685:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6684:6:12"},"scope":3399,"src":"6592:427:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3158,"nodeType":"Block","src":"7581:710:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3093,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"7599:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3095,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7607:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3094,"name":"address","nodeType":"ElementaryTypeName","src":"7607:7:12","typeDescriptions":{}}},"id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7607:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7599:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":3099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7619:39:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":3092,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7591:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7591:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3101,"nodeType":"ExpressionStatement","src":"7591:68:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3103,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"7677:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7691:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7683:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3104,"name":"address","nodeType":"ElementaryTypeName","src":"7683:7:12","typeDescriptions":{}}},"id":3107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7683:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7677:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":3109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7695:37:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":3102,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7669:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7669:64:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3111,"nodeType":"ExpressionStatement","src":"7669:64:12"},{"expression":{"arguments":[{"id":3113,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"7765:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3114,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"7771:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3115,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7775:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3112,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3387,"src":"7744:20:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7744:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3117,"nodeType":"ExpressionStatement","src":"7744:38:12"},{"assignments":[3119],"declarations":[{"constant":false,"id":3119,"mutability":"mutable","name":"fromBalance","nameLocation":"7801:11:12","nodeType":"VariableDeclaration","scope":3158,"src":"7793:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3118,"name":"uint256","nodeType":"ElementaryTypeName","src":"7793:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3123,"initialValue":{"baseExpression":{"id":3120,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"7815:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3122,"indexExpression":{"id":3121,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"7825:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7815:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7793:37:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3125,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3119,"src":"7848:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3126,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7863:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7848:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":3128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7871:40:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":3124,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7840:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7840:72:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3130,"nodeType":"ExpressionStatement","src":"7840:72:12"},{"id":3145,"nodeType":"UncheckedBlock","src":"7922:273:12","statements":[{"expression":{"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3131,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"7946:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3133,"indexExpression":{"id":3132,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"7956:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7946:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3134,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3119,"src":"7964:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3135,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7978:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7964:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7946:38:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3138,"nodeType":"ExpressionStatement","src":"7946:38:12"},{"expression":{"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3139,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"8161:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3141,"indexExpression":{"id":3140,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"8171:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8161:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3142,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"8178:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8161:23:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3144,"nodeType":"ExpressionStatement","src":"8161:23:12"}]},{"eventCall":{"arguments":[{"id":3147,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"8219:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3148,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"8225:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3149,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"8229:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3146,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"8210:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8210:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3151,"nodeType":"EmitStatement","src":"8205:31:12"},{"expression":{"arguments":[{"id":3153,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"8267:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3154,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"8273:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3155,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"8277:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3152,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"8247:19:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8247:37:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3157,"nodeType":"ExpressionStatement","src":"8247:37:12"}]},"documentation":{"id":3083,"nodeType":"StructuredDocumentation","src":"7025:443:12","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":3159,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7482:9:12","nodeType":"FunctionDefinition","parameters":{"id":3090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3085,"mutability":"mutable","name":"from","nameLocation":"7509:4:12","nodeType":"VariableDeclaration","scope":3159,"src":"7501:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3084,"name":"address","nodeType":"ElementaryTypeName","src":"7501:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3087,"mutability":"mutable","name":"to","nameLocation":"7531:2:12","nodeType":"VariableDeclaration","scope":3159,"src":"7523:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3086,"name":"address","nodeType":"ElementaryTypeName","src":"7523:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3089,"mutability":"mutable","name":"amount","nameLocation":"7551:6:12","nodeType":"VariableDeclaration","scope":3159,"src":"7543:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3088,"name":"uint256","nodeType":"ElementaryTypeName","src":"7543:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7491:72:12"},"returnParameters":{"id":3091,"nodeType":"ParameterList","parameters":[],"src":"7581:0:12"},"scope":3399,"src":"7473:818:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3215,"nodeType":"Block","src":"8632:470:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3168,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"8650:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8669:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8661:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3169,"name":"address","nodeType":"ElementaryTypeName","src":"8661:7:12","typeDescriptions":{}}},"id":3172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8661:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8650:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":3174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8673:33:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":3167,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8642:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8642:65:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3176,"nodeType":"ExpressionStatement","src":"8642:65:12"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8747:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8739:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3178,"name":"address","nodeType":"ElementaryTypeName","src":"8739:7:12","typeDescriptions":{}}},"id":3181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8739:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3182,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"8751:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3183,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"8760:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3177,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3387,"src":"8718:20:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8718:49:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3185,"nodeType":"ExpressionStatement","src":"8718:49:12"},{"expression":{"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3186,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"8778:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3187,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"8794:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8778:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3189,"nodeType":"ExpressionStatement","src":"8778:22:12"},{"id":3196,"nodeType":"UncheckedBlock","src":"8810:175:12","statements":[{"expression":{"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3190,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"8946:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3192,"indexExpression":{"id":3191,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"8956:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8946:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3193,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"8968:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8946:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3195,"nodeType":"ExpressionStatement","src":"8946:28:12"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9016:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9008:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3198,"name":"address","nodeType":"ElementaryTypeName","src":"9008:7:12","typeDescriptions":{}}},"id":3201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9008:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3202,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"9020:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3203,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"9029:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3197,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"8999:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:37:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3205,"nodeType":"EmitStatement","src":"8994:42:12"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9067:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3207,"name":"address","nodeType":"ElementaryTypeName","src":"9067:7:12","typeDescriptions":{}}},"id":3210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9067:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3211,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"9079:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3212,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"9088:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3206,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"9047:19:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9047:48:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3214,"nodeType":"ExpressionStatement","src":"9047:48:12"}]},"documentation":{"id":3160,"nodeType":"StructuredDocumentation","src":"8297:265:12","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":3216,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8576:5:12","nodeType":"FunctionDefinition","parameters":{"id":3165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3162,"mutability":"mutable","name":"account","nameLocation":"8590:7:12","nodeType":"VariableDeclaration","scope":3216,"src":"8582:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3161,"name":"address","nodeType":"ElementaryTypeName","src":"8582:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3164,"mutability":"mutable","name":"amount","nameLocation":"8607:6:12","nodeType":"VariableDeclaration","scope":3216,"src":"8599:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3163,"name":"uint256","nodeType":"ElementaryTypeName","src":"8599:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8581:33:12"},"returnParameters":{"id":3166,"nodeType":"ParameterList","parameters":[],"src":"8632:0:12"},"scope":3399,"src":"8567:535:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3287,"nodeType":"Block","src":"9487:594:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3225,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"9505:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9524:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3227,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9516:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3226,"name":"address","nodeType":"ElementaryTypeName","src":"9516:7:12","typeDescriptions":{}}},"id":3229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9516:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9505:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":3231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9528:35:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":3224,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9497:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9497:67:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3233,"nodeType":"ExpressionStatement","src":"9497:67:12"},{"expression":{"arguments":[{"id":3235,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"9596:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9613:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9605:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3236,"name":"address","nodeType":"ElementaryTypeName","src":"9605:7:12","typeDescriptions":{}}},"id":3239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9605:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3240,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"9617:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3234,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3387,"src":"9575:20:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9575:49:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3242,"nodeType":"ExpressionStatement","src":"9575:49:12"},{"assignments":[3244],"declarations":[{"constant":false,"id":3244,"mutability":"mutable","name":"accountBalance","nameLocation":"9643:14:12","nodeType":"VariableDeclaration","scope":3287,"src":"9635:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3243,"name":"uint256","nodeType":"ElementaryTypeName","src":"9635:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3248,"initialValue":{"baseExpression":{"id":3245,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"9660:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3247,"indexExpression":{"id":3246,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"9670:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9660:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9635:43:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3250,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"9696:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3251,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"9714:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9696:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":3253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9722:36:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":3249,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9688:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9688:71:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3255,"nodeType":"ExpressionStatement","src":"9688:71:12"},{"id":3268,"nodeType":"UncheckedBlock","src":"9769:194:12","statements":[{"expression":{"id":3262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3256,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"9793:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3258,"indexExpression":{"id":3257,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"9803:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9793:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3259,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"9814:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3260,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"9831:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9814:23:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9793:44:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3263,"nodeType":"ExpressionStatement","src":"9793:44:12"},{"expression":{"id":3266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3264,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"9930:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3265,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"9946:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9930:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3267,"nodeType":"ExpressionStatement","src":"9930:22:12"}]},{"eventCall":{"arguments":[{"id":3270,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"9987:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10004:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9996:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3271,"name":"address","nodeType":"ElementaryTypeName","src":"9996:7:12","typeDescriptions":{}}},"id":3274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9996:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3275,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"10008:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3269,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"9978:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9978:37:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3277,"nodeType":"EmitStatement","src":"9973:42:12"},{"expression":{"arguments":[{"id":3279,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"10046:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10063:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10055:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3280,"name":"address","nodeType":"ElementaryTypeName","src":"10055:7:12","typeDescriptions":{}}},"id":3283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10055:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3284,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"10067:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3278,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"10026:19:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10026:48:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3286,"nodeType":"ExpressionStatement","src":"10026:48:12"}]},"documentation":{"id":3217,"nodeType":"StructuredDocumentation","src":"9108:309:12","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":3288,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9431:5:12","nodeType":"FunctionDefinition","parameters":{"id":3222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3219,"mutability":"mutable","name":"account","nameLocation":"9445:7:12","nodeType":"VariableDeclaration","scope":3288,"src":"9437:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3218,"name":"address","nodeType":"ElementaryTypeName","src":"9437:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3221,"mutability":"mutable","name":"amount","nameLocation":"9462:6:12","nodeType":"VariableDeclaration","scope":3288,"src":"9454:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3220,"name":"uint256","nodeType":"ElementaryTypeName","src":"9454:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9436:33:12"},"returnParameters":{"id":3223,"nodeType":"ParameterList","parameters":[],"src":"9487:0:12"},"scope":3399,"src":"9422:659:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3332,"nodeType":"Block","src":"10617:257:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3299,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"10635:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10652:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10644:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3300,"name":"address","nodeType":"ElementaryTypeName","src":"10644:7:12","typeDescriptions":{}}},"id":3303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10644:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10635:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":3305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10656:38:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":3298,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10627:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10627:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3307,"nodeType":"ExpressionStatement","src":"10627:68:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3309,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"10713:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10732:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10724:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3310,"name":"address","nodeType":"ElementaryTypeName","src":"10724:7:12","typeDescriptions":{}}},"id":3313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10724:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10713:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":3315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10736:36:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":3308,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10705:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10705:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3317,"nodeType":"ExpressionStatement","src":"10705:68:12"},{"expression":{"id":3324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3318,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"10784:11:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":3321,"indexExpression":{"id":3319,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"10796:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10784:18:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3322,"indexExpression":{"id":3320,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"10803:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10784:27:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3323,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3295,"src":"10814:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10784:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3325,"nodeType":"ExpressionStatement","src":"10784:36:12"},{"eventCall":{"arguments":[{"id":3327,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"10844:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3328,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"10851:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3329,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3295,"src":"10860:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3326,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3420,"src":"10835:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10835:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3331,"nodeType":"EmitStatement","src":"10830:37:12"}]},"documentation":{"id":3289,"nodeType":"StructuredDocumentation","src":"10087:412:12","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":3333,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10513:8:12","nodeType":"FunctionDefinition","parameters":{"id":3296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3291,"mutability":"mutable","name":"owner","nameLocation":"10539:5:12","nodeType":"VariableDeclaration","scope":3333,"src":"10531:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3290,"name":"address","nodeType":"ElementaryTypeName","src":"10531:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3293,"mutability":"mutable","name":"spender","nameLocation":"10562:7:12","nodeType":"VariableDeclaration","scope":3333,"src":"10554:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3292,"name":"address","nodeType":"ElementaryTypeName","src":"10554:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3295,"mutability":"mutable","name":"amount","nameLocation":"10587:6:12","nodeType":"VariableDeclaration","scope":3333,"src":"10579:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3294,"name":"uint256","nodeType":"ElementaryTypeName","src":"10579:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10521:78:12"},"returnParameters":{"id":3297,"nodeType":"ParameterList","parameters":[],"src":"10617:0:12"},"scope":3399,"src":"10504:370:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3375,"nodeType":"Block","src":"11275:321:12","statements":[{"assignments":[3344],"declarations":[{"constant":false,"id":3344,"mutability":"mutable","name":"currentAllowance","nameLocation":"11293:16:12","nodeType":"VariableDeclaration","scope":3375,"src":"11285:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3343,"name":"uint256","nodeType":"ElementaryTypeName","src":"11285:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3349,"initialValue":{"arguments":[{"id":3346,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"11322:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3347,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"11329:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3345,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"11312:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11312:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11285:52:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3350,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"11351:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":3353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11376:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3352,"name":"uint256","nodeType":"ElementaryTypeName","src":"11376:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":3351,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11371:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11371:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":3355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11385:3:12","memberName":"max","nodeType":"MemberAccess","src":"11371:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11351:37:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3374,"nodeType":"IfStatement","src":"11347:243:12","trueBody":{"id":3373,"nodeType":"Block","src":"11390:200:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3358,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"11412:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3359,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3340,"src":"11432:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11412:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":3361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11440:31:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":3357,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11404:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11404:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3363,"nodeType":"ExpressionStatement","src":"11404:68:12"},{"id":3372,"nodeType":"UncheckedBlock","src":"11486:94:12","statements":[{"expression":{"arguments":[{"id":3365,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"11523:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3366,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"11530:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3367,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"11539:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3368,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3340,"src":"11558:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11539:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3364,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"11514:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11514:51:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3371,"nodeType":"ExpressionStatement","src":"11514:51:12"}]}]}}]},"documentation":{"id":3334,"nodeType":"StructuredDocumentation","src":"10880:270:12","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":3376,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11164:15:12","nodeType":"FunctionDefinition","parameters":{"id":3341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3336,"mutability":"mutable","name":"owner","nameLocation":"11197:5:12","nodeType":"VariableDeclaration","scope":3376,"src":"11189:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3335,"name":"address","nodeType":"ElementaryTypeName","src":"11189:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3338,"mutability":"mutable","name":"spender","nameLocation":"11220:7:12","nodeType":"VariableDeclaration","scope":3376,"src":"11212:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3337,"name":"address","nodeType":"ElementaryTypeName","src":"11212:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3340,"mutability":"mutable","name":"amount","nameLocation":"11245:6:12","nodeType":"VariableDeclaration","scope":3376,"src":"11237:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3339,"name":"uint256","nodeType":"ElementaryTypeName","src":"11237:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11179:78:12"},"returnParameters":{"id":3342,"nodeType":"ParameterList","parameters":[],"src":"11275:0:12"},"scope":3399,"src":"11155:441:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3386,"nodeType":"Block","src":"12299:2:12","statements":[]},"documentation":{"id":3377,"nodeType":"StructuredDocumentation","src":"11602:573:12","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":3387,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12189:20:12","nodeType":"FunctionDefinition","parameters":{"id":3384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3379,"mutability":"mutable","name":"from","nameLocation":"12227:4:12","nodeType":"VariableDeclaration","scope":3387,"src":"12219:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3378,"name":"address","nodeType":"ElementaryTypeName","src":"12219:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3381,"mutability":"mutable","name":"to","nameLocation":"12249:2:12","nodeType":"VariableDeclaration","scope":3387,"src":"12241:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3380,"name":"address","nodeType":"ElementaryTypeName","src":"12241:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3383,"mutability":"mutable","name":"amount","nameLocation":"12269:6:12","nodeType":"VariableDeclaration","scope":3387,"src":"12261:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3382,"name":"uint256","nodeType":"ElementaryTypeName","src":"12261:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12209:72:12"},"returnParameters":{"id":3385,"nodeType":"ParameterList","parameters":[],"src":"12299:0:12"},"scope":3399,"src":"12180:121:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3397,"nodeType":"Block","src":"13007:2:12","statements":[]},"documentation":{"id":3388,"nodeType":"StructuredDocumentation","src":"12307:577:12","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":3398,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"12898:19:12","nodeType":"FunctionDefinition","parameters":{"id":3395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3390,"mutability":"mutable","name":"from","nameLocation":"12935:4:12","nodeType":"VariableDeclaration","scope":3398,"src":"12927:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3389,"name":"address","nodeType":"ElementaryTypeName","src":"12927:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3392,"mutability":"mutable","name":"to","nameLocation":"12957:2:12","nodeType":"VariableDeclaration","scope":3398,"src":"12949:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3391,"name":"address","nodeType":"ElementaryTypeName","src":"12949:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3394,"mutability":"mutable","name":"amount","nameLocation":"12977:6:12","nodeType":"VariableDeclaration","scope":3398,"src":"12969:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3393,"name":"uint256","nodeType":"ElementaryTypeName","src":"12969:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12917:72:12"},"returnParameters":{"id":3396,"nodeType":"ParameterList","parameters":[],"src":"13007:0:12"},"scope":3399,"src":"12889:120:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3400,"src":"1401:11610:12","usedErrors":[]}],"src":"105:12907:12"},"id":12},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[3477]},"id":3478,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3401,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":3402,"nodeType":"StructuredDocumentation","src":"131:70:13","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":3477,"linearizedBaseContracts":[3477],"name":"IERC20","nameLocation":"212:6:13","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3403,"nodeType":"StructuredDocumentation","src":"225:158:13","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3411,"name":"Transfer","nameLocation":"394:8:13","nodeType":"EventDefinition","parameters":{"id":3410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3405,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:13","nodeType":"VariableDeclaration","scope":3411,"src":"403:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3404,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3407,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:13","nodeType":"VariableDeclaration","scope":3411,"src":"425:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3406,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3409,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:13","nodeType":"VariableDeclaration","scope":3411,"src":"445:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3408,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:13"},"src":"388:72:13"},{"anonymous":false,"documentation":{"id":3412,"nodeType":"StructuredDocumentation","src":"466:148:13","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3420,"name":"Approval","nameLocation":"625:8:13","nodeType":"EventDefinition","parameters":{"id":3419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3414,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:13","nodeType":"VariableDeclaration","scope":3420,"src":"634:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3413,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3416,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:13","nodeType":"VariableDeclaration","scope":3420,"src":"657:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3415,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3418,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:13","nodeType":"VariableDeclaration","scope":3420,"src":"682:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3417,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:13"},"src":"619:78:13"},{"documentation":{"id":3421,"nodeType":"StructuredDocumentation","src":"703:66:13","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":3426,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:13","nodeType":"FunctionDefinition","parameters":{"id":3422,"nodeType":"ParameterList","parameters":[],"src":"794:2:13"},"returnParameters":{"id":3425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3426,"src":"820:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3423,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:13"},"scope":3477,"src":"774:55:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3427,"nodeType":"StructuredDocumentation","src":"835:72:13","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":3434,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:13","nodeType":"FunctionDefinition","parameters":{"id":3430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3429,"mutability":"mutable","name":"account","nameLocation":"939:7:13","nodeType":"VariableDeclaration","scope":3434,"src":"931:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3428,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:13"},"returnParameters":{"id":3433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3434,"src":"971:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3431,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:13"},"scope":3477,"src":"912:68:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3435,"nodeType":"StructuredDocumentation","src":"986:202:13","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":3444,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:13","nodeType":"FunctionDefinition","parameters":{"id":3440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3437,"mutability":"mutable","name":"to","nameLocation":"1219:2:13","nodeType":"VariableDeclaration","scope":3444,"src":"1211:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3436,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3439,"mutability":"mutable","name":"amount","nameLocation":"1231:6:13","nodeType":"VariableDeclaration","scope":3444,"src":"1223:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3438,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:13"},"returnParameters":{"id":3443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3444,"src":"1257:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3441,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:13"},"scope":3477,"src":"1193:70:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3445,"nodeType":"StructuredDocumentation","src":"1269:264:13","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":3454,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:13","nodeType":"FunctionDefinition","parameters":{"id":3450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3447,"mutability":"mutable","name":"owner","nameLocation":"1565:5:13","nodeType":"VariableDeclaration","scope":3454,"src":"1557:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3446,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3449,"mutability":"mutable","name":"spender","nameLocation":"1580:7:13","nodeType":"VariableDeclaration","scope":3454,"src":"1572:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3448,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:13"},"returnParameters":{"id":3453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3454,"src":"1612:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3451,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:13"},"scope":3477,"src":"1538:83:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3455,"nodeType":"StructuredDocumentation","src":"1627:642:13","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3464,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:13","nodeType":"FunctionDefinition","parameters":{"id":3460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3457,"mutability":"mutable","name":"spender","nameLocation":"2299:7:13","nodeType":"VariableDeclaration","scope":3464,"src":"2291:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3456,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3459,"mutability":"mutable","name":"amount","nameLocation":"2316:6:13","nodeType":"VariableDeclaration","scope":3464,"src":"2308:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3458,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:13"},"returnParameters":{"id":3463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3462,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3464,"src":"2342:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3461,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:13"},"scope":3477,"src":"2274:74:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3465,"nodeType":"StructuredDocumentation","src":"2354:287:13","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3476,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:13","nodeType":"FunctionDefinition","parameters":{"id":3472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3467,"mutability":"mutable","name":"from","nameLocation":"2685:4:13","nodeType":"VariableDeclaration","scope":3476,"src":"2677:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3466,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3469,"mutability":"mutable","name":"to","nameLocation":"2707:2:13","nodeType":"VariableDeclaration","scope":3476,"src":"2699:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3468,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3471,"mutability":"mutable","name":"amount","nameLocation":"2727:6:13","nodeType":"VariableDeclaration","scope":3476,"src":"2719:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3470,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:13"},"returnParameters":{"id":3475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3474,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3476,"src":"2758:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3473,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:13"},"scope":3477,"src":"2646:118:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3478,"src":"202:2564:13","usedErrors":[]}],"src":"106:2661:13"},"id":13},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[3477],"IERC20Metadata":[3502]},"id":3503,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3479,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:14"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":3480,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3503,"sourceUnit":3478,"src":"135:23:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3482,"name":"IERC20","nameLocations":["305:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":3477,"src":"305:6:14"},"id":3483,"nodeType":"InheritanceSpecifier","src":"305:6:14"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":3481,"nodeType":"StructuredDocumentation","src":"160:116:14","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":3502,"linearizedBaseContracts":[3502,3477],"name":"IERC20Metadata","nameLocation":"287:14:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3484,"nodeType":"StructuredDocumentation","src":"318:54:14","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":3489,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:14","nodeType":"FunctionDefinition","parameters":{"id":3485,"nodeType":"ParameterList","parameters":[],"src":"390:2:14"},"returnParameters":{"id":3488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3489,"src":"416:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3486,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:14"},"scope":3502,"src":"377:54:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3490,"nodeType":"StructuredDocumentation","src":"437:56:14","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":3495,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:14","nodeType":"FunctionDefinition","parameters":{"id":3491,"nodeType":"ParameterList","parameters":[],"src":"513:2:14"},"returnParameters":{"id":3494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3493,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3495,"src":"539:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3492,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:14"},"scope":3502,"src":"498:56:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3496,"nodeType":"StructuredDocumentation","src":"560:65:14","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":3501,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:14","nodeType":"FunctionDefinition","parameters":{"id":3497,"nodeType":"ParameterList","parameters":[],"src":"647:2:14"},"returnParameters":{"id":3500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3499,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3501,"src":"673:5:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3498,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:14"},"scope":3502,"src":"630:50:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3503,"src":"277:405:14","usedErrors":[]}],"src":"110:573:14"},"id":14},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3524]},"id":3525,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3504,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:15"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":3505,"nodeType":"StructuredDocumentation","src":"111:496:15","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3524,"linearizedBaseContracts":[3524],"name":"Context","nameLocation":"626:7:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":3513,"nodeType":"Block","src":"702:34:15","statements":[{"expression":{"expression":{"id":3510,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:15","memberName":"sender","nodeType":"MemberAccess","src":"719:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3509,"id":3512,"nodeType":"Return","src":"712:17:15"}]},"id":3514,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:15","nodeType":"FunctionDefinition","parameters":{"id":3506,"nodeType":"ParameterList","parameters":[],"src":"659:2:15"},"returnParameters":{"id":3509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3514,"src":"693:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3507,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:15"},"scope":3524,"src":"640:96:15","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3522,"nodeType":"Block","src":"809:32:15","statements":[{"expression":{"expression":{"id":3519,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:15","memberName":"data","nodeType":"MemberAccess","src":"826:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3518,"id":3521,"nodeType":"Return","src":"819:15:15"}]},"id":3523,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:15","nodeType":"FunctionDefinition","parameters":{"id":3515,"nodeType":"ParameterList","parameters":[],"src":"759:2:15"},"returnParameters":{"id":3518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3523,"src":"793:14:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3516,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:15"},"scope":3524,"src":"742:99:15","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3525,"src":"608:235:15","usedErrors":[]}],"src":"86:758:15"},"id":15},"contracts/Paycrest.sol":{"ast":{"absolutePath":"contracts/Paycrest.sol","exportedSymbols":{"AddressUpgradeable":[1204],"ECDSAUpgradeable":[1841],"IERC20":[3477],"IERC20PermitUpgradeable":[498],"IERC20Upgradeable":[462],"IPaycrest":[5098],"IPaycrestStake":[5120],"MathUpgradeable":[2707],"Paycrest":[4233],"PaycrestSettingManager":[4507],"SafeERC20Upgradeable":[874],"SignedMathUpgradeable":[2812],"StringsUpgradeable":[1475]},"id":4234,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3526,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:16"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","id":3527,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4234,"sourceUnit":1842,"src":"62:85:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":3528,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4234,"sourceUnit":875,"src":"148:88:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/PaycrestSettingManager.sol","file":"./PaycrestSettingManager.sol","id":3530,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4234,"sourceUnit":4508,"src":"237:68:16","symbolAliases":[{"foreign":{"id":3529,"name":"PaycrestSettingManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4507,"src":"245:22:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interface/IPaycrestStake.sol","file":"./interface/IPaycrestStake.sol","id":3532,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4234,"sourceUnit":5121,"src":"306:62:16","symbolAliases":[{"foreign":{"id":3531,"name":"IPaycrestStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5120,"src":"314:14:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interface/IPaycrest.sol","file":"./interface/IPaycrest.sol","id":3535,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4234,"sourceUnit":5099,"src":"369:60:16","symbolAliases":[{"foreign":{"id":3533,"name":"IPaycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"377:9:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3534,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"388:6:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3536,"name":"IPaycrest","nameLocations":["451:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":5098,"src":"451:9:16"},"id":3537,"nodeType":"InheritanceSpecifier","src":"451:9:16"},{"baseName":{"id":3538,"name":"PaycrestSettingManager","nameLocations":["462:22:16"],"nodeType":"IdentifierPath","referencedDeclaration":4507,"src":"462:22:16"},"id":3539,"nodeType":"InheritanceSpecifier","src":"462:22:16"}],"canonicalName":"Paycrest","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4233,"linearizedBaseContracts":[4233,4507,131,1246,300,5098],"name":"Paycrest","nameLocation":"439:8:16","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3543,"libraryName":{"id":3540,"name":"SafeERC20Upgradeable","nameLocations":["498:20:16"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"498:20:16"},"nodeType":"UsingForDirective","src":"492:38:16","typeName":{"id":3542,"nodeType":"UserDefinedTypeName","pathNode":{"id":3541,"name":"IERC20","nameLocations":["523:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3477,"src":"523:6:16"},"referencedDeclaration":3477,"src":"523:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3477","typeString":"contract IERC20"}}},{"global":false,"id":3546,"libraryName":{"id":3544,"name":"ECDSAUpgradeable","nameLocations":["541:16:16"],"nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"541:16:16"},"nodeType":"UsingForDirective","src":"535:35:16","typeName":{"id":3545,"name":"bytes32","nodeType":"ElementaryTypeName","src":"562:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"canonicalName":"Paycrest.fee","id":3555,"members":[{"constant":false,"id":3548,"mutability":"mutable","name":"protocolFee","nameLocation":"604:11:16","nodeType":"VariableDeclaration","scope":3555,"src":"596:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3547,"name":"uint256","nodeType":"ElementaryTypeName","src":"596:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3550,"mutability":"mutable","name":"liquidityProviderAmount","nameLocation":"633:23:16","nodeType":"VariableDeclaration","scope":3555,"src":"625:31:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3549,"name":"uint256","nodeType":"ElementaryTypeName","src":"625:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3552,"mutability":"mutable","name":"primaryValidatorReward","nameLocation":"674:22:16","nodeType":"VariableDeclaration","scope":3555,"src":"666:30:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3551,"name":"uint256","nodeType":"ElementaryTypeName","src":"666:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3554,"mutability":"mutable","name":"secondaryValidatorsReward","nameLocation":"714:25:16","nodeType":"VariableDeclaration","scope":3555,"src":"706:33:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3553,"name":"uint256","nodeType":"ElementaryTypeName","src":"706:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"fee","nameLocation":"582:3:16","nodeType":"StructDefinition","scope":4233,"src":"575:171:16","visibility":"public"},{"constant":false,"id":3560,"mutability":"mutable","name":"order","nameLocation":"785:5:16","nodeType":"VariableDeclaration","scope":4233,"src":"751:39:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order)"},"typeName":{"id":3559,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3556,"name":"bytes32","nodeType":"ElementaryTypeName","src":"759:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"751:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3558,"nodeType":"UserDefinedTypeName","pathNode":{"id":3557,"name":"Order","nameLocations":["770:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":5007,"src":"770:5:16"},"referencedDeclaration":5007,"src":"770:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage_ptr","typeString":"struct IPaycrest.Order"}}},"visibility":"private"},{"constant":false,"id":3564,"mutability":"mutable","name":"_nonce","nameLocation":"832:6:16","nodeType":"VariableDeclaration","scope":4233,"src":"796:42:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3563,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3561,"name":"address","nodeType":"ElementaryTypeName","src":"804:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"796:27:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3562,"name":"uint256","nodeType":"ElementaryTypeName","src":"815:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":3571,"nodeType":"Block","src":"911:39:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3568,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"921:20:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"921:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3570,"nodeType":"ExpressionStatement","src":"921:22:16"}]},"documentation":{"id":3565,"nodeType":"StructuredDocumentation","src":"844:48:16","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":3572,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3566,"nodeType":"ParameterList","parameters":[],"src":"908:2:16"},"returnParameters":{"id":3567,"nodeType":"ParameterList","parameters":[],"src":"911:0:16"},"scope":4233,"src":"897:53:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3588,"nodeType":"Block","src":"1012:82:16","statements":[{"expression":{"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3579,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4270,"src":"1026:17:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3581,"indexExpression":{"id":3580,"name":"_usdc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"1044:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1026:24:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1053:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1026:31:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3584,"nodeType":"ExpressionStatement","src":"1026:31:16"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3585,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"1071:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1071:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3587,"nodeType":"ExpressionStatement","src":"1071:16:16"}]},"functionSelector":"c4d66de8","id":3589,"implemented":true,"kind":"function","modifiers":[{"id":3577,"kind":"modifierInvocation","modifierName":{"id":3576,"name":"initializer","nameLocations":["1000:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":202,"src":"1000:11:16"},"nodeType":"ModifierInvocation","src":"1000:11:16"}],"name":"initialize","nameLocation":"965:10:16","nodeType":"FunctionDefinition","parameters":{"id":3575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3574,"mutability":"mutable","name":"_usdc","nameLocation":"984:5:16","nodeType":"VariableDeclaration","scope":3589,"src":"976:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3573,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:15:16"},"returnParameters":{"id":3578,"nodeType":"ParameterList","parameters":[],"src":"1012:0:16"},"scope":4233,"src":"956:138:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3600,"nodeType":"Block","src":"1213:90:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3591,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1226:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1230:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1226:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3593,"name":"_liquidityAggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"1240:20:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1226:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3598,"nodeType":"IfStatement","src":"1223:62:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3595,"name":"OnlyAggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4961,"src":"1269:14:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1269:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3597,"nodeType":"RevertStatement","src":"1262:23:16"}},{"id":3599,"nodeType":"PlaceholderStatement","src":"1295:1:16"}]},"id":3601,"name":"onlyAggregator","nameLocation":"1198:14:16","nodeType":"ModifierDefinition","parameters":{"id":3590,"nodeType":"ParameterList","parameters":[],"src":"1213:0:16"},"src":"1189:114:16","virtual":false,"visibility":"internal"},{"baseFunctions":[5029],"body":{"id":3692,"nodeType":"Block","src":"1854:1084:16","statements":[{"expression":{"arguments":[{"id":3624,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3604,"src":"2025:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3625,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3606,"src":"2033:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3626,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"2042:14:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3627,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"2058:19:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3628,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"2079:16:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3623,"name":"_handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"2016:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_address_$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,uint256,address,address,bytes32) view"}},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:80:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3630,"nodeType":"ExpressionStatement","src":"2016:80:16"},{"expression":{"arguments":[{"expression":{"id":3635,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2182:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2186:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2182:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3639,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2202:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_Paycrest_$4233","typeString":"contract Paycrest"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Paycrest_$4233","typeString":"contract Paycrest"}],"id":3638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2194:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3637,"name":"address","nodeType":"ElementaryTypeName","src":"2194:7:16","typeDescriptions":{}}},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2194:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3641,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3606,"src":"2209:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3632,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3604,"src":"2161:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3631,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"2154:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3477_$","typeString":"type(contract IERC20)"}},"id":3633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3477","typeString":"contract IERC20"}},"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2169:12:16","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3476,"src":"2154:27:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:63:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3643,"nodeType":"ExpressionStatement","src":"2154:63:16"},{"expression":{"id":3648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2283:21:16","subExpression":{"baseExpression":{"id":3644,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"2283:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3647,"indexExpression":{"expression":{"id":3645,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2290:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2294:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2290:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2283:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3649,"nodeType":"ExpressionStatement","src":"2283:21:16"},{"expression":{"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3650,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"2369:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"id":3654,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2400:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2404:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2400:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3656,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"2412:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3659,"indexExpression":{"expression":{"id":3657,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2419:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2423:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2419:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2412:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3652,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2389:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2393:6:16","memberName":"encode","nodeType":"MemberAccess","src":"2389:10:16","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2389:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3651,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2379:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2379:53:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2369:63:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3663,"nodeType":"ExpressionStatement","src":"2369:63:16"},{"expression":{"id":3682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3664,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"2472:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3666,"indexExpression":{"id":3665,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"2478:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2472:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3668,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2517:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2521:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2517:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3670,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3604,"src":"2548:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3671,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"2588:19:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3672,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"2632:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3673,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"2662:5:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"hexValue":"66616c7365","id":3674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2694:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":3675,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"2728:14:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3678,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"2775:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2768:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":3676,"name":"uint96","nodeType":"ElementaryTypeName","src":"2768:6:16","typeDescriptions":{}}},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":3680,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3606,"src":"2805:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3667,"name":"Order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5007,"src":"2489:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Order_$5007_storage_ptr_$","typeString":"type(struct IPaycrest.Order storage pointer)"}},"id":3681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2509:6:16","2541:5:16","2568:18:16","2621:9:16","2656:4:16","2681:11:16","2713:13:16","2756:10:16","2797:6:16"],"names":["seller","token","senderFeeRecipient","senderFee","rate","isFulfilled","refundAddress","currentBPS","amount"],"nodeType":"FunctionCall","src":"2489:334:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_memory_ptr","typeString":"struct IPaycrest.Order memory"}},"src":"2472:351:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3683,"nodeType":"ExpressionStatement","src":"2472:351:16"},{"eventCall":{"arguments":[{"id":3685,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"2876:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3686,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3606,"src":"2885:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3687,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"2894:5:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":3688,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"2901:16:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3689,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"2919:11:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":3684,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4937,"src":"2868:7:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes32,uint256,uint256,bytes32,string memory)"}},"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2868:63:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3691,"nodeType":"EmitStatement","src":"2863:68:16"}]},"documentation":{"id":3602,"nodeType":"StructuredDocumentation","src":"1504:40:16","text":"@dev See {createOrder-IPaycrest}. "},"functionSelector":"d12ff20a","id":3693,"implemented":true,"kind":"function","modifiers":[],"name":"createOrder","nameLocation":"1558:11:16","nodeType":"FunctionDefinition","parameters":{"id":3619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3604,"mutability":"mutable","name":"_token","nameLocation":"1587:6:16","nodeType":"VariableDeclaration","scope":3693,"src":"1579:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3603,"name":"address","nodeType":"ElementaryTypeName","src":"1579:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3606,"mutability":"mutable","name":"_amount","nameLocation":"1612:7:16","nodeType":"VariableDeclaration","scope":3693,"src":"1604:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3605,"name":"uint256","nodeType":"ElementaryTypeName","src":"1604:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3608,"mutability":"mutable","name":"_institutionCode","nameLocation":"1638:16:16","nodeType":"VariableDeclaration","scope":3693,"src":"1630:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3607,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1630:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3610,"mutability":"mutable","name":"_rate","nameLocation":"1671:5:16","nodeType":"VariableDeclaration","scope":3693,"src":"1664:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3609,"name":"uint96","nodeType":"ElementaryTypeName","src":"1664:6:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3612,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"1695:19:16","nodeType":"VariableDeclaration","scope":3693,"src":"1687:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3611,"name":"address","nodeType":"ElementaryTypeName","src":"1687:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3614,"mutability":"mutable","name":"_senderFee","nameLocation":"1732:10:16","nodeType":"VariableDeclaration","scope":3693,"src":"1724:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3613,"name":"uint256","nodeType":"ElementaryTypeName","src":"1724:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3616,"mutability":"mutable","name":"_refundAddress","nameLocation":"1760:14:16","nodeType":"VariableDeclaration","scope":3693,"src":"1752:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3615,"name":"address","nodeType":"ElementaryTypeName","src":"1752:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3618,"mutability":"mutable","name":"messageHash","nameLocation":"1801:11:16","nodeType":"VariableDeclaration","scope":3693,"src":"1785:27:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3617,"name":"string","nodeType":"ElementaryTypeName","src":"1785:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1569:249:16"},"returnParameters":{"id":3622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3621,"mutability":"mutable","name":"orderId","nameLocation":"1845:7:16","nodeType":"VariableDeclaration","scope":3693,"src":"1837:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3620,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1837:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1836:17:16"},"scope":4233,"src":"1549:1389:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3754,"nodeType":"Block","src":"3088:373:16","statements":[{"condition":{"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3101:26:16","subExpression":{"baseExpression":{"id":3706,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4270,"src":"3102:17:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3708,"indexExpression":{"id":3707,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"3120:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3102:25:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3713,"nodeType":"IfStatement","src":"3098:57:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3710,"name":"TokenNotSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4299,"src":"3136:17:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3136:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3712,"nodeType":"RevertStatement","src":"3129:26:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3714,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"3168:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3179:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3168:12:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3720,"nodeType":"IfStatement","src":"3165:38:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3717,"name":"AmountIsZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4302,"src":"3189:12:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3189:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3719,"nodeType":"RevertStatement","src":"3182:21:16"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3721,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3699,"src":"3216:14:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3242:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3234:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3722,"name":"address","nodeType":"ElementaryTypeName","src":"3234:7:16","typeDescriptions":{}}},"id":3725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3234:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3216:28:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3730,"nodeType":"IfStatement","src":"3213:58:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3727,"name":"ThrowZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"3253:16:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3253:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3729,"nodeType":"RevertStatement","src":"3246:25:16"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3731,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"3284:19:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3315:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3307:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3732,"name":"address","nodeType":"ElementaryTypeName","src":"3307:7:16","typeDescriptions":{}}},"id":3735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3284:33:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3740,"nodeType":"IfStatement","src":"3281:63:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3737,"name":"ThrowZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"3326:16:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3326:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3739,"nodeType":"RevertStatement","src":"3319:25:16"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3741,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"3357:27:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4248_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":3743,"indexExpression":{"id":3742,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"3385:16:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3357:45:16","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4248_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"id":3744,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3403:4:16","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":4245,"src":"3357:50:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3419:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3411:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3745,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3411:7:16","typeDescriptions":{}}},"id":3748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3411:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3357:64:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3753,"nodeType":"IfStatement","src":"3354:100:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3750,"name":"InvalidInstitutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"3430:22:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3430:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3752,"nodeType":"RevertStatement","src":"3423:31:16"}}]},"id":3755,"implemented":true,"kind":"function","modifiers":[],"name":"_handler","nameLocation":"2953:8:16","nodeType":"FunctionDefinition","parameters":{"id":3704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3695,"mutability":"mutable","name":"_token","nameLocation":"2970:6:16","nodeType":"VariableDeclaration","scope":3755,"src":"2962:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3694,"name":"address","nodeType":"ElementaryTypeName","src":"2962:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3697,"mutability":"mutable","name":"_amount","nameLocation":"2986:7:16","nodeType":"VariableDeclaration","scope":3755,"src":"2978:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3696,"name":"uint256","nodeType":"ElementaryTypeName","src":"2978:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3699,"mutability":"mutable","name":"_refundAddress","nameLocation":"3003:14:16","nodeType":"VariableDeclaration","scope":3755,"src":"2995:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3698,"name":"address","nodeType":"ElementaryTypeName","src":"2995:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3701,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"3027:19:16","nodeType":"VariableDeclaration","scope":3755,"src":"3019:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3700,"name":"address","nodeType":"ElementaryTypeName","src":"3019:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3703,"mutability":"mutable","name":"_institutionCode","nameLocation":"3056:16:16","nodeType":"VariableDeclaration","scope":3755,"src":"3048:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3702,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3048:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2961:112:16"},"returnParameters":{"id":3705,"nodeType":"ParameterList","parameters":[],"src":"3088:0:16"},"scope":4233,"src":"2944:517:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[5046],"body":{"id":3899,"nodeType":"Block","src":"3956:1737:16","statements":[{"condition":{"expression":{"baseExpression":{"id":3774,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"4026:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3776,"indexExpression":{"id":3775,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"4032:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4026:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3777,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4042:11:16","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":5000,"src":"4026:27:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3781,"nodeType":"IfStatement","src":"4023:55:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3778,"name":"OrderFulfilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"4062:14:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4062:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3780,"nodeType":"RevertStatement","src":"4055:23:16"}},{"assignments":[3783],"declarations":[{"constant":false,"id":3783,"mutability":"mutable","name":"token","nameLocation":"4134:5:16","nodeType":"VariableDeclaration","scope":3899,"src":"4126:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3782,"name":"address","nodeType":"ElementaryTypeName","src":"4126:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3788,"initialValue":{"expression":{"baseExpression":{"id":3784,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"4142:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3786,"indexExpression":{"id":3785,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"4148:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4142:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3787,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4158:5:16","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4992,"src":"4142:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4126:37:16"},{"expression":{"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3789,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"4242:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3791,"indexExpression":{"id":3790,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"4248:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4242:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3792,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4258:10:16","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":5004,"src":"4242:26:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3793,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3767,"src":"4272:14:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"4242:44:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3795,"nodeType":"ExpressionStatement","src":"4242:44:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3796,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"4340:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3798,"indexExpression":{"id":3797,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"4346:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4340:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3799,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4356:10:16","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":5004,"src":"4340:26:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4370:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4340:31:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3810,"nodeType":"IfStatement","src":"4337:149:16","trueBody":{"id":3809,"nodeType":"Block","src":"4373:113:16","statements":[{"expression":{"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3802,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"4441:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3804,"indexExpression":{"id":3803,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"4447:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4441:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3805,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4457:11:16","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":5000,"src":"4441:27:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4471:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4441:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3808,"nodeType":"ExpressionStatement","src":"4441:34:16"}]}},{"assignments":[3813],"declarations":[{"constant":false,"id":3813,"mutability":"mutable","name":"_feeParams","nameLocation":"4598:10:16","nodeType":"VariableDeclaration","scope":3899,"src":"4587:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee"},"typeName":{"id":3812,"nodeType":"UserDefinedTypeName","pathNode":{"id":3811,"name":"fee","nameLocations":["4587:3:16"],"nodeType":"IdentifierPath","referencedDeclaration":3555,"src":"4587:3:16"},"referencedDeclaration":3555,"src":"4587:3:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_storage_ptr","typeString":"struct Paycrest.fee"}},"visibility":"internal"}],"id":3818,"initialValue":{"arguments":[{"id":3815,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"4629:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3816,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3767,"src":"4639:14:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":3814,"name":"_calculateFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4091,"src":"4614:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_uint96_$returns$_t_struct$_fee_$3555_memory_ptr_$","typeString":"function (bytes32,uint96) view returns (struct Paycrest.fee memory)"}},"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4614:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"nodeType":"VariableDeclarationStatement","src":"4585:69:16"},{"assignments":[3820],"declarations":[{"constant":false,"id":3820,"mutability":"mutable","name":"_fee","nameLocation":"4672:4:16","nodeType":"VariableDeclaration","scope":3899,"src":"4664:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3819,"name":"uint256","nodeType":"ElementaryTypeName","src":"4664:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3825,"initialValue":{"expression":{"baseExpression":{"id":3821,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"4679:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3823,"indexExpression":{"id":3822,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"4685:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4679:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3824,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4695:9:16","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":4996,"src":"4679:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4664:40:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3826,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"4718:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4725:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4718:8:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3834,"nodeType":"IfStatement","src":"4714:101:16","trueBody":{"id":3833,"nodeType":"Block","src":"4728:87:16","statements":[{"expression":{"arguments":[{"id":3830,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"4795:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3829,"name":"transferSenderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3936,"src":"4777:17:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":3831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4777:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3832,"nodeType":"ExpressionStatement","src":"4777:27:16"}]}},{"expression":{"arguments":[{"id":3839,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"4880:12:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3840,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"4894:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3841,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4905:11:16","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3548,"src":"4894:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3836,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"4864:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3835,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"4857:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3477_$","typeString":"type(contract IERC20)"}},"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4857:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3477","typeString":"contract IERC20"}},"id":3838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4871:8:16","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3444,"src":"4857:22:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4857:60:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3843,"nodeType":"ExpressionStatement","src":"4857:60:16"},{"expression":{"arguments":[{"id":3848,"name":"_liquidityProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"4996:18:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3849,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"5016:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3850,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5027:23:16","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3550,"src":"5016:34:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3845,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"4980:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3844,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"4973:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3477_$","typeString":"type(contract IERC20)"}},"id":3846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4973:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3477","typeString":"contract IERC20"}},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4987:8:16","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3444,"src":"4973:22:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4973:78:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3852,"nodeType":"ExpressionStatement","src":"4973:78:16"},{"expression":{"arguments":[{"arguments":[{"id":3859,"name":"PaycrestStakingContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"5092:23:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5084:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3857,"name":"address","nodeType":"ElementaryTypeName","src":"5084:7:16","typeDescriptions":{}}},"id":3860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5084:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3861,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"5119:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3862,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5130:22:16","memberName":"primaryValidatorReward","nodeType":"MemberAccess","referencedDeclaration":3552,"src":"5119:33:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":3863,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"5155:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3864,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5166:25:16","memberName":"secondaryValidatorsReward","nodeType":"MemberAccess","referencedDeclaration":3554,"src":"5155:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5119:72:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3866,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5118:74:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3854,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"5068:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3853,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5061:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3477_$","typeString":"type(contract IERC20)"}},"id":3855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5061:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3477","typeString":"contract IERC20"}},"id":3856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5075:8:16","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3444,"src":"5061:22:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5061:132:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3868,"nodeType":"ExpressionStatement","src":"5061:132:16"},{"assignments":[3870],"declarations":[{"constant":false,"id":3870,"mutability":"mutable","name":"status","nameLocation":"5241:6:16","nodeType":"VariableDeclaration","scope":3899,"src":"5236:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3869,"name":"bool","nodeType":"ElementaryTypeName","src":"5236:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3884,"initialValue":{"arguments":[{"id":3875,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"5320:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3876,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"5342:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3877,"name":"_primaryValidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3760,"src":"5361:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3878,"name":"_secondaryValidators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"5393:20:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"expression":{"id":3879,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"5428:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3880,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5439:22:16","memberName":"primaryValidatorReward","nodeType":"MemberAccess","referencedDeclaration":3552,"src":"5428:33:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3881,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"5476:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3882,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5487:25:16","memberName":"secondaryValidatorsReward","nodeType":"MemberAccess","referencedDeclaration":3554,"src":"5476:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3872,"name":"PaycrestStakingContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"5265:23:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3871,"name":"IPaycrestStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5120,"src":"5250:14:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPaycrestStake_$5120_$","typeString":"type(contract IPaycrestStake)"}},"id":3873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5250:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPaycrestStake_$5120","typeString":"contract IPaycrestStake"}},"id":3874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5290:16:16","memberName":"rewardValidators","nodeType":"MemberAccess","referencedDeclaration":5119,"src":"5250:56:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (bytes32,address,address,address[] memory,uint256,uint256) external returns (bool)"}},"id":3883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5250:272:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"5236:286:16"},{"condition":{"id":3886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5535:7:16","subExpression":{"id":3885,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"5536:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3890,"nodeType":"IfStatement","src":"5532:43:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3887,"name":"UnableToProcessRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4973,"src":"5551:22:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5551:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3889,"nodeType":"RevertStatement","src":"5544:31:16"}},{"eventCall":{"arguments":[{"id":3892,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"5620:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3893,"name":"_liquidityProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"5630:18:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3894,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3767,"src":"5650:14:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":3891,"name":"Settled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4946,"src":"5612:7:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint96_$returns$__$","typeString":"function (bytes32,address,uint96)"}},"id":3895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5612:53:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3896,"nodeType":"EmitStatement","src":"5607:58:16"},{"expression":{"hexValue":"74727565","id":3897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5682:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3773,"id":3898,"nodeType":"Return","src":"5675:11:16"}]},"documentation":{"id":3756,"nodeType":"StructuredDocumentation","src":"3668:35:16","text":"@dev See {settle-IPaycrest}. "},"functionSelector":"e5b32cdf","id":3900,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3770,"kind":"modifierInvocation","modifierName":{"id":3769,"name":"onlyAggregator","nameLocations":["3925:14:16"],"nodeType":"IdentifierPath","referencedDeclaration":3601,"src":"3925:14:16"},"nodeType":"ModifierInvocation","src":"3925:16:16"}],"name":"settle","nameLocation":"3717:6:16","nodeType":"FunctionDefinition","parameters":{"id":3768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3758,"mutability":"mutable","name":"_orderId","nameLocation":"3741:8:16","nodeType":"VariableDeclaration","scope":3900,"src":"3733:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3757,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3733:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3760,"mutability":"mutable","name":"_primaryValidator","nameLocation":"3768:17:16","nodeType":"VariableDeclaration","scope":3900,"src":"3760:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3759,"name":"address","nodeType":"ElementaryTypeName","src":"3760:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3763,"mutability":"mutable","name":"_secondaryValidators","nameLocation":"3815:20:16","nodeType":"VariableDeclaration","scope":3900,"src":"3796:39:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3761,"name":"address","nodeType":"ElementaryTypeName","src":"3796:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3762,"nodeType":"ArrayTypeName","src":"3796:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3765,"mutability":"mutable","name":"_liquidityProvider","nameLocation":"3854:18:16","nodeType":"VariableDeclaration","scope":3900,"src":"3846:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3764,"name":"address","nodeType":"ElementaryTypeName","src":"3846:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3767,"mutability":"mutable","name":"_settlePercent","nameLocation":"3890:14:16","nodeType":"VariableDeclaration","scope":3900,"src":"3883:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3766,"name":"uint96","nodeType":"ElementaryTypeName","src":"3883:6:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"3723:191:16"},"returnParameters":{"id":3773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3900,"src":"3950:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3771,"name":"bool","nodeType":"ElementaryTypeName","src":"3950:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3949:6:16"},"scope":4233,"src":"3708:1985:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3935,"nodeType":"Block","src":"5753:289:16","statements":[{"assignments":[3906],"declarations":[{"constant":false,"id":3906,"mutability":"mutable","name":"recipient","nameLocation":"5771:9:16","nodeType":"VariableDeclaration","scope":3935,"src":"5763:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3905,"name":"address","nodeType":"ElementaryTypeName","src":"5763:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3911,"initialValue":{"expression":{"baseExpression":{"id":3907,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"5783:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3909,"indexExpression":{"id":3908,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3902,"src":"5789:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5783:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3910,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5799:18:16","memberName":"senderFeeRecipient","nodeType":"MemberAccess","referencedDeclaration":4994,"src":"5783:34:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5763:54:16"},{"assignments":[3913],"declarations":[{"constant":false,"id":3913,"mutability":"mutable","name":"_fee","nameLocation":"5835:4:16","nodeType":"VariableDeclaration","scope":3935,"src":"5827:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3912,"name":"uint256","nodeType":"ElementaryTypeName","src":"5827:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3918,"initialValue":{"expression":{"baseExpression":{"id":3914,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"5842:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3916,"indexExpression":{"id":3915,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3902,"src":"5848:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5842:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3917,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5858:9:16","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":4996,"src":"5842:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5827:40:16"},{"expression":{"arguments":[{"id":3926,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"5947:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3927,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3913,"src":"5958:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3920,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"5915:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3922,"indexExpression":{"id":3921,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3902,"src":"5921:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5915:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3923,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5931:5:16","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4992,"src":"5915:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3919,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5908:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3477_$","typeString":"type(contract IERC20)"}},"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5908:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3477","typeString":"contract IERC20"}},"id":3925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5938:8:16","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3444,"src":"5908:38:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5908:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3929,"nodeType":"ExpressionStatement","src":"5908:55:16"},{"eventCall":{"arguments":[{"id":3931,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"6019:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3932,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3913,"src":"6030:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3930,"name":"TransferSenderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"6001:17:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6001:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3934,"nodeType":"EmitStatement","src":"5996:39:16"}]},"id":3936,"implemented":true,"kind":"function","modifiers":[],"name":"transferSenderFee","nameLocation":"5708:17:16","nodeType":"FunctionDefinition","parameters":{"id":3903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3902,"mutability":"mutable","name":"_orderId","nameLocation":"5734:8:16","nodeType":"VariableDeclaration","scope":3936,"src":"5726:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3901,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5726:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5725:18:16"},"returnParameters":{"id":3904,"nodeType":"ParameterList","parameters":[],"src":"5753:0:16"},"scope":4233,"src":"5699:343:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[5054],"body":{"id":3991,"nodeType":"Block","src":"6163:447:16","statements":[{"condition":{"expression":{"baseExpression":{"id":3946,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"6233:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3948,"indexExpression":{"id":3947,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3939,"src":"6239:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6233:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3949,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6249:11:16","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":5000,"src":"6233:27:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3953,"nodeType":"IfStatement","src":"6230:55:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3950,"name":"OrderFulfilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"6269:14:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6269:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3952,"nodeType":"RevertStatement","src":"6262:23:16"}},{"expression":{"id":3959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3954,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"6325:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3956,"indexExpression":{"id":3955,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3939,"src":"6331:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6325:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3957,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6341:11:16","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":5000,"src":"6325:27:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6355:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6325:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3960,"nodeType":"ExpressionStatement","src":"6325:34:16"},{"expression":{"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3961,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"6369:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3963,"indexExpression":{"id":3962,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3939,"src":"6375:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6369:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3964,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6385:10:16","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":5004,"src":"6369:26:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6398:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6369:30:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3967,"nodeType":"ExpressionStatement","src":"6369:30:16"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3975,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"6479:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3977,"indexExpression":{"id":3976,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3939,"src":"6485:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6479:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3978,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6495:13:16","memberName":"refundAddress","nodeType":"MemberAccess","referencedDeclaration":5002,"src":"6479:29:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3979,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"6510:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3981,"indexExpression":{"id":3980,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3939,"src":"6516:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6510:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6526:6:16","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":5006,"src":"6510:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3969,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"6447:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3971,"indexExpression":{"id":3970,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3939,"src":"6453:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6447:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3972,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6463:5:16","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4992,"src":"6447:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3968,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"6440:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3477_$","typeString":"type(contract IERC20)"}},"id":3973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6440:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3477","typeString":"contract IERC20"}},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6470:8:16","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3444,"src":"6440:38:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6440:93:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3984,"nodeType":"ExpressionStatement","src":"6440:93:16"},{"eventCall":{"arguments":[{"id":3986,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3939,"src":"6573:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3985,"name":"Refunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4951,"src":"6564:8:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":3987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6564:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3988,"nodeType":"EmitStatement","src":"6559:23:16"},{"expression":{"hexValue":"74727565","id":3989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6599:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3945,"id":3990,"nodeType":"Return","src":"6592:11:16"}]},"documentation":{"id":3937,"nodeType":"StructuredDocumentation","src":"6048:35:16","text":"@dev See {refund-IPaycrest}. "},"functionSelector":"7249fbb6","id":3992,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3942,"kind":"modifierInvocation","modifierName":{"id":3941,"name":"onlyAggregator","nameLocations":["6132:14:16"],"nodeType":"IdentifierPath","referencedDeclaration":3601,"src":"6132:14:16"},"nodeType":"ModifierInvocation","src":"6132:16:16"}],"name":"refund","nameLocation":"6097:6:16","nodeType":"FunctionDefinition","parameters":{"id":3940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3939,"mutability":"mutable","name":"_orderId","nameLocation":"6112:8:16","nodeType":"VariableDeclaration","scope":3992,"src":"6104:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3938,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6104:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6103:18:16"},"returnParameters":{"id":3945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3944,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3992,"src":"6157:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3943,"name":"bool","nodeType":"ElementaryTypeName","src":"6157:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6156:6:16"},"scope":4233,"src":"6088:522:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4090,"nodeType":"Block","src":"6726:1234:16","statements":[{"assignments":[4003],"declarations":[{"constant":false,"id":4003,"mutability":"mutable","name":"amount","nameLocation":"6804:6:16","nodeType":"VariableDeclaration","scope":4090,"src":"6796:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4002,"name":"uint256","nodeType":"ElementaryTypeName","src":"6796:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4008,"initialValue":{"expression":{"baseExpression":{"id":4004,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"6813:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":4006,"indexExpression":{"id":4005,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3994,"src":"6819:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6813:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":4007,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6829:6:16","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":5006,"src":"6813:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6796:39:16"},{"expression":{"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4009,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"6883:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4010,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"6892:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"baseExpression":{"id":4011,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"6901:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":4013,"indexExpression":{"id":4012,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3994,"src":"6907:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6901:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":4014,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6917:9:16","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":4996,"src":"6901:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6892:34:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6883:43:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4017,"nodeType":"ExpressionStatement","src":"6883:43:16"},{"expression":{"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4018,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7005:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4020,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7016:23:16","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3550,"src":"7005:34:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4021,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"7043:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4022,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3996,"src":"7052:14:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"7043:23:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4024,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7042:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4025,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"7070:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7005:72:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4028,"nodeType":"ExpressionStatement","src":"7005:72:16"},{"expression":{"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4029,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7145:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4031,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7156:11:16","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3548,"src":"7145:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4032,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7171:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4033,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7182:23:16","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3550,"src":"7171:34:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4034,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4254,"src":"7208:18:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"7171:55:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4036,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7170:57:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4037,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"7230:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:67:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7145:92:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4040,"nodeType":"ExpressionStatement","src":"7145:92:16"},{"expression":{"id":4050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4041,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7335:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4043,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7346:23:16","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3550,"src":"7335:34:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4044,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7373:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4045,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7384:23:16","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":3550,"src":"7373:34:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":4046,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7410:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4047,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7421:11:16","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3548,"src":"7410:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7373:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4049,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7372:61:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7335:98:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4051,"nodeType":"ExpressionStatement","src":"7335:98:16"},{"expression":{"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4052,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7506:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4054,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7517:22:16","memberName":"primaryValidatorReward","nodeType":"MemberAccess","referencedDeclaration":3552,"src":"7506:33:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4055,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7543:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4056,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7554:11:16","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3548,"src":"7543:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4057,"name":"primaryValidatorFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"7568:26:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"7543:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4059,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7542:53:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4060,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"7598:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:63:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7506:99:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4063,"nodeType":"ExpressionStatement","src":"7506:99:16"},{"expression":{"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4064,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7680:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4066,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7691:25:16","memberName":"secondaryValidatorsReward","nodeType":"MemberAccess","referencedDeclaration":3554,"src":"7680:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4067,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7720:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4068,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7731:11:16","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3548,"src":"7720:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4069,"name":"secondaryValidatorFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"7745:28:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"7720:53:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4071,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7719:55:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4072,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"7777:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7719:65:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7680:104:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4075,"nodeType":"ExpressionStatement","src":"7680:104:16"},{"expression":{"id":4088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4076,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7829:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4078,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7840:11:16","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3548,"src":"7829:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4079,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7854:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4080,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7865:11:16","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3548,"src":"7854:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4081,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7880:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4082,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7891:22:16","memberName":"primaryValidatorReward","nodeType":"MemberAccess","referencedDeclaration":3552,"src":"7880:33:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":4083,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"7916:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":4084,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7927:25:16","memberName":"secondaryValidatorsReward","nodeType":"MemberAccess","referencedDeclaration":3554,"src":"7916:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:72:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4086,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7879:74:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7854:99:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7829:124:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4089,"nodeType":"ExpressionStatement","src":"7829:124:16"}]},"id":4091,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateFees","nameLocation":"6625:14:16","nodeType":"FunctionDefinition","parameters":{"id":3997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3994,"mutability":"mutable","name":"_orderId","nameLocation":"6648:8:16","nodeType":"VariableDeclaration","scope":4091,"src":"6640:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3993,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6640:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3996,"mutability":"mutable","name":"_settlePercent","nameLocation":"6665:14:16","nodeType":"VariableDeclaration","scope":4091,"src":"6658:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3995,"name":"uint96","nodeType":"ElementaryTypeName","src":"6658:6:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"6639:41:16"},"returnParameters":{"id":4001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4000,"mutability":"mutable","name":"_feeParams","nameLocation":"6713:10:16","nodeType":"VariableDeclaration","scope":4091,"src":"6702:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_memory_ptr","typeString":"struct Paycrest.fee"},"typeName":{"id":3999,"nodeType":"UserDefinedTypeName","pathNode":{"id":3998,"name":"fee","nameLocations":["6702:3:16"],"nodeType":"IdentifierPath","referencedDeclaration":3555,"src":"6702:3:16"},"referencedDeclaration":3555,"src":"6702:3:16","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$3555_storage_ptr","typeString":"struct Paycrest.fee"}},"visibility":"internal"}],"src":"6701:24:16"},"scope":4233,"src":"6616:1344:16","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[5071],"body":{"id":4104,"nodeType":"Block","src":"8283:39:16","statements":[{"expression":{"baseExpression":{"id":4100,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"8300:5:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$5007_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":4102,"indexExpression":{"id":4101,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4094,"src":"8306:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8300:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage","typeString":"struct IPaycrest.Order storage ref"}},"functionReturnParameters":4099,"id":4103,"nodeType":"Return","src":"8293:22:16"}]},"documentation":{"id":4092,"nodeType":"StructuredDocumentation","src":"8161:41:16","text":"@dev See {getOrderInfo-IPaycrest}. "},"functionSelector":"768c6ec0","id":4105,"implemented":true,"kind":"function","modifiers":[],"name":"getOrderInfo","nameLocation":"8216:12:16","nodeType":"FunctionDefinition","parameters":{"id":4095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4094,"mutability":"mutable","name":"_orderId","nameLocation":"8237:8:16","nodeType":"VariableDeclaration","scope":4105,"src":"8229:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4093,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8229:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8228:18:16"},"returnParameters":{"id":4099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4098,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4105,"src":"8269:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_memory_ptr","typeString":"struct IPaycrest.Order"},"typeName":{"id":4097,"nodeType":"UserDefinedTypeName","pathNode":{"id":4096,"name":"Order","nameLocations":["8269:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":5007,"src":"8269:5:16"},"referencedDeclaration":5007,"src":"8269:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage_ptr","typeString":"struct IPaycrest.Order"}},"visibility":"internal"}],"src":"8268:14:16"},"scope":4233,"src":"8207:115:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5062],"body":{"id":4117,"nodeType":"Block","src":"8448:49:16","statements":[{"expression":{"baseExpression":{"id":4113,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4270,"src":"8465:17:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4115,"indexExpression":{"id":4114,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"8483:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8465:25:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4112,"id":4116,"nodeType":"Return","src":"8458:32:16"}]},"documentation":{"id":4106,"nodeType":"StructuredDocumentation","src":"8328:45:16","text":"@dev See {isTokenSupported-IPaycrest}. "},"functionSelector":"75151b63","id":4118,"implemented":true,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"8387:16:16","nodeType":"FunctionDefinition","parameters":{"id":4109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4108,"mutability":"mutable","name":"_token","nameLocation":"8412:6:16","nodeType":"VariableDeclaration","scope":4118,"src":"8404:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4107,"name":"address","nodeType":"ElementaryTypeName","src":"8404:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8403:16:16"},"returnParameters":{"id":4112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4111,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4118,"src":"8442:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4110,"name":"bool","nodeType":"ElementaryTypeName","src":"8442:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8441:6:16"},"scope":4233,"src":"8378:119:16","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4131,"nodeType":"Block","src":"8664:57:16","statements":[{"expression":{"baseExpression":{"id":4127,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"8681:27:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4248_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":4129,"indexExpression":{"id":4128,"name":"code","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"8709:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8681:33:16","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4248_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"functionReturnParameters":4126,"id":4130,"nodeType":"Return","src":"8674:40:16"}]},"documentation":{"id":4119,"nodeType":"StructuredDocumentation","src":"8503:56:16","text":"@dev See {getSupportedInstitutionName-IPaycrest}. "},"functionSelector":"87490d86","id":4132,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInstitutionName","nameLocation":"8573:27:16","nodeType":"FunctionDefinition","parameters":{"id":4122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4121,"mutability":"mutable","name":"code","nameLocation":"8609:4:16","nodeType":"VariableDeclaration","scope":4132,"src":"8601:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8601:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8600:14:16"},"returnParameters":{"id":4126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4132,"src":"8638:24:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4248_memory_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"},"typeName":{"id":4124,"nodeType":"UserDefinedTypeName","pathNode":{"id":4123,"name":"InstitutionByCode","nameLocations":["8638:17:16"],"nodeType":"IdentifierPath","referencedDeclaration":4248,"src":"8638:17:16"},"referencedDeclaration":4248,"src":"8638:17:16","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4248_storage_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"}},"visibility":"internal"}],"src":"8637:26:16"},"scope":4233,"src":"8564:157:16","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4190,"nodeType":"Block","src":"8824:390:16","statements":[{"assignments":[4145],"declarations":[{"constant":false,"id":4145,"mutability":"mutable","name":"institutions","nameLocation":"8855:12:16","nodeType":"VariableDeclaration","scope":4190,"src":"8834:33:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":4143,"nodeType":"UserDefinedTypeName","pathNode":{"id":4142,"name":"Institution","nameLocations":["8834:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":4243,"src":"8834:11:16"},"referencedDeclaration":4243,"src":"8834:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4243_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":4144,"nodeType":"ArrayTypeName","src":"8834:13:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"id":4149,"initialValue":{"baseExpression":{"id":4146,"name":"supportedInstitutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4280,"src":"8870:21:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$4243_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution storage ref[] storage ref)"}},"id":4148,"indexExpression":{"id":4147,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4134,"src":"8892:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8870:31:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_storage_$dyn_storage","typeString":"struct PaycrestSettingManager.Institution storage ref[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8834:67:16"},{"assignments":[4151],"declarations":[{"constant":false,"id":4151,"mutability":"mutable","name":"length","nameLocation":"8919:6:16","nodeType":"VariableDeclaration","scope":4190,"src":"8911:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4150,"name":"uint256","nodeType":"ElementaryTypeName","src":"8911:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4154,"initialValue":{"expression":{"id":4152,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4145,"src":"8928:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8941:6:16","memberName":"length","nodeType":"MemberAccess","src":"8928:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8911:36:16"},{"assignments":[4159],"declarations":[{"constant":false,"id":4159,"mutability":"mutable","name":"result","nameLocation":"8978:6:16","nodeType":"VariableDeclaration","scope":4190,"src":"8957:27:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":4157,"nodeType":"UserDefinedTypeName","pathNode":{"id":4156,"name":"Institution","nameLocations":["8957:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":4243,"src":"8957:11:16"},"referencedDeclaration":4243,"src":"8957:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4243_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":4158,"nodeType":"ArrayTypeName","src":"8957:13:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"id":4166,"initialValue":{"arguments":[{"id":4164,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"9005:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8987:17:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct PaycrestSettingManager.Institution memory[] memory)"},"typeName":{"baseType":{"id":4161,"nodeType":"UserDefinedTypeName","pathNode":{"id":4160,"name":"Institution","nameLocations":["8991:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":4243,"src":"8991:11:16"},"referencedDeclaration":4243,"src":"8991:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4243_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":4162,"nodeType":"ArrayTypeName","src":"8991:13:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}}},"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8987:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8957:55:16"},{"body":{"id":4186,"nodeType":"Block","src":"9065:111:16","statements":[{"expression":{"id":4180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4174,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"9079:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4176,"indexExpression":{"id":4175,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"9086:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9079:9:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4243_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4177,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4145,"src":"9091:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4179,"indexExpression":{"id":4178,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"9104:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9091:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4243_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"src":"9079:27:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4243_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":4181,"nodeType":"ExpressionStatement","src":"9079:27:16"},{"id":4185,"nodeType":"UncheckedBlock","src":"9120:46:16","statements":[{"expression":{"id":4183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9148:3:16","subExpression":{"id":4182,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"9148:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4184,"nodeType":"ExpressionStatement","src":"9148:3:16"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4171,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"9051:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4172,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"9055:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9051:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4187,"initializationExpression":{"assignments":[4168],"declarations":[{"constant":false,"id":4168,"mutability":"mutable","name":"i","nameLocation":"9044:1:16","nodeType":"VariableDeclaration","scope":4187,"src":"9036:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4167,"name":"uint256","nodeType":"ElementaryTypeName","src":"9036:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4170,"initialValue":{"hexValue":"30","id":4169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9048:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9036:13:16"},"nodeType":"ForStatement","src":"9031:145:16"},{"expression":{"id":4188,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"9201:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"functionReturnParameters":4140,"id":4189,"nodeType":"Return","src":"9194:13:16"}]},"functionSelector":"02621338","id":4191,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInstitutions","nameLocation":"8736:24:16","nodeType":"FunctionDefinition","parameters":{"id":4135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4134,"mutability":"mutable","name":"currency","nameLocation":"8769:8:16","nodeType":"VariableDeclaration","scope":4191,"src":"8761:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8761:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8760:18:16"},"returnParameters":{"id":4140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4139,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4191,"src":"8802:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":4137,"nodeType":"UserDefinedTypeName","pathNode":{"id":4136,"name":"Institution","nameLocations":["8802:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":4243,"src":"8802:11:16"},"referencedDeclaration":4243,"src":"8802:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4243_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":4138,"nodeType":"ArrayTypeName","src":"8802:13:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"src":"8801:22:16"},"scope":4233,"src":"8727:487:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5083],"body":{"id":4209,"nodeType":"Block","src":"9387:110:16","statements":[{"expression":{"components":[{"id":4203,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4254,"src":"9404:18:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4204,"name":"primaryValidatorFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"9424:26:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4205,"name":"secondaryValidatorFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"9452:28:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4206,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"9482:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4207,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9403:87:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_uint64_$_t_uint64_$_t_uint256_$","typeString":"tuple(uint64,uint64,uint64,uint256)"}},"functionReturnParameters":4202,"id":4208,"nodeType":"Return","src":"9397:93:16"}]},"documentation":{"id":4192,"nodeType":"StructuredDocumentation","src":"9220:42:16","text":"@dev See {getFeeDetails-IPaycrest}. "},"functionSelector":"b810c636","id":4210,"implemented":true,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"9276:13:16","nodeType":"FunctionDefinition","parameters":{"id":4193,"nodeType":"ParameterList","parameters":[],"src":"9289:2:16"},"returnParameters":{"id":4202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4210,"src":"9323:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4194,"name":"uint64","nodeType":"ElementaryTypeName","src":"9323:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4197,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4210,"src":"9340:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4196,"name":"uint64","nodeType":"ElementaryTypeName","src":"9340:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4199,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4210,"src":"9357:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4198,"name":"uint64","nodeType":"ElementaryTypeName","src":"9357:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4210,"src":"9373:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4200,"name":"uint256","nodeType":"ElementaryTypeName","src":"9373:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9313:73:16"},"scope":4233,"src":"9267:230:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5089],"body":{"id":4218,"nodeType":"Block","src":"9624:44:16","statements":[{"expression":{"id":4216,"name":"_liquidityAggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"9641:20:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4215,"id":4217,"nodeType":"Return","src":"9634:27:16"}]},"documentation":{"id":4211,"nodeType":"StructuredDocumentation","src":"9503:51:16","text":"@dev See {getLiquidityAggregator-IPaycrest}. "},"functionSelector":"2ebc5356","id":4219,"implemented":true,"kind":"function","modifiers":[],"name":"getLiquidityAggregator","nameLocation":"9568:22:16","nodeType":"FunctionDefinition","parameters":{"id":4212,"nodeType":"ParameterList","parameters":[],"src":"9590:2:16"},"returnParameters":{"id":4215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4219,"src":"9615:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4213,"name":"address","nodeType":"ElementaryTypeName","src":"9615:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9614:9:16"},"scope":4233,"src":"9559:109:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5097],"body":{"id":4231,"nodeType":"Block","src":"9802:46:16","statements":[{"expression":{"baseExpression":{"id":4227,"name":"_isWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4274,"src":"9819:14:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4229,"indexExpression":{"id":4228,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"9834:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9819:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4226,"id":4230,"nodeType":"Return","src":"9812:29:16"}]},"documentation":{"id":4220,"nodeType":"StructuredDocumentation","src":"9674:49:16","text":"@dev See {getWhitelistedStatus-IPaycrest}. "},"functionSelector":"d8e8de34","id":4232,"implemented":true,"kind":"function","modifiers":[],"name":"getWhitelistedStatus","nameLocation":"9737:20:16","nodeType":"FunctionDefinition","parameters":{"id":4223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4222,"mutability":"mutable","name":"sender","nameLocation":"9766:6:16","nodeType":"VariableDeclaration","scope":4232,"src":"9758:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4221,"name":"address","nodeType":"ElementaryTypeName","src":"9758:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9757:16:16"},"returnParameters":{"id":4226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4232,"src":"9796:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4224,"name":"bool","nodeType":"ElementaryTypeName","src":"9796:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9795:6:16"},"scope":4233,"src":"9728:120:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4234,"src":"430:9421:16","usedErrors":[4288,4291,4296,4299,4302,4961,4964,4967,4970,4973,4975,4977]}],"src":"38:9814:16"},"id":16},"contracts/PaycrestSettingManager.sol":{"ast":{"absolutePath":"contracts/PaycrestSettingManager.sol","exportedSymbols":{"AddressUpgradeable":[1204],"ContextUpgradeable":[1246],"Initializable":[300],"OwnableUpgradeable":[131],"PaycrestSettingManager":[4507]},"id":4508,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4235,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:17"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":4236,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4508,"sourceUnit":132,"src":"62:75:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4237,"name":"OwnableUpgradeable","nameLocations":["174:18:17"],"nodeType":"IdentifierPath","referencedDeclaration":131,"src":"174:18:17"},"id":4238,"nodeType":"InheritanceSpecifier","src":"174:18:17"}],"canonicalName":"PaycrestSettingManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4507,"linearizedBaseContracts":[4507,131,1246,300],"name":"PaycrestSettingManager","nameLocation":"148:22:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"PaycrestSettingManager.Institution","id":4243,"members":[{"constant":false,"id":4240,"mutability":"mutable","name":"code","nameLocation":"237:4:17","nodeType":"VariableDeclaration","scope":4243,"src":"229:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4239,"name":"bytes32","nodeType":"ElementaryTypeName","src":"229:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4242,"mutability":"mutable","name":"name","nameLocation":"294:4:17","nodeType":"VariableDeclaration","scope":4243,"src":"286:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4241,"name":"bytes32","nodeType":"ElementaryTypeName","src":"286:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Institution","nameLocation":"207:11:17","nodeType":"StructDefinition","scope":4507,"src":"200:109:17","visibility":"public"},{"canonicalName":"PaycrestSettingManager.InstitutionByCode","id":4248,"members":[{"constant":false,"id":4245,"mutability":"mutable","name":"name","nameLocation":"357:4:17","nodeType":"VariableDeclaration","scope":4248,"src":"349:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4244,"name":"bytes32","nodeType":"ElementaryTypeName","src":"349:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4247,"mutability":"mutable","name":"currency","nameLocation":"379:8:17","nodeType":"VariableDeclaration","scope":4248,"src":"371:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"371:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"InstitutionByCode","nameLocation":"321:17:17","nodeType":"StructDefinition","scope":4507,"src":"314:80:17","visibility":"public"},{"constant":false,"id":4251,"mutability":"mutable","name":"MAX_BPS","nameLocation":"416:7:17","nodeType":"VariableDeclaration","scope":4507,"src":"399:34:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4249,"name":"uint256","nodeType":"ElementaryTypeName","src":"399:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130305f303030","id":4250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"426:7:17","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100_000"},"visibility":"internal"},{"constant":false,"id":4254,"mutability":"mutable","name":"protocolFeePercent","nameLocation":"455:18:17","nodeType":"VariableDeclaration","scope":4507,"src":"439:41:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4252,"name":"uint64","nodeType":"ElementaryTypeName","src":"439:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"hexValue":"35303030","id":4253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"476:4:17","typeDescriptions":{"typeIdentifier":"t_rational_5000_by_1","typeString":"int_const 5000"},"value":"5000"},"visibility":"internal"},{"constant":false,"id":4257,"mutability":"mutable","name":"primaryValidatorFeePercent","nameLocation":"508:26:17","nodeType":"VariableDeclaration","scope":4507,"src":"492:48:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4255,"name":"uint64","nodeType":"ElementaryTypeName","src":"492:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"hexValue":"353030","id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"537:3:17","typeDescriptions":{"typeIdentifier":"t_rational_500_by_1","typeString":"int_const 500"},"value":"500"},"visibility":"internal"},{"constant":false,"id":4260,"mutability":"mutable","name":"secondaryValidatorFeePercent","nameLocation":"570:28:17","nodeType":"VariableDeclaration","scope":4507,"src":"554:50:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4258,"name":"uint64","nodeType":"ElementaryTypeName","src":"554:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"hexValue":"353030","id":4259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"601:3:17","typeDescriptions":{"typeIdentifier":"t_rational_500_by_1","typeString":"int_const 500"},"value":"500"},"visibility":"internal"},{"constant":false,"id":4262,"mutability":"mutable","name":"feeRecipient","nameLocation":"635:12:17","nodeType":"VariableDeclaration","scope":4507,"src":"618:29:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4261,"name":"address","nodeType":"ElementaryTypeName","src":"618:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4264,"mutability":"mutable","name":"PaycrestStakingContract","nameLocation":"670:23:17","nodeType":"VariableDeclaration","scope":4507,"src":"653:40:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4263,"name":"address","nodeType":"ElementaryTypeName","src":"653:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4266,"mutability":"mutable","name":"_liquidityAggregator","nameLocation":"716:20:17","nodeType":"VariableDeclaration","scope":4507,"src":"699:37:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4265,"name":"address","nodeType":"ElementaryTypeName","src":"699:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4270,"mutability":"mutable","name":"_isTokenSupported","nameLocation":"777:17:17","nodeType":"VariableDeclaration","scope":4507,"src":"743:51:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4269,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4267,"name":"address","nodeType":"ElementaryTypeName","src":"751:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"743:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4268,"name":"bool","nodeType":"ElementaryTypeName","src":"762:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":4274,"mutability":"mutable","name":"_isWhitelisted","nameLocation":"834:14:17","nodeType":"VariableDeclaration","scope":4507,"src":"800:48:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4273,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4271,"name":"address","nodeType":"ElementaryTypeName","src":"808:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"800:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4272,"name":"bool","nodeType":"ElementaryTypeName","src":"819:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":4280,"mutability":"mutable","name":"supportedInstitutions","nameLocation":"898:21:17","nodeType":"VariableDeclaration","scope":4507,"src":"855:64:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$4243_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])"},"typeName":{"id":4279,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"863:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"855:33:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$4243_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":4277,"nodeType":"UserDefinedTypeName","pathNode":{"id":4276,"name":"Institution","nameLocations":["874:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":4243,"src":"874:11:17"},"referencedDeclaration":4243,"src":"874:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4243_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":4278,"nodeType":"ArrayTypeName","src":"874:13:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}}},"visibility":"internal"},{"constant":false,"id":4285,"mutability":"mutable","name":"supportedInstitutionsByCode","nameLocation":"972:27:17","nodeType":"VariableDeclaration","scope":4507,"src":"925:74:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4248_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)"},"typeName":{"id":4284,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4281,"name":"bytes32","nodeType":"ElementaryTypeName","src":"933:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"925:37:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4248_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4283,"nodeType":"UserDefinedTypeName","pathNode":{"id":4282,"name":"InstitutionByCode","nameLocations":["944:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":4248,"src":"944:17:17"},"referencedDeclaration":4248,"src":"944:17:17","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4248_storage_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"}}},"visibility":"internal"},{"documentation":{"id":4286,"nodeType":"StructuredDocumentation","src":"1006:49:17","text":"@notice Revert when zero address is passed in"},"errorSelector":"9c8e2b5d","id":4288,"name":"ThrowZeroAddress","nameLocation":"1066:16:17","nodeType":"ErrorDefinition","parameters":{"id":4287,"nodeType":"ParameterList","parameters":[],"src":"1082:2:17"},"src":"1060:25:17"},{"documentation":{"id":4289,"nodeType":"StructuredDocumentation","src":"1090:49:17","text":"@notice Revert when zero address is passed in"},"errorSelector":"b23c23d2","id":4291,"name":"ThrowZeroValue","nameLocation":"1150:14:17","nodeType":"ErrorDefinition","parameters":{"id":4290,"nodeType":"ParameterList","parameters":[],"src":"1164:2:17"},"src":"1144:23:17"},{"documentation":{"id":4292,"nodeType":"StructuredDocumentation","src":"1172:49:17","text":"@notice Revert when zero address is passed in"},"errorSelector":"48bae5b8","id":4296,"name":"InvalidParameter","nameLocation":"1232:16:17","nodeType":"ErrorDefinition","parameters":{"id":4295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4294,"mutability":"mutable","name":"what","nameLocation":"1257:4:17","nodeType":"VariableDeclaration","scope":4296,"src":"1249:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4293,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1249:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1248:14:17"},"src":"1226:37:17"},{"documentation":{"id":4297,"nodeType":"StructuredDocumentation","src":"1268:49:17","text":"@notice Revert when invalid token is provided"},"errorSelector":"3dd1b305","id":4299,"name":"TokenNotSupported","nameLocation":"1328:17:17","nodeType":"ErrorDefinition","parameters":{"id":4298,"nodeType":"ParameterList","parameters":[],"src":"1345:2:17"},"src":"1322:26:17"},{"documentation":{"id":4300,"nodeType":"StructuredDocumentation","src":"1353:44:17","text":"@notice Revert when input amount is zero"},"errorSelector":"43ad20fc","id":4302,"name":"AmountIsZero","nameLocation":"1408:12:17","nodeType":"ErrorDefinition","parameters":{"id":4301,"nodeType":"ParameterList","parameters":[],"src":"1420:2:17"},"src":"1402:21:17"},{"anonymous":false,"eventSelector":"e22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930","id":4310,"name":"SettingManagerBool","nameLocation":"1435:18:17","nodeType":"EventDefinition","parameters":{"id":4309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4304,"indexed":false,"mutability":"mutable","name":"what","nameLocation":"1462:4:17","nodeType":"VariableDeclaration","scope":4310,"src":"1454:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1454:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4306,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1476:5:17","nodeType":"VariableDeclaration","scope":4310,"src":"1468:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4305,"name":"address","nodeType":"ElementaryTypeName","src":"1468:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4308,"indexed":false,"mutability":"mutable","name":"status","nameLocation":"1488:6:17","nodeType":"VariableDeclaration","scope":4310,"src":"1483:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4307,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1453:42:17"},"src":"1429:67:17"},{"anonymous":false,"eventSelector":"3e9524e487d4645f1d81c48b15a7087c94c51a11aaae3ce91172409c66708e79","id":4318,"name":"SettingManagerForInstitution","nameLocation":"1507:28:17","nodeType":"EventDefinition","parameters":{"id":4317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4312,"indexed":false,"mutability":"mutable","name":"what","nameLocation":"1544:4:17","nodeType":"VariableDeclaration","scope":4318,"src":"1536:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4311,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1536:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4314,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1557:5:17","nodeType":"VariableDeclaration","scope":4318,"src":"1550:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4313,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1550:6:17","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4316,"indexed":false,"mutability":"mutable","name":"status","nameLocation":"1571:6:17","nodeType":"VariableDeclaration","scope":4318,"src":"1564:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4315,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1564:6:17","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"}],"src":"1535:43:17"},"src":"1501:78:17"},{"anonymous":false,"eventSelector":"ced6b79f1325154aec329e6ff932857cb4f91fa8eb4c6791ce5b460f47995758","id":4326,"name":"PaycrestFees","nameLocation":"1590:12:17","nodeType":"EventDefinition","parameters":{"id":4325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4320,"indexed":false,"mutability":"mutable","name":"protocolFee","nameLocation":"1610:11:17","nodeType":"VariableDeclaration","scope":4326,"src":"1603:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4319,"name":"uint64","nodeType":"ElementaryTypeName","src":"1603:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4322,"indexed":false,"mutability":"mutable","name":"primaryValidator","nameLocation":"1630:16:17","nodeType":"VariableDeclaration","scope":4326,"src":"1623:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4321,"name":"uint64","nodeType":"ElementaryTypeName","src":"1623:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4324,"indexed":false,"mutability":"mutable","name":"secondaryValidator","nameLocation":"1655:18:17","nodeType":"VariableDeclaration","scope":4326,"src":"1648:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4323,"name":"uint64","nodeType":"ElementaryTypeName","src":"1648:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1602:72:17"},"src":"1584:91:17"},{"body":{"id":4377,"nodeType":"Block","src":"1970:294:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"1984:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2001:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1993:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4338,"name":"address","nodeType":"ElementaryTypeName","src":"1993:7:17","typeDescriptions":{}}},"id":4341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1993:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1984:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4346,"nodeType":"IfStatement","src":"1980:50:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4343,"name":"ThrowZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"2012:16:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2012:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4345,"nodeType":"RevertStatement","src":"2005:25:17"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4347,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"2044:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"746f6b656e","id":4348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2052:7:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9b9b0454cadcb5884dd3faa6ba975da4d2459aa3f11d31291a25a8358f84946d","typeString":"literal_string \"token\""},"value":"token"},"src":"2044:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4356,"nodeType":"IfStatement","src":"2040:54:17","trueBody":{"expression":{"id":4354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4350,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4270,"src":"2061:17:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4352,"indexExpression":{"id":4351,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"2079:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2061:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4353,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"2088:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2061:33:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4355,"nodeType":"ExpressionStatement","src":"2061:33:17"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4357,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"2108:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"77686974656c697374","id":4358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2116:11:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_54c80de7e611b57d6d38523e3c0c59a6a3e72cddf62c95cf51a204e52c1a86ad","typeString":"literal_string \"whitelist\""},"value":"whitelist"},"src":"2108:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"errorCall":{"arguments":[{"id":4367,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"2198:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4366,"name":"InvalidParameter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"2181:16:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":4368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4369,"nodeType":"RevertStatement","src":"2174:29:17"},"id":4370,"nodeType":"IfStatement","src":"2104:99:17","trueBody":{"expression":{"id":4364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4360,"name":"_isWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4274,"src":"2129:14:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4362,"indexExpression":{"id":4361,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"2144:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2129:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4363,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"2153:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2129:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4365,"nodeType":"ExpressionStatement","src":"2129:30:17"}},{"eventCall":{"arguments":[{"id":4372,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"2237:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"2243:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4374,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"2250:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4371,"name":"SettingManagerBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"2218:18:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_bool_$returns$__$","typeString":"function (bytes32,address,bool)"}},"id":4375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2218:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4376,"nodeType":"EmitStatement","src":"2213:44:17"}]},"functionSelector":"99e3c0b4","id":4378,"implemented":true,"kind":"function","modifiers":[{"id":4335,"kind":"modifierInvocation","modifierName":{"id":4334,"name":"onlyOwner","nameLocations":["1960:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1960:9:17"},"nodeType":"ModifierInvocation","src":"1960:9:17"}],"name":"settingManagerBool","nameLocation":"1890:18:17","nodeType":"FunctionDefinition","parameters":{"id":4333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4328,"mutability":"mutable","name":"what","nameLocation":"1917:4:17","nodeType":"VariableDeclaration","scope":4378,"src":"1909:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4327,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1909:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4330,"mutability":"mutable","name":"value","nameLocation":"1931:5:17","nodeType":"VariableDeclaration","scope":4378,"src":"1923:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4329,"name":"address","nodeType":"ElementaryTypeName","src":"1923:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4332,"mutability":"mutable","name":"status","nameLocation":"1943:6:17","nodeType":"VariableDeclaration","scope":4378,"src":"1938:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4331,"name":"bool","nodeType":"ElementaryTypeName","src":"1938:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1908:42:17"},"returnParameters":{"id":4336,"nodeType":"ParameterList","parameters":[],"src":"1970:0:17"},"scope":4507,"src":"1881:383:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4431,"nodeType":"Block","src":"2376:394:17","statements":[{"assignments":[4390],"declarations":[{"constant":false,"id":4390,"mutability":"mutable","name":"length","nameLocation":"2395:6:17","nodeType":"VariableDeclaration","scope":4431,"src":"2387:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4389,"name":"uint256","nodeType":"ElementaryTypeName","src":"2387:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4393,"initialValue":{"expression":{"id":4391,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4384,"src":"2404:12:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2417:6:17","memberName":"length","nodeType":"MemberAccess","src":"2404:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2387:36:17"},{"body":{"id":4429,"nodeType":"Block","src":"2464:300:17","statements":[{"expression":{"arguments":[{"baseExpression":{"id":4405,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4384,"src":"2515:12:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4407,"indexExpression":{"id":4406,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4395,"src":"2528:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2515:15:17","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4243_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Institution_$4243_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}],"expression":{"baseExpression":{"id":4401,"name":"supportedInstitutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4280,"src":"2478:21:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$4243_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution storage ref[] storage ref)"}},"id":4403,"indexExpression":{"id":4402,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4380,"src":"2500:8:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2478:31:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_storage_$dyn_storage","typeString":"struct PaycrestSettingManager.Institution storage ref[] storage ref"}},"id":4404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2510:4:17","memberName":"push","nodeType":"MemberAccess","src":"2478:36:17","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Institution_$4243_storage_$dyn_storage_ptr_$_t_struct$_Institution_$4243_storage_$returns$__$attached_to$_t_array$_t_struct$_Institution_$4243_storage_$dyn_storage_ptr_$","typeString":"function (struct PaycrestSettingManager.Institution storage ref[] storage pointer,struct PaycrestSettingManager.Institution storage ref)"}},"id":4408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2478:53:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4409,"nodeType":"ExpressionStatement","src":"2478:53:17"},{"expression":{"id":4423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4410,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"2545:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4248_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":4415,"indexExpression":{"expression":{"baseExpression":{"id":4411,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4384,"src":"2573:12:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4413,"indexExpression":{"id":4412,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4395,"src":"2586:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2573:15:17","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4243_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":4414,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2589:4:17","memberName":"code","nodeType":"MemberAccess","referencedDeclaration":4240,"src":"2573:20:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2545:49:17","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4248_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":4417,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4384,"src":"2639:12:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":4419,"indexExpression":{"id":4418,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4395,"src":"2652:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2639:15:17","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4243_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":4420,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2655:4:17","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":4242,"src":"2639:20:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4421,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4380,"src":"2671:8:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4416,"name":"InstitutionByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"2597:17:17","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_InstitutionByCode_$4248_storage_ptr_$","typeString":"type(struct PaycrestSettingManager.InstitutionByCode storage pointer)"}},"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2633:4:17","2661:8:17"],"names":["name","currency"],"nodeType":"FunctionCall","src":"2597:97:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4248_memory_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode memory"}},"src":"2545:149:17","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4248_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"id":4424,"nodeType":"ExpressionStatement","src":"2545:149:17"},{"id":4428,"nodeType":"UncheckedBlock","src":"2708:46:17","statements":[{"expression":{"id":4426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2736:3:17","subExpression":{"id":4425,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4395,"src":"2736:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4427,"nodeType":"ExpressionStatement","src":"2736:3:17"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4398,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4395,"src":"2450:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4399,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4390,"src":"2454:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2450:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4430,"initializationExpression":{"assignments":[4395],"declarations":[{"constant":false,"id":4395,"mutability":"mutable","name":"i","nameLocation":"2443:1:17","nodeType":"VariableDeclaration","scope":4430,"src":"2438:6:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4394,"name":"uint","nodeType":"ElementaryTypeName","src":"2438:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4397,"initialValue":{"hexValue":"30","id":4396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2447:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2438:10:17"},"nodeType":"ForStatement","src":"2433:331:17"}]},"functionSelector":"32200882","id":4432,"implemented":true,"kind":"function","modifiers":[{"id":4387,"kind":"modifierInvocation","modifierName":{"id":4386,"name":"onlyOwner","nameLocations":["2366:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2366:9:17"},"nodeType":"ModifierInvocation","src":"2366:9:17"}],"name":"setSupportedInstitutions","nameLocation":"2279:24:17","nodeType":"FunctionDefinition","parameters":{"id":4385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4380,"mutability":"mutable","name":"currency","nameLocation":"2312:8:17","nodeType":"VariableDeclaration","scope":4432,"src":"2304:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2304:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4384,"mutability":"mutable","name":"institutions","nameLocation":"2343:12:17","nodeType":"VariableDeclaration","scope":4432,"src":"2322:33:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":4382,"nodeType":"UserDefinedTypeName","pathNode":{"id":4381,"name":"Institution","nameLocations":["2322:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":4243,"src":"2322:11:17"},"referencedDeclaration":4243,"src":"2322:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4243_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":4383,"nodeType":"ArrayTypeName","src":"2322:13:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4243_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"src":"2303:53:17"},"returnParameters":{"id":4388,"nodeType":"ParameterList","parameters":[],"src":"2376:0:17"},"scope":4507,"src":"2270:500:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4461,"nodeType":"Block","src":"2919:289:17","statements":[{"expression":{"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4443,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4254,"src":"2929:18:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4444,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"2950:19:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2929:40:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":4446,"nodeType":"ExpressionStatement","src":"2929:40:17"},{"expression":{"id":4449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4447,"name":"primaryValidatorFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"2979:26:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4448,"name":"_primaryValidatorPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4436,"src":"3008:24:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2979:53:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":4450,"nodeType":"ExpressionStatement","src":"2979:53:17"},{"expression":{"id":4453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4451,"name":"secondaryValidatorFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"3042:28:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4452,"name":"_secondaryValidatorPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4438,"src":"3073:26:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"3042:57:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":4454,"nodeType":"ExpressionStatement","src":"3042:57:17"},{"eventCall":{"arguments":[{"id":4456,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"3127:19:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4457,"name":"_primaryValidatorPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4436,"src":"3148:24:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4458,"name":"_secondaryValidatorPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4438,"src":"3174:26:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":4455,"name":"PaycrestFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"3114:12:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_uint64_$_t_uint64_$returns$__$","typeString":"function (uint64,uint64,uint64)"}},"id":4459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3114:87:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4460,"nodeType":"EmitStatement","src":"3109:92:17"}]},"functionSelector":"764bc355","id":4462,"implemented":true,"kind":"function","modifiers":[{"id":4441,"kind":"modifierInvocation","modifierName":{"id":4440,"name":"onlyOwner","nameLocations":["2909:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2909:9:17"},"nodeType":"ModifierInvocation","src":"2909:9:17"}],"name":"updateProtocolFees","nameLocation":"2785:18:17","nodeType":"FunctionDefinition","parameters":{"id":4439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4434,"mutability":"mutable","name":"_protocolFeePercent","nameLocation":"2811:19:17","nodeType":"VariableDeclaration","scope":4462,"src":"2804:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4433,"name":"uint64","nodeType":"ElementaryTypeName","src":"2804:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4436,"mutability":"mutable","name":"_primaryValidatorPercent","nameLocation":"2839:24:17","nodeType":"VariableDeclaration","scope":4462,"src":"2832:31:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4435,"name":"uint64","nodeType":"ElementaryTypeName","src":"2832:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4438,"mutability":"mutable","name":"_secondaryValidatorPercent","nameLocation":"2872:26:17","nodeType":"VariableDeclaration","scope":4462,"src":"2865:33:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4437,"name":"uint64","nodeType":"ElementaryTypeName","src":"2865:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2803:96:17"},"returnParameters":{"id":4442,"nodeType":"ParameterList","parameters":[],"src":"2919:0:17"},"scope":4507,"src":"2776:432:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4505,"nodeType":"Block","src":"3290:247:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4466,"src":"3304:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3321:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3313:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4472,"name":"address","nodeType":"ElementaryTypeName","src":"3313:7:17","typeDescriptions":{}}},"id":4475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3313:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3304:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4480,"nodeType":"IfStatement","src":"3300:50:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4477,"name":"ThrowZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"3332:16:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3332:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4479,"nodeType":"RevertStatement","src":"3325:25:17"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4481,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4464,"src":"3364:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"666565","id":4482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3372:5:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02","typeString":"literal_string \"fee\""},"value":"fee"},"src":"3364:13:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4488,"nodeType":"IfStatement","src":"3360:39:17","trueBody":{"expression":{"id":4486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4484,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"3379:12:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4466,"src":"3394:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3379:20:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4487,"nodeType":"ExpressionStatement","src":"3379:20:17"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4489,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4464,"src":"3413:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"61676772656761746f72","id":4490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3421:12:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_e124d7cc79a19705865fa21b784ba187cd393559e960c0c071132cb60354d1a3","typeString":"literal_string \"aggregator\""},"value":"aggregator"},"src":"3413:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4496,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4464,"src":"3482:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"7374616b65","id":4497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3490:7:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c3a04795accb4b73d12f13b05a1e0e240cefeb9a89d008676730867a819d2f79","typeString":"literal_string \"stake\""},"value":"stake"},"src":"3482:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4503,"nodeType":"IfStatement","src":"3478:52:17","trueBody":{"expression":{"id":4501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4499,"name":"PaycrestStakingContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"3499:23:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4500,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4466,"src":"3525:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3499:31:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4502,"nodeType":"ExpressionStatement","src":"3499:31:17"}},"id":4504,"nodeType":"IfStatement","src":"3409:121:17","trueBody":{"expression":{"id":4494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4492,"name":"_liquidityAggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"3435:20:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4466,"src":"3458:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3435:28:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4495,"nodeType":"ExpressionStatement","src":"3435:28:17"}}]},"functionSelector":"3d8f8fb2","id":4506,"implemented":true,"kind":"function","modifiers":[{"id":4469,"kind":"modifierInvocation","modifierName":{"id":4468,"name":"onlyOwner","nameLocations":["3280:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"3280:9:17"},"nodeType":"ModifierInvocation","src":"3280:9:17"}],"name":"updateFeeRecipient","nameLocation":"3223:18:17","nodeType":"FunctionDefinition","parameters":{"id":4467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4464,"mutability":"mutable","name":"what","nameLocation":"3250:4:17","nodeType":"VariableDeclaration","scope":4506,"src":"3242:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4463,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3242:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4466,"mutability":"mutable","name":"value","nameLocation":"3264:5:17","nodeType":"VariableDeclaration","scope":4506,"src":"3256:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4465,"name":"address","nodeType":"ElementaryTypeName","src":"3256:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3241:29:17"},"returnParameters":{"id":4470,"nodeType":"ParameterList","parameters":[],"src":"3290:0:17"},"scope":4507,"src":"3214:323:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4508,"src":"139:3401:17","usedErrors":[4288,4291,4296,4299,4302]}],"src":"38:3503:17"},"id":17},"contracts/PaycrestValidator.sol":{"ast":{"absolutePath":"contracts/PaycrestValidator.sol","exportedSymbols":{"AddressUpgradeable":[1204],"ContextUpgradeable":[1246],"IERC20PermitUpgradeable":[498],"IERC20Upgradeable":[462],"Initializable":[300],"OwnableUpgradeable":[131],"PaycrestValidator":[4919],"ReentrancyGuardUpgradeable":[384],"SafeERC20Upgradeable":[874]},"id":4920,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4509,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:18"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","id":4510,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4920,"sourceUnit":463,"src":"62:80:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":4511,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4920,"sourceUnit":132,"src":"143:75:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":4512,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4920,"sourceUnit":875,"src":"219:88:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","id":4513,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4920,"sourceUnit":385,"src":"308:85:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4514,"name":"OwnableUpgradeable","nameLocations":["425:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":131,"src":"425:18:18"},"id":4515,"nodeType":"InheritanceSpecifier","src":"425:18:18"},{"baseName":{"id":4516,"name":"ReentrancyGuardUpgradeable","nameLocations":["445:26:18"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"445:26:18"},"id":4517,"nodeType":"InheritanceSpecifier","src":"445:26:18"}],"canonicalName":"PaycrestValidator","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4919,"linearizedBaseContracts":[4919,384,131,1246,300],"name":"PaycrestValidator","nameLocation":"404:17:18","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4521,"libraryName":{"id":4518,"name":"SafeERC20Upgradeable","nameLocations":["485:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"485:20:18"},"nodeType":"UsingForDirective","src":"479:49:18","typeName":{"id":4520,"nodeType":"UserDefinedTypeName","pathNode":{"id":4519,"name":"IERC20Upgradeable","nameLocations":["510:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"510:17:18"},"referencedDeclaration":462,"src":"510:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}}},{"constant":false,"id":4523,"mutability":"mutable","name":"Paycrest","nameLocation":"554:8:18","nodeType":"VariableDeclaration","scope":4919,"src":"538:24:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4522,"name":"address","nodeType":"ElementaryTypeName","src":"538:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":4525,"mutability":"mutable","name":"initialization","nameLocation":"585:14:18","nodeType":"VariableDeclaration","scope":4919,"src":"572:27:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4524,"name":"bool","nodeType":"ElementaryTypeName","src":"572:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"constant":false,"id":4529,"mutability":"mutable","name":"minimumAmount","nameLocation":"641:13:18","nodeType":"VariableDeclaration","scope":4919,"src":"605:49:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4528,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4526,"name":"address","nodeType":"ElementaryTypeName","src":"613:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"605:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4527,"name":"uint256","nodeType":"ElementaryTypeName","src":"624:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":4535,"mutability":"mutable","name":"_balance","nameLocation":"717:8:18","nodeType":"VariableDeclaration","scope":4919,"src":"660:65:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":4534,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4530,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"660:48:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4533,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4531,"name":"address","nodeType":"ElementaryTypeName","src":"688:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"679:28:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4532,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"body":{"id":4542,"nodeType":"Block","src":"799:39:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4539,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"809:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"809:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4541,"nodeType":"ExpressionStatement","src":"809:22:18"}]},"documentation":{"id":4536,"nodeType":"StructuredDocumentation","src":"732:48:18","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":4543,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4537,"nodeType":"ParameterList","parameters":[],"src":"796:2:18"},"returnParameters":{"id":4538,"nodeType":"ParameterList","parameters":[],"src":"799:0:18"},"scope":4919,"src":"785:53:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4564,"nodeType":"Block","src":"904:135:18","statements":[{"expression":{"id":4552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4550,"name":"Paycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4523,"src":"918:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4551,"name":"_paycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"929:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"918:20:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4553,"nodeType":"ExpressionStatement","src":"918:20:18"},{"expression":{"id":4556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4554,"name":"initialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4525,"src":"951:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"968:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"951:21:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4557,"nodeType":"ExpressionStatement","src":"951:21:18"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4558,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"982:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"982:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4560,"nodeType":"ExpressionStatement","src":"982:16:18"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4561,"name":"__ReentrancyGuard_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"1008:22:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4563,"nodeType":"ExpressionStatement","src":"1008:24:18"}]},"functionSelector":"c4d66de8","id":4565,"implemented":true,"kind":"function","modifiers":[{"id":4548,"kind":"modifierInvocation","modifierName":{"id":4547,"name":"initializer","nameLocations":["892:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":202,"src":"892:11:18"},"nodeType":"ModifierInvocation","src":"892:11:18"}],"name":"initialize","nameLocation":"853:10:18","nodeType":"FunctionDefinition","parameters":{"id":4546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4545,"mutability":"mutable","name":"_paycrest","nameLocation":"872:9:18","nodeType":"VariableDeclaration","scope":4565,"src":"864:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4544,"name":"address","nodeType":"ElementaryTypeName","src":"864:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"863:19:18"},"returnParameters":{"id":4549,"nodeType":"ParameterList","parameters":[],"src":"904:0:18"},"scope":4919,"src":"844:195:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"eventSelector":"d0380f7d3d322fabf37539b9c6b985c069348a14121a426f3cceb8b5a93cd9ab","id":4571,"name":"NewTokenSupported","nameLocation":"1051:17:18","nodeType":"EventDefinition","parameters":{"id":4570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4567,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"1085:5:18","nodeType":"VariableDeclaration","scope":4571,"src":"1069:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4566,"name":"address","nodeType":"ElementaryTypeName","src":"1069:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4569,"indexed":true,"mutability":"mutable","name":"minimumStakeAmount","nameLocation":"1108:18:18","nodeType":"VariableDeclaration","scope":4571,"src":"1092:34:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4568,"name":"uint256","nodeType":"ElementaryTypeName","src":"1092:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1068:59:18"},"src":"1045:83:18"},{"anonymous":false,"eventSelector":"debf9dd297d3980055770d6c047a67eed8f6b1e91397831703b5f2a73bec1320","id":4575,"name":"Initialized","nameLocation":"1139:11:18","nodeType":"EventDefinition","parameters":{"id":4574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4573,"indexed":true,"mutability":"mutable","name":"status","nameLocation":"1164:6:18","nodeType":"VariableDeclaration","scope":4575,"src":"1151:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4572,"name":"bool","nodeType":"ElementaryTypeName","src":"1151:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1150:21:18"},"src":"1133:39:18"},{"anonymous":false,"eventSelector":"9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d","id":4581,"name":"Staked","nameLocation":"1183:6:18","nodeType":"EventDefinition","parameters":{"id":4580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4577,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1206:4:18","nodeType":"VariableDeclaration","scope":4581,"src":"1190:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4576,"name":"address","nodeType":"ElementaryTypeName","src":"1190:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4579,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1228:6:18","nodeType":"VariableDeclaration","scope":4581,"src":"1212:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4578,"name":"uint256","nodeType":"ElementaryTypeName","src":"1212:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1189:46:18"},"src":"1177:59:18"},{"anonymous":false,"eventSelector":"7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5","id":4587,"name":"Withdrawn","nameLocation":"1247:9:18","nodeType":"EventDefinition","parameters":{"id":4586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4583,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1273:4:18","nodeType":"VariableDeclaration","scope":4587,"src":"1257:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4582,"name":"address","nodeType":"ElementaryTypeName","src":"1257:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4585,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1295:6:18","nodeType":"VariableDeclaration","scope":4587,"src":"1279:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4584,"name":"uint256","nodeType":"ElementaryTypeName","src":"1279:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1256:46:18"},"src":"1241:62:18"},{"anonymous":false,"eventSelector":"11ff273d7118e74553c17c252f7ca4a9c4bc57aa9939391776a348e5b388f6f7","id":4597,"name":"RewardValidators","nameLocation":"1314:16:18","nodeType":"EventDefinition","parameters":{"id":4596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4589,"indexed":false,"mutability":"mutable","name":"orderId","nameLocation":"1348:7:18","nodeType":"VariableDeclaration","scope":4597,"src":"1340:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4588,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1340:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4591,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"1374:5:18","nodeType":"VariableDeclaration","scope":4597,"src":"1366:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4590,"name":"address","nodeType":"ElementaryTypeName","src":"1366:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4593,"indexed":true,"mutability":"mutable","name":"validator","nameLocation":"1406:9:18","nodeType":"VariableDeclaration","scope":4597,"src":"1390:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4592,"name":"address","nodeType":"ElementaryTypeName","src":"1390:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4595,"indexed":true,"mutability":"mutable","name":"validatorsReward","nameLocation":"1442:16:18","nodeType":"VariableDeclaration","scope":4597,"src":"1426:32:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4594,"name":"uint256","nodeType":"ElementaryTypeName","src":"1426:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1330:134:18"},"src":"1308:157:18"},{"errorSelector":"5179f467","id":4599,"name":"ThrowInitPaused","nameLocation":"1477:15:18","nodeType":"ErrorDefinition","parameters":{"id":4598,"nodeType":"ParameterList","parameters":[],"src":"1492:2:18"},"src":"1471:24:18"},{"errorSelector":"3dd1b305","id":4601,"name":"TokenNotSupported","nameLocation":"1506:17:18","nodeType":"ErrorDefinition","parameters":{"id":4600,"nodeType":"ParameterList","parameters":[],"src":"1523:2:18"},"src":"1500:26:18"},{"errorSelector":"0eed1a47","id":4603,"name":"MinimumRequired","nameLocation":"1537:15:18","nodeType":"ErrorDefinition","parameters":{"id":4602,"nodeType":"ParameterList","parameters":[],"src":"1552:2:18"},"src":"1531:24:18"},{"errorSelector":"1dc930eb","id":4605,"name":"Insufficient","nameLocation":"1566:12:18","nodeType":"ErrorDefinition","parameters":{"id":4604,"nodeType":"ParameterList","parameters":[],"src":"1578:2:18"},"src":"1560:21:18"},{"errorSelector":"1db1ec85","id":4607,"name":"ThrowPaycrest","nameLocation":"1592:13:18","nodeType":"ErrorDefinition","parameters":{"id":4606,"nodeType":"ParameterList","parameters":[],"src":"1605:2:18"},"src":"1586:22:18"},{"body":{"id":4618,"nodeType":"Block","src":"1638:77:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4609,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1651:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1655:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1651:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4611,"name":"Paycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4523,"src":"1665:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1651:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4616,"nodeType":"IfStatement","src":"1648:49:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4613,"name":"ThrowPaycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4607,"src":"1682:13:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1682:15:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4615,"nodeType":"RevertStatement","src":"1675:22:18"}},{"id":4617,"nodeType":"PlaceholderStatement","src":"1707:1:18"}]},"id":4619,"name":"OnlyPaycrest","nameLocation":"1623:12:18","nodeType":"ModifierDefinition","parameters":{"id":4608,"nodeType":"ParameterList","parameters":[],"src":"1635:2:18"},"src":"1614:101:18","virtual":false,"visibility":"internal"},{"body":{"id":4639,"nodeType":"Block","src":"1819:119:18","statements":[{"expression":{"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4628,"name":"minimumAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4529,"src":"1829:13:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4630,"indexExpression":{"id":4629,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"1843:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1829:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4631,"name":"minimumStakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"1853:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1829:42:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4633,"nodeType":"ExpressionStatement","src":"1829:42:18"},{"eventCall":{"arguments":[{"id":4635,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"1904:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4636,"name":"minimumStakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"1912:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4634,"name":"NewTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4571,"src":"1886:17:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1886:45:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4638,"nodeType":"EmitStatement","src":"1881:50:18"}]},"functionSelector":"f239c626","id":4640,"implemented":true,"kind":"function","modifiers":[{"id":4626,"kind":"modifierInvocation","modifierName":{"id":4625,"name":"onlyOwner","nameLocations":["1809:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1809:9:18"},"nodeType":"ModifierInvocation","src":"1809:9:18"}],"name":"setMinimumAmountForTokens","nameLocation":"1730:25:18","nodeType":"FunctionDefinition","parameters":{"id":4624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4621,"mutability":"mutable","name":"_token","nameLocation":"1764:6:18","nodeType":"VariableDeclaration","scope":4640,"src":"1756:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4620,"name":"address","nodeType":"ElementaryTypeName","src":"1756:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4623,"mutability":"mutable","name":"minimumStakeAmount","nameLocation":"1780:18:18","nodeType":"VariableDeclaration","scope":4640,"src":"1772:26:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4622,"name":"uint256","nodeType":"ElementaryTypeName","src":"1772:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1755:44:18"},"returnParameters":{"id":4627,"nodeType":"ParameterList","parameters":[],"src":"1819:0:18"},"scope":4919,"src":"1721:217:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4655,"nodeType":"Block","src":"1997:74:18","statements":[{"expression":{"id":4649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4647,"name":"initialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4525,"src":"2007:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4648,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4642,"src":"2024:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2007:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4650,"nodeType":"ExpressionStatement","src":"2007:23:18"},{"eventCall":{"arguments":[{"id":4652,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4642,"src":"2057:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4651,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[4575,146],"referencedDeclaration":4575,"src":"2045:11:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bool_$returns$__$","typeString":"function (bool)"}},"id":4653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2045:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4654,"nodeType":"EmitStatement","src":"2040:24:18"}]},"functionSelector":"c4a0bb07","id":4656,"implemented":true,"kind":"function","modifiers":[{"id":4645,"kind":"modifierInvocation","modifierName":{"id":4644,"name":"onlyOwner","nameLocations":["1987:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1987:9:18"},"nodeType":"ModifierInvocation","src":"1987:9:18"}],"name":"initialized","nameLocation":"1953:11:18","nodeType":"FunctionDefinition","parameters":{"id":4643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4642,"mutability":"mutable","name":"status","nameLocation":"1970:6:18","nodeType":"VariableDeclaration","scope":4656,"src":"1965:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4641,"name":"bool","nodeType":"ElementaryTypeName","src":"1965:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1964:13:18"},"returnParameters":{"id":4646,"nodeType":"ParameterList","parameters":[],"src":"1997:0:18"},"scope":4919,"src":"1944:127:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4714,"nodeType":"Block","src":"2133:365:18","statements":[{"condition":{"id":4664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2146:15:18","subExpression":{"id":4663,"name":"initialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4525,"src":"2147:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4668,"nodeType":"IfStatement","src":"2143:44:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4665,"name":"ThrowInitPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"2170:15:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2170:17:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4667,"nodeType":"RevertStatement","src":"2163:24:18"}},{"condition":{"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2200:25:18","subExpression":{"arguments":[{"id":4670,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"2219:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4669,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"2201:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2201:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4676,"nodeType":"IfStatement","src":"2197:56:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4673,"name":"TokenNotSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"2234:17:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4675,"nodeType":"RevertStatement","src":"2227:26:18"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4677,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"2266:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"baseExpression":{"id":4678,"name":"minimumAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4529,"src":"2275:13:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4680,"indexExpression":{"id":4679,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"2289:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2275:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2266:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4685,"nodeType":"IfStatement","src":"2263:58:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4682,"name":"MinimumRequired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4603,"src":"2304:15:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2304:17:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4684,"nodeType":"RevertStatement","src":"2297:24:18"}},{"expression":{"arguments":[{"expression":{"id":4690,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2369:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2373:6:18","memberName":"sender","nodeType":"MemberAccess","src":"2369:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4694,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2389:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_PaycrestValidator_$4919","typeString":"contract PaycrestValidator"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PaycrestValidator_$4919","typeString":"contract PaycrestValidator"}],"id":4693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2381:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4692,"name":"address","nodeType":"ElementaryTypeName","src":"2381:7:18","typeDescriptions":{}}},"id":4695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2381:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4696,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"2396:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4687,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"2349:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4686,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"2331:17:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$462_$","typeString":"type(contract IERC20Upgradeable)"}},"id":4688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2331:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":4689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2356:12:18","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":461,"src":"2331:37:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2331:72:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4698,"nodeType":"ExpressionStatement","src":"2331:72:18"},{"expression":{"id":4706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4699,"name":"_balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4535,"src":"2413:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4703,"indexExpression":{"expression":{"id":4700,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2422:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2426:6:18","memberName":"sender","nodeType":"MemberAccess","src":"2422:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2413:20:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4704,"indexExpression":{"id":4702,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"2434:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2413:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4705,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"2444:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2413:37:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4707,"nodeType":"ExpressionStatement","src":"2413:37:18"},{"eventCall":{"arguments":[{"expression":{"id":4709,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2472:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2476:6:18","memberName":"sender","nodeType":"MemberAccess","src":"2472:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4711,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"2484:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4708,"name":"Staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4581,"src":"2465:6:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2465:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4713,"nodeType":"EmitStatement","src":"2460:31:18"}]},"functionSelector":"adc9772e","id":4715,"implemented":true,"kind":"function","modifiers":[],"name":"stake","nameLocation":"2086:5:18","nodeType":"FunctionDefinition","parameters":{"id":4661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4658,"mutability":"mutable","name":"token","nameLocation":"2100:5:18","nodeType":"VariableDeclaration","scope":4715,"src":"2092:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4657,"name":"address","nodeType":"ElementaryTypeName","src":"2092:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4660,"mutability":"mutable","name":"amount","nameLocation":"2115:6:18","nodeType":"VariableDeclaration","scope":4715,"src":"2107:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4659,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2091:31:18"},"returnParameters":{"id":4662,"nodeType":"ParameterList","parameters":[],"src":"2133:0:18"},"scope":4919,"src":"2077:421:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4765,"nodeType":"Block","src":"2596:297:18","statements":[{"assignments":[4727],"declarations":[{"constant":false,"id":4727,"mutability":"mutable","name":"previouslyStakedAmount","nameLocation":"2614:22:18","nodeType":"VariableDeclaration","scope":4765,"src":"2606:30:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4726,"name":"uint256","nodeType":"ElementaryTypeName","src":"2606:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4734,"initialValue":{"baseExpression":{"baseExpression":{"id":4728,"name":"_balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4535,"src":"2639:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4731,"indexExpression":{"expression":{"id":4729,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2648:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2652:6:18","memberName":"sender","nodeType":"MemberAccess","src":"2648:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2639:20:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4733,"indexExpression":{"id":4732,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"2660:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2639:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2606:60:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4735,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4717,"src":"2679:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4736,"name":"previouslyStakedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"2688:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2679:31:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4741,"nodeType":"IfStatement","src":"2676:57:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4738,"name":"Insufficient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4605,"src":"2719:12:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2719:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4740,"nodeType":"RevertStatement","src":"2712:21:18"}},{"expression":{"id":4749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4742,"name":"_balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4535,"src":"2743:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4746,"indexExpression":{"expression":{"id":4743,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2752:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2756:6:18","memberName":"sender","nodeType":"MemberAccess","src":"2752:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2743:20:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4747,"indexExpression":{"id":4745,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"2764:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2743:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4748,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4717,"src":"2774:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2743:37:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4750,"nodeType":"ExpressionStatement","src":"2743:37:18"},{"expression":{"arguments":[{"id":4755,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"2824:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4756,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4717,"src":"2835:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4752,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"2808:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4751,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"2790:17:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$462_$","typeString":"type(contract IERC20Upgradeable)"}},"id":4753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2790:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":4754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2815:8:18","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":429,"src":"2790:33:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2790:52:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4758,"nodeType":"ExpressionStatement","src":"2790:52:18"},{"eventCall":{"arguments":[{"expression":{"id":4760,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2867:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2871:6:18","memberName":"sender","nodeType":"MemberAccess","src":"2867:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4762,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4717,"src":"2879:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4759,"name":"Withdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4587,"src":"2857:9:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2857:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4764,"nodeType":"EmitStatement","src":"2852:34:18"}]},"functionSelector":"b460af94","id":4766,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":4724,"kind":"modifierInvocation","modifierName":{"id":4723,"name":"nonReentrant","nameLocations":["2581:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":344,"src":"2581:12:18"},"nodeType":"ModifierInvocation","src":"2581:14:18"}],"name":"withdraw","nameLocation":"2513:8:18","nodeType":"FunctionDefinition","parameters":{"id":4722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4717,"mutability":"mutable","name":"amount","nameLocation":"2530:6:18","nodeType":"VariableDeclaration","scope":4766,"src":"2522:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4716,"name":"uint256","nodeType":"ElementaryTypeName","src":"2522:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4719,"mutability":"mutable","name":"token","nameLocation":"2546:5:18","nodeType":"VariableDeclaration","scope":4766,"src":"2538:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4718,"name":"address","nodeType":"ElementaryTypeName","src":"2538:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4721,"mutability":"mutable","name":"recipient","nameLocation":"2561:9:18","nodeType":"VariableDeclaration","scope":4766,"src":"2553:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4720,"name":"address","nodeType":"ElementaryTypeName","src":"2553:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2521:50:18"},"returnParameters":{"id":4725,"nodeType":"ParameterList","parameters":[],"src":"2596:0:18"},"scope":4919,"src":"2504:389:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4846,"nodeType":"Block","src":"3185:680:18","statements":[{"assignments":[4787],"declarations":[{"constant":false,"id":4787,"mutability":"mutable","name":"lengthOfSecondaryValidators","nameLocation":"3203:27:18","nodeType":"VariableDeclaration","scope":4846,"src":"3195:35:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4786,"name":"uint256","nodeType":"ElementaryTypeName","src":"3195:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4790,"initialValue":{"expression":{"id":4788,"name":"secondaryValidators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4775,"src":"3233:19:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3253:6:18","memberName":"length","nodeType":"MemberAccess","src":"3233:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3195:64:18"},{"assignments":[4792],"declarations":[{"constant":false,"id":4792,"mutability":"mutable","name":"secondaryValidatorsShares","nameLocation":"3277:25:18","nodeType":"VariableDeclaration","scope":4846,"src":"3269:33:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4791,"name":"uint256","nodeType":"ElementaryTypeName","src":"3269:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4796,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4793,"name":"secondaryValidatorsReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4779,"src":"3305:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4794,"name":"lengthOfSecondaryValidators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4787,"src":"3333:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3305:55:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3269:91:18"},{"body":{"id":4827,"nodeType":"Block","src":"3424:254:18","statements":[{"expression":{"id":4812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4804,"name":"_balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4535,"src":"3438:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4809,"indexExpression":{"baseExpression":{"id":4805,"name":"secondaryValidators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4775,"src":"3447:19:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4807,"indexExpression":{"id":4806,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"3467:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3447:22:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3438:32:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4810,"indexExpression":{"id":4808,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4770,"src":"3471:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3438:39:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4811,"name":"secondaryValidatorsShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"3481:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3438:68:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4813,"nodeType":"ExpressionStatement","src":"3438:68:18"},{"eventCall":{"arguments":[{"id":4815,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"3542:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4816,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4770,"src":"3551:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":4817,"name":"secondaryValidators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4775,"src":"3558:19:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4819,"indexExpression":{"id":4818,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"3578:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3558:22:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4820,"name":"secondaryValidatorsShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"3582:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4814,"name":"RewardValidators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"3525:16:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256)"}},"id":4821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3525:83:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4822,"nodeType":"EmitStatement","src":"3520:88:18"},{"id":4826,"nodeType":"UncheckedBlock","src":"3622:46:18","statements":[{"expression":{"id":4824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3650:3:18","subExpression":{"id":4823,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"3650:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4825,"nodeType":"ExpressionStatement","src":"3650:3:18"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4801,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"3389:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4802,"name":"lengthOfSecondaryValidators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4787,"src":"3393:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3389:31:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4828,"initializationExpression":{"assignments":[4798],"declarations":[{"constant":false,"id":4798,"mutability":"mutable","name":"i","nameLocation":"3382:1:18","nodeType":"VariableDeclaration","scope":4828,"src":"3374:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4797,"name":"uint256","nodeType":"ElementaryTypeName","src":"3374:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4800,"initialValue":{"hexValue":"30","id":4799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3386:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3374:13:18"},"nodeType":"ForStatement","src":"3370:308:18"},{"expression":{"id":4835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4829,"name":"_balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4535,"src":"3687:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4832,"indexExpression":{"id":4830,"name":"primaryValidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"3696:16:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3687:26:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4833,"indexExpression":{"id":4831,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4770,"src":"3714:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3687:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4834,"name":"primaryValidatorsReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4777,"src":"3724:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3687:60:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4836,"nodeType":"ExpressionStatement","src":"3687:60:18"},{"eventCall":{"arguments":[{"id":4838,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"3779:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4839,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4770,"src":"3788:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4840,"name":"primaryValidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"3795:16:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4841,"name":"primaryValidatorsReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4777,"src":"3813:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4837,"name":"RewardValidators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"3762:16:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256)"}},"id":4842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3762:75:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4843,"nodeType":"EmitStatement","src":"3757:80:18"},{"expression":{"hexValue":"74727565","id":4844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3854:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4785,"id":4845,"nodeType":"Return","src":"3847:11:18"}]},"functionSelector":"4a223c36","id":4847,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":4782,"kind":"modifierInvocation","modifierName":{"id":4781,"name":"OnlyPaycrest","nameLocations":["3156:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":4619,"src":"3156:12:18"},"nodeType":"ModifierInvocation","src":"3156:14:18"}],"name":"rewardValidators","nameLocation":"2908:16:18","nodeType":"FunctionDefinition","parameters":{"id":4780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4768,"mutability":"mutable","name":"orderId","nameLocation":"2942:7:18","nodeType":"VariableDeclaration","scope":4847,"src":"2934:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4767,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2934:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4770,"mutability":"mutable","name":"token","nameLocation":"2968:5:18","nodeType":"VariableDeclaration","scope":4847,"src":"2960:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4769,"name":"address","nodeType":"ElementaryTypeName","src":"2960:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4772,"mutability":"mutable","name":"primaryValidator","nameLocation":"2992:16:18","nodeType":"VariableDeclaration","scope":4847,"src":"2984:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4771,"name":"address","nodeType":"ElementaryTypeName","src":"2984:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4775,"mutability":"mutable","name":"secondaryValidators","nameLocation":"3036:19:18","nodeType":"VariableDeclaration","scope":4847,"src":"3019:36:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4773,"name":"address","nodeType":"ElementaryTypeName","src":"3019:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4774,"nodeType":"ArrayTypeName","src":"3019:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4777,"mutability":"mutable","name":"primaryValidatorsReward","nameLocation":"3073:23:18","nodeType":"VariableDeclaration","scope":4847,"src":"3065:31:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4776,"name":"uint256","nodeType":"ElementaryTypeName","src":"3065:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4779,"mutability":"mutable","name":"secondaryValidatorsReward","nameLocation":"3115:25:18","nodeType":"VariableDeclaration","scope":4847,"src":"3107:33:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4778,"name":"uint256","nodeType":"ElementaryTypeName","src":"3107:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2924:222:18"},"returnParameters":{"id":4785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4784,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4847,"src":"3179:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4783,"name":"bool","nodeType":"ElementaryTypeName","src":"3179:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3178:6:18"},"scope":4919,"src":"2899:966:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4873,"nodeType":"Block","src":"3941:166:18","statements":[{"assignments":[null,4855],"declarations":[null,{"constant":false,"id":4855,"mutability":"mutable","name":"result","nameLocation":"3967:6:18","nodeType":"VariableDeclaration","scope":4873,"src":"3954:19:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4854,"name":"bytes","nodeType":"ElementaryTypeName","src":"3954:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4864,"initialValue":{"arguments":[{"arguments":[{"hexValue":"6973546f6b656e537570706f72746564286164647265737329","id":4860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4021:27:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_75151b637ccccb94db67ae177f374b59bb2a98f44c1e715a24ea211cbd5394f0","typeString":"literal_string \"isTokenSupported(address)\""},"value":"isTokenSupported(address)"},{"id":4861,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"4050:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_75151b637ccccb94db67ae177f374b59bb2a98f44c1e715a24ea211cbd5394f0","typeString":"literal_string \"isTokenSupported(address)\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4858,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3997:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4001:19:18","memberName":"encodeWithSignature","nodeType":"MemberAccess","src":"3997:23:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (string memory) pure returns (bytes memory)"}},"id":4862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3997:59:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4856,"name":"Paycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4523,"src":"3977:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3986:10:18","memberName":"staticcall","nodeType":"MemberAccess","src":"3977:19:18","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":4863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3977:80:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3951:106:18"},{"expression":{"arguments":[{"id":4867,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"4085:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":4869,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4094:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":4868,"name":"bool","nodeType":"ElementaryTypeName","src":"4094:4:18","typeDescriptions":{}}}],"id":4870,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4093:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":4865,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4074:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4078:6:18","memberName":"decode","nodeType":"MemberAccess","src":"4074:10:18","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4074:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4853,"id":4872,"nodeType":"Return","src":"4067:33:18"}]},"id":4874,"implemented":true,"kind":"function","modifiers":[],"name":"_isTokenSupported","nameLocation":"3881:17:18","nodeType":"FunctionDefinition","parameters":{"id":4850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4849,"mutability":"mutable","name":"token","nameLocation":"3907:5:18","nodeType":"VariableDeclaration","scope":4874,"src":"3899:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4848,"name":"address","nodeType":"ElementaryTypeName","src":"3899:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3898:15:18"},"returnParameters":{"id":4853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4874,"src":"3935:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4851,"name":"bool","nodeType":"ElementaryTypeName","src":"3935:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3934:6:18"},"scope":4919,"src":"3872:235:18","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4881,"nodeType":"Block","src":"4167:32:18","statements":[{"expression":{"id":4879,"name":"Paycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4523,"src":"4184:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4878,"id":4880,"nodeType":"Return","src":"4177:15:18"}]},"functionSelector":"c56f80c1","id":4882,"implemented":true,"kind":"function","modifiers":[],"name":"getPaycrest","nameLocation":"4122:11:18","nodeType":"FunctionDefinition","parameters":{"id":4875,"nodeType":"ParameterList","parameters":[],"src":"4133:2:18"},"returnParameters":{"id":4878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4877,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4882,"src":"4158:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4876,"name":"address","nodeType":"ElementaryTypeName","src":"4158:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4157:9:18"},"scope":4919,"src":"4113:86:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4889,"nodeType":"Block","src":"4267:38:18","statements":[{"expression":{"id":4887,"name":"initialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4525,"src":"4284:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4886,"id":4888,"nodeType":"Return","src":"4277:21:18"}]},"functionSelector":"c2b4610b","id":4890,"implemented":true,"kind":"function","modifiers":[],"name":"getInitializationState","nameLocation":"4214:22:18","nodeType":"FunctionDefinition","parameters":{"id":4883,"nodeType":"ParameterList","parameters":[],"src":"4236:2:18"},"returnParameters":{"id":4886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4890,"src":"4261:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4884,"name":"bool","nodeType":"ElementaryTypeName","src":"4261:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4260:6:18"},"scope":4919,"src":"4205:100:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4901,"nodeType":"Block","src":"4394:44:18","statements":[{"expression":{"baseExpression":{"id":4897,"name":"minimumAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4529,"src":"4411:13:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4899,"indexExpression":{"id":4898,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4892,"src":"4425:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4411:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4896,"id":4900,"nodeType":"Return","src":"4404:27:18"}]},"functionSelector":"e74599f3","id":4902,"implemented":true,"kind":"function","modifiers":[],"name":"getMinimumAmountRequiredFor","nameLocation":"4320:27:18","nodeType":"FunctionDefinition","parameters":{"id":4893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4892,"mutability":"mutable","name":"token","nameLocation":"4356:5:18","nodeType":"VariableDeclaration","scope":4902,"src":"4348:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4891,"name":"address","nodeType":"ElementaryTypeName","src":"4348:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4347:15:18"},"returnParameters":{"id":4896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4902,"src":"4385:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4894,"name":"uint256","nodeType":"ElementaryTypeName","src":"4385:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4384:9:18"},"scope":4919,"src":"4311:127:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4917,"nodeType":"Block","src":"4530:45:18","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":4911,"name":"_balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4535,"src":"4547:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4913,"indexExpression":{"id":4912,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4904,"src":"4556:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4547:14:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4915,"indexExpression":{"id":4914,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4906,"src":"4562:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4547:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4910,"id":4916,"nodeType":"Return","src":"4540:28:18"}]},"functionSelector":"c5923aaf","id":4918,"implemented":true,"kind":"function","modifiers":[],"name":"getValidatorInfo","nameLocation":"4453:16:18","nodeType":"FunctionDefinition","parameters":{"id":4907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4904,"mutability":"mutable","name":"user","nameLocation":"4478:4:18","nodeType":"VariableDeclaration","scope":4918,"src":"4470:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4903,"name":"address","nodeType":"ElementaryTypeName","src":"4470:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4906,"mutability":"mutable","name":"token","nameLocation":"4492:5:18","nodeType":"VariableDeclaration","scope":4918,"src":"4484:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4905,"name":"address","nodeType":"ElementaryTypeName","src":"4484:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4469:29:18"},"returnParameters":{"id":4910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4918,"src":"4521:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4908,"name":"uint256","nodeType":"ElementaryTypeName","src":"4521:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4520:9:18"},"scope":4919,"src":"4444:131:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4920,"src":"395:4183:18","usedErrors":[4599,4601,4603,4605,4607]}],"src":"38:4541:18"},"id":18},"contracts/interface/IPaycrest.sol":{"ast":{"absolutePath":"contracts/interface/IPaycrest.sol","exportedSymbols":{"IERC20":[3477],"IPaycrest":[5098]},"id":5099,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4921,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:19"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":4923,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5099,"sourceUnit":3478,"src":"63:70:19","symbolAliases":[{"foreign":{"id":4922,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"71:6:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IPaycrest","contractDependencies":[],"contractKind":"interface","documentation":{"id":4924,"nodeType":"StructuredDocumentation","src":"134:130:19","text":" @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\n Factory and global config params"},"fullyImplemented":false,"id":5098,"linearizedBaseContracts":[5098],"name":"IPaycrest","nameLocation":"275:9:19","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":4925,"nodeType":"StructuredDocumentation","src":"483:38:19","text":"@dev Emitted when deposit is made."},"eventSelector":"bcd03c92e4cfe8dc461872f6cd67c811155fa7d92c918619e82e6b6b44733e7e","id":4937,"name":"Deposit","nameLocation":"532:7:19","nodeType":"EventDefinition","parameters":{"id":4936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4927,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"556:7:19","nodeType":"VariableDeclaration","scope":4937,"src":"540:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4926,"name":"bytes32","nodeType":"ElementaryTypeName","src":"540:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4929,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"581:6:19","nodeType":"VariableDeclaration","scope":4937,"src":"565:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4928,"name":"uint256","nodeType":"ElementaryTypeName","src":"565:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4931,"indexed":true,"mutability":"mutable","name":"rate","nameLocation":"605:4:19","nodeType":"VariableDeclaration","scope":4937,"src":"589:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4930,"name":"uint256","nodeType":"ElementaryTypeName","src":"589:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4933,"indexed":false,"mutability":"mutable","name":"institutionCode","nameLocation":"619:15:19","nodeType":"VariableDeclaration","scope":4937,"src":"611:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4932,"name":"bytes32","nodeType":"ElementaryTypeName","src":"611:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4935,"indexed":false,"mutability":"mutable","name":"messageHash","nameLocation":"643:11:19","nodeType":"VariableDeclaration","scope":4937,"src":"636:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4934,"name":"string","nodeType":"ElementaryTypeName","src":"636:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"539:116:19"},"src":"526:130:19"},{"anonymous":false,"documentation":{"id":4938,"nodeType":"StructuredDocumentation","src":"661:52:19","text":"@dev Emitted when aggregator settle transaction."},"eventSelector":"ce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e33","id":4946,"name":"Settled","nameLocation":"724:7:19","nodeType":"EventDefinition","parameters":{"id":4945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4940,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"748:7:19","nodeType":"VariableDeclaration","scope":4946,"src":"732:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4939,"name":"bytes32","nodeType":"ElementaryTypeName","src":"732:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4942,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"773:17:19","nodeType":"VariableDeclaration","scope":4946,"src":"757:33:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4941,"name":"address","nodeType":"ElementaryTypeName","src":"757:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4944,"indexed":false,"mutability":"mutable","name":"settlePercent","nameLocation":"799:13:19","nodeType":"VariableDeclaration","scope":4946,"src":"792:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4943,"name":"uint96","nodeType":"ElementaryTypeName","src":"792:6:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"731:82:19"},"src":"718:96:19"},{"anonymous":false,"documentation":{"id":4947,"nodeType":"StructuredDocumentation","src":"819:52:19","text":"@dev Emitted when aggregator refund transaction."},"eventSelector":"fe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf0","id":4951,"name":"Refunded","nameLocation":"882:8:19","nodeType":"EventDefinition","parameters":{"id":4950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4949,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"907:7:19","nodeType":"VariableDeclaration","scope":4951,"src":"891:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4948,"name":"bytes32","nodeType":"ElementaryTypeName","src":"891:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"890:25:19"},"src":"876:40:19"},{"anonymous":false,"documentation":{"id":4952,"nodeType":"StructuredDocumentation","src":"921:48:19","text":"@dev Emitted when sender get therir rewards."},"eventSelector":"96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2","id":4958,"name":"TransferSenderFee","nameLocation":"980:17:19","nodeType":"EventDefinition","parameters":{"id":4957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4954,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1014:6:19","nodeType":"VariableDeclaration","scope":4958,"src":"998:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4953,"name":"address","nodeType":"ElementaryTypeName","src":"998:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4956,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1038:6:19","nodeType":"VariableDeclaration","scope":4958,"src":"1022:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4955,"name":"uint256","nodeType":"ElementaryTypeName","src":"1022:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"997:48:19"},"src":"974:72:19"},{"documentation":{"id":4959,"nodeType":"StructuredDocumentation","src":"1246:51:19","text":"@notice Revert when caller is not an aggregator"},"errorSelector":"e9d82992","id":4961,"name":"OnlyAggregator","nameLocation":"1308:14:19","nodeType":"ErrorDefinition","parameters":{"id":4960,"nodeType":"ParameterList","parameters":[],"src":"1322:2:19"},"src":"1302:23:19"},{"documentation":{"id":4962,"nodeType":"StructuredDocumentation","src":"1330:38:19","text":"@notice Revert with invalid signer"},"errorSelector":"815e1d64","id":4964,"name":"InvalidSigner","nameLocation":"1379:13:19","nodeType":"ErrorDefinition","parameters":{"id":4963,"nodeType":"ParameterList","parameters":[],"src":"1392:2:19"},"src":"1373:22:19"},{"documentation":{"id":4965,"nodeType":"StructuredDocumentation","src":"1400:44:19","text":"@notice Revert when input amount is zero"},"errorSelector":"4d5083a4","id":4967,"name":"Unsuported","nameLocation":"1455:10:19","nodeType":"ErrorDefinition","parameters":{"id":4966,"nodeType":"ParameterList","parameters":[],"src":"1465:2:19"},"src":"1449:19:19"},{"documentation":{"id":4968,"nodeType":"StructuredDocumentation","src":"1473:46:19","text":"@notice Revert when trx has been fulfilled"},"errorSelector":"56f1733f","id":4970,"name":"OrderFulfilled","nameLocation":"1530:14:19","nodeType":"ErrorDefinition","parameters":{"id":4969,"nodeType":"ParameterList","parameters":[],"src":"1544:2:19"},"src":"1524:23:19"},{"documentation":{"id":4971,"nodeType":"StructuredDocumentation","src":"1552:57:19","text":"@notice Revert when rewards are not been distributed."},"errorSelector":"bcb00c16","id":4973,"name":"UnableToProcessRewards","nameLocation":"1620:22:19","nodeType":"ErrorDefinition","parameters":{"id":4972,"nodeType":"ParameterList","parameters":[],"src":"1642:2:19"},"src":"1614:31:19"},{"errorSelector":"38f5fc35","id":4975,"name":"InvalidInstitutionCode","nameLocation":"1656:22:19","nodeType":"ErrorDefinition","parameters":{"id":4974,"nodeType":"ParameterList","parameters":[],"src":"1678:2:19"},"src":"1650:31:19"},{"errorSelector":"584a7938","id":4977,"name":"NotWhitelisted","nameLocation":"1692:14:19","nodeType":"ErrorDefinition","parameters":{"id":4976,"nodeType":"ParameterList","parameters":[],"src":"1706:2:19"},"src":"1686:23:19"},{"canonicalName":"IPaycrest.TransactionMetadata","id":4988,"members":[{"constant":false,"id":4979,"mutability":"mutable","name":"identifier","nameLocation":"1947:10:19","nodeType":"VariableDeclaration","scope":4988,"src":"1940:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4978,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1940:6:19","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4981,"mutability":"mutable","name":"institution","nameLocation":"2066:11:19","nodeType":"VariableDeclaration","scope":4988,"src":"2059:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4980,"name":"bytes8","nodeType":"ElementaryTypeName","src":"2059:6:19","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4983,"mutability":"mutable","name":"name","nameLocation":"2185:4:19","nodeType":"VariableDeclaration","scope":4988,"src":"2178:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4982,"name":"bytes8","nodeType":"ElementaryTypeName","src":"2178:6:19","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4985,"mutability":"mutable","name":"currency","nameLocation":"2304:8:19","nodeType":"VariableDeclaration","scope":4988,"src":"2297:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4984,"name":"bytes8","nodeType":"ElementaryTypeName","src":"2297:6:19","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4987,"mutability":"mutable","name":"liquidityProviderID","nameLocation":"2424:19:19","nodeType":"VariableDeclaration","scope":4988,"src":"2416:27:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4986,"name":"uint256","nodeType":"ElementaryTypeName","src":"2416:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"TransactionMetadata","nameLocation":"1910:19:19","nodeType":"StructDefinition","scope":5098,"src":"1903:629:19","visibility":"public"},{"canonicalName":"IPaycrest.Order","id":5007,"members":[{"constant":false,"id":4990,"mutability":"mutable","name":"seller","nameLocation":"2569:6:19","nodeType":"VariableDeclaration","scope":5007,"src":"2561:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4989,"name":"address","nodeType":"ElementaryTypeName","src":"2561:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4992,"mutability":"mutable","name":"token","nameLocation":"2689:5:19","nodeType":"VariableDeclaration","scope":5007,"src":"2681:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4991,"name":"address","nodeType":"ElementaryTypeName","src":"2681:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4994,"mutability":"mutable","name":"senderFeeRecipient","nameLocation":"2809:18:19","nodeType":"VariableDeclaration","scope":5007,"src":"2801:26:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4993,"name":"address","nodeType":"ElementaryTypeName","src":"2801:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4996,"mutability":"mutable","name":"senderFee","nameLocation":"2845:9:19","nodeType":"VariableDeclaration","scope":5007,"src":"2837:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4995,"name":"uint256","nodeType":"ElementaryTypeName","src":"2837:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4998,"mutability":"mutable","name":"rate","nameLocation":"2871:4:19","nodeType":"VariableDeclaration","scope":5007,"src":"2864:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4997,"name":"uint96","nodeType":"ElementaryTypeName","src":"2864:6:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":5000,"mutability":"mutable","name":"isFulfilled","nameLocation":"2989:11:19","nodeType":"VariableDeclaration","scope":5007,"src":"2984:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4999,"name":"bool","nodeType":"ElementaryTypeName","src":"2984:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5002,"mutability":"mutable","name":"refundAddress","nameLocation":"3133:13:19","nodeType":"VariableDeclaration","scope":5007,"src":"3125:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5001,"name":"address","nodeType":"ElementaryTypeName","src":"3125:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5004,"mutability":"mutable","name":"currentBPS","nameLocation":"3273:10:19","nodeType":"VariableDeclaration","scope":5007,"src":"3266:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":5003,"name":"uint96","nodeType":"ElementaryTypeName","src":"3266:6:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":5006,"mutability":"mutable","name":"amount","nameLocation":"3397:6:19","nodeType":"VariableDeclaration","scope":5007,"src":"3389:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5005,"name":"uint256","nodeType":"ElementaryTypeName","src":"3389:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Order","nameLocation":"2545:5:19","nodeType":"StructDefinition","scope":5098,"src":"2538:968:19","visibility":"public"},{"documentation":{"id":5008,"nodeType":"StructuredDocumentation","src":"3708:854:19","text":"@notice lock sender `_amount` of `token` into Paycrest.\n Requirements:\n `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\n `_token` must be an acceptable token. @dev See {isTokenSupported}.\n `amount` must be greater than minimum\n `_refundable` refundable address must not be zero address\n @param _token address of the token.\n @param _amount amount in the decimal of `_token` above.\n @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\n @param _rate rate at which sender intended to sell `_amount` of `_token`.\n @param messageHash hash must be the result of a hash operation for the verification to be secure. message\n @return _orderId the bytes20 which is the orderId"},"functionSelector":"d12ff20a","id":5029,"implemented":false,"kind":"function","modifiers":[],"name":"createOrder","nameLocation":"4576:11:19","nodeType":"FunctionDefinition","parameters":{"id":5025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5010,"mutability":"mutable","name":"_token","nameLocation":"4596:6:19","nodeType":"VariableDeclaration","scope":5029,"src":"4588:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5009,"name":"address","nodeType":"ElementaryTypeName","src":"4588:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5012,"mutability":"mutable","name":"_amount","nameLocation":"4621:7:19","nodeType":"VariableDeclaration","scope":5029,"src":"4613:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5011,"name":"uint256","nodeType":"ElementaryTypeName","src":"4613:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5014,"mutability":"mutable","name":"_institutionCode","nameLocation":"4647:16:19","nodeType":"VariableDeclaration","scope":5029,"src":"4639:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5013,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4639:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5016,"mutability":"mutable","name":"_rate","nameLocation":"4680:5:19","nodeType":"VariableDeclaration","scope":5029,"src":"4673:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":5015,"name":"uint96","nodeType":"ElementaryTypeName","src":"4673:6:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":5018,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"4704:19:19","nodeType":"VariableDeclaration","scope":5029,"src":"4696:27:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5017,"name":"address","nodeType":"ElementaryTypeName","src":"4696:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5020,"mutability":"mutable","name":"_senderFee","nameLocation":"4741:10:19","nodeType":"VariableDeclaration","scope":5029,"src":"4733:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5019,"name":"uint256","nodeType":"ElementaryTypeName","src":"4733:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5022,"mutability":"mutable","name":"_refundAddress","nameLocation":"4769:14:19","nodeType":"VariableDeclaration","scope":5029,"src":"4761:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5021,"name":"address","nodeType":"ElementaryTypeName","src":"4761:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5024,"mutability":"mutable","name":"messageHash","nameLocation":"4810:11:19","nodeType":"VariableDeclaration","scope":5029,"src":"4794:27:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5023,"name":"string","nodeType":"ElementaryTypeName","src":"4794:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4587:235:19"},"returnParameters":{"id":5028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5027,"mutability":"mutable","name":"_orderId","nameLocation":"4849:8:19","nodeType":"VariableDeclaration","scope":5029,"src":"4841:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5026,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4841:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4840:18:19"},"scope":5098,"src":"4567:292:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":5030,"nodeType":"StructuredDocumentation","src":"4865:850:19","text":"@notice settle transaction and distribute rewards accordingly.\n Requirements:\n {only aggregators call}.\n `_orderId` it must be less than total ids.\n `_orderId` it must be an open Id.\n `_primaryValidator` must have stake on the Paycrest staking platform.\n `_secondaryValidators` must have stake on the Paycrest staking platform.\n `amount` must be greater than minimum\n `_refundable` refundable address must not be zero address\n @param _orderId transaction Id.\n @param _primaryValidator address primary validator.\n @param _secondaryValidators arrays of secondary validators.\n @param _liquidityProvider address of the liquidity provider.\n @param _settlePercent rate at which the transaction is settled.\n @return return the status of transaction {bool}"},"functionSelector":"e5b32cdf","id":5046,"implemented":false,"kind":"function","modifiers":[],"name":"settle","nameLocation":"5729:6:19","nodeType":"FunctionDefinition","parameters":{"id":5042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5032,"mutability":"mutable","name":"_orderId","nameLocation":"5744:8:19","nodeType":"VariableDeclaration","scope":5046,"src":"5736:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5031,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5736:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5034,"mutability":"mutable","name":"_primaryValidator","nameLocation":"5762:17:19","nodeType":"VariableDeclaration","scope":5046,"src":"5754:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5033,"name":"address","nodeType":"ElementaryTypeName","src":"5754:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5037,"mutability":"mutable","name":"_secondaryValidators","nameLocation":"5800:20:19","nodeType":"VariableDeclaration","scope":5046,"src":"5781:39:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5035,"name":"address","nodeType":"ElementaryTypeName","src":"5781:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5036,"nodeType":"ArrayTypeName","src":"5781:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5039,"mutability":"mutable","name":"_liquidityProvider","nameLocation":"5830:18:19","nodeType":"VariableDeclaration","scope":5046,"src":"5822:26:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5038,"name":"address","nodeType":"ElementaryTypeName","src":"5822:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5041,"mutability":"mutable","name":"_settlePercent","nameLocation":"5857:14:19","nodeType":"VariableDeclaration","scope":5046,"src":"5850:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":5040,"name":"uint96","nodeType":"ElementaryTypeName","src":"5850:6:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"5735:137:19"},"returnParameters":{"id":5045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5046,"src":"5891:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5043,"name":"bool","nodeType":"ElementaryTypeName","src":"5891:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5890:6:19"},"scope":5098,"src":"5720:177:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":5047,"nodeType":"StructuredDocumentation","src":"5903:336:19","text":"@notice refund to the specified refundable address.\n Requirements:\n {only aggregators call}.\n `_orderId` it must be less than total ids.\n `_orderId` it must be an open Id.\n `isFulfilled` must be false.\n @param _orderId transaction Id.\n @return return the status of transaction {bool}"},"functionSelector":"7249fbb6","id":5054,"implemented":false,"kind":"function","modifiers":[],"name":"refund","nameLocation":"6253:6:19","nodeType":"FunctionDefinition","parameters":{"id":5050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5049,"mutability":"mutable","name":"_orderId","nameLocation":"6268:8:19","nodeType":"VariableDeclaration","scope":5054,"src":"6260:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5048,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6260:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6259:18:19"},"returnParameters":{"id":5053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5052,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5054,"src":"6296:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5051,"name":"bool","nodeType":"ElementaryTypeName","src":"6296:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6295:6:19"},"scope":5098,"src":"6244:58:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":5055,"nodeType":"StructuredDocumentation","src":"6308:152:19","text":"@notice get supported token from Paycrest.\n @param _token address of the token to check.\n @return return the status of `_token` {bool}"},"functionSelector":"75151b63","id":5062,"implemented":false,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"6474:16:19","nodeType":"FunctionDefinition","parameters":{"id":5058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5057,"mutability":"mutable","name":"_token","nameLocation":"6499:6:19","nodeType":"VariableDeclaration","scope":5062,"src":"6491:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5056,"name":"address","nodeType":"ElementaryTypeName","src":"6491:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6490:16:19"},"returnParameters":{"id":5061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5062,"src":"6529:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5059,"name":"bool","nodeType":"ElementaryTypeName","src":"6529:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6528:6:19"},"scope":5098,"src":"6465:70:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5063,"nodeType":"StructuredDocumentation","src":"6541:70:19","text":"@notice get order details.\n @param _orderId transaction Id."},"functionSelector":"768c6ec0","id":5071,"implemented":false,"kind":"function","modifiers":[],"name":"getOrderInfo","nameLocation":"6625:12:19","nodeType":"FunctionDefinition","parameters":{"id":5066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5065,"mutability":"mutable","name":"_orderId","nameLocation":"6646:8:19","nodeType":"VariableDeclaration","scope":5071,"src":"6638:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5064,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6638:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6637:18:19"},"returnParameters":{"id":5070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5069,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5071,"src":"6678:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_memory_ptr","typeString":"struct IPaycrest.Order"},"typeName":{"id":5068,"nodeType":"UserDefinedTypeName","pathNode":{"id":5067,"name":"Order","nameLocations":["6678:5:19"],"nodeType":"IdentifierPath","referencedDeclaration":5007,"src":"6678:5:19"},"referencedDeclaration":5007,"src":"6678:5:19","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$5007_storage_ptr","typeString":"struct IPaycrest.Order"}},"visibility":"internal"}],"src":"6677:14:19"},"scope":5098,"src":"6616:76:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5072,"nodeType":"StructuredDocumentation","src":"6698:458:19","text":"@notice get every rewards and address on Paycrest.\n @return protocolReward amount that will be taken in percentage on all trade.\n @return primaryValidatorReward amount that will be given to primary validator in percentage from `protocolReward`\n @return secondaryValidatorReward amount that will be shared between secondary validator in percentage from `protocolReward`\n @return max_bps maximum amount in bps \"100% == 100_000\"."},"functionSelector":"b810c636","id":5083,"implemented":false,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"7170:13:19","nodeType":"FunctionDefinition","parameters":{"id":5073,"nodeType":"ParameterList","parameters":[],"src":"7183:2:19"},"returnParameters":{"id":5082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5075,"mutability":"mutable","name":"protocolReward","nameLocation":"7224:14:19","nodeType":"VariableDeclaration","scope":5083,"src":"7217:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5074,"name":"uint64","nodeType":"ElementaryTypeName","src":"7217:6:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":5077,"mutability":"mutable","name":"primaryValidatorReward","nameLocation":"7256:22:19","nodeType":"VariableDeclaration","scope":5083,"src":"7249:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5076,"name":"uint64","nodeType":"ElementaryTypeName","src":"7249:6:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":5079,"mutability":"mutable","name":"secondaryValidatorReward","nameLocation":"7296:24:19","nodeType":"VariableDeclaration","scope":5083,"src":"7289:31:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5078,"name":"uint64","nodeType":"ElementaryTypeName","src":"7289:6:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":5081,"mutability":"mutable","name":"max_bps","nameLocation":"7338:7:19","nodeType":"VariableDeclaration","scope":5083,"src":"7330:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5080,"name":"uint256","nodeType":"ElementaryTypeName","src":"7330:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7207:144:19"},"scope":5098,"src":"7161:191:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5084,"nodeType":"StructuredDocumentation","src":"7358:98:19","text":"@notice get address of liquidity aggregator.\n @return address of `liquidityAggregator`."},"functionSelector":"2ebc5356","id":5089,"implemented":false,"kind":"function","modifiers":[],"name":"getLiquidityAggregator","nameLocation":"7470:22:19","nodeType":"FunctionDefinition","parameters":{"id":5085,"nodeType":"ParameterList","parameters":[],"src":"7492:2:19"},"returnParameters":{"id":5088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5087,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5089,"src":"7517:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5086,"name":"address","nodeType":"ElementaryTypeName","src":"7517:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7516:9:19"},"scope":5098,"src":"7461:65:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5090,"nodeType":"StructuredDocumentation","src":"7537:136:19","text":"@notice get address of sender whitelisting status.\n @param sender address of the sender.\n @return address of `status`."},"functionSelector":"d8e8de34","id":5097,"implemented":false,"kind":"function","modifiers":[],"name":"getWhitelistedStatus","nameLocation":"7687:20:19","nodeType":"FunctionDefinition","parameters":{"id":5093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5092,"mutability":"mutable","name":"sender","nameLocation":"7716:6:19","nodeType":"VariableDeclaration","scope":5097,"src":"7708:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5091,"name":"address","nodeType":"ElementaryTypeName","src":"7708:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7707:16:19"},"returnParameters":{"id":5096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5097,"src":"7746:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5094,"name":"bool","nodeType":"ElementaryTypeName","src":"7746:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7745:6:19"},"scope":5098,"src":"7678:74:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5099,"src":"265:7490:19","usedErrors":[4961,4964,4967,4970,4973,4975,4977]}],"src":"38:7718:19"},"id":19},"contracts/interface/IPaycrestStake.sol":{"ast":{"absolutePath":"contracts/interface/IPaycrestStake.sol","exportedSymbols":{"IPaycrestStake":[5120]},"id":5121,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":5100,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IPaycrestStake","contractDependencies":[],"contractKind":"interface","documentation":{"id":5101,"nodeType":"StructuredDocumentation","src":"63:129:20","text":" @author Chef Photons, Vaultka Team serving high quality drinks; drink responsibly.\n Factory and global config params"},"fullyImplemented":false,"id":5120,"linearizedBaseContracts":[5120],"name":"IPaycrestStake","nameLocation":"203:14:20","nodeType":"ContractDefinition","nodes":[{"functionSelector":"4a223c36","id":5119,"implemented":false,"kind":"function","modifiers":[],"name":"rewardValidators","nameLocation":"238:16:20","nodeType":"FunctionDefinition","parameters":{"id":5115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5103,"mutability":"mutable","name":"orderId","nameLocation":"263:7:20","nodeType":"VariableDeclaration","scope":5119,"src":"255:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5102,"name":"bytes32","nodeType":"ElementaryTypeName","src":"255:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5105,"mutability":"mutable","name":"token","nameLocation":"280:5:20","nodeType":"VariableDeclaration","scope":5119,"src":"272:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5104,"name":"address","nodeType":"ElementaryTypeName","src":"272:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5107,"mutability":"mutable","name":"primaryValidator","nameLocation":"295:16:20","nodeType":"VariableDeclaration","scope":5119,"src":"287:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5106,"name":"address","nodeType":"ElementaryTypeName","src":"287:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5110,"mutability":"mutable","name":"secondaryValidators","nameLocation":"330:19:20","nodeType":"VariableDeclaration","scope":5119,"src":"313:36:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5108,"name":"address","nodeType":"ElementaryTypeName","src":"313:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5109,"nodeType":"ArrayTypeName","src":"313:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5112,"mutability":"mutable","name":"primaryValidatorsReward","nameLocation":"359:23:20","nodeType":"VariableDeclaration","scope":5119,"src":"351:31:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5111,"name":"uint256","nodeType":"ElementaryTypeName","src":"351:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5114,"mutability":"mutable","name":"secondaryValidatorsReward","nameLocation":"392:25:20","nodeType":"VariableDeclaration","scope":5119,"src":"384:33:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5113,"name":"uint256","nodeType":"ElementaryTypeName","src":"384:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"254:164:20"},"returnParameters":{"id":5118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5117,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5119,"src":"436:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5116,"name":"bool","nodeType":"ElementaryTypeName","src":"436:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"435:6:20"},"scope":5120,"src":"229:213:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5121,"src":"193:256:20","usedErrors":[]}],"src":"38:412:20"},"id":20},"contracts/interface/IPaycrestValidator.sol":{"ast":{"absolutePath":"contracts/interface/IPaycrestValidator.sol","exportedSymbols":{"IPaycrestValidator":[5142]},"id":5143,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":5122,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IPaycrestValidator","contractDependencies":[],"contractKind":"interface","documentation":{"id":5123,"nodeType":"StructuredDocumentation","src":"63:129:21","text":" @author Chef Photons, Vaultka Team serving high quality drinks; drink responsibly.\n Factory and global config params"},"fullyImplemented":false,"id":5142,"linearizedBaseContracts":[5142],"name":"IPaycrestValidator","nameLocation":"203:18:21","nodeType":"ContractDefinition","nodes":[{"functionSelector":"4a223c36","id":5141,"implemented":false,"kind":"function","modifiers":[],"name":"rewardValidators","nameLocation":"237:16:21","nodeType":"FunctionDefinition","parameters":{"id":5137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5125,"mutability":"mutable","name":"orderId","nameLocation":"262:7:21","nodeType":"VariableDeclaration","scope":5141,"src":"254:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"254:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5127,"mutability":"mutable","name":"token","nameLocation":"279:5:21","nodeType":"VariableDeclaration","scope":5141,"src":"271:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5126,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5129,"mutability":"mutable","name":"primaryValidator","nameLocation":"294:16:21","nodeType":"VariableDeclaration","scope":5141,"src":"286:24:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5128,"name":"address","nodeType":"ElementaryTypeName","src":"286:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5132,"mutability":"mutable","name":"secondaryValidators","nameLocation":"329:19:21","nodeType":"VariableDeclaration","scope":5141,"src":"312:36:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5130,"name":"address","nodeType":"ElementaryTypeName","src":"312:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5131,"nodeType":"ArrayTypeName","src":"312:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5134,"mutability":"mutable","name":"primaryValidatorsReward","nameLocation":"358:23:21","nodeType":"VariableDeclaration","scope":5141,"src":"350:31:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5133,"name":"uint256","nodeType":"ElementaryTypeName","src":"350:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5136,"mutability":"mutable","name":"secondaryValidatorsReward","nameLocation":"391:25:21","nodeType":"VariableDeclaration","scope":5141,"src":"383:33:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5135,"name":"uint256","nodeType":"ElementaryTypeName","src":"383:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"253:164:21"},"returnParameters":{"id":5140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5139,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5141,"src":"435:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5138,"name":"bool","nodeType":"ElementaryTypeName","src":"435:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"434:6:21"},"scope":5142,"src":"228:213:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5143,"src":"193:250:21","usedErrors":[]}],"src":"38:406:21"},"id":21},"contracts/mocks/MockUSDC.sol":{"ast":{"absolutePath":"contracts/mocks/MockUSDC.sol","exportedSymbols":{"ERC20":[3399],"MockUSDC":[5215]},"id":5216,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":5144,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:22"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":5146,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5216,"sourceUnit":3400,"src":"63:68:22","symbolAliases":[{"foreign":{"id":5145,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3399,"src":"71:5:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5148,"name":"ERC20","nameLocations":["182:5:22"],"nodeType":"IdentifierPath","referencedDeclaration":3399,"src":"182:5:22"},"id":5149,"nodeType":"InheritanceSpecifier","src":"182:5:22"}],"canonicalName":"MockUSDC","contractDependencies":[],"contractKind":"contract","documentation":{"id":5147,"nodeType":"StructuredDocumentation","src":"133:28:22","text":"@dev Mock mintable USDC"},"fullyImplemented":true,"id":5215,"linearizedBaseContracts":[5215,3399,3502,3477,3524],"name":"MockUSDC","nameLocation":"170:8:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":5156,"nodeType":"Block","src":"235:2:22","statements":[]},"id":5157,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"4d6f636b55445343","id":5152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"214:10:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_94e1f9c6f37f68c7fbe9a402bd5dbcd03f36019e7e48bd72249c8c505bfa86d6","typeString":"literal_string \"MockUDSC\""},"value":"MockUDSC"},{"hexValue":"4d55534443","id":5153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"226:7:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_0b881b1a06d818eb813952573bf9829bb21a81b032d939e3244337841a6fff45","typeString":"literal_string \"MUSDC\""},"value":"MUSDC"}],"id":5154,"kind":"baseConstructorSpecifier","modifierName":{"id":5151,"name":"ERC20","nameLocations":["208:5:22"],"nodeType":"IdentifierPath","referencedDeclaration":3399,"src":"208:5:22"},"nodeType":"ModifierInvocation","src":"208:26:22"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5150,"nodeType":"ParameterList","parameters":[],"src":"205:2:22"},"returnParameters":{"id":5155,"nodeType":"ParameterList","parameters":[],"src":"235:0:22"},"scope":5215,"src":"194:43:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2887],"body":{"id":5165,"nodeType":"Block","src":"308:25:22","statements":[{"expression":{"hexValue":"36","id":5163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"325:1:22","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"functionReturnParameters":5162,"id":5164,"nodeType":"Return","src":"318:8:22"}]},"functionSelector":"313ce567","id":5166,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"252:8:22","nodeType":"FunctionDefinition","overrides":{"id":5159,"nodeType":"OverrideSpecifier","overrides":[],"src":"283:8:22"},"parameters":{"id":5158,"nodeType":"ParameterList","parameters":[],"src":"260:2:22"},"returnParameters":{"id":5162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5166,"src":"301:5:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5160,"name":"uint8","nodeType":"ElementaryTypeName","src":"301:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"300:7:22"},"scope":5215,"src":"243:90:22","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":5177,"nodeType":"Block","src":"379:43:22","statements":[{"expression":{"arguments":[{"expression":{"id":5172,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"395:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"399:6:22","memberName":"sender","nodeType":"MemberAccess","src":"395:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5174,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5168,"src":"407:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5171,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"389:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"389:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5176,"nodeType":"ExpressionStatement","src":"389:26:22"}]},"functionSelector":"a0712d68","id":5178,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"348:4:22","nodeType":"FunctionDefinition","parameters":{"id":5169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5168,"mutability":"mutable","name":"_amount","nameLocation":"361:7:22","nodeType":"VariableDeclaration","scope":5178,"src":"353:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5167,"name":"uint256","nodeType":"ElementaryTypeName","src":"353:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"352:17:22"},"returnParameters":{"id":5170,"nodeType":"ParameterList","parameters":[],"src":"379:0:22"},"scope":5215,"src":"339:83:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5189,"nodeType":"Block","src":"468:43:22","statements":[{"expression":{"arguments":[{"expression":{"id":5184,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"484:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"488:6:22","memberName":"sender","nodeType":"MemberAccess","src":"484:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5186,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5180,"src":"496:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5183,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"478:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"478:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5188,"nodeType":"ExpressionStatement","src":"478:26:22"}]},"functionSelector":"42966c68","id":5190,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"437:4:22","nodeType":"FunctionDefinition","parameters":{"id":5181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5180,"mutability":"mutable","name":"_amount","nameLocation":"450:7:22","nodeType":"VariableDeclaration","scope":5190,"src":"442:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5179,"name":"uint256","nodeType":"ElementaryTypeName","src":"442:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"441:17:22"},"returnParameters":{"id":5182,"nodeType":"ParameterList","parameters":[],"src":"468:0:22"},"scope":5215,"src":"428:83:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5213,"nodeType":"Block","src":"545:160:22","statements":[{"assignments":[5194],"declarations":[{"constant":false,"id":5194,"mutability":"mutable","name":"_balanceOf","nameLocation":"563:10:22","nodeType":"VariableDeclaration","scope":5213,"src":"555:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5193,"name":"uint256","nodeType":"ElementaryTypeName","src":"555:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5199,"initialValue":{"arguments":[{"expression":{"id":5196,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"586:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"590:6:22","memberName":"sender","nodeType":"MemberAccess","src":"586:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5195,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"576:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":5198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"576:21:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"555:42:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5201,"name":"_balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5194,"src":"615:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"628:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"615:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6f636b555344433a204e6f7468696e6720746f206275726e","id":5204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"631:27:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98","typeString":"literal_string \"MockUSDC: Nothing to burn\""},"value":"MockUSDC: Nothing to burn"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98","typeString":"literal_string \"MockUSDC: Nothing to burn\""}],"id":5200,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"607:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"607:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5206,"nodeType":"ExpressionStatement","src":"607:52:22"},{"expression":{"arguments":[{"expression":{"id":5208,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"675:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"679:6:22","memberName":"sender","nodeType":"MemberAccess","src":"675:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5210,"name":"_balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5194,"src":"687:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5207,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"669:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"669:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5212,"nodeType":"ExpressionStatement","src":"669:29:22"}]},"functionSelector":"9975038c","id":5214,"implemented":true,"kind":"function","modifiers":[],"name":"burnAll","nameLocation":"526:7:22","nodeType":"FunctionDefinition","parameters":{"id":5191,"nodeType":"ParameterList","parameters":[],"src":"533:2:22"},"returnParameters":{"id":5192,"nodeType":"ParameterList","parameters":[],"src":"545:0:22"},"scope":5215,"src":"517:188:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5216,"src":"161:546:22","usedErrors":[]}],"src":"38:670:22"},"id":22}},"contracts":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1245,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ReentrancyGuardUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":314,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":383,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"__gap","offset":0,"slot":"2","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"SafeERC20Upgradeable":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220127eb4d243173cf9ac6ea39f737ccd926bf8210c3a138b2e7d70f40b43f8204564736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT PUSH31 0xB4D243173CF9AC6EA39F737CCD926BF8210C3A138B2E7D70F40B43F8204564 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"734:6366:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220127eb4d243173cf9ac6ea39f737ccd926bf8210c3a138b2e7d70f40b43f8204564736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT PUSH31 0xB4D243173CF9AC6EA39F737CCD926BF8210C3A138B2E7D70F40B43F8204564 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"734:6366:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20Upgradeable,bytes memory)":"infinite","forceApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20Upgradeable,address,uint256)":"infinite","safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df70283ff728a1a88debad8b56cd6b31b858a143aff601e8f42a16699317e70d64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF PUSH17 0x283FF728A1A88DEBAD8B56CD6B31B858A1 NUMBER 0xAF 0xF6 ADD 0xE8 DELEGATECALL 0x2A AND PUSH10 0x9317E70D64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df70283ff728a1a88debad8b56cd6b31b858a143aff601e8f42a16699317e70d64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF PUSH17 0x283FF728A1A88DEBAD8B56CD6B31B858A1 NUMBER 0xAF 0xF6 ADD 0xE8 DELEGATECALL 0x2A AND PUSH10 0x9317E70D64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1245,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fb710f8a96e0067535a9f765fa3f89f59b6e06ba7186e35593d35f029926fa64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xFB PUSH18 0xF8A96E0067535A9F765FA3F89F59B6E06BA PUSH18 0x86E35593D35F029926FA64736F6C63430008 SLT STOP CALLER ","sourceMap":"242:2603:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fb710f8a96e0067535a9f765fa3f89f59b6e06ba7186e35593d35f029926fa64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xFB PUSH18 0xF8A96E0067535A9F765FA3F89F59B6E06BA PUSH18 0x86E35593D35F029926FA64736F6C63430008 SLT STOP CALLER ","sourceMap":"242:2603:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220717bce4509ab3c6d09fb52c5b26660a25a99945b32e0484c654da9bebac1986064736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x7BCE4509AB3C6D09FB52C5B26660A25A9994 JUMPDEST ORIGIN 0xE0 BASEFEE 0x4C PUSH6 0x4DA9BEBAC198 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"380:8783:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220717bce4509ab3c6d09fb52c5b26660a25a99945b32e0484c654da9bebac1986064736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x7BCE4509AB3C6D09FB52C5B26660A25A9994 JUMPDEST ORIGIN 0xE0 BASEFEE 0x4C PUSH6 0x4DA9BEBAC198 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"380:8783:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b19238f22d888be15246afd45704547bf692f3a8d19f34db13095fb48eddd5264736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x19238F22D888BE15246AFD45 PUSH17 0x4547BF692F3A8D19F34DB13095FB48EDDD MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12593:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b19238f22d888be15246afd45704547bf692f3a8d19f34db13095fb48eddd5264736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x19238F22D888BE15246AFD45 PUSH17 0x4547BF692F3A8D19F34DB13095FB48EDDD MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12593:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e70ce3cff074bb9f2b399f4851e008094b94d7fe429bd3afbf9c6f170d3375ce64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC 0xE3 0xCF CREATE PUSH21 0xBB9F2B399F4851E008094B94D7FE429BD3AFBF9C6F OR 0xD CALLER PUSH22 0xCE64736F6C6343000812003300000000000000000000 ","sourceMap":"215:1058:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e70ce3cff074bb9f2b399f4851e008094b94d7fe429bd3afbf9c6f170d3375ce64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC 0xE3 0xCF CREATE PUSH21 0xBB9F2B399F4851E008094B94D7FE429BD3AFBF9C6F OR 0xD CALLER PUSH22 0xCE64736F6C6343000812003300000000000000000000 ","sourceMap":"215:1058:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2857":{"entryPoint":null,"id":2857,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":376,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":451,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":502,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":247,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":99,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":278,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":746,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":635,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1067,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":882,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1028,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":902,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1222,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":332,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":767,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":693,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1192,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":193,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":892,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1160,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":646,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":146,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":942,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":119,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":124,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":114,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":109,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":129,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":783,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1147,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":1000,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":796,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":952,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":995,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8574:23","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:23","statements":[{"nodeType":"YulAssignment","src":"57:19:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:23"},"nodeType":"YulFunctionCall","src":"67:9:23"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:23"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:23","type":""}],"src":"7:75:23"},{"body":{"nodeType":"YulBlock","src":"177:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:23"},"nodeType":"YulFunctionCall","src":"187:12:23"},"nodeType":"YulExpressionStatement","src":"187:12:23"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:23"},{"body":{"nodeType":"YulBlock","src":"300:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:23"},"nodeType":"YulFunctionCall","src":"310:12:23"},"nodeType":"YulExpressionStatement","src":"310:12:23"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:23"},{"body":{"nodeType":"YulBlock","src":"423:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:23"},"nodeType":"YulFunctionCall","src":"433:12:23"},"nodeType":"YulExpressionStatement","src":"433:12:23"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:23"},{"body":{"nodeType":"YulBlock","src":"546:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:23"},"nodeType":"YulFunctionCall","src":"556:12:23"},"nodeType":"YulExpressionStatement","src":"556:12:23"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:23"},{"body":{"nodeType":"YulBlock","src":"628:54:23","statements":[{"nodeType":"YulAssignment","src":"638:38:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:23"},"nodeType":"YulFunctionCall","src":"652:14:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:23"},"nodeType":"YulFunctionCall","src":"668:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:23"},"nodeType":"YulFunctionCall","src":"648:28:23"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:23"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:23","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:23","type":""}],"src":"580:102:23"},{"body":{"nodeType":"YulBlock","src":"716:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:23"},"nodeType":"YulFunctionCall","src":"726:88:23"},"nodeType":"YulExpressionStatement","src":"726:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:23"},"nodeType":"YulFunctionCall","src":"823:15:23"},"nodeType":"YulExpressionStatement","src":"823:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:23"},"nodeType":"YulFunctionCall","src":"847:15:23"},"nodeType":"YulExpressionStatement","src":"847:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:23"},{"body":{"nodeType":"YulBlock","src":"917:238:23","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:23","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:23"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:23"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:23"},"nodeType":"YulFunctionCall","src":"957:27:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:23"},"nodeType":"YulFunctionCall","src":"945:40:23"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:23"},"nodeType":"YulFunctionCall","src":"1098:18:23"},"nodeType":"YulExpressionStatement","src":"1098:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:23"},"nodeType":"YulFunctionCall","src":"1036:34:23"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:23"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:23"},"nodeType":"YulFunctionCall","src":"1072:22:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:23"},"nodeType":"YulFunctionCall","src":"1033:62:23"},"nodeType":"YulIf","src":"1030:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:23","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:23"},"nodeType":"YulFunctionCall","src":"1127:22:23"},"nodeType":"YulExpressionStatement","src":"1127:22:23"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:23","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:23","type":""}],"src":"874:281:23"},{"body":{"nodeType":"YulBlock","src":"1202:88:23","statements":[{"nodeType":"YulAssignment","src":"1212:30:23","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:23"},"nodeType":"YulFunctionCall","src":"1222:20:23"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:23"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:23"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:23"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:23"},"nodeType":"YulFunctionCall","src":"1251:33:23"},"nodeType":"YulExpressionStatement","src":"1251:33:23"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:23","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:23","type":""}],"src":"1161:129:23"},{"body":{"nodeType":"YulBlock","src":"1363:241:23","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:23"},"nodeType":"YulFunctionCall","src":"1470:18:23"},"nodeType":"YulExpressionStatement","src":"1470:18:23"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:23"},"nodeType":"YulFunctionCall","src":"1437:30:23"},"nodeType":"YulIf","src":"1434:56:23"},{"nodeType":"YulAssignment","src":"1500:37:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:23"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:23"},"nodeType":"YulFunctionCall","src":"1508:29:23"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:23"}]},{"nodeType":"YulAssignment","src":"1574:23:23","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:23"},"nodeType":"YulFunctionCall","src":"1582:15:23"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:23"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:23","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:23","type":""}],"src":"1296:308:23"},{"body":{"nodeType":"YulBlock","src":"1672:184:23","statements":[{"nodeType":"YulVariableDeclaration","src":"1682:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"1691:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1686:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1751:63:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1776:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"1781:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:23"},"nodeType":"YulFunctionCall","src":"1772:11:23"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1795:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"1800:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1791:3:23"},"nodeType":"YulFunctionCall","src":"1791:11:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1785:5:23"},"nodeType":"YulFunctionCall","src":"1785:18:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1765:6:23"},"nodeType":"YulFunctionCall","src":"1765:39:23"},"nodeType":"YulExpressionStatement","src":"1765:39:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"1715:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1709:2:23"},"nodeType":"YulFunctionCall","src":"1709:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1723:19:23","statements":[{"nodeType":"YulAssignment","src":"1725:15:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1734:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"1737:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1730:3:23"},"nodeType":"YulFunctionCall","src":"1730:10:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1725:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"1705:3:23","statements":[]},"src":"1701:113:23"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1834:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"1839:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1830:3:23"},"nodeType":"YulFunctionCall","src":"1830:16:23"},{"kind":"number","nodeType":"YulLiteral","src":"1848:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1823:6:23"},"nodeType":"YulFunctionCall","src":"1823:27:23"},"nodeType":"YulExpressionStatement","src":"1823:27:23"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1654:3:23","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1659:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"1664:6:23","type":""}],"src":"1610:246:23"},{"body":{"nodeType":"YulBlock","src":"1957:339:23","statements":[{"nodeType":"YulAssignment","src":"1967:75:23","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2034:6:23"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1992:41:23"},"nodeType":"YulFunctionCall","src":"1992:49:23"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1976:15:23"},"nodeType":"YulFunctionCall","src":"1976:66:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1967:5:23"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2058:5:23"},{"name":"length","nodeType":"YulIdentifier","src":"2065:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2051:6:23"},"nodeType":"YulFunctionCall","src":"2051:21:23"},"nodeType":"YulExpressionStatement","src":"2051:21:23"},{"nodeType":"YulVariableDeclaration","src":"2081:27:23","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2096:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"2103:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2092:3:23"},"nodeType":"YulFunctionCall","src":"2092:16:23"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2085:3:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"2146:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2148:77:23"},"nodeType":"YulFunctionCall","src":"2148:79:23"},"nodeType":"YulExpressionStatement","src":"2148:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2127:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"2132:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2123:3:23"},"nodeType":"YulFunctionCall","src":"2123:16:23"},{"name":"end","nodeType":"YulIdentifier","src":"2141:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2120:2:23"},"nodeType":"YulFunctionCall","src":"2120:25:23"},"nodeType":"YulIf","src":"2117:112:23"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2273:3:23"},{"name":"dst","nodeType":"YulIdentifier","src":"2278:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"2283:6:23"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2238:34:23"},"nodeType":"YulFunctionCall","src":"2238:52:23"},"nodeType":"YulExpressionStatement","src":"2238:52:23"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1930:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"1935:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"1943:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1951:5:23","type":""}],"src":"1862:434:23"},{"body":{"nodeType":"YulBlock","src":"2389:282:23","statements":[{"body":{"nodeType":"YulBlock","src":"2438:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2440:77:23"},"nodeType":"YulFunctionCall","src":"2440:79:23"},"nodeType":"YulExpressionStatement","src":"2440:79:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2417:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2425:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2413:3:23"},"nodeType":"YulFunctionCall","src":"2413:17:23"},{"name":"end","nodeType":"YulIdentifier","src":"2432:3:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2409:3:23"},"nodeType":"YulFunctionCall","src":"2409:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2402:6:23"},"nodeType":"YulFunctionCall","src":"2402:35:23"},"nodeType":"YulIf","src":"2399:122:23"},{"nodeType":"YulVariableDeclaration","src":"2530:27:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2550:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2544:5:23"},"nodeType":"YulFunctionCall","src":"2544:13:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2534:6:23","type":""}]},{"nodeType":"YulAssignment","src":"2566:99:23","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2638:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2646:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2634:3:23"},"nodeType":"YulFunctionCall","src":"2634:17:23"},{"name":"length","nodeType":"YulIdentifier","src":"2653:6:23"},{"name":"end","nodeType":"YulIdentifier","src":"2661:3:23"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2575:58:23"},"nodeType":"YulFunctionCall","src":"2575:90:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2566:5:23"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2367:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"2375:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2383:5:23","type":""}],"src":"2316:355:23"},{"body":{"nodeType":"YulBlock","src":"2791:739:23","statements":[{"body":{"nodeType":"YulBlock","src":"2837:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2839:77:23"},"nodeType":"YulFunctionCall","src":"2839:79:23"},"nodeType":"YulExpressionStatement","src":"2839:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2812:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2821:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2808:3:23"},"nodeType":"YulFunctionCall","src":"2808:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"2833:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2804:3:23"},"nodeType":"YulFunctionCall","src":"2804:32:23"},"nodeType":"YulIf","src":"2801:119:23"},{"nodeType":"YulBlock","src":"2930:291:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2945:38:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2969:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2980:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2965:3:23"},"nodeType":"YulFunctionCall","src":"2965:17:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2959:5:23"},"nodeType":"YulFunctionCall","src":"2959:24:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2949:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3030:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3032:77:23"},"nodeType":"YulFunctionCall","src":"3032:79:23"},"nodeType":"YulExpressionStatement","src":"3032:79:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3002:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3010:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2999:2:23"},"nodeType":"YulFunctionCall","src":"2999:30:23"},"nodeType":"YulIf","src":"2996:117:23"},{"nodeType":"YulAssignment","src":"3127:84:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3183:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"3194:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3179:3:23"},"nodeType":"YulFunctionCall","src":"3179:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3203:7:23"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3137:41:23"},"nodeType":"YulFunctionCall","src":"3137:74:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3127:6:23"}]}]},{"nodeType":"YulBlock","src":"3231:292:23","statements":[{"nodeType":"YulVariableDeclaration","src":"3246:39:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3270:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3281:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3266:3:23"},"nodeType":"YulFunctionCall","src":"3266:18:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3260:5:23"},"nodeType":"YulFunctionCall","src":"3260:25:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3250:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3332:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3334:77:23"},"nodeType":"YulFunctionCall","src":"3334:79:23"},"nodeType":"YulExpressionStatement","src":"3334:79:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3304:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3312:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3301:2:23"},"nodeType":"YulFunctionCall","src":"3301:30:23"},"nodeType":"YulIf","src":"3298:117:23"},{"nodeType":"YulAssignment","src":"3429:84:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3485:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"3496:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3481:3:23"},"nodeType":"YulFunctionCall","src":"3481:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3505:7:23"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3439:41:23"},"nodeType":"YulFunctionCall","src":"3439:74:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3429:6:23"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2753:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2764:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2776:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2784:6:23","type":""}],"src":"2677:853:23"},{"body":{"nodeType":"YulBlock","src":"3595:40:23","statements":[{"nodeType":"YulAssignment","src":"3606:22:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3622:5:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3616:5:23"},"nodeType":"YulFunctionCall","src":"3616:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3606:6:23"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3588:6:23","type":""}],"src":"3536:99:23"},{"body":{"nodeType":"YulBlock","src":"3669:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3686:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3689:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3679:6:23"},"nodeType":"YulFunctionCall","src":"3679:88:23"},"nodeType":"YulExpressionStatement","src":"3679:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3783:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3786:4:23","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3776:6:23"},"nodeType":"YulFunctionCall","src":"3776:15:23"},"nodeType":"YulExpressionStatement","src":"3776:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3807:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3810:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3800:6:23"},"nodeType":"YulFunctionCall","src":"3800:15:23"},"nodeType":"YulExpressionStatement","src":"3800:15:23"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3641:180:23"},{"body":{"nodeType":"YulBlock","src":"3878:269:23","statements":[{"nodeType":"YulAssignment","src":"3888:22:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3902:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"3908:1:23","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3898:3:23"},"nodeType":"YulFunctionCall","src":"3898:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3888:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"3919:38:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3949:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"3955:1:23","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3945:3:23"},"nodeType":"YulFunctionCall","src":"3945:12:23"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3923:18:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3996:51:23","statements":[{"nodeType":"YulAssignment","src":"4010:27:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4024:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4032:4:23","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4020:3:23"},"nodeType":"YulFunctionCall","src":"4020:17:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4010:6:23"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3976:18:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3969:6:23"},"nodeType":"YulFunctionCall","src":"3969:26:23"},"nodeType":"YulIf","src":"3966:81:23"},{"body":{"nodeType":"YulBlock","src":"4099:42:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4113:16:23"},"nodeType":"YulFunctionCall","src":"4113:18:23"},"nodeType":"YulExpressionStatement","src":"4113:18:23"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4063:18:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4086:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4094:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4083:2:23"},"nodeType":"YulFunctionCall","src":"4083:14:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4060:2:23"},"nodeType":"YulFunctionCall","src":"4060:38:23"},"nodeType":"YulIf","src":"4057:84:23"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3862:4:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3871:6:23","type":""}],"src":"3827:320:23"},{"body":{"nodeType":"YulBlock","src":"4207:87:23","statements":[{"nodeType":"YulAssignment","src":"4217:11:23","value":{"name":"ptr","nodeType":"YulIdentifier","src":"4225:3:23"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4217:4:23"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4245:1:23","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"4248:3:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4238:6:23"},"nodeType":"YulFunctionCall","src":"4238:14:23"},"nodeType":"YulExpressionStatement","src":"4238:14:23"},{"nodeType":"YulAssignment","src":"4261:26:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4279:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4282:4:23","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"4269:9:23"},"nodeType":"YulFunctionCall","src":"4269:18:23"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4261:4:23"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"4194:3:23","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"4202:4:23","type":""}],"src":"4153:141:23"},{"body":{"nodeType":"YulBlock","src":"4344:49:23","statements":[{"nodeType":"YulAssignment","src":"4354:33:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4372:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"4379:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4368:3:23"},"nodeType":"YulFunctionCall","src":"4368:14:23"},{"kind":"number","nodeType":"YulLiteral","src":"4384:2:23","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4364:3:23"},"nodeType":"YulFunctionCall","src":"4364:23:23"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4354:6:23"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4327:5:23","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4337:6:23","type":""}],"src":"4300:93:23"},{"body":{"nodeType":"YulBlock","src":"4452:54:23","statements":[{"nodeType":"YulAssignment","src":"4462:37:23","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"4487:4:23"},{"name":"value","nodeType":"YulIdentifier","src":"4493:5:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4483:3:23"},"nodeType":"YulFunctionCall","src":"4483:16:23"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"4462:8:23"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"4427:4:23","type":""},{"name":"value","nodeType":"YulTypedName","src":"4433:5:23","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"4443:8:23","type":""}],"src":"4399:107:23"},{"body":{"nodeType":"YulBlock","src":"4588:317:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4598:35:23","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"4619:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"4631:1:23","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4615:3:23"},"nodeType":"YulFunctionCall","src":"4615:18:23"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"4602:9:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4642:109:23","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"4673:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4684:66:23","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"4654:18:23"},"nodeType":"YulFunctionCall","src":"4654:97:23"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"4646:4:23","type":""}]},{"nodeType":"YulAssignment","src":"4760:51:23","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"4791:9:23"},{"name":"toInsert","nodeType":"YulIdentifier","src":"4802:8:23"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"4772:18:23"},"nodeType":"YulFunctionCall","src":"4772:39:23"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"4760:8:23"}]},{"nodeType":"YulAssignment","src":"4820:30:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4833:5:23"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"4844:4:23"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4840:3:23"},"nodeType":"YulFunctionCall","src":"4840:9:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4829:3:23"},"nodeType":"YulFunctionCall","src":"4829:21:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4820:5:23"}]},{"nodeType":"YulAssignment","src":"4859:40:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4872:5:23"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"4883:8:23"},{"name":"mask","nodeType":"YulIdentifier","src":"4893:4:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4879:3:23"},"nodeType":"YulFunctionCall","src":"4879:19:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4869:2:23"},"nodeType":"YulFunctionCall","src":"4869:30:23"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4859:6:23"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4549:5:23","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"4556:10:23","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"4568:8:23","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4581:6:23","type":""}],"src":"4512:393:23"},{"body":{"nodeType":"YulBlock","src":"4956:32:23","statements":[{"nodeType":"YulAssignment","src":"4966:16:23","value":{"name":"value","nodeType":"YulIdentifier","src":"4977:5:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4966:7:23"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4938:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4948:7:23","type":""}],"src":"4911:77:23"},{"body":{"nodeType":"YulBlock","src":"5026:28:23","statements":[{"nodeType":"YulAssignment","src":"5036:12:23","value":{"name":"value","nodeType":"YulIdentifier","src":"5043:5:23"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5036:3:23"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5012:5:23","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5022:3:23","type":""}],"src":"4994:60:23"},{"body":{"nodeType":"YulBlock","src":"5120:82:23","statements":[{"nodeType":"YulAssignment","src":"5130:66:23","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5188:5:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5170:17:23"},"nodeType":"YulFunctionCall","src":"5170:24:23"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"5161:8:23"},"nodeType":"YulFunctionCall","src":"5161:34:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5143:17:23"},"nodeType":"YulFunctionCall","src":"5143:53:23"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"5130:9:23"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5100:5:23","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"5110:9:23","type":""}],"src":"5060:142:23"},{"body":{"nodeType":"YulBlock","src":"5255:28:23","statements":[{"nodeType":"YulAssignment","src":"5265:12:23","value":{"name":"value","nodeType":"YulIdentifier","src":"5272:5:23"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5265:3:23"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5241:5:23","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5251:3:23","type":""}],"src":"5208:75:23"},{"body":{"nodeType":"YulBlock","src":"5365:193:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5375:63:23","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"5430:7:23"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"5399:30:23"},"nodeType":"YulFunctionCall","src":"5399:39:23"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"5379:16:23","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5454:4:23"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5494:4:23"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"5488:5:23"},"nodeType":"YulFunctionCall","src":"5488:11:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5501:6:23"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"5533:16:23"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"5509:23:23"},"nodeType":"YulFunctionCall","src":"5509:41:23"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"5460:27:23"},"nodeType":"YulFunctionCall","src":"5460:91:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5447:6:23"},"nodeType":"YulFunctionCall","src":"5447:105:23"},"nodeType":"YulExpressionStatement","src":"5447:105:23"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5342:4:23","type":""},{"name":"offset","nodeType":"YulTypedName","src":"5348:6:23","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"5356:7:23","type":""}],"src":"5289:269:23"},{"body":{"nodeType":"YulBlock","src":"5613:24:23","statements":[{"nodeType":"YulAssignment","src":"5623:8:23","value":{"kind":"number","nodeType":"YulLiteral","src":"5630:1:23","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5623:3:23"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5609:3:23","type":""}],"src":"5564:73:23"},{"body":{"nodeType":"YulBlock","src":"5696:136:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5706:46:23","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"5720:30:23"},"nodeType":"YulFunctionCall","src":"5720:32:23"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"5710:6:23","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5805:4:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5811:6:23"},{"name":"zero_0","nodeType":"YulIdentifier","src":"5819:6:23"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"5761:43:23"},"nodeType":"YulFunctionCall","src":"5761:65:23"},"nodeType":"YulExpressionStatement","src":"5761:65:23"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5682:4:23","type":""},{"name":"offset","nodeType":"YulTypedName","src":"5688:6:23","type":""}],"src":"5643:189:23"},{"body":{"nodeType":"YulBlock","src":"5888:136:23","statements":[{"body":{"nodeType":"YulBlock","src":"5955:63:23","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5999:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"6006:1:23","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"5969:29:23"},"nodeType":"YulFunctionCall","src":"5969:39:23"},"nodeType":"YulExpressionStatement","src":"5969:39:23"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5908:5:23"},{"name":"end","nodeType":"YulIdentifier","src":"5915:3:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5905:2:23"},"nodeType":"YulFunctionCall","src":"5905:14:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5920:26:23","statements":[{"nodeType":"YulAssignment","src":"5922:22:23","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5935:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"5942:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5931:3:23"},"nodeType":"YulFunctionCall","src":"5931:13:23"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"5922:5:23"}]}]},"pre":{"nodeType":"YulBlock","src":"5902:2:23","statements":[]},"src":"5898:120:23"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"5876:5:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"5883:3:23","type":""}],"src":"5838:186:23"},{"body":{"nodeType":"YulBlock","src":"6109:464:23","statements":[{"body":{"nodeType":"YulBlock","src":"6135:431:23","statements":[{"nodeType":"YulVariableDeclaration","src":"6149:54:23","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6197:5:23"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"6165:31:23"},"nodeType":"YulFunctionCall","src":"6165:38:23"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"6153:8:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6216:63:23","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"6239:8:23"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6267:10:23"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"6249:17:23"},"nodeType":"YulFunctionCall","src":"6249:29:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6235:3:23"},"nodeType":"YulFunctionCall","src":"6235:44:23"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"6220:11:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"6436:27:23","statements":[{"nodeType":"YulAssignment","src":"6438:23:23","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"6453:8:23"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6438:11:23"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6420:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"6432:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6417:2:23"},"nodeType":"YulFunctionCall","src":"6417:18:23"},"nodeType":"YulIf","src":"6414:49:23"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6505:11:23"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"6522:8:23"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6550:3:23"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"6532:17:23"},"nodeType":"YulFunctionCall","src":"6532:22:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6518:3:23"},"nodeType":"YulFunctionCall","src":"6518:37:23"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"6476:28:23"},"nodeType":"YulFunctionCall","src":"6476:80:23"},"nodeType":"YulExpressionStatement","src":"6476:80:23"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6126:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"6131:2:23","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6123:2:23"},"nodeType":"YulFunctionCall","src":"6123:11:23"},"nodeType":"YulIf","src":"6120:446:23"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"6085:5:23","type":""},{"name":"len","nodeType":"YulTypedName","src":"6092:3:23","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"6097:10:23","type":""}],"src":"6030:543:23"},{"body":{"nodeType":"YulBlock","src":"6642:54:23","statements":[{"nodeType":"YulAssignment","src":"6652:37:23","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"6677:4:23"},{"name":"value","nodeType":"YulIdentifier","src":"6683:5:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6673:3:23"},"nodeType":"YulFunctionCall","src":"6673:16:23"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"6652:8:23"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"6617:4:23","type":""},{"name":"value","nodeType":"YulTypedName","src":"6623:5:23","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"6633:8:23","type":""}],"src":"6579:117:23"},{"body":{"nodeType":"YulBlock","src":"6753:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"6763:68:23","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6812:1:23","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"6815:5:23"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6808:3:23"},"nodeType":"YulFunctionCall","src":"6808:13:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6827:1:23","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6823:3:23"},"nodeType":"YulFunctionCall","src":"6823:6:23"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"6779:28:23"},"nodeType":"YulFunctionCall","src":"6779:51:23"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6775:3:23"},"nodeType":"YulFunctionCall","src":"6775:56:23"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"6767:4:23","type":""}]},{"nodeType":"YulAssignment","src":"6840:25:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6854:4:23"},{"name":"mask","nodeType":"YulIdentifier","src":"6860:4:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6850:3:23"},"nodeType":"YulFunctionCall","src":"6850:15:23"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"6840:6:23"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6730:4:23","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"6736:5:23","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"6746:6:23","type":""}],"src":"6702:169:23"},{"body":{"nodeType":"YulBlock","src":"6957:214:23","statements":[{"nodeType":"YulAssignment","src":"7090:37:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7117:4:23"},{"name":"len","nodeType":"YulIdentifier","src":"7123:3:23"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"7098:18:23"},"nodeType":"YulFunctionCall","src":"7098:29:23"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"7090:4:23"}]},{"nodeType":"YulAssignment","src":"7136:29:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7147:4:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7157:1:23","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"7160:3:23"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7153:3:23"},"nodeType":"YulFunctionCall","src":"7153:11:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7144:2:23"},"nodeType":"YulFunctionCall","src":"7144:21:23"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"7136:4:23"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6938:4:23","type":""},{"name":"len","nodeType":"YulTypedName","src":"6944:3:23","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"6952:4:23","type":""}],"src":"6876:295:23"},{"body":{"nodeType":"YulBlock","src":"7268:1303:23","statements":[{"nodeType":"YulVariableDeclaration","src":"7279:51:23","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7326:3:23"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7293:32:23"},"nodeType":"YulFunctionCall","src":"7293:37:23"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"7283:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"7415:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7417:16:23"},"nodeType":"YulFunctionCall","src":"7417:18:23"},"nodeType":"YulExpressionStatement","src":"7417:18:23"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7387:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"7395:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7384:2:23"},"nodeType":"YulFunctionCall","src":"7384:30:23"},"nodeType":"YulIf","src":"7381:56:23"},{"nodeType":"YulVariableDeclaration","src":"7447:52:23","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7493:4:23"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"7487:5:23"},"nodeType":"YulFunctionCall","src":"7487:11:23"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"7461:25:23"},"nodeType":"YulFunctionCall","src":"7461:38:23"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"7451:6:23","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7592:4:23"},{"name":"oldLen","nodeType":"YulIdentifier","src":"7598:6:23"},{"name":"newLen","nodeType":"YulIdentifier","src":"7606:6:23"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"7546:45:23"},"nodeType":"YulFunctionCall","src":"7546:67:23"},"nodeType":"YulExpressionStatement","src":"7546:67:23"},{"nodeType":"YulVariableDeclaration","src":"7623:18:23","value":{"kind":"number","nodeType":"YulLiteral","src":"7640:1:23","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"7627:9:23","type":""}]},{"nodeType":"YulAssignment","src":"7651:17:23","value":{"kind":"number","nodeType":"YulLiteral","src":"7664:4:23","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"7651:9:23"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"7715:611:23","statements":[{"nodeType":"YulVariableDeclaration","src":"7729:37:23","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7748:6:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7760:4:23","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7756:3:23"},"nodeType":"YulFunctionCall","src":"7756:9:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7744:3:23"},"nodeType":"YulFunctionCall","src":"7744:22:23"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"7733:7:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7780:51:23","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7826:4:23"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"7794:31:23"},"nodeType":"YulFunctionCall","src":"7794:37:23"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"7784:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7844:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"7853:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7848:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"7912:163:23","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7937:6:23"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7955:3:23"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"7960:9:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7951:3:23"},"nodeType":"YulFunctionCall","src":"7951:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7945:5:23"},"nodeType":"YulFunctionCall","src":"7945:26:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7930:6:23"},"nodeType":"YulFunctionCall","src":"7930:42:23"},"nodeType":"YulExpressionStatement","src":"7930:42:23"},{"nodeType":"YulAssignment","src":"7989:24:23","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8003:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"8011:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7999:3:23"},"nodeType":"YulFunctionCall","src":"7999:14:23"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7989:6:23"}]},{"nodeType":"YulAssignment","src":"8030:31:23","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8047:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8058:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8043:3:23"},"nodeType":"YulFunctionCall","src":"8043:18:23"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8030:9:23"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7878:1:23"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"7881:7:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7875:2:23"},"nodeType":"YulFunctionCall","src":"7875:14:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7890:21:23","statements":[{"nodeType":"YulAssignment","src":"7892:17:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7901:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"7904:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7897:3:23"},"nodeType":"YulFunctionCall","src":"7897:12:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7892:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"7871:3:23","statements":[]},"src":"7867:208:23"},{"body":{"nodeType":"YulBlock","src":"8111:156:23","statements":[{"nodeType":"YulVariableDeclaration","src":"8129:43:23","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8156:3:23"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8161:9:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8152:3:23"},"nodeType":"YulFunctionCall","src":"8152:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8146:5:23"},"nodeType":"YulFunctionCall","src":"8146:26:23"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"8133:9:23","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8196:6:23"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"8223:9:23"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8238:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"8246:4:23","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8234:3:23"},"nodeType":"YulFunctionCall","src":"8234:17:23"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"8204:18:23"},"nodeType":"YulFunctionCall","src":"8204:48:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8189:6:23"},"nodeType":"YulFunctionCall","src":"8189:64:23"},"nodeType":"YulExpressionStatement","src":"8189:64:23"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"8094:7:23"},{"name":"newLen","nodeType":"YulIdentifier","src":"8103:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8091:2:23"},"nodeType":"YulFunctionCall","src":"8091:19:23"},"nodeType":"YulIf","src":"8088:179:23"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8287:4:23"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8301:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"8309:1:23","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8297:3:23"},"nodeType":"YulFunctionCall","src":"8297:14:23"},{"kind":"number","nodeType":"YulLiteral","src":"8313:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8293:3:23"},"nodeType":"YulFunctionCall","src":"8293:22:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8280:6:23"},"nodeType":"YulFunctionCall","src":"8280:36:23"},"nodeType":"YulExpressionStatement","src":"8280:36:23"}]},"nodeType":"YulCase","src":"7708:618:23","value":{"kind":"number","nodeType":"YulLiteral","src":"7713:1:23","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"8343:222:23","statements":[{"nodeType":"YulVariableDeclaration","src":"8357:14:23","value":{"kind":"number","nodeType":"YulLiteral","src":"8370:1:23","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8361:5:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"8394:67:23","statements":[{"nodeType":"YulAssignment","src":"8412:35:23","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8431:3:23"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8436:9:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8427:3:23"},"nodeType":"YulFunctionCall","src":"8427:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8421:5:23"},"nodeType":"YulFunctionCall","src":"8421:26:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8412:5:23"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"8387:6:23"},"nodeType":"YulIf","src":"8384:77:23"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8481:4:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8540:5:23"},{"name":"newLen","nodeType":"YulIdentifier","src":"8547:6:23"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"8487:52:23"},"nodeType":"YulFunctionCall","src":"8487:67:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8474:6:23"},"nodeType":"YulFunctionCall","src":"8474:81:23"},"nodeType":"YulExpressionStatement","src":"8474:81:23"}]},"nodeType":"YulCase","src":"8335:230:23","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7688:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"7696:2:23","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7685:2:23"},"nodeType":"YulFunctionCall","src":"7685:14:23"},"nodeType":"YulSwitch","src":"7678:887:23"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"7257:4:23","type":""},{"name":"src","nodeType":"YulTypedName","src":"7263:3:23","type":""}],"src":"7176:1395:23"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":23,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620017ec380380620017ec8339818101604052810190620000379190620001f6565b8160039081620000489190620004c6565b5080600490816200005a9190620004c6565b505050620005ad565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000cc8262000081565b810181811067ffffffffffffffff82111715620000ee57620000ed62000092565b5b80604052505050565b60006200010362000063565b9050620001118282620000c1565b919050565b600067ffffffffffffffff82111562000134576200013362000092565b5b6200013f8262000081565b9050602081019050919050565b60005b838110156200016c5780820151818401526020810190506200014f565b60008484015250505050565b60006200018f620001898462000116565b620000f7565b905082815260208101848484011115620001ae57620001ad6200007c565b5b620001bb8482856200014c565b509392505050565b600082601f830112620001db57620001da62000077565b5b8151620001ed84826020860162000178565b91505092915050565b6000806040838503121562000210576200020f6200006d565b5b600083015167ffffffffffffffff81111562000231576200023062000072565b5b6200023f85828601620001c3565b925050602083015167ffffffffffffffff81111562000263576200026262000072565b5b6200027185828601620001c3565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002ce57607f821691505b602082108103620002e457620002e362000286565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200034e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200030f565b6200035a86836200030f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003a7620003a16200039b8462000372565b6200037c565b62000372565b9050919050565b6000819050919050565b620003c38362000386565b620003db620003d282620003ae565b8484546200031c565b825550505050565b600090565b620003f2620003e3565b620003ff818484620003b8565b505050565b5b8181101562000427576200041b600082620003e8565b60018101905062000405565b5050565b601f82111562000476576200044081620002ea565b6200044b84620002ff565b810160208510156200045b578190505b620004736200046a85620002ff565b83018262000404565b50505b505050565b600082821c905092915050565b60006200049b600019846008026200047b565b1980831691505092915050565b6000620004b6838362000488565b9150826002028217905092915050565b620004d1826200027b565b67ffffffffffffffff811115620004ed57620004ec62000092565b5b620004f98254620002b5565b620005068282856200042b565b600060209050601f8311600181146200053e576000841562000529578287015190505b620005358582620004a8565b865550620005a5565b601f1984166200054e86620002ea565b60005b82811015620005785784890151825560018201915060208501945060208101905062000551565b8683101562000598578489015162000594601f89168262000488565b8355505b6001600288020188555050505b505050505050565b61122f80620005bd6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b0c565b60405180910390f35b6100e660048036038101906100e19190610bc7565b610308565b6040516100f39190610c22565b60405180910390f35b61010461032b565b6040516101119190610c4c565b60405180910390f35b610134600480360381019061012f9190610c67565b610335565b6040516101419190610c22565b60405180910390f35b610152610364565b60405161015f9190610cd6565b60405180910390f35b610182600480360381019061017d9190610bc7565b61036d565b60405161018f9190610c22565b60405180910390f35b6101b260048036038101906101ad9190610cf1565b6103a4565b6040516101bf9190610c4c565b60405180910390f35b6101d06103ec565b6040516101dd9190610b0c565b60405180910390f35b61020060048036038101906101fb9190610bc7565b61047e565b60405161020d9190610c22565b60405180910390f35b610230600480360381019061022b9190610bc7565b6104f5565b60405161023d9190610c22565b60405180910390f35b610260600480360381019061025b9190610d1e565b610518565b60405161026d9190610c4c565b60405180910390f35b60606003805461028590610d8d565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d8d565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b60008061031361059f565b90506103208185856105a7565b600191505092915050565b6000600254905090565b60008061034061059f565b905061034d858285610770565b6103588585856107fc565b60019150509392505050565b60006012905090565b60008061037861059f565b905061039981858561038a8589610518565b6103949190610ded565b6105a7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103fb90610d8d565b80601f016020809104026020016040519081016040528092919081815260200182805461042790610d8d565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b60008061048961059f565b905060006104978286610518565b9050838110156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610e93565b60405180910390fd5b6104e982868684036105a7565b60019250505092915050565b60008061050061059f565b905061050d8185856107fc565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610f25565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067c90610fb7565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107639190610c4c565b60405180910390a3505050565b600061077c8484610518565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f657818110156107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90611023565b60405180910390fd5b6107f584848484036105a7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610862906110b5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190611147565b60405180910390fd5b6108e5838383610a72565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610962906111d9565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a599190610c4c565b60405180910390a3610a6c848484610a77565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ab6578082015181840152602081019050610a9b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ade82610a7c565b610ae88185610a87565b9350610af8818560208601610a98565b610b0181610ac2565b840191505092915050565b60006020820190508181036000830152610b268184610ad3565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5e82610b33565b9050919050565b610b6e81610b53565b8114610b7957600080fd5b50565b600081359050610b8b81610b65565b92915050565b6000819050919050565b610ba481610b91565b8114610baf57600080fd5b50565b600081359050610bc181610b9b565b92915050565b60008060408385031215610bde57610bdd610b2e565b5b6000610bec85828601610b7c565b9250506020610bfd85828601610bb2565b9150509250929050565b60008115159050919050565b610c1c81610c07565b82525050565b6000602082019050610c376000830184610c13565b92915050565b610c4681610b91565b82525050565b6000602082019050610c616000830184610c3d565b92915050565b600080600060608486031215610c8057610c7f610b2e565b5b6000610c8e86828701610b7c565b9350506020610c9f86828701610b7c565b9250506040610cb086828701610bb2565b9150509250925092565b600060ff82169050919050565b610cd081610cba565b82525050565b6000602082019050610ceb6000830184610cc7565b92915050565b600060208284031215610d0757610d06610b2e565b5b6000610d1584828501610b7c565b91505092915050565b60008060408385031215610d3557610d34610b2e565b5b6000610d4385828601610b7c565b9250506020610d5485828601610b7c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610da557607f821691505b602082108103610db857610db7610d5e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df882610b91565b9150610e0383610b91565b9250828201905080821115610e1b57610e1a610dbe565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e7d602583610a87565b9150610e8882610e21565b604082019050919050565b60006020820190508181036000830152610eac81610e70565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f0f602483610a87565b9150610f1a82610eb3565b604082019050919050565b60006020820190508181036000830152610f3e81610f02565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fa1602283610a87565b9150610fac82610f45565b604082019050919050565b60006020820190508181036000830152610fd081610f94565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061100d601d83610a87565b915061101882610fd7565b602082019050919050565b6000602082019050818103600083015261103c81611000565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061109f602583610a87565b91506110aa82611043565b604082019050919050565b600060208201905081810360008301526110ce81611092565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611131602383610a87565b915061113c826110d5565b604082019050919050565b6000602082019050818103600083015261116081611124565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111c3602683610a87565b91506111ce82611167565b604082019050919050565b600060208201905081810360008301526111f2816111b6565b905091905056fea2646970667358221220cfa590969dc1fe52ec32dbe13f59185757e4c4868929d9f856f7b780f8d2e89764736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x17EC CODESIZE SUB DUP1 PUSH3 0x17EC DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1F6 JUMP JUMPDEST DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0x48 SWAP2 SWAP1 PUSH3 0x4C6 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH3 0x5A SWAP2 SWAP1 PUSH3 0x4C6 JUMP JUMPDEST POP POP POP PUSH3 0x5AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0xCC DUP3 PUSH3 0x81 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0xEE JUMPI PUSH3 0xED PUSH3 0x92 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x103 PUSH3 0x63 JUMP JUMPDEST SWAP1 POP PUSH3 0x111 DUP3 DUP3 PUSH3 0xC1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x134 JUMPI PUSH3 0x133 PUSH3 0x92 JUMP JUMPDEST JUMPDEST PUSH3 0x13F DUP3 PUSH3 0x81 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x16C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x14F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x18F PUSH3 0x189 DUP5 PUSH3 0x116 JUMP JUMPDEST PUSH3 0xF7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x1AE JUMPI PUSH3 0x1AD PUSH3 0x7C JUMP JUMPDEST JUMPDEST PUSH3 0x1BB DUP5 DUP3 DUP6 PUSH3 0x14C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1DB JUMPI PUSH3 0x1DA PUSH3 0x77 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x1ED DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x178 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x210 JUMPI PUSH3 0x20F PUSH3 0x6D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x231 JUMPI PUSH3 0x230 PUSH3 0x72 JUMP JUMPDEST JUMPDEST PUSH3 0x23F DUP6 DUP3 DUP7 ADD PUSH3 0x1C3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x263 JUMPI PUSH3 0x262 PUSH3 0x72 JUMP JUMPDEST JUMPDEST PUSH3 0x271 DUP6 DUP3 DUP7 ADD PUSH3 0x1C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2CE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2E4 JUMPI PUSH3 0x2E3 PUSH3 0x286 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x34E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x30F JUMP JUMPDEST PUSH3 0x35A DUP7 DUP4 PUSH3 0x30F JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3A7 PUSH3 0x3A1 PUSH3 0x39B DUP5 PUSH3 0x372 JUMP JUMPDEST PUSH3 0x37C JUMP JUMPDEST PUSH3 0x372 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x3C3 DUP4 PUSH3 0x386 JUMP JUMPDEST PUSH3 0x3DB PUSH3 0x3D2 DUP3 PUSH3 0x3AE JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x31C JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x3F2 PUSH3 0x3E3 JUMP JUMPDEST PUSH3 0x3FF DUP2 DUP5 DUP5 PUSH3 0x3B8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x427 JUMPI PUSH3 0x41B PUSH1 0x0 DUP3 PUSH3 0x3E8 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x405 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x476 JUMPI PUSH3 0x440 DUP2 PUSH3 0x2EA JUMP JUMPDEST PUSH3 0x44B DUP5 PUSH3 0x2FF JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x45B JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x473 PUSH3 0x46A DUP6 PUSH3 0x2FF JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x404 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x49B PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x47B JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4B6 DUP4 DUP4 PUSH3 0x488 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x4D1 DUP3 PUSH3 0x27B JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4ED JUMPI PUSH3 0x4EC PUSH3 0x92 JUMP JUMPDEST JUMPDEST PUSH3 0x4F9 DUP3 SLOAD PUSH3 0x2B5 JUMP JUMPDEST PUSH3 0x506 DUP3 DUP3 DUP6 PUSH3 0x42B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x53E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x529 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x535 DUP6 DUP3 PUSH3 0x4A8 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x5A5 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x54E DUP7 PUSH3 0x2EA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x578 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x551 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x598 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x594 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x488 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x122F DUP1 PUSH3 0x5BD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC67 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xCF1 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x47E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD1E JUMP JUMPDEST PUSH2 0x518 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x770 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x518 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xDED JUMP JUMPDEST PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x3FB SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x427 SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x474 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x449 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x474 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x457 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x489 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x497 DUP3 DUP7 PUSH2 0x518 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D3 SWAP1 PUSH2 0xE93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4E9 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x500 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x50D DUP2 DUP6 DUP6 PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60D SWAP1 PUSH2 0xF25 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x685 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67C SWAP1 PUSH2 0xFB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x763 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77C DUP5 DUP5 PUSH2 0x518 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F6 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7DF SWAP1 PUSH2 0x1023 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F5 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A7 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x86B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x862 SWAP1 PUSH2 0x10B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8DA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D1 SWAP1 PUSH2 0x1147 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E5 DUP4 DUP4 DUP4 PUSH2 0xA72 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x96B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x962 SWAP1 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA59 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA6C DUP5 DUP5 DUP5 PUSH2 0xA77 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA9B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADE DUP3 PUSH2 0xA7C JUMP JUMPDEST PUSH2 0xAE8 DUP2 DUP6 PUSH2 0xA87 JUMP JUMPDEST SWAP4 POP PUSH2 0xAF8 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA98 JUMP JUMPDEST PUSH2 0xB01 DUP2 PUSH2 0xAC2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB26 DUP2 DUP5 PUSH2 0xAD3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5E DUP3 PUSH2 0xB33 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB6E DUP2 PUSH2 0xB53 JUMP JUMPDEST DUP2 EQ PUSH2 0xB79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB8B DUP2 PUSH2 0xB65 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBA4 DUP2 PUSH2 0xB91 JUMP JUMPDEST DUP2 EQ PUSH2 0xBAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBC1 DUP2 PUSH2 0xB9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBDE JUMPI PUSH2 0xBDD PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBEC DUP6 DUP3 DUP7 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBFD DUP6 DUP3 DUP7 ADD PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC1C DUP2 PUSH2 0xC07 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC37 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC13 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC46 DUP2 PUSH2 0xB91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC61 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC3D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC80 JUMPI PUSH2 0xC7F PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC8E DUP7 DUP3 DUP8 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC9F DUP7 DUP3 DUP8 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCB0 DUP7 DUP3 DUP8 ADD PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCD0 DUP2 PUSH2 0xCBA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCEB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCC7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD07 JUMPI PUSH2 0xD06 PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD15 DUP5 DUP3 DUP6 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD35 JUMPI PUSH2 0xD34 PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD43 DUP6 DUP3 DUP7 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD54 DUP6 DUP3 DUP7 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDA5 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xDB8 JUMPI PUSH2 0xDB7 PUSH2 0xD5E JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDF8 DUP3 PUSH2 0xB91 JUMP JUMPDEST SWAP2 POP PUSH2 0xE03 DUP4 PUSH2 0xB91 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xE1B JUMPI PUSH2 0xE1A PUSH2 0xDBE JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7D PUSH1 0x25 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0xE88 DUP3 PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEAC DUP2 PUSH2 0xE70 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF0F PUSH1 0x24 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0xF1A DUP3 PUSH2 0xEB3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF3E DUP2 PUSH2 0xF02 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA1 PUSH1 0x22 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0xFAC DUP3 PUSH2 0xF45 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFD0 DUP2 PUSH2 0xF94 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100D PUSH1 0x1D DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x1018 DUP3 PUSH2 0xFD7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x103C DUP2 PUSH2 0x1000 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109F PUSH1 0x25 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x10AA DUP3 PUSH2 0x1043 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10CE DUP2 PUSH2 0x1092 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1131 PUSH1 0x23 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x113C DUP3 PUSH2 0x10D5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1160 DUP2 PUSH2 0x1124 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11C3 PUSH1 0x26 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x11CE DUP3 PUSH2 0x1167 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11F2 DUP2 PUSH2 0x11B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF 0xA5 SWAP1 SWAP7 SWAP14 0xC1 INVALID MSTORE 0xEC ORIGIN 0xDB 0xE1 EXTCODEHASH MSIZE XOR JUMPI JUMPI 0xE4 0xC4 DUP7 DUP10 0x29 0xD9 0xF8 JUMP 0xF7 0xB7 DUP1 0xF8 0xD2 0xE8 SWAP8 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"1401:11610:12:-:0;;;1976:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2050:5;2042;:13;;;;;;:::i;:::-;;2075:7;2065;:17;;;;;;:::i;:::-;;1976:113;;1401:11610;;7:75:23;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:246::-;1691:1;1701:113;1715:6;1712:1;1709:13;1701:113;;;1800:1;1795:3;1791:11;1785:18;1781:1;1776:3;1772:11;1765:39;1737:2;1734:1;1730:10;1725:15;;1701:113;;;1848:1;1839:6;1834:3;1830:16;1823:27;1672:184;1610:246;;;:::o;1862:434::-;1951:5;1976:66;1992:49;2034:6;1992:49;:::i;:::-;1976:66;:::i;:::-;1967:75;;2065:6;2058:5;2051:21;2103:4;2096:5;2092:16;2141:3;2132:6;2127:3;2123:16;2120:25;2117:112;;;2148:79;;:::i;:::-;2117:112;2238:52;2283:6;2278:3;2273;2238:52;:::i;:::-;1957:339;1862:434;;;;;:::o;2316:355::-;2383:5;2432:3;2425:4;2417:6;2413:17;2409:27;2399:122;;2440:79;;:::i;:::-;2399:122;2550:6;2544:13;2575:90;2661:3;2653:6;2646:4;2638:6;2634:17;2575:90;:::i;:::-;2566:99;;2389:282;2316:355;;;;:::o;2677:853::-;2776:6;2784;2833:2;2821:9;2812:7;2808:23;2804:32;2801:119;;;2839:79;;:::i;:::-;2801:119;2980:1;2969:9;2965:17;2959:24;3010:18;3002:6;2999:30;2996:117;;;3032:79;;:::i;:::-;2996:117;3137:74;3203:7;3194:6;3183:9;3179:22;3137:74;:::i;:::-;3127:84;;2930:291;3281:2;3270:9;3266:18;3260:25;3312:18;3304:6;3301:30;3298:117;;;3334:79;;:::i;:::-;3298:117;3439:74;3505:7;3496:6;3485:9;3481:22;3439:74;:::i;:::-;3429:84;;3231:292;2677:853;;;;;:::o;3536:99::-;3588:6;3622:5;3616:12;3606:22;;3536:99;;;:::o;3641:180::-;3689:77;3686:1;3679:88;3786:4;3783:1;3776:15;3810:4;3807:1;3800:15;3827:320;3871:6;3908:1;3902:4;3898:12;3888:22;;3955:1;3949:4;3945:12;3976:18;3966:81;;4032:4;4024:6;4020:17;4010:27;;3966:81;4094:2;4086:6;4083:14;4063:18;4060:38;4057:84;;4113:18;;:::i;:::-;4057:84;3878:269;3827:320;;;:::o;4153:141::-;4202:4;4225:3;4217:11;;4248:3;4245:1;4238:14;4282:4;4279:1;4269:18;4261:26;;4153:141;;;:::o;4300:93::-;4337:6;4384:2;4379;4372:5;4368:14;4364:23;4354:33;;4300:93;;;:::o;4399:107::-;4443:8;4493:5;4487:4;4483:16;4462:37;;4399:107;;;;:::o;4512:393::-;4581:6;4631:1;4619:10;4615:18;4654:97;4684:66;4673:9;4654:97;:::i;:::-;4772:39;4802:8;4791:9;4772:39;:::i;:::-;4760:51;;4844:4;4840:9;4833:5;4829:21;4820:30;;4893:4;4883:8;4879:19;4872:5;4869:30;4859:40;;4588:317;;4512:393;;;;;:::o;4911:77::-;4948:7;4977:5;4966:16;;4911:77;;;:::o;4994:60::-;5022:3;5043:5;5036:12;;4994:60;;;:::o;5060:142::-;5110:9;5143:53;5161:34;5170:24;5188:5;5170:24;:::i;:::-;5161:34;:::i;:::-;5143:53;:::i;:::-;5130:66;;5060:142;;;:::o;5208:75::-;5251:3;5272:5;5265:12;;5208:75;;;:::o;5289:269::-;5399:39;5430:7;5399:39;:::i;:::-;5460:91;5509:41;5533:16;5509:41;:::i;:::-;5501:6;5494:4;5488:11;5460:91;:::i;:::-;5454:4;5447:105;5365:193;5289:269;;;:::o;5564:73::-;5609:3;5564:73;:::o;5643:189::-;5720:32;;:::i;:::-;5761:65;5819:6;5811;5805:4;5761:65;:::i;:::-;5696:136;5643:189;;:::o;5838:186::-;5898:120;5915:3;5908:5;5905:14;5898:120;;;5969:39;6006:1;5999:5;5969:39;:::i;:::-;5942:1;5935:5;5931:13;5922:22;;5898:120;;;5838:186;;:::o;6030:543::-;6131:2;6126:3;6123:11;6120:446;;;6165:38;6197:5;6165:38;:::i;:::-;6249:29;6267:10;6249:29;:::i;:::-;6239:8;6235:44;6432:2;6420:10;6417:18;6414:49;;;6453:8;6438:23;;6414:49;6476:80;6532:22;6550:3;6532:22;:::i;:::-;6522:8;6518:37;6505:11;6476:80;:::i;:::-;6135:431;;6120:446;6030:543;;;:::o;6579:117::-;6633:8;6683:5;6677:4;6673:16;6652:37;;6579:117;;;;:::o;6702:169::-;6746:6;6779:51;6827:1;6823:6;6815:5;6812:1;6808:13;6779:51;:::i;:::-;6775:56;6860:4;6854;6850:15;6840:25;;6753:118;6702:169;;;;:::o;6876:295::-;6952:4;7098:29;7123:3;7117:4;7098:29;:::i;:::-;7090:37;;7160:3;7157:1;7153:11;7147:4;7144:21;7136:29;;6876:295;;;;:::o;7176:1395::-;7293:37;7326:3;7293:37;:::i;:::-;7395:18;7387:6;7384:30;7381:56;;;7417:18;;:::i;:::-;7381:56;7461:38;7493:4;7487:11;7461:38;:::i;:::-;7546:67;7606:6;7598;7592:4;7546:67;:::i;:::-;7640:1;7664:4;7651:17;;7696:2;7688:6;7685:14;7713:1;7708:618;;;;8370:1;8387:6;8384:77;;;8436:9;8431:3;8427:19;8421:26;8412:35;;8384:77;8487:67;8547:6;8540:5;8487:67;:::i;:::-;8481:4;8474:81;8343:222;7678:887;;7708:618;7760:4;7756:9;7748:6;7744:22;7794:37;7826:4;7794:37;:::i;:::-;7853:1;7867:208;7881:7;7878:1;7875:14;7867:208;;;7960:9;7955:3;7951:19;7945:26;7937:6;7930:42;8011:1;8003:6;7999:14;7989:24;;8058:2;8047:9;8043:18;8030:31;;7904:4;7901:1;7897:12;7892:17;;7867:208;;;8103:6;8094:7;8091:19;8088:179;;;8161:9;8156:3;8152:19;8146:26;8204:48;8246:4;8238:6;8234:17;8223:9;8204:48;:::i;:::-;8196:6;8189:64;8111:156;8088:179;8313:1;8309;8301:6;8297:14;8293:22;8287:4;8280:36;7715:611;;;7678:887;;7268:1303;;;7176:1395;;:::o;1401:11610:12:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_3398":{"entryPoint":2679,"id":3398,"parameterSlots":3,"returnSlots":0},"@_approve_3333":{"entryPoint":1447,"id":3333,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_3387":{"entryPoint":2674,"id":3387,"parameterSlots":3,"returnSlots":0},"@_msgSender_3514":{"entryPoint":1439,"id":3514,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_3376":{"entryPoint":1904,"id":3376,"parameterSlots":3,"returnSlots":0},"@_transfer_3159":{"entryPoint":2044,"id":3159,"parameterSlots":3,"returnSlots":0},"@allowance_2954":{"entryPoint":1304,"id":2954,"parameterSlots":2,"returnSlots":1},"@approve_2979":{"entryPoint":776,"id":2979,"parameterSlots":2,"returnSlots":1},"@balanceOf_2911":{"entryPoint":932,"id":2911,"parameterSlots":1,"returnSlots":1},"@decimals_2887":{"entryPoint":868,"id":2887,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_3082":{"entryPoint":1150,"id":3082,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_3041":{"entryPoint":877,"id":3041,"parameterSlots":2,"returnSlots":1},"@name_2867":{"entryPoint":630,"id":2867,"parameterSlots":0,"returnSlots":1},"@symbol_2877":{"entryPoint":1004,"id":2877,"parameterSlots":0,"returnSlots":1},"@totalSupply_2897":{"entryPoint":811,"id":2897,"parameterSlots":0,"returnSlots":1},"@transferFrom_3012":{"entryPoint":821,"id":3012,"parameterSlots":3,"returnSlots":1},"@transfer_2936":{"entryPoint":1269,"id":2936,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2940,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":2994,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3313,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3358,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3175,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3015,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3091,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":2771,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":4388,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":3988,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":4096,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":4534,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":4242,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":3842,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":3696,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":3133,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":3271,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":3106,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2828,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4423,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4023,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4131,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4569,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4277,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3877,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3731,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":3148,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":3286,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":2684,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2695,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3565,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2899,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3079,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2867,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":2961,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":3258,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2712,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3469,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3518,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":3422,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2862,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2754,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":4309,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":3909,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":4055,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":4455,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":4163,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":3763,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":3617,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2917,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2971,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13699:23","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:23","statements":[{"nodeType":"YulAssignment","src":"77:22:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:23"},"nodeType":"YulFunctionCall","src":"87:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:23"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:23","type":""}],"src":"7:99:23"},{"body":{"nodeType":"YulBlock","src":"208:73:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"225:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"230:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"218:6:23"},"nodeType":"YulFunctionCall","src":"218:19:23"},"nodeType":"YulExpressionStatement","src":"218:19:23"},{"nodeType":"YulAssignment","src":"246:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"265:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"270:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"261:3:23"},"nodeType":"YulFunctionCall","src":"261:14:23"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"246:11:23"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"180:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"185:6:23","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"196:11:23","type":""}],"src":"112:169:23"},{"body":{"nodeType":"YulBlock","src":"349:184:23","statements":[{"nodeType":"YulVariableDeclaration","src":"359:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"368:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"363:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"428:63:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"453:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"458:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"449:3:23"},"nodeType":"YulFunctionCall","src":"449:11:23"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"472:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"477:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"468:3:23"},"nodeType":"YulFunctionCall","src":"468:11:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"462:5:23"},"nodeType":"YulFunctionCall","src":"462:18:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"442:6:23"},"nodeType":"YulFunctionCall","src":"442:39:23"},"nodeType":"YulExpressionStatement","src":"442:39:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"389:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"392:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"386:2:23"},"nodeType":"YulFunctionCall","src":"386:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"400:19:23","statements":[{"nodeType":"YulAssignment","src":"402:15:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"411:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"414:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"407:3:23"},"nodeType":"YulFunctionCall","src":"407:10:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"402:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"382:3:23","statements":[]},"src":"378:113:23"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"511:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"516:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"507:3:23"},"nodeType":"YulFunctionCall","src":"507:16:23"},{"kind":"number","nodeType":"YulLiteral","src":"525:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"500:6:23"},"nodeType":"YulFunctionCall","src":"500:27:23"},"nodeType":"YulExpressionStatement","src":"500:27:23"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"331:3:23","type":""},{"name":"dst","nodeType":"YulTypedName","src":"336:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"341:6:23","type":""}],"src":"287:246:23"},{"body":{"nodeType":"YulBlock","src":"587:54:23","statements":[{"nodeType":"YulAssignment","src":"597:38:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"615:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"622:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"611:3:23"},"nodeType":"YulFunctionCall","src":"611:14:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"631:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"627:3:23"},"nodeType":"YulFunctionCall","src":"627:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"607:3:23"},"nodeType":"YulFunctionCall","src":"607:28:23"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"597:6:23"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"570:5:23","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"580:6:23","type":""}],"src":"539:102:23"},{"body":{"nodeType":"YulBlock","src":"739:285:23","statements":[{"nodeType":"YulVariableDeclaration","src":"749:53:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"796:5:23"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"763:32:23"},"nodeType":"YulFunctionCall","src":"763:39:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"753:6:23","type":""}]},{"nodeType":"YulAssignment","src":"811:78:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"877:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"882:6:23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"818:58:23"},"nodeType":"YulFunctionCall","src":"818:71:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"811:3:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"937:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"944:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"933:3:23"},"nodeType":"YulFunctionCall","src":"933:16:23"},{"name":"pos","nodeType":"YulIdentifier","src":"951:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"956:6:23"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"898:34:23"},"nodeType":"YulFunctionCall","src":"898:65:23"},"nodeType":"YulExpressionStatement","src":"898:65:23"},{"nodeType":"YulAssignment","src":"972:46:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"983:3:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1010:6:23"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"988:21:23"},"nodeType":"YulFunctionCall","src":"988:29:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"979:3:23"},"nodeType":"YulFunctionCall","src":"979:39:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"972:3:23"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"720:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"727:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"735:3:23","type":""}],"src":"647:377:23"},{"body":{"nodeType":"YulBlock","src":"1148:195:23","statements":[{"nodeType":"YulAssignment","src":"1158:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1170:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1181:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1166:3:23"},"nodeType":"YulFunctionCall","src":"1166:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1158:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1205:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1216:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1201:3:23"},"nodeType":"YulFunctionCall","src":"1201:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1224:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1230:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1220:3:23"},"nodeType":"YulFunctionCall","src":"1220:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1194:6:23"},"nodeType":"YulFunctionCall","src":"1194:47:23"},"nodeType":"YulExpressionStatement","src":"1194:47:23"},{"nodeType":"YulAssignment","src":"1250:86:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1322:6:23"},{"name":"tail","nodeType":"YulIdentifier","src":"1331:4:23"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1258:63:23"},"nodeType":"YulFunctionCall","src":"1258:78:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1250:4:23"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1120:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1132:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1143:4:23","type":""}],"src":"1030:313:23"},{"body":{"nodeType":"YulBlock","src":"1389:35:23","statements":[{"nodeType":"YulAssignment","src":"1399:19:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1415:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1409:5:23"},"nodeType":"YulFunctionCall","src":"1409:9:23"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1399:6:23"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1382:6:23","type":""}],"src":"1349:75:23"},{"body":{"nodeType":"YulBlock","src":"1519:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1536:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1539:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1529:6:23"},"nodeType":"YulFunctionCall","src":"1529:12:23"},"nodeType":"YulExpressionStatement","src":"1529:12:23"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1430:117:23"},{"body":{"nodeType":"YulBlock","src":"1642:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1659:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1662:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1652:6:23"},"nodeType":"YulFunctionCall","src":"1652:12:23"},"nodeType":"YulExpressionStatement","src":"1652:12:23"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"1553:117:23"},{"body":{"nodeType":"YulBlock","src":"1721:81:23","statements":[{"nodeType":"YulAssignment","src":"1731:65:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1746:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"1753:42:23","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1742:3:23"},"nodeType":"YulFunctionCall","src":"1742:54:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1731:7:23"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1703:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1713:7:23","type":""}],"src":"1676:126:23"},{"body":{"nodeType":"YulBlock","src":"1853:51:23","statements":[{"nodeType":"YulAssignment","src":"1863:35:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1892:5:23"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1874:17:23"},"nodeType":"YulFunctionCall","src":"1874:24:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1863:7:23"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1835:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1845:7:23","type":""}],"src":"1808:96:23"},{"body":{"nodeType":"YulBlock","src":"1953:79:23","statements":[{"body":{"nodeType":"YulBlock","src":"2010:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2019:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2022:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2012:6:23"},"nodeType":"YulFunctionCall","src":"2012:12:23"},"nodeType":"YulExpressionStatement","src":"2012:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1976:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2001:5:23"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1983:17:23"},"nodeType":"YulFunctionCall","src":"1983:24:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1973:2:23"},"nodeType":"YulFunctionCall","src":"1973:35:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1966:6:23"},"nodeType":"YulFunctionCall","src":"1966:43:23"},"nodeType":"YulIf","src":"1963:63:23"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1946:5:23","type":""}],"src":"1910:122:23"},{"body":{"nodeType":"YulBlock","src":"2090:87:23","statements":[{"nodeType":"YulAssignment","src":"2100:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2122:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2109:12:23"},"nodeType":"YulFunctionCall","src":"2109:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2100:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2165:5:23"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2138:26:23"},"nodeType":"YulFunctionCall","src":"2138:33:23"},"nodeType":"YulExpressionStatement","src":"2138:33:23"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2068:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"2076:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2084:5:23","type":""}],"src":"2038:139:23"},{"body":{"nodeType":"YulBlock","src":"2228:32:23","statements":[{"nodeType":"YulAssignment","src":"2238:16:23","value":{"name":"value","nodeType":"YulIdentifier","src":"2249:5:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2238:7:23"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2210:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2220:7:23","type":""}],"src":"2183:77:23"},{"body":{"nodeType":"YulBlock","src":"2309:79:23","statements":[{"body":{"nodeType":"YulBlock","src":"2366:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2375:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2378:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2368:6:23"},"nodeType":"YulFunctionCall","src":"2368:12:23"},"nodeType":"YulExpressionStatement","src":"2368:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2332:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2357:5:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2339:17:23"},"nodeType":"YulFunctionCall","src":"2339:24:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2329:2:23"},"nodeType":"YulFunctionCall","src":"2329:35:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2322:6:23"},"nodeType":"YulFunctionCall","src":"2322:43:23"},"nodeType":"YulIf","src":"2319:63:23"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2302:5:23","type":""}],"src":"2266:122:23"},{"body":{"nodeType":"YulBlock","src":"2446:87:23","statements":[{"nodeType":"YulAssignment","src":"2456:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2478:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2465:12:23"},"nodeType":"YulFunctionCall","src":"2465:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2456:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2521:5:23"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2494:26:23"},"nodeType":"YulFunctionCall","src":"2494:33:23"},"nodeType":"YulExpressionStatement","src":"2494:33:23"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2424:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"2432:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2440:5:23","type":""}],"src":"2394:139:23"},{"body":{"nodeType":"YulBlock","src":"2622:391:23","statements":[{"body":{"nodeType":"YulBlock","src":"2668:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2670:77:23"},"nodeType":"YulFunctionCall","src":"2670:79:23"},"nodeType":"YulExpressionStatement","src":"2670:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2643:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2652:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2639:3:23"},"nodeType":"YulFunctionCall","src":"2639:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"2664:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2635:3:23"},"nodeType":"YulFunctionCall","src":"2635:32:23"},"nodeType":"YulIf","src":"2632:119:23"},{"nodeType":"YulBlock","src":"2761:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2776:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"2790:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2780:6:23","type":""}]},{"nodeType":"YulAssignment","src":"2805:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2840:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"2851:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2836:3:23"},"nodeType":"YulFunctionCall","src":"2836:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2860:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2815:20:23"},"nodeType":"YulFunctionCall","src":"2815:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2805:6:23"}]}]},{"nodeType":"YulBlock","src":"2888:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2903:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"2917:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2907:6:23","type":""}]},{"nodeType":"YulAssignment","src":"2933:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2968:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"2979:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2964:3:23"},"nodeType":"YulFunctionCall","src":"2964:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2988:7:23"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2943:20:23"},"nodeType":"YulFunctionCall","src":"2943:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2933:6:23"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2584:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2595:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2607:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2615:6:23","type":""}],"src":"2539:474:23"},{"body":{"nodeType":"YulBlock","src":"3061:48:23","statements":[{"nodeType":"YulAssignment","src":"3071:32:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3096:5:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3089:6:23"},"nodeType":"YulFunctionCall","src":"3089:13:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3082:6:23"},"nodeType":"YulFunctionCall","src":"3082:21:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3071:7:23"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3043:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3053:7:23","type":""}],"src":"3019:90:23"},{"body":{"nodeType":"YulBlock","src":"3174:50:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3191:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3211:5:23"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3196:14:23"},"nodeType":"YulFunctionCall","src":"3196:21:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3184:6:23"},"nodeType":"YulFunctionCall","src":"3184:34:23"},"nodeType":"YulExpressionStatement","src":"3184:34:23"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3162:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3169:3:23","type":""}],"src":"3115:109:23"},{"body":{"nodeType":"YulBlock","src":"3322:118:23","statements":[{"nodeType":"YulAssignment","src":"3332:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3344:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3355:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3340:3:23"},"nodeType":"YulFunctionCall","src":"3340:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3332:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3406:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3419:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3430:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3415:3:23"},"nodeType":"YulFunctionCall","src":"3415:17:23"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3368:37:23"},"nodeType":"YulFunctionCall","src":"3368:65:23"},"nodeType":"YulExpressionStatement","src":"3368:65:23"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3294:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3306:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3317:4:23","type":""}],"src":"3230:210:23"},{"body":{"nodeType":"YulBlock","src":"3511:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3528:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3551:5:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3533:17:23"},"nodeType":"YulFunctionCall","src":"3533:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3521:6:23"},"nodeType":"YulFunctionCall","src":"3521:37:23"},"nodeType":"YulExpressionStatement","src":"3521:37:23"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3499:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3506:3:23","type":""}],"src":"3446:118:23"},{"body":{"nodeType":"YulBlock","src":"3668:124:23","statements":[{"nodeType":"YulAssignment","src":"3678:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3690:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3701:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3686:3:23"},"nodeType":"YulFunctionCall","src":"3686:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3678:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3758:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3771:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3782:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3767:3:23"},"nodeType":"YulFunctionCall","src":"3767:17:23"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3714:43:23"},"nodeType":"YulFunctionCall","src":"3714:71:23"},"nodeType":"YulExpressionStatement","src":"3714:71:23"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3640:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3652:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3663:4:23","type":""}],"src":"3570:222:23"},{"body":{"nodeType":"YulBlock","src":"3898:519:23","statements":[{"body":{"nodeType":"YulBlock","src":"3944:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3946:77:23"},"nodeType":"YulFunctionCall","src":"3946:79:23"},"nodeType":"YulExpressionStatement","src":"3946:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3919:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"3928:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3915:3:23"},"nodeType":"YulFunctionCall","src":"3915:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"3940:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3911:3:23"},"nodeType":"YulFunctionCall","src":"3911:32:23"},"nodeType":"YulIf","src":"3908:119:23"},{"nodeType":"YulBlock","src":"4037:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4052:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4066:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4056:6:23","type":""}]},{"nodeType":"YulAssignment","src":"4081:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4116:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4127:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4112:3:23"},"nodeType":"YulFunctionCall","src":"4112:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4136:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4091:20:23"},"nodeType":"YulFunctionCall","src":"4091:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4081:6:23"}]}]},{"nodeType":"YulBlock","src":"4164:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4179:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4193:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4183:6:23","type":""}]},{"nodeType":"YulAssignment","src":"4209:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4244:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4255:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4240:3:23"},"nodeType":"YulFunctionCall","src":"4240:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4264:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4219:20:23"},"nodeType":"YulFunctionCall","src":"4219:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4209:6:23"}]}]},{"nodeType":"YulBlock","src":"4292:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4307:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4321:2:23","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4311:6:23","type":""}]},{"nodeType":"YulAssignment","src":"4337:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4372:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4383:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4368:3:23"},"nodeType":"YulFunctionCall","src":"4368:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4392:7:23"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4347:20:23"},"nodeType":"YulFunctionCall","src":"4347:53:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4337:6:23"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3852:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3863:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3875:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3883:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3891:6:23","type":""}],"src":"3798:619:23"},{"body":{"nodeType":"YulBlock","src":"4466:43:23","statements":[{"nodeType":"YulAssignment","src":"4476:27:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4491:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"4498:4:23","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4487:3:23"},"nodeType":"YulFunctionCall","src":"4487:16:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4476:7:23"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4448:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4458:7:23","type":""}],"src":"4423:86:23"},{"body":{"nodeType":"YulBlock","src":"4576:51:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4593:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4614:5:23"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"4598:15:23"},"nodeType":"YulFunctionCall","src":"4598:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4586:6:23"},"nodeType":"YulFunctionCall","src":"4586:35:23"},"nodeType":"YulExpressionStatement","src":"4586:35:23"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4564:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4571:3:23","type":""}],"src":"4515:112:23"},{"body":{"nodeType":"YulBlock","src":"4727:120:23","statements":[{"nodeType":"YulAssignment","src":"4737:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4749:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4760:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4745:3:23"},"nodeType":"YulFunctionCall","src":"4745:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4737:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4813:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4826:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4837:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4822:3:23"},"nodeType":"YulFunctionCall","src":"4822:17:23"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"4773:39:23"},"nodeType":"YulFunctionCall","src":"4773:67:23"},"nodeType":"YulExpressionStatement","src":"4773:67:23"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4699:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4711:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4722:4:23","type":""}],"src":"4633:214:23"},{"body":{"nodeType":"YulBlock","src":"4919:263:23","statements":[{"body":{"nodeType":"YulBlock","src":"4965:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4967:77:23"},"nodeType":"YulFunctionCall","src":"4967:79:23"},"nodeType":"YulExpressionStatement","src":"4967:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4940:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"4949:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4936:3:23"},"nodeType":"YulFunctionCall","src":"4936:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4961:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4932:3:23"},"nodeType":"YulFunctionCall","src":"4932:32:23"},"nodeType":"YulIf","src":"4929:119:23"},{"nodeType":"YulBlock","src":"5058:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5073:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"5087:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5077:6:23","type":""}]},{"nodeType":"YulAssignment","src":"5102:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5137:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5148:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5133:3:23"},"nodeType":"YulFunctionCall","src":"5133:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5157:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5112:20:23"},"nodeType":"YulFunctionCall","src":"5112:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5102:6:23"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4889:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4900:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4912:6:23","type":""}],"src":"4853:329:23"},{"body":{"nodeType":"YulBlock","src":"5271:391:23","statements":[{"body":{"nodeType":"YulBlock","src":"5317:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5319:77:23"},"nodeType":"YulFunctionCall","src":"5319:79:23"},"nodeType":"YulExpressionStatement","src":"5319:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5292:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"5301:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5288:3:23"},"nodeType":"YulFunctionCall","src":"5288:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"5313:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5284:3:23"},"nodeType":"YulFunctionCall","src":"5284:32:23"},"nodeType":"YulIf","src":"5281:119:23"},{"nodeType":"YulBlock","src":"5410:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5425:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"5439:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5429:6:23","type":""}]},{"nodeType":"YulAssignment","src":"5454:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5489:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5500:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5485:3:23"},"nodeType":"YulFunctionCall","src":"5485:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5509:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5464:20:23"},"nodeType":"YulFunctionCall","src":"5464:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5454:6:23"}]}]},{"nodeType":"YulBlock","src":"5537:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5552:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"5566:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5556:6:23","type":""}]},{"nodeType":"YulAssignment","src":"5582:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5617:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5628:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5613:3:23"},"nodeType":"YulFunctionCall","src":"5613:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5637:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5592:20:23"},"nodeType":"YulFunctionCall","src":"5592:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5582:6:23"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5233:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5244:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5256:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5264:6:23","type":""}],"src":"5188:474:23"},{"body":{"nodeType":"YulBlock","src":"5696:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5713:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5716:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5706:6:23"},"nodeType":"YulFunctionCall","src":"5706:88:23"},"nodeType":"YulExpressionStatement","src":"5706:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5810:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5813:4:23","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5803:6:23"},"nodeType":"YulFunctionCall","src":"5803:15:23"},"nodeType":"YulExpressionStatement","src":"5803:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5834:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5837:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5827:6:23"},"nodeType":"YulFunctionCall","src":"5827:15:23"},"nodeType":"YulExpressionStatement","src":"5827:15:23"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"5668:180:23"},{"body":{"nodeType":"YulBlock","src":"5905:269:23","statements":[{"nodeType":"YulAssignment","src":"5915:22:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5929:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"5935:1:23","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5925:3:23"},"nodeType":"YulFunctionCall","src":"5925:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5915:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"5946:38:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5976:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"5982:1:23","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5972:3:23"},"nodeType":"YulFunctionCall","src":"5972:12:23"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5950:18:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"6023:51:23","statements":[{"nodeType":"YulAssignment","src":"6037:27:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6051:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6059:4:23","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6047:3:23"},"nodeType":"YulFunctionCall","src":"6047:17:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6037:6:23"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6003:18:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5996:6:23"},"nodeType":"YulFunctionCall","src":"5996:26:23"},"nodeType":"YulIf","src":"5993:81:23"},{"body":{"nodeType":"YulBlock","src":"6126:42:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"6140:16:23"},"nodeType":"YulFunctionCall","src":"6140:18:23"},"nodeType":"YulExpressionStatement","src":"6140:18:23"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6090:18:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6113:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6121:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6110:2:23"},"nodeType":"YulFunctionCall","src":"6110:14:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6087:2:23"},"nodeType":"YulFunctionCall","src":"6087:38:23"},"nodeType":"YulIf","src":"6084:84:23"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5889:4:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5898:6:23","type":""}],"src":"5854:320:23"},{"body":{"nodeType":"YulBlock","src":"6208:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6225:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6228:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6218:6:23"},"nodeType":"YulFunctionCall","src":"6218:88:23"},"nodeType":"YulExpressionStatement","src":"6218:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6322:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6325:4:23","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6315:6:23"},"nodeType":"YulFunctionCall","src":"6315:15:23"},"nodeType":"YulExpressionStatement","src":"6315:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6346:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6349:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6339:6:23"},"nodeType":"YulFunctionCall","src":"6339:15:23"},"nodeType":"YulExpressionStatement","src":"6339:15:23"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6180:180:23"},{"body":{"nodeType":"YulBlock","src":"6410:147:23","statements":[{"nodeType":"YulAssignment","src":"6420:25:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6443:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6425:17:23"},"nodeType":"YulFunctionCall","src":"6425:20:23"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6420:1:23"}]},{"nodeType":"YulAssignment","src":"6454:25:23","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6477:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6459:17:23"},"nodeType":"YulFunctionCall","src":"6459:20:23"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6454:1:23"}]},{"nodeType":"YulAssignment","src":"6488:16:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6499:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"6502:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6495:3:23"},"nodeType":"YulFunctionCall","src":"6495:9:23"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"6488:3:23"}]},{"body":{"nodeType":"YulBlock","src":"6528:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6530:16:23"},"nodeType":"YulFunctionCall","src":"6530:18:23"},"nodeType":"YulExpressionStatement","src":"6530:18:23"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6520:1:23"},{"name":"sum","nodeType":"YulIdentifier","src":"6523:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6517:2:23"},"nodeType":"YulFunctionCall","src":"6517:10:23"},"nodeType":"YulIf","src":"6514:36:23"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6397:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"6400:1:23","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6406:3:23","type":""}],"src":"6366:191:23"},{"body":{"nodeType":"YulBlock","src":"6669:118:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6691:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6699:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6687:3:23"},"nodeType":"YulFunctionCall","src":"6687:14:23"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"6703:34:23","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6680:6:23"},"nodeType":"YulFunctionCall","src":"6680:58:23"},"nodeType":"YulExpressionStatement","src":"6680:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6759:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6767:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6755:3:23"},"nodeType":"YulFunctionCall","src":"6755:15:23"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"6772:7:23","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6748:6:23"},"nodeType":"YulFunctionCall","src":"6748:32:23"},"nodeType":"YulExpressionStatement","src":"6748:32:23"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6661:6:23","type":""}],"src":"6563:224:23"},{"body":{"nodeType":"YulBlock","src":"6939:220:23","statements":[{"nodeType":"YulAssignment","src":"6949:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7015:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"7020:2:23","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6956:58:23"},"nodeType":"YulFunctionCall","src":"6956:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6949:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7121:3:23"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"7032:88:23"},"nodeType":"YulFunctionCall","src":"7032:93:23"},"nodeType":"YulExpressionStatement","src":"7032:93:23"},{"nodeType":"YulAssignment","src":"7134:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7145:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"7150:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7141:3:23"},"nodeType":"YulFunctionCall","src":"7141:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7134:3:23"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6927:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6935:3:23","type":""}],"src":"6793:366:23"},{"body":{"nodeType":"YulBlock","src":"7336:248:23","statements":[{"nodeType":"YulAssignment","src":"7346:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7358:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7369:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7354:3:23"},"nodeType":"YulFunctionCall","src":"7354:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7346:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7393:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7404:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7389:3:23"},"nodeType":"YulFunctionCall","src":"7389:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7412:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"7418:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7408:3:23"},"nodeType":"YulFunctionCall","src":"7408:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7382:6:23"},"nodeType":"YulFunctionCall","src":"7382:47:23"},"nodeType":"YulExpressionStatement","src":"7382:47:23"},{"nodeType":"YulAssignment","src":"7438:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7572:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7446:124:23"},"nodeType":"YulFunctionCall","src":"7446:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7438:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7316:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7331:4:23","type":""}],"src":"7165:419:23"},{"body":{"nodeType":"YulBlock","src":"7696:117:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7718:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"7726:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7714:3:23"},"nodeType":"YulFunctionCall","src":"7714:14:23"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"7730:34:23","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7707:6:23"},"nodeType":"YulFunctionCall","src":"7707:58:23"},"nodeType":"YulExpressionStatement","src":"7707:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7786:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"7794:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7782:3:23"},"nodeType":"YulFunctionCall","src":"7782:15:23"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"7799:6:23","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7775:6:23"},"nodeType":"YulFunctionCall","src":"7775:31:23"},"nodeType":"YulExpressionStatement","src":"7775:31:23"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7688:6:23","type":""}],"src":"7590:223:23"},{"body":{"nodeType":"YulBlock","src":"7965:220:23","statements":[{"nodeType":"YulAssignment","src":"7975:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8041:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"8046:2:23","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7982:58:23"},"nodeType":"YulFunctionCall","src":"7982:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7975:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8147:3:23"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"8058:88:23"},"nodeType":"YulFunctionCall","src":"8058:93:23"},"nodeType":"YulExpressionStatement","src":"8058:93:23"},{"nodeType":"YulAssignment","src":"8160:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8171:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"8176:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8167:3:23"},"nodeType":"YulFunctionCall","src":"8167:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8160:3:23"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7953:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7961:3:23","type":""}],"src":"7819:366:23"},{"body":{"nodeType":"YulBlock","src":"8362:248:23","statements":[{"nodeType":"YulAssignment","src":"8372:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8384:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8395:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8380:3:23"},"nodeType":"YulFunctionCall","src":"8380:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8372:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8419:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8430:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8415:3:23"},"nodeType":"YulFunctionCall","src":"8415:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8438:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"8444:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8434:3:23"},"nodeType":"YulFunctionCall","src":"8434:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8408:6:23"},"nodeType":"YulFunctionCall","src":"8408:47:23"},"nodeType":"YulExpressionStatement","src":"8408:47:23"},{"nodeType":"YulAssignment","src":"8464:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8598:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8472:124:23"},"nodeType":"YulFunctionCall","src":"8472:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8464:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8342:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8357:4:23","type":""}],"src":"8191:419:23"},{"body":{"nodeType":"YulBlock","src":"8722:115:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8744:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"8752:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8740:3:23"},"nodeType":"YulFunctionCall","src":"8740:14:23"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"8756:34:23","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8733:6:23"},"nodeType":"YulFunctionCall","src":"8733:58:23"},"nodeType":"YulExpressionStatement","src":"8733:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8812:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"8820:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8808:3:23"},"nodeType":"YulFunctionCall","src":"8808:15:23"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"8825:4:23","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8801:6:23"},"nodeType":"YulFunctionCall","src":"8801:29:23"},"nodeType":"YulExpressionStatement","src":"8801:29:23"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8714:6:23","type":""}],"src":"8616:221:23"},{"body":{"nodeType":"YulBlock","src":"8989:220:23","statements":[{"nodeType":"YulAssignment","src":"8999:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9065:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"9070:2:23","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9006:58:23"},"nodeType":"YulFunctionCall","src":"9006:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8999:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9171:3:23"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"9082:88:23"},"nodeType":"YulFunctionCall","src":"9082:93:23"},"nodeType":"YulExpressionStatement","src":"9082:93:23"},{"nodeType":"YulAssignment","src":"9184:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9195:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"9200:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9191:3:23"},"nodeType":"YulFunctionCall","src":"9191:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9184:3:23"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8977:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8985:3:23","type":""}],"src":"8843:366:23"},{"body":{"nodeType":"YulBlock","src":"9386:248:23","statements":[{"nodeType":"YulAssignment","src":"9396:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9408:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9419:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9404:3:23"},"nodeType":"YulFunctionCall","src":"9404:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9396:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9443:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9454:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9439:3:23"},"nodeType":"YulFunctionCall","src":"9439:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9462:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"9468:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9458:3:23"},"nodeType":"YulFunctionCall","src":"9458:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9432:6:23"},"nodeType":"YulFunctionCall","src":"9432:47:23"},"nodeType":"YulExpressionStatement","src":"9432:47:23"},{"nodeType":"YulAssignment","src":"9488:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9622:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9496:124:23"},"nodeType":"YulFunctionCall","src":"9496:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9488:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9366:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9381:4:23","type":""}],"src":"9215:419:23"},{"body":{"nodeType":"YulBlock","src":"9746:73:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9768:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"9776:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9764:3:23"},"nodeType":"YulFunctionCall","src":"9764:14:23"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"9780:31:23","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9757:6:23"},"nodeType":"YulFunctionCall","src":"9757:55:23"},"nodeType":"YulExpressionStatement","src":"9757:55:23"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9738:6:23","type":""}],"src":"9640:179:23"},{"body":{"nodeType":"YulBlock","src":"9971:220:23","statements":[{"nodeType":"YulAssignment","src":"9981:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10047:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"10052:2:23","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9988:58:23"},"nodeType":"YulFunctionCall","src":"9988:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9981:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10153:3:23"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"10064:88:23"},"nodeType":"YulFunctionCall","src":"10064:93:23"},"nodeType":"YulExpressionStatement","src":"10064:93:23"},{"nodeType":"YulAssignment","src":"10166:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10177:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"10182:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10173:3:23"},"nodeType":"YulFunctionCall","src":"10173:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10166:3:23"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9959:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9967:3:23","type":""}],"src":"9825:366:23"},{"body":{"nodeType":"YulBlock","src":"10368:248:23","statements":[{"nodeType":"YulAssignment","src":"10378:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10390:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10401:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10386:3:23"},"nodeType":"YulFunctionCall","src":"10386:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10378:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10425:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10436:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10421:3:23"},"nodeType":"YulFunctionCall","src":"10421:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10444:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"10450:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10440:3:23"},"nodeType":"YulFunctionCall","src":"10440:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10414:6:23"},"nodeType":"YulFunctionCall","src":"10414:47:23"},"nodeType":"YulExpressionStatement","src":"10414:47:23"},{"nodeType":"YulAssignment","src":"10470:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10604:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10478:124:23"},"nodeType":"YulFunctionCall","src":"10478:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10470:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10348:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10363:4:23","type":""}],"src":"10197:419:23"},{"body":{"nodeType":"YulBlock","src":"10728:118:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10750:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"10758:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10746:3:23"},"nodeType":"YulFunctionCall","src":"10746:14:23"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"10762:34:23","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10739:6:23"},"nodeType":"YulFunctionCall","src":"10739:58:23"},"nodeType":"YulExpressionStatement","src":"10739:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10818:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"10826:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10814:3:23"},"nodeType":"YulFunctionCall","src":"10814:15:23"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"10831:7:23","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10807:6:23"},"nodeType":"YulFunctionCall","src":"10807:32:23"},"nodeType":"YulExpressionStatement","src":"10807:32:23"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10720:6:23","type":""}],"src":"10622:224:23"},{"body":{"nodeType":"YulBlock","src":"10998:220:23","statements":[{"nodeType":"YulAssignment","src":"11008:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11074:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"11079:2:23","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11015:58:23"},"nodeType":"YulFunctionCall","src":"11015:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11008:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11180:3:23"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"11091:88:23"},"nodeType":"YulFunctionCall","src":"11091:93:23"},"nodeType":"YulExpressionStatement","src":"11091:93:23"},{"nodeType":"YulAssignment","src":"11193:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11204:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"11209:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11200:3:23"},"nodeType":"YulFunctionCall","src":"11200:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11193:3:23"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10986:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10994:3:23","type":""}],"src":"10852:366:23"},{"body":{"nodeType":"YulBlock","src":"11395:248:23","statements":[{"nodeType":"YulAssignment","src":"11405:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11417:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11428:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11413:3:23"},"nodeType":"YulFunctionCall","src":"11413:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11405:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11452:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11463:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11448:3:23"},"nodeType":"YulFunctionCall","src":"11448:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11471:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"11477:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11467:3:23"},"nodeType":"YulFunctionCall","src":"11467:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11441:6:23"},"nodeType":"YulFunctionCall","src":"11441:47:23"},"nodeType":"YulExpressionStatement","src":"11441:47:23"},{"nodeType":"YulAssignment","src":"11497:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11631:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11505:124:23"},"nodeType":"YulFunctionCall","src":"11505:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11497:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11375:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11390:4:23","type":""}],"src":"11224:419:23"},{"body":{"nodeType":"YulBlock","src":"11755:116:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11777:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"11785:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11773:3:23"},"nodeType":"YulFunctionCall","src":"11773:14:23"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"11789:34:23","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11766:6:23"},"nodeType":"YulFunctionCall","src":"11766:58:23"},"nodeType":"YulExpressionStatement","src":"11766:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11845:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"11853:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11841:3:23"},"nodeType":"YulFunctionCall","src":"11841:15:23"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"11858:5:23","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11834:6:23"},"nodeType":"YulFunctionCall","src":"11834:30:23"},"nodeType":"YulExpressionStatement","src":"11834:30:23"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11747:6:23","type":""}],"src":"11649:222:23"},{"body":{"nodeType":"YulBlock","src":"12023:220:23","statements":[{"nodeType":"YulAssignment","src":"12033:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12099:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"12104:2:23","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12040:58:23"},"nodeType":"YulFunctionCall","src":"12040:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12033:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12205:3:23"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"12116:88:23"},"nodeType":"YulFunctionCall","src":"12116:93:23"},"nodeType":"YulExpressionStatement","src":"12116:93:23"},{"nodeType":"YulAssignment","src":"12218:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12229:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"12234:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12225:3:23"},"nodeType":"YulFunctionCall","src":"12225:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12218:3:23"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12011:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12019:3:23","type":""}],"src":"11877:366:23"},{"body":{"nodeType":"YulBlock","src":"12420:248:23","statements":[{"nodeType":"YulAssignment","src":"12430:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12442:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12453:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12438:3:23"},"nodeType":"YulFunctionCall","src":"12438:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12430:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12477:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12488:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12473:3:23"},"nodeType":"YulFunctionCall","src":"12473:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12496:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"12502:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12492:3:23"},"nodeType":"YulFunctionCall","src":"12492:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12466:6:23"},"nodeType":"YulFunctionCall","src":"12466:47:23"},"nodeType":"YulExpressionStatement","src":"12466:47:23"},{"nodeType":"YulAssignment","src":"12522:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12656:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12530:124:23"},"nodeType":"YulFunctionCall","src":"12530:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12522:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12400:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12415:4:23","type":""}],"src":"12249:419:23"},{"body":{"nodeType":"YulBlock","src":"12780:119:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12802:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"12810:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12798:3:23"},"nodeType":"YulFunctionCall","src":"12798:14:23"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"12814:34:23","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12791:6:23"},"nodeType":"YulFunctionCall","src":"12791:58:23"},"nodeType":"YulExpressionStatement","src":"12791:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12870:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"12878:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12866:3:23"},"nodeType":"YulFunctionCall","src":"12866:15:23"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"12883:8:23","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12859:6:23"},"nodeType":"YulFunctionCall","src":"12859:33:23"},"nodeType":"YulExpressionStatement","src":"12859:33:23"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12772:6:23","type":""}],"src":"12674:225:23"},{"body":{"nodeType":"YulBlock","src":"13051:220:23","statements":[{"nodeType":"YulAssignment","src":"13061:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13127:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"13132:2:23","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13068:58:23"},"nodeType":"YulFunctionCall","src":"13068:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13061:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13233:3:23"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"13144:88:23"},"nodeType":"YulFunctionCall","src":"13144:93:23"},"nodeType":"YulExpressionStatement","src":"13144:93:23"},{"nodeType":"YulAssignment","src":"13246:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13257:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"13262:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13253:3:23"},"nodeType":"YulFunctionCall","src":"13253:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13246:3:23"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13039:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13047:3:23","type":""}],"src":"12905:366:23"},{"body":{"nodeType":"YulBlock","src":"13448:248:23","statements":[{"nodeType":"YulAssignment","src":"13458:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13470:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13481:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13466:3:23"},"nodeType":"YulFunctionCall","src":"13466:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13458:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13505:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13516:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13501:3:23"},"nodeType":"YulFunctionCall","src":"13501:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13524:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"13530:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13520:3:23"},"nodeType":"YulFunctionCall","src":"13520:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13494:6:23"},"nodeType":"YulFunctionCall","src":"13494:47:23"},"nodeType":"YulExpressionStatement","src":"13494:47:23"},{"nodeType":"YulAssignment","src":"13550:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13684:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13558:124:23"},"nodeType":"YulFunctionCall","src":"13558:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13550:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13428:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13443:4:23","type":""}],"src":"13277:419:23"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":23,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b0c565b60405180910390f35b6100e660048036038101906100e19190610bc7565b610308565b6040516100f39190610c22565b60405180910390f35b61010461032b565b6040516101119190610c4c565b60405180910390f35b610134600480360381019061012f9190610c67565b610335565b6040516101419190610c22565b60405180910390f35b610152610364565b60405161015f9190610cd6565b60405180910390f35b610182600480360381019061017d9190610bc7565b61036d565b60405161018f9190610c22565b60405180910390f35b6101b260048036038101906101ad9190610cf1565b6103a4565b6040516101bf9190610c4c565b60405180910390f35b6101d06103ec565b6040516101dd9190610b0c565b60405180910390f35b61020060048036038101906101fb9190610bc7565b61047e565b60405161020d9190610c22565b60405180910390f35b610230600480360381019061022b9190610bc7565b6104f5565b60405161023d9190610c22565b60405180910390f35b610260600480360381019061025b9190610d1e565b610518565b60405161026d9190610c4c565b60405180910390f35b60606003805461028590610d8d565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d8d565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b60008061031361059f565b90506103208185856105a7565b600191505092915050565b6000600254905090565b60008061034061059f565b905061034d858285610770565b6103588585856107fc565b60019150509392505050565b60006012905090565b60008061037861059f565b905061039981858561038a8589610518565b6103949190610ded565b6105a7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103fb90610d8d565b80601f016020809104026020016040519081016040528092919081815260200182805461042790610d8d565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b60008061048961059f565b905060006104978286610518565b9050838110156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610e93565b60405180910390fd5b6104e982868684036105a7565b60019250505092915050565b60008061050061059f565b905061050d8185856107fc565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610f25565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067c90610fb7565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107639190610c4c565b60405180910390a3505050565b600061077c8484610518565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f657818110156107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90611023565b60405180910390fd5b6107f584848484036105a7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610862906110b5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190611147565b60405180910390fd5b6108e5838383610a72565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610962906111d9565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a599190610c4c565b60405180910390a3610a6c848484610a77565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ab6578082015181840152602081019050610a9b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ade82610a7c565b610ae88185610a87565b9350610af8818560208601610a98565b610b0181610ac2565b840191505092915050565b60006020820190508181036000830152610b268184610ad3565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5e82610b33565b9050919050565b610b6e81610b53565b8114610b7957600080fd5b50565b600081359050610b8b81610b65565b92915050565b6000819050919050565b610ba481610b91565b8114610baf57600080fd5b50565b600081359050610bc181610b9b565b92915050565b60008060408385031215610bde57610bdd610b2e565b5b6000610bec85828601610b7c565b9250506020610bfd85828601610bb2565b9150509250929050565b60008115159050919050565b610c1c81610c07565b82525050565b6000602082019050610c376000830184610c13565b92915050565b610c4681610b91565b82525050565b6000602082019050610c616000830184610c3d565b92915050565b600080600060608486031215610c8057610c7f610b2e565b5b6000610c8e86828701610b7c565b9350506020610c9f86828701610b7c565b9250506040610cb086828701610bb2565b9150509250925092565b600060ff82169050919050565b610cd081610cba565b82525050565b6000602082019050610ceb6000830184610cc7565b92915050565b600060208284031215610d0757610d06610b2e565b5b6000610d1584828501610b7c565b91505092915050565b60008060408385031215610d3557610d34610b2e565b5b6000610d4385828601610b7c565b9250506020610d5485828601610b7c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610da557607f821691505b602082108103610db857610db7610d5e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df882610b91565b9150610e0383610b91565b9250828201905080821115610e1b57610e1a610dbe565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e7d602583610a87565b9150610e8882610e21565b604082019050919050565b60006020820190508181036000830152610eac81610e70565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f0f602483610a87565b9150610f1a82610eb3565b604082019050919050565b60006020820190508181036000830152610f3e81610f02565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fa1602283610a87565b9150610fac82610f45565b604082019050919050565b60006020820190508181036000830152610fd081610f94565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061100d601d83610a87565b915061101882610fd7565b602082019050919050565b6000602082019050818103600083015261103c81611000565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061109f602583610a87565b91506110aa82611043565b604082019050919050565b600060208201905081810360008301526110ce81611092565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611131602383610a87565b915061113c826110d5565b604082019050919050565b6000602082019050818103600083015261116081611124565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111c3602683610a87565b91506111ce82611167565b604082019050919050565b600060208201905081810360008301526111f2816111b6565b905091905056fea2646970667358221220cfa590969dc1fe52ec32dbe13f59185757e4c4868929d9f856f7b780f8d2e89764736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC67 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xCF1 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x47E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD1E JUMP JUMPDEST PUSH2 0x518 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x770 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x518 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xDED JUMP JUMPDEST PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x3FB SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x427 SWAP1 PUSH2 0xD8D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x474 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x449 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x474 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x457 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x489 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x497 DUP3 DUP7 PUSH2 0x518 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D3 SWAP1 PUSH2 0xE93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4E9 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x500 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x50D DUP2 DUP6 DUP6 PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60D SWAP1 PUSH2 0xF25 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x685 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67C SWAP1 PUSH2 0xFB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x763 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77C DUP5 DUP5 PUSH2 0x518 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F6 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7DF SWAP1 PUSH2 0x1023 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F5 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A7 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x86B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x862 SWAP1 PUSH2 0x10B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8DA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D1 SWAP1 PUSH2 0x1147 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E5 DUP4 DUP4 DUP4 PUSH2 0xA72 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x96B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x962 SWAP1 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA59 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA6C DUP5 DUP5 DUP5 PUSH2 0xA77 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA9B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADE DUP3 PUSH2 0xA7C JUMP JUMPDEST PUSH2 0xAE8 DUP2 DUP6 PUSH2 0xA87 JUMP JUMPDEST SWAP4 POP PUSH2 0xAF8 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA98 JUMP JUMPDEST PUSH2 0xB01 DUP2 PUSH2 0xAC2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB26 DUP2 DUP5 PUSH2 0xAD3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5E DUP3 PUSH2 0xB33 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB6E DUP2 PUSH2 0xB53 JUMP JUMPDEST DUP2 EQ PUSH2 0xB79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB8B DUP2 PUSH2 0xB65 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBA4 DUP2 PUSH2 0xB91 JUMP JUMPDEST DUP2 EQ PUSH2 0xBAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBC1 DUP2 PUSH2 0xB9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBDE JUMPI PUSH2 0xBDD PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBEC DUP6 DUP3 DUP7 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBFD DUP6 DUP3 DUP7 ADD PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC1C DUP2 PUSH2 0xC07 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC37 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC13 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC46 DUP2 PUSH2 0xB91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC61 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC3D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC80 JUMPI PUSH2 0xC7F PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC8E DUP7 DUP3 DUP8 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC9F DUP7 DUP3 DUP8 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCB0 DUP7 DUP3 DUP8 ADD PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCD0 DUP2 PUSH2 0xCBA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCEB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCC7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD07 JUMPI PUSH2 0xD06 PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD15 DUP5 DUP3 DUP6 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD35 JUMPI PUSH2 0xD34 PUSH2 0xB2E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD43 DUP6 DUP3 DUP7 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD54 DUP6 DUP3 DUP7 ADD PUSH2 0xB7C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDA5 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xDB8 JUMPI PUSH2 0xDB7 PUSH2 0xD5E JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDF8 DUP3 PUSH2 0xB91 JUMP JUMPDEST SWAP2 POP PUSH2 0xE03 DUP4 PUSH2 0xB91 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xE1B JUMPI PUSH2 0xE1A PUSH2 0xDBE JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7D PUSH1 0x25 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0xE88 DUP3 PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEAC DUP2 PUSH2 0xE70 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF0F PUSH1 0x24 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0xF1A DUP3 PUSH2 0xEB3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF3E DUP2 PUSH2 0xF02 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA1 PUSH1 0x22 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0xFAC DUP3 PUSH2 0xF45 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFD0 DUP2 PUSH2 0xF94 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100D PUSH1 0x1D DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x1018 DUP3 PUSH2 0xFD7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x103C DUP2 PUSH2 0x1000 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109F PUSH1 0x25 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x10AA DUP3 PUSH2 0x1043 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10CE DUP2 PUSH2 0x1092 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1131 PUSH1 0x23 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x113C DUP3 PUSH2 0x10D5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1160 DUP2 PUSH2 0x1124 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11C3 PUSH1 0x26 DUP4 PUSH2 0xA87 JUMP JUMPDEST SWAP2 POP PUSH2 0x11CE DUP3 PUSH2 0x1167 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11F2 DUP2 PUSH2 0x11B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF 0xA5 SWAP1 SWAP7 SWAP14 0xC1 INVALID MSTORE 0xEC ORIGIN 0xDB 0xE1 EXTCODEHASH MSIZE XOR JUMPI JUMPI 0xE4 0xC4 DUP7 DUP10 0x29 0xD9 0xF8 JUMP 0xF7 0xB7 DUP1 0xF8 0xD2 0xE8 SWAP8 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"1401:11610:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3242:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5190:286;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3091:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5871:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3406:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2365:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6592:427;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3727:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3974:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2154:98;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;4530:13;4546:12;:10;:12::i;:::-;4530:28;;4568:32;4577:5;4584:7;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;:::o;3242:106::-;3303:7;3329:12;;3322:19;;3242:106;:::o;5190:286::-;5317:4;5333:15;5351:12;:10;:12::i;:::-;5333:30;;5373:38;5389:4;5395:7;5404:6;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;5465:4;5458:11;;;5190:286;;;;;:::o;3091:91::-;3149:5;3173:2;3166:9;;3091:91;:::o;5871:234::-;5959:4;5975:13;5991:12;:10;:12::i;:::-;5975:28;;6013:64;6022:5;6029:7;6066:10;6038:25;6048:5;6055:7;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;:::-;6094:4;6087:11;;;5871:234;;;;:::o;3406:125::-;3480:7;3506:9;:18;3516:7;3506:18;;;;;;;;;;;;;;;;3499:25;;3406:125;;;:::o;2365:102::-;2421:13;2453:7;2446:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:102;:::o;6592:427::-;6685:4;6701:13;6717:12;:10;:12::i;:::-;6701:28;;6739:24;6766:25;6776:5;6783:7;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;:::-;7008:4;7001:11;;;;6592:427;;;;:::o;3727:189::-;3806:4;3822:13;3838:12;:10;:12::i;:::-;3822:28;;3860;3870:5;3877:2;3881:6;3860:9;:28::i;:::-;3905:4;3898:11;;;3727:189;;;;:::o;3974:149::-;4063:7;4089:11;:18;4101:5;4089:18;;;;;;;;;;;;;;;:27;4108:7;4089:27;;;;;;;;;;;;;;;;4082:34;;3974:149;;;;:::o;640:96:15:-;693:7;719:10;712:17;;640:96;:::o;10504:370:12:-;10652:1;10635:19;;:5;:19;;;10627:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10732:1;10713:21;;:7;:21;;;10705:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10814:6;10784:11;:18;10796:5;10784:18;;;;;;;;;;;;;;;:27;10803:7;10784:27;;;;;;;;;;;;;;;:36;;;;10851:7;10835:32;;10844:5;10835:32;;;10860:6;10835:32;;;;;;:::i;:::-;;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;11371:17;11351:16;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11347:243;11275:321;11155:441;;;:::o;7473:818::-;7615:1;7599:18;;:4;:18;;;7591:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;7691:1;7677:16;;:2;:16;;;7669:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;7744:38;7765:4;7771:2;7775:6;7744:20;:38::i;:::-;7793:19;7815:9;:15;7825:4;7815:15;;;;;;;;;;;;;;;;7793:37;;7863:6;7848:11;:21;;7840:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;7978:6;7964:11;:20;7946:9;:15;7956:4;7946:15;;;;;;;;;;;;;;;:38;;;;8178:6;8161:9;:13;8171:2;8161:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8225:2;8210:26;;8219:4;8210:26;;;8229:6;8210:26;;;;;;:::i;:::-;;;;;;;;8247:37;8267:4;8273:2;8277:6;8247:19;:37::i;:::-;7581:710;7473:818;;;:::o;12180:121::-;;;;:::o;12889:120::-;;;;:::o;7:99:23:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1430:117::-;1539:1;1536;1529:12;1676:126;1713:7;1753:42;1746:5;1742:54;1731:65;;1676:126;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:122::-;1983:24;2001:5;1983:24;:::i;:::-;1976:5;1973:35;1963:63;;2022:1;2019;2012:12;1963:63;1910:122;:::o;2038:139::-;2084:5;2122:6;2109:20;2100:29;;2138:33;2165:5;2138:33;:::i;:::-;2038:139;;;;:::o;2183:77::-;2220:7;2249:5;2238:16;;2183:77;;;:::o;2266:122::-;2339:24;2357:5;2339:24;:::i;:::-;2332:5;2329:35;2319:63;;2378:1;2375;2368:12;2319:63;2266:122;:::o;2394:139::-;2440:5;2478:6;2465:20;2456:29;;2494:33;2521:5;2494:33;:::i;:::-;2394:139;;;;:::o;2539:474::-;2607:6;2615;2664:2;2652:9;2643:7;2639:23;2635:32;2632:119;;;2670:79;;:::i;:::-;2632:119;2790:1;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2761:117;2917:2;2943:53;2988:7;2979:6;2968:9;2964:22;2943:53;:::i;:::-;2933:63;;2888:118;2539:474;;;;;:::o;3019:90::-;3053:7;3096:5;3089:13;3082:21;3071:32;;3019:90;;;:::o;3115:109::-;3196:21;3211:5;3196:21;:::i;:::-;3191:3;3184:34;3115:109;;:::o;3230:210::-;3317:4;3355:2;3344:9;3340:18;3332:26;;3368:65;3430:1;3419:9;3415:17;3406:6;3368:65;:::i;:::-;3230:210;;;;:::o;3446:118::-;3533:24;3551:5;3533:24;:::i;:::-;3528:3;3521:37;3446:118;;:::o;3570:222::-;3663:4;3701:2;3690:9;3686:18;3678:26;;3714:71;3782:1;3771:9;3767:17;3758:6;3714:71;:::i;:::-;3570:222;;;;:::o;3798:619::-;3875:6;3883;3891;3940:2;3928:9;3919:7;3915:23;3911:32;3908:119;;;3946:79;;:::i;:::-;3908:119;4066:1;4091:53;4136:7;4127:6;4116:9;4112:22;4091:53;:::i;:::-;4081:63;;4037:117;4193:2;4219:53;4264:7;4255:6;4244:9;4240:22;4219:53;:::i;:::-;4209:63;;4164:118;4321:2;4347:53;4392:7;4383:6;4372:9;4368:22;4347:53;:::i;:::-;4337:63;;4292:118;3798:619;;;;;:::o;4423:86::-;4458:7;4498:4;4491:5;4487:16;4476:27;;4423:86;;;:::o;4515:112::-;4598:22;4614:5;4598:22;:::i;:::-;4593:3;4586:35;4515:112;;:::o;4633:214::-;4722:4;4760:2;4749:9;4745:18;4737:26;;4773:67;4837:1;4826:9;4822:17;4813:6;4773:67;:::i;:::-;4633:214;;;;:::o;4853:329::-;4912:6;4961:2;4949:9;4940:7;4936:23;4932:32;4929:119;;;4967:79;;:::i;:::-;4929:119;5087:1;5112:53;5157:7;5148:6;5137:9;5133:22;5112:53;:::i;:::-;5102:63;;5058:117;4853:329;;;;:::o;5188:474::-;5256:6;5264;5313:2;5301:9;5292:7;5288:23;5284:32;5281:119;;;5319:79;;:::i;:::-;5281:119;5439:1;5464:53;5509:7;5500:6;5489:9;5485:22;5464:53;:::i;:::-;5454:63;;5410:117;5566:2;5592:53;5637:7;5628:6;5617:9;5613:22;5592:53;:::i;:::-;5582:63;;5537:118;5188:474;;;;;:::o;5668:180::-;5716:77;5713:1;5706:88;5813:4;5810:1;5803:15;5837:4;5834:1;5827:15;5854:320;5898:6;5935:1;5929:4;5925:12;5915:22;;5982:1;5976:4;5972:12;6003:18;5993:81;;6059:4;6051:6;6047:17;6037:27;;5993:81;6121:2;6113:6;6110:14;6090:18;6087:38;6084:84;;6140:18;;:::i;:::-;6084:84;5905:269;5854:320;;;:::o;6180:180::-;6228:77;6225:1;6218:88;6325:4;6322:1;6315:15;6349:4;6346:1;6339:15;6366:191;6406:3;6425:20;6443:1;6425:20;:::i;:::-;6420:25;;6459:20;6477:1;6459:20;:::i;:::-;6454:25;;6502:1;6499;6495:9;6488:16;;6523:3;6520:1;6517:10;6514:36;;;6530:18;;:::i;:::-;6514:36;6366:191;;;;:::o;6563:224::-;6703:34;6699:1;6691:6;6687:14;6680:58;6772:7;6767:2;6759:6;6755:15;6748:32;6563:224;:::o;6793:366::-;6935:3;6956:67;7020:2;7015:3;6956:67;:::i;:::-;6949:74;;7032:93;7121:3;7032:93;:::i;:::-;7150:2;7145:3;7141:12;7134:19;;6793:366;;;:::o;7165:419::-;7331:4;7369:2;7358:9;7354:18;7346:26;;7418:9;7412:4;7408:20;7404:1;7393:9;7389:17;7382:47;7446:131;7572:4;7446:131;:::i;:::-;7438:139;;7165:419;;;:::o;7590:223::-;7730:34;7726:1;7718:6;7714:14;7707:58;7799:6;7794:2;7786:6;7782:15;7775:31;7590:223;:::o;7819:366::-;7961:3;7982:67;8046:2;8041:3;7982:67;:::i;:::-;7975:74;;8058:93;8147:3;8058:93;:::i;:::-;8176:2;8171:3;8167:12;8160:19;;7819:366;;;:::o;8191:419::-;8357:4;8395:2;8384:9;8380:18;8372:26;;8444:9;8438:4;8434:20;8430:1;8419:9;8415:17;8408:47;8472:131;8598:4;8472:131;:::i;:::-;8464:139;;8191:419;;;:::o;8616:221::-;8756:34;8752:1;8744:6;8740:14;8733:58;8825:4;8820:2;8812:6;8808:15;8801:29;8616:221;:::o;8843:366::-;8985:3;9006:67;9070:2;9065:3;9006:67;:::i;:::-;8999:74;;9082:93;9171:3;9082:93;:::i;:::-;9200:2;9195:3;9191:12;9184:19;;8843:366;;;:::o;9215:419::-;9381:4;9419:2;9408:9;9404:18;9396:26;;9468:9;9462:4;9458:20;9454:1;9443:9;9439:17;9432:47;9496:131;9622:4;9496:131;:::i;:::-;9488:139;;9215:419;;;:::o;9640:179::-;9780:31;9776:1;9768:6;9764:14;9757:55;9640:179;:::o;9825:366::-;9967:3;9988:67;10052:2;10047:3;9988:67;:::i;:::-;9981:74;;10064:93;10153:3;10064:93;:::i;:::-;10182:2;10177:3;10173:12;10166:19;;9825:366;;;:::o;10197:419::-;10363:4;10401:2;10390:9;10386:18;10378:26;;10450:9;10444:4;10440:20;10436:1;10425:9;10421:17;10414:47;10478:131;10604:4;10478:131;:::i;:::-;10470:139;;10197:419;;;:::o;10622:224::-;10762:34;10758:1;10750:6;10746:14;10739:58;10831:7;10826:2;10818:6;10814:15;10807:32;10622:224;:::o;10852:366::-;10994:3;11015:67;11079:2;11074:3;11015:67;:::i;:::-;11008:74;;11091:93;11180:3;11091:93;:::i;:::-;11209:2;11204:3;11200:12;11193:19;;10852:366;;;:::o;11224:419::-;11390:4;11428:2;11417:9;11413:18;11405:26;;11477:9;11471:4;11467:20;11463:1;11452:9;11448:17;11441:47;11505:131;11631:4;11505:131;:::i;:::-;11497:139;;11224:419;;;:::o;11649:222::-;11789:34;11785:1;11777:6;11773:14;11766:58;11858:5;11853:2;11845:6;11841:15;11834:30;11649:222;:::o;11877:366::-;12019:3;12040:67;12104:2;12099:3;12040:67;:::i;:::-;12033:74;;12116:93;12205:3;12116:93;:::i;:::-;12234:2;12229:3;12225:12;12218:19;;11877:366;;;:::o;12249:419::-;12415:4;12453:2;12442:9;12438:18;12430:26;;12502:9;12496:4;12492:20;12488:1;12477:9;12473:17;12466:47;12530:131;12656:4;12530:131;:::i;:::-;12522:139;;12249:419;;;:::o;12674:225::-;12814:34;12810:1;12802:6;12798:14;12791:58;12883:8;12878:2;12870:6;12866:15;12859:33;12674:225;:::o;12905:366::-;13047:3;13068:67;13132:2;13127:3;13068:67;:::i;:::-;13061:74;;13144:93;13233:3;13144:93;:::i;:::-;13262:2;13257:3;13253:12;13246:19;;12905:366;;;:::o;13277:419::-;13443:4;13481:2;13470:9;13466:18;13458:26;;13530:9;13524:4;13520:20;13516:1;13505:9;13501:17;13494:47;13558:131;13684:4;13558:131;:::i;:::-;13550:139;;13277:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"931000","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2863","decimals()":"432","decreaseAllowance(address,uint256)":"infinite","increaseAllowance(address,uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2482","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256)":"15","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"15","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2828,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":2834,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":2836,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":2838,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":2840,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Paycrest.sol":{"Paycrest":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AmountIsZero","type":"error"},{"inputs":[],"name":"InvalidInstitutionCode","type":"error"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"}],"name":"InvalidParameter","type":"error"},{"inputs":[],"name":"InvalidSigner","type":"error"},{"inputs":[],"name":"NotWhitelisted","type":"error"},{"inputs":[],"name":"OnlyAggregator","type":"error"},{"inputs":[],"name":"OrderFulfilled","type":"error"},{"inputs":[],"name":"ThrowZeroAddress","type":"error"},{"inputs":[],"name":"ThrowZeroValue","type":"error"},{"inputs":[],"name":"TokenNotSupported","type":"error"},{"inputs":[],"name":"UnableToProcessRewards","type":"error"},{"inputs":[],"name":"Unsuported","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"institutionCode","type":"bytes32"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"protocolFee","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"primaryValidator","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"secondaryValidator","type":"uint64"}],"name":"PaycrestFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"}],"name":"Refunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"SettingManagerBool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"bytes8","name":"value","type":"bytes8"},{"indexed":false,"internalType":"bytes8","name":"status","type":"bytes8"}],"name":"SettingManagerForInstitution","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"Settled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferSenderFee","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_institutionCode","type":"bytes32"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint64","name":"","type":"uint64"},{"internalType":"uint64","name":"","type":"uint64"},{"internalType":"uint64","name":"","type":"uint64"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLiquidityAggregator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPaycrest.Order","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"code","type":"bytes32"}],"name":"getSupportedInstitutionName","outputs":[{"components":[{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"bytes32","name":"currency","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.InstitutionByCode","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"}],"name":"getSupportedInstitutions","outputs":[{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"getWhitelistedStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_usdc","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"refund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"institutions","type":"tuple[]"}],"name":"setSupportedInstitutions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"address","name":"_primaryValidator","type":"address"},{"internalType":"address[]","name":"_secondaryValidators","type":"address[]"},{"internalType":"address","name":"_liquidityProvider","type":"address"},{"internalType":"uint96","name":"_settlePercent","type":"uint96"}],"name":"settle","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateFeeRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_protocolFeePercent","type":"uint64"},{"internalType":"uint64","name":"_primaryValidatorPercent","type":"uint64"},{"internalType":"uint64","name":"_secondaryValidatorPercent","type":"uint64"}],"name":"updateProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Deposit(bytes32,uint256,uint256,bytes32,string)":{"details":"Emitted when deposit is made."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Refunded(bytes32)":{"details":"Emitted when aggregator refund transaction."},"Settled(bytes32,address,uint96)":{"details":"Emitted when aggregator settle transaction."},"TransferSenderFee(address,uint256)":{"details":"Emitted when sender get therir rewards."}},"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)":{"details":"See {createOrder-IPaycrest}. "},"getFeeDetails()":{"details":"See {getFeeDetails-IPaycrest}. "},"getLiquidityAggregator()":{"details":"See {getLiquidityAggregator-IPaycrest}. "},"getOrderInfo(bytes32)":{"details":"See {getOrderInfo-IPaycrest}. "},"getSupportedInstitutionName(bytes32)":{"details":"See {getSupportedInstitutionName-IPaycrest}. "},"getWhitelistedStatus(address)":{"details":"See {getWhitelistedStatus-IPaycrest}. "},"isTokenSupported(address)":{"details":"See {isTokenSupported-IPaycrest}. "},"owner()":{"details":"Returns the address of the current owner."},"refund(bytes32)":{"details":"See {refund-IPaycrest}. "},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"settle(bytes32,address,address[],address,uint96)":{"details":"See {settle-IPaycrest}. "},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3572":{"entryPoint":null,"id":3572,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_281":{"entryPoint":176,"id":281,"parameterSlots":0,"returnSlots":0},"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack":{"entryPoint":470,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":556,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":509,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":573,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":374,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":543,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a":{"entryPoint":391,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1638:23","statements":[{"body":{"nodeType":"YulBlock","src":"103:73:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"120:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"125:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"113:6:23"},"nodeType":"YulFunctionCall","src":"113:19:23"},"nodeType":"YulExpressionStatement","src":"113:19:23"},{"nodeType":"YulAssignment","src":"141:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"160:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"165:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"156:3:23"},"nodeType":"YulFunctionCall","src":"156:14:23"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"141:11:23"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"75:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:23","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"91:11:23","type":""}],"src":"7:169:23"},{"body":{"nodeType":"YulBlock","src":"288:120:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"310:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"318:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"306:3:23"},"nodeType":"YulFunctionCall","src":"306:14:23"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"322:34:23","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"299:6:23"},"nodeType":"YulFunctionCall","src":"299:58:23"},"nodeType":"YulExpressionStatement","src":"299:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"378:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"386:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"374:3:23"},"nodeType":"YulFunctionCall","src":"374:15:23"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"391:9:23","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"367:6:23"},"nodeType":"YulFunctionCall","src":"367:34:23"},"nodeType":"YulExpressionStatement","src":"367:34:23"}]},"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"280:6:23","type":""}],"src":"182:226:23"},{"body":{"nodeType":"YulBlock","src":"560:220:23","statements":[{"nodeType":"YulAssignment","src":"570:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"636:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"641:2:23","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"577:58:23"},"nodeType":"YulFunctionCall","src":"577:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"570:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"742:3:23"}],"functionName":{"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulIdentifier","src":"653:88:23"},"nodeType":"YulFunctionCall","src":"653:93:23"},"nodeType":"YulExpressionStatement","src":"653:93:23"},{"nodeType":"YulAssignment","src":"755:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"766:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"771:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:23"},"nodeType":"YulFunctionCall","src":"762:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"755:3:23"}]}]},"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"548:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"556:3:23","type":""}],"src":"414:366:23"},{"body":{"nodeType":"YulBlock","src":"957:248:23","statements":[{"nodeType":"YulAssignment","src":"967:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"979:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"990:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"975:3:23"},"nodeType":"YulFunctionCall","src":"975:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"967:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1014:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1025:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1010:3:23"},"nodeType":"YulFunctionCall","src":"1010:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1033:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1039:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1029:3:23"},"nodeType":"YulFunctionCall","src":"1029:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1003:6:23"},"nodeType":"YulFunctionCall","src":"1003:47:23"},"nodeType":"YulExpressionStatement","src":"1003:47:23"},{"nodeType":"YulAssignment","src":"1059:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1193:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1067:124:23"},"nodeType":"YulFunctionCall","src":"1067:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1059:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"937:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"952:4:23","type":""}],"src":"786:419:23"},{"body":{"nodeType":"YulBlock","src":"1254:43:23","statements":[{"nodeType":"YulAssignment","src":"1264:27:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1279:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"1286:4:23","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1275:3:23"},"nodeType":"YulFunctionCall","src":"1275:16:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1264:7:23"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1236:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1246:7:23","type":""}],"src":"1211:86:23"},{"body":{"nodeType":"YulBlock","src":"1364:51:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1381:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1402:5:23"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"1386:15:23"},"nodeType":"YulFunctionCall","src":"1386:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1374:6:23"},"nodeType":"YulFunctionCall","src":"1374:35:23"},"nodeType":"YulExpressionStatement","src":"1374:35:23"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1352:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1359:3:23","type":""}],"src":"1303:112:23"},{"body":{"nodeType":"YulBlock","src":"1515:120:23","statements":[{"nodeType":"YulAssignment","src":"1525:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1537:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1548:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:23"},"nodeType":"YulFunctionCall","src":"1533:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1525:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1601:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1614:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1625:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1610:3:23"},"nodeType":"YulFunctionCall","src":"1610:17:23"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"1561:39:23"},"nodeType":"YulFunctionCall","src":"1561:67:23"},"nodeType":"YulExpressionStatement","src":"1561:67:23"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1487:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1499:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1510:4:23","type":""}],"src":"1421:214:23"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is initi\")\n\n        mstore(add(memPtr, 32), \"alizing\")\n\n    }\n\n    function abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":23,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6080604052620186a0606555611388606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101f4606660086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101f4606660106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503480156200009957600080fd5b50620000aa620000b060201b60201c565b6200025a565b600060019054906101000a900460ff161562000103576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000fa90620001fd565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620001745760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff6040516200016b91906200023d565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b6000620001e560278362000176565b9150620001f28262000187565b604082019050919050565b600060208201905081810360008301526200021881620001d6565b9050919050565b600060ff82169050919050565b62000237816200021f565b82525050565b60006020820190506200025460008301846200022c565b92915050565b613680806200026a6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806387490d86116100a2578063c4d66de811610071578063c4d66de8146102e2578063d12ff20a146102fe578063d8e8de341461032e578063e5b32cdf1461035e578063f2fde38b1461038e57610116565b806387490d86146102575780638da5cb5b1461028757806399e3c0b4146102a5578063b810c636146102c157610116565b8063715018a6116100e9578063715018a6146101a15780637249fbb6146101ab57806375151b63146101db578063764bc3551461020b578063768c6ec01461022757610116565b8063026213381461011b5780632ebc53561461014b57806332200882146101695780633d8f8fb214610185575b600080fd5b610135600480360381019061013091906124f0565b6103aa565b604051610142919061260a565b60405180910390f35b6101536104e8565b604051610160919061266d565b60405180910390f35b610183600480360381019061017e9190612836565b610512565b005b61019f600480360381019061019a91906128be565b610626565b005b6101a96107d8565b005b6101c560048036038101906101c091906124f0565b6107ec565b6040516101d29190612919565b60405180910390f35b6101f560048036038101906101f09190612934565b610a7c565b6040516102029190612919565b60405180910390f35b610225600480360381019061022091906129a1565b610ad2565b005b610241600480360381019061023c91906124f0565b610b95565b60405161024e9190612b09565b60405180910390f35b610271600480360381019061026c91906124f0565b610dc6565b60405161027e9190612b54565b60405180910390f35b61028f610e07565b60405161029c919061266d565b60405180910390f35b6102bf60048036038101906102ba9190612b9b565b610e31565b005b6102c961101e565b6040516102d99493929190612c0c565b60405180910390f35b6102fc60048036038101906102f79190612934565b61107a565b005b61031860048036038101906103139190612d04565b611211565b6040516103259190612de9565b60405180910390f35b61034860048036038101906103439190612934565b611647565b6040516103559190612919565b60405180910390f35b61037860048036038101906103739190612e5a565b61169d565b6040516103859190612919565b60405180910390f35b6103a860048036038101906103a39190612934565b611c01565b005b60606000606c6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610427578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906103e1565b50505050905060008151905060008167ffffffffffffffff81111561044f5761044e61269e565b5b60405190808252806020026020018201604052801561048857816020015b61047561237c565b81526020019060019003908161046d5790505b50905060005b828110156104dc578381815181106104a9576104a8612ef4565b5b60200260200101518282815181106104c4576104c3612ef4565b5b6020026020010181905250808060010191505061048e565b50809350505050919050565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61051a611c84565b60008151905060005b8181101561062057606c600085815260200190815260200160002083828151811061055157610550612ef4565b5b602002602001015190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060405180604001604052808483815181106105b6576105b5612ef4565b5b602002602001015160200151815260200185815250606d60008584815181106105e2576105e1612ef4565b5b602002602001015160000151815260200190815260200160002060008201518160000155602082015181600101559050508080600101915050610523565b50505050565b61062e611c84565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610694576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036106fd5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f7200000000000000000000000000000000000000000000820361076a5780606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107d4565b7f7374616b6500000000000000000000000000000000000000000000000000000082036107d35780606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b6107e0611c84565b6107ea6000611d02565b565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610875576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606e6000838152602001908152602001600020600401600c9054906101000a900460ff16156108d0576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001606e6000848152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055506000606e600084815260200190815260200160002060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550606e600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606e600085815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606e6000868152602001908152602001600020600601546040518363ffffffff1660e01b8152600401610a02929190612f23565b6020604051808303816000875af1158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612f61565b50817ffe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf060405160405180910390a260019050919050565b6000606a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610ada611c84565b82606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081606660086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080606660106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fced6b79f1325154aec329e6ff932857cb4f91fa8eb4c6791ce5b460f47995758838383604051610b8893929190612f8e565b60405180910390a1505050565b610b9d61239c565b606e6000838152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff161515151581526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b610dce61245e565b606d6000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e39611c84565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e9f576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f746f6b656e0000000000000000000000000000000000000000000000000000008303610f1e5780606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c69737400000000000000000000000000000000000000000000008303610fa15780606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610fde565b826040517f48bae5b8000000000000000000000000000000000000000000000000000000008152600401610fd59190612de9565b60405180910390fd5b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161101193929190612fc5565b60405180910390a1505050565b600080600080606660009054906101000a900467ffffffffffffffff16606660089054906101000a900467ffffffffffffffff16606660109054906101000a900467ffffffffffffffff16606554935093509350935090919293565b60008060019054906101000a900460ff161590508080156110ab5750600160008054906101000a900460ff1660ff16105b806110d857506110ba30611dc8565b1580156110d75750600160008054906101000a900460ff1660ff16145b5b611117576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110e9061307f565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611154576001600060016101000a81548160ff0219169083151502179055505b6001606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506111b4611deb565b801561120d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161120491906130f1565b60405180910390a15b5050565b60006112208a8a86898c611e44565b8973ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b815260040161125d9392919061310c565b6020604051808303816000875af115801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a09190612f61565b50606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906112f190613172565b919050555033606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051602001611348929190612f23565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001886bffffffffffffffffffffffff1681526020016000151581526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016065546bffffffffffffffffffffffff1681526020018a815250606e600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506101008201518160060155905050866bffffffffffffffffffffffff1689827fbcd03c92e4cfe8dc461872f6cd67c811155fa7d92c918619e82e6b6b44733e7e8b8787604051611632939291906131f6565b60405180910390a49998505050505050505050565b6000606b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611726576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606e6000888152602001908152602001600020600401600c9054906101000a900460ff1615611781576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606e600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082606e60008a815260200190815260200160002060050160148282829054906101000a90046bffffffffffffffffffffffff166117f99190613228565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506000606e60008a815260200190815260200160002060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff160361189b576001606e60008a8152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055505b60006118a78985612026565b90506000606e60008b815260200190815260200160002060030154905060008111156118d7576118d68a6121bf565b5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600001516040518363ffffffff1660e01b8152600401611938929190612f23565b6020604051808303816000875af1158015611957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197b9190612f61565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8784602001516040518363ffffffff1660e01b81526004016119bb929190612f23565b6020604051808303816000875af11580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe9190612f61565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684606001518560400151611a529190613268565b6040518363ffffffff1660e01b8152600401611a6f929190612f23565b6020604051808303816000875af1158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab29190612f61565b506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a223c368c868d8d8d89604001518a606001516040518863ffffffff1660e01b8152600401611b249796959493929190613350565b6020604051808303816000875af1158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b679190612f61565b905080611ba0576040517fbcb00c1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168b7fce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e3388604051611be791906133c9565b60405180910390a360019450505050509695505050505050565b611c09611c84565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6f90613456565b60405180910390fd5b611c8181611d02565b50565b611c8c612313565b73ffffffffffffffffffffffffffffffffffffffff16611caa610e07565b73ffffffffffffffffffffffffffffffffffffffff1614611d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf7906134c2565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3190613554565b60405180910390fd5b611e4261231b565b565b606a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611ec7576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008403611f01576040517f43ad20fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611f67576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611fcd576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000801b606d6000838152602001908152602001600020600001540361201f576040517f38f5fc3500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b61202e61247e565b6000606e6000858152602001908152602001600020600601549050606e6000858152602001908152602001600020600301548161206b9190613574565b9050606554836bffffffffffffffffffffffff168261208a91906135a8565b6120949190613619565b826020018181525050606554606660009054906101000a900467ffffffffffffffff1667ffffffffffffffff1683602001516120d091906135a8565b6120da9190613619565b826000018181525050816000015182602001516120f79190613574565b826020018181525050606554606660089054906101000a900467ffffffffffffffff1667ffffffffffffffff16836000015161213391906135a8565b61213d9190613619565b826040018181525050606554606660109054906101000a900467ffffffffffffffff1667ffffffffffffffff16836000015161217991906135a8565b6121839190613619565b826060018181525050816060015182604001516121a09190613268565b82600001516121af9190613574565b8260000181815250505092915050565b6000606e600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000606e6000848152602001908152602001600020600301549050606e600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401612286929190612f23565b6020604051808303816000875af11580156122a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c99190612f61565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b600033905090565b600060019054906101000a900460ff1661236a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236190613554565b60405180910390fd5b61237a612375612313565b611d02565b565b604051806040016040528060008019168152602001600080191681525090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006bffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008019168152602001600080191681525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6124cd816124ba565b81146124d857600080fd5b50565b6000813590506124ea816124c4565b92915050565b600060208284031215612506576125056124b0565b5b6000612514848285016124db565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612552816124ba565b82525050565b60408201600082015161256e6000850182612549565b5060208201516125816020850182612549565b50505050565b60006125938383612558565b60408301905092915050565b6000602082019050919050565b60006125b78261251d565b6125c18185612528565b93506125cc83612539565b8060005b838110156125fd5781516125e48882612587565b97506125ef8361259f565b9250506001810190506125d0565b5085935050505092915050565b6000602082019050818103600083015261262481846125ac565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126578261262c565b9050919050565b6126678161264c565b82525050565b6000602082019050612682600083018461265e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6126d68261268d565b810181811067ffffffffffffffff821117156126f5576126f461269e565b5b80604052505050565b60006127086124a6565b905061271482826126cd565b919050565b600067ffffffffffffffff8211156127345761273361269e565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156127655761276461274a565b5b61276f60406126fe565b9050600061277f848285016124db565b6000830152506020612793848285016124db565b60208301525092915050565b60006127b26127ad84612719565b6126fe565b905080838252602082019050604084028301858111156127d5576127d4612745565b5b835b818110156127fe57806127ea888261274f565b8452602084019350506040810190506127d7565b5050509392505050565b600082601f83011261281d5761281c612688565b5b813561282d84826020860161279f565b91505092915050565b6000806040838503121561284d5761284c6124b0565b5b600061285b858286016124db565b925050602083013567ffffffffffffffff81111561287c5761287b6124b5565b5b61288885828601612808565b9150509250929050565b61289b8161264c565b81146128a657600080fd5b50565b6000813590506128b881612892565b92915050565b600080604083850312156128d5576128d46124b0565b5b60006128e3858286016124db565b92505060206128f4858286016128a9565b9150509250929050565b60008115159050919050565b612913816128fe565b82525050565b600060208201905061292e600083018461290a565b92915050565b60006020828403121561294a576129496124b0565b5b6000612958848285016128a9565b91505092915050565b600067ffffffffffffffff82169050919050565b61297e81612961565b811461298957600080fd5b50565b60008135905061299b81612975565b92915050565b6000806000606084860312156129ba576129b96124b0565b5b60006129c88682870161298c565b93505060206129d98682870161298c565b92505060406129ea8682870161298c565b9150509250925092565b6129fd8161264c565b82525050565b6000819050919050565b612a1681612a03565b82525050565b60006bffffffffffffffffffffffff82169050919050565b612a3d81612a1c565b82525050565b612a4c816128fe565b82525050565b61012082016000820151612a6960008501826129f4565b506020820151612a7c60208501826129f4565b506040820151612a8f60408501826129f4565b506060820151612aa26060850182612a0d565b506080820151612ab56080850182612a34565b5060a0820151612ac860a0850182612a43565b5060c0820151612adb60c08501826129f4565b5060e0820151612aee60e0850182612a34565b50610100820151612b03610100850182612a0d565b50505050565b600061012082019050612b1f6000830184612a52565b92915050565b604082016000820151612b3b6000850182612549565b506020820151612b4e6020850182612549565b50505050565b6000604082019050612b696000830184612b25565b92915050565b612b78816128fe565b8114612b8357600080fd5b50565b600081359050612b9581612b6f565b92915050565b600080600060608486031215612bb457612bb36124b0565b5b6000612bc2868287016124db565b9350506020612bd3868287016128a9565b9250506040612be486828701612b86565b9150509250925092565b612bf781612961565b82525050565b612c0681612a03565b82525050565b6000608082019050612c216000830187612bee565b612c2e6020830186612bee565b612c3b6040830185612bee565b612c486060830184612bfd565b95945050505050565b612c5a81612a03565b8114612c6557600080fd5b50565b600081359050612c7781612c51565b92915050565b612c8681612a1c565b8114612c9157600080fd5b50565b600081359050612ca381612c7d565b92915050565b600080fd5b60008083601f840112612cc457612cc3612688565b5b8235905067ffffffffffffffff811115612ce157612ce0612ca9565b5b602083019150836001820283011115612cfd57612cfc612745565b5b9250929050565b60008060008060008060008060006101008a8c031215612d2757612d266124b0565b5b6000612d358c828d016128a9565b9950506020612d468c828d01612c68565b9850506040612d578c828d016124db565b9750506060612d688c828d01612c94565b9650506080612d798c828d016128a9565b95505060a0612d8a8c828d01612c68565b94505060c0612d9b8c828d016128a9565b93505060e08a013567ffffffffffffffff811115612dbc57612dbb6124b5565b5b612dc88c828d01612cae565b92509250509295985092959850929598565b612de3816124ba565b82525050565b6000602082019050612dfe6000830184612dda565b92915050565b60008083601f840112612e1a57612e19612688565b5b8235905067ffffffffffffffff811115612e3757612e36612ca9565b5b602083019150836020820283011115612e5357612e52612745565b5b9250929050565b60008060008060008060a08789031215612e7757612e766124b0565b5b6000612e8589828a016124db565b9650506020612e9689828a016128a9565b955050604087013567ffffffffffffffff811115612eb757612eb66124b5565b5b612ec389828a01612e04565b94509450506060612ed689828a016128a9565b9250506080612ee789828a01612c94565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050612f38600083018561265e565b612f456020830184612bfd565b9392505050565b600081519050612f5b81612b6f565b92915050565b600060208284031215612f7757612f766124b0565b5b6000612f8584828501612f4c565b91505092915050565b6000606082019050612fa36000830186612bee565b612fb06020830185612bee565b612fbd6040830184612bee565b949350505050565b6000606082019050612fda6000830186612dda565b612fe7602083018561265e565b612ff4604083018461290a565b949350505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613069602e83612ffc565b91506130748261300d565b604082019050919050565b600060208201905081810360008301526130988161305c565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006130db6130d66130d18461309f565b6130b6565b6130a9565b9050919050565b6130eb816130c0565b82525050565b600060208201905061310660008301846130e2565b92915050565b6000606082019050613121600083018661265e565b61312e602083018561265e565b61313b6040830184612bfd565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061317d82612a03565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131af576131ae613143565b5b600182019050919050565b82818337600083830152505050565b60006131d58385612ffc565b93506131e28385846131ba565b6131eb8361268d565b840190509392505050565b600060408201905061320b6000830186612dda565b818103602083015261321e8184866131c9565b9050949350505050565b600061323382612a1c565b915061323e83612a1c565b925082820390506bffffffffffffffffffffffff81111561326257613261613143565b5b92915050565b600061327382612a03565b915061327e83612a03565b925082820190508082111561329657613295613143565b5b92915050565b600082825260208201905092915050565b6000819050919050565b60006132c383836129f4565b60208301905092915050565b60006132de60208401846128a9565b905092915050565b6000602082019050919050565b60006132ff838561329c565b935061330a826132ad565b8060005b858110156133435761332082846132cf565b61332a88826132b7565b9750613335836132e6565b92505060018101905061330e565b5085925050509392505050565b600060c082019050613365600083018a612dda565b613372602083018961265e565b61337f604083018861265e565b81810360608301526133928186886132f3565b90506133a16080830185612bfd565b6133ae60a0830184612bfd565b98975050505050505050565b6133c381612a1c565b82525050565b60006020820190506133de60008301846133ba565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613440602683612ffc565b915061344b826133e4565b604082019050919050565b6000602082019050818103600083015261346f81613433565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006134ac602083612ffc565b91506134b782613476565b602082019050919050565b600060208201905081810360008301526134db8161349f565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061353e602b83612ffc565b9150613549826134e2565b604082019050919050565b6000602082019050818103600083015261356d81613531565b9050919050565b600061357f82612a03565b915061358a83612a03565b92508282039050818111156135a2576135a1613143565b5b92915050565b60006135b382612a03565b91506135be83612a03565b92508282026135cc81612a03565b915082820484148315176135e3576135e2613143565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061362482612a03565b915061362f83612a03565b92508261363f5761363e6135ea565b5b82820490509291505056fea2646970667358221220eb281f34df75f66f2570f9bbcf563667441feeae59272e3e7ff94f6441a9d99464736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH3 0x186A0 PUSH1 0x65 SSTORE PUSH2 0x1388 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1F4 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1F4 PUSH1 0x66 PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0x99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xAA PUSH3 0xB0 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x25A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x103 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xFA SWAP1 PUSH3 0x1FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP1 AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH3 0x174 JUMPI PUSH1 0xFF PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH3 0x16B SWAP2 SWAP1 PUSH3 0x23D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C697A696E6700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1E5 PUSH1 0x27 DUP4 PUSH3 0x176 JUMP JUMPDEST SWAP2 POP PUSH3 0x1F2 DUP3 PUSH3 0x187 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x218 DUP2 PUSH3 0x1D6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x237 DUP2 PUSH3 0x21F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x254 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x22C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3680 DUP1 PUSH3 0x26A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x116 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x87490D86 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xC4D66DE8 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x2E2 JUMPI DUP1 PUSH4 0xD12FF20A EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0xD8E8DE34 EQ PUSH2 0x32E JUMPI DUP1 PUSH4 0xE5B32CDF EQ PUSH2 0x35E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x38E JUMPI PUSH2 0x116 JUMP JUMPDEST DUP1 PUSH4 0x87490D86 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x287 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x2C1 JUMPI PUSH2 0x116 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x7249FBB6 EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x764BC355 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x768C6EC0 EQ PUSH2 0x227 JUMPI PUSH2 0x116 JUMP JUMPDEST DUP1 PUSH4 0x2621338 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x2EBC5356 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x32200882 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0x3D8F8FB2 EQ PUSH2 0x185 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x135 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x130 SWAP2 SWAP1 PUSH2 0x24F0 JUMP JUMPDEST PUSH2 0x3AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x142 SWAP2 SWAP1 PUSH2 0x260A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x153 PUSH2 0x4E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 SWAP2 SWAP1 PUSH2 0x266D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x183 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17E SWAP2 SWAP1 PUSH2 0x2836 JUMP JUMPDEST PUSH2 0x512 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x19F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19A SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST PUSH2 0x626 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A9 PUSH2 0x7D8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C0 SWAP2 SWAP1 PUSH2 0x24F0 JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x2934 JUMP JUMPDEST PUSH2 0xA7C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x202 SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x225 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x220 SWAP2 SWAP1 PUSH2 0x29A1 JUMP JUMPDEST PUSH2 0xAD2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x241 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23C SWAP2 SWAP1 PUSH2 0x24F0 JUMP JUMPDEST PUSH2 0xB95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24E SWAP2 SWAP1 PUSH2 0x2B09 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x271 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26C SWAP2 SWAP1 PUSH2 0x24F0 JUMP JUMPDEST PUSH2 0xDC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27E SWAP2 SWAP1 PUSH2 0x2B54 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28F PUSH2 0xE07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29C SWAP2 SWAP1 PUSH2 0x266D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BA SWAP2 SWAP1 PUSH2 0x2B9B JUMP JUMPDEST PUSH2 0xE31 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C9 PUSH2 0x101E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F7 SWAP2 SWAP1 PUSH2 0x2934 JUMP JUMPDEST PUSH2 0x107A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x318 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x313 SWAP2 SWAP1 PUSH2 0x2D04 JUMP JUMPDEST PUSH2 0x1211 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x2DE9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x348 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x343 SWAP2 SWAP1 PUSH2 0x2934 JUMP JUMPDEST PUSH2 0x1647 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x355 SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x378 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x373 SWAP2 SWAP1 PUSH2 0x2E5A JUMP JUMPDEST PUSH2 0x169D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x385 SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A3 SWAP2 SWAP1 PUSH2 0x2934 JUMP JUMPDEST PUSH2 0x1C01 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x6C PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x427 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x3E1 JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x44F JUMPI PUSH2 0x44E PUSH2 0x269E JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x488 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x475 PUSH2 0x237C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x46D JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4DC JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4A9 JUMPI PUSH2 0x4A8 PUSH2 0x2EF4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4C4 JUMPI PUSH2 0x4C3 PUSH2 0x2EF4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x48E JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x69 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x1C84 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x620 JUMPI PUSH1 0x6C PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x551 JUMPI PUSH2 0x550 PUSH2 0x2EF4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5B6 JUMPI PUSH2 0x5B5 PUSH2 0x2EF4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x6D PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5E2 JUMPI PUSH2 0x5E1 PUSH2 0x2EF4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x523 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x62E PUSH2 0x1C84 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x694 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x6FD JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x76A JUMPI DUP1 PUSH1 0x69 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x7D4 JUMP JUMPDEST PUSH32 0x7374616B65000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x7D3 JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7E0 PUSH2 0x1C84 JUMP JUMPDEST PUSH2 0x7EA PUSH1 0x0 PUSH2 0x1D02 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x69 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x875 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE9D8299200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x56F1733F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x6E PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x6E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x6E PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6E PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA02 SWAP3 SWAP2 SWAP1 PUSH2 0x2F23 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA21 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA45 SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST POP DUP2 PUSH32 0xFE509803C09416B28FF3D8F690C8B0C61462A892C46D5430C8FB20ABE472DAF0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6A PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xADA PUSH2 0x1C84 JUMP JUMPDEST DUP3 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x66 PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xCED6B79F1325154AEC329E6FF932857CB4F91FA8EB4C6791CE5B460F47995758 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xB88 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F8E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0xB9D PUSH2 0x239C JUMP JUMPDEST PUSH1 0x6E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDCE PUSH2 0x245E JUMP JUMPDEST PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xE39 PUSH2 0x1C84 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE9F JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0xF1E JUMPI DUP1 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0xFA1 JUMPI DUP1 PUSH1 0x6B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xFDE JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH32 0x48BAE5B800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFD5 SWAP2 SWAP1 PUSH2 0x2DE9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1011 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2FC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x66 PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x65 SLOAD SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP1 SWAP2 SWAP3 SWAP4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x10AB JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x10D8 JUMPI POP PUSH2 0x10BA ADDRESS PUSH2 0x1DC8 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x10D7 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x1117 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x110E SWAP1 PUSH2 0x307F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1154 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x11B4 PUSH2 0x1DEB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x120D JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x1204 SWAP2 SWAP1 PUSH2 0x30F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1220 DUP11 DUP11 DUP7 DUP10 DUP13 PUSH2 0x1E44 JUMP JUMPDEST DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP13 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x125D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x310C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x127C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12A0 SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST POP PUSH1 0x6F PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x12F1 SWAP1 PUSH2 0x3172 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH1 0x6F PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1348 SWAP3 SWAP2 SWAP1 PUSH2 0x2F23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x65 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE POP PUSH1 0x6E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 DUP3 PUSH32 0xBCD03C92E4CFE8DC461872F6CD67C811155FA7D92C918619E82E6B6B44733E7E DUP12 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1632 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6B PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x69 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1726 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE9D8299200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6E PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1781 JUMPI PUSH1 0x40 MLOAD PUSH32 0x56F1733F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 PUSH1 0x6E PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x17F9 SWAP2 SWAP1 PUSH2 0x3228 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x189B JUMPI PUSH1 0x1 PUSH1 0x6E PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH2 0x18A7 DUP10 DUP6 PUSH2 0x2026 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x18D7 JUMPI PUSH2 0x18D6 DUP11 PUSH2 0x21BF JUMP JUMPDEST JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1938 SWAP3 SWAP2 SWAP1 PUSH2 0x2F23 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1957 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x197B SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP8 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19BB SWAP3 SWAP2 SWAP1 PUSH2 0x2F23 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x19DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19FE SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x68 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x1A52 SWAP2 SWAP1 PUSH2 0x3268 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A6F SWAP3 SWAP2 SWAP1 PUSH2 0x2F23 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A8E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AB2 SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x68 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4A223C36 DUP13 DUP7 DUP14 DUP14 DUP14 DUP10 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B24 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3350 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B43 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B67 SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1BA0 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBCB00C1600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH32 0xCE38752AC5ED47DD3CFF11297A4261A0C644BE6CA65DC3FC7AE1C3A97C209E33 DUP9 PUSH1 0x40 MLOAD PUSH2 0x1BE7 SWAP2 SWAP1 PUSH2 0x33C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP5 POP POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1C09 PUSH2 0x1C84 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1C78 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6F SWAP1 PUSH2 0x3456 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C81 DUP2 PUSH2 0x1D02 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1C8C PUSH2 0x2313 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1CAA PUSH2 0xE07 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D00 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CF7 SWAP1 PUSH2 0x34C2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E31 SWAP1 PUSH2 0x3554 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E42 PUSH2 0x231B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x6A PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1EC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3DD1B30500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 SUB PUSH2 0x1F01 JUMPI PUSH1 0x40 MLOAD PUSH32 0x43AD20FC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1F67 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1FCD JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x201F JUMPI PUSH1 0x40 MLOAD PUSH32 0x38F5FC3500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x202E PUSH2 0x247E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x6E PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD DUP2 PUSH2 0x206B SWAP2 SWAP1 PUSH2 0x3574 JUMP JUMPDEST SWAP1 POP PUSH1 0x65 SLOAD DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x208A SWAP2 SWAP1 PUSH2 0x35A8 JUMP JUMPDEST PUSH2 0x2094 SWAP2 SWAP1 PUSH2 0x3619 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x20D0 SWAP2 SWAP1 PUSH2 0x35A8 JUMP JUMPDEST PUSH2 0x20DA SWAP2 SWAP1 PUSH2 0x3619 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x20F7 SWAP2 SWAP1 PUSH2 0x3574 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x2133 SWAP2 SWAP1 PUSH2 0x35A8 JUMP JUMPDEST PUSH2 0x213D SWAP2 SWAP1 PUSH2 0x3619 JUMP JUMPDEST DUP3 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x2179 SWAP2 SWAP1 PUSH2 0x35A8 JUMP JUMPDEST PUSH2 0x2183 SWAP2 SWAP1 PUSH2 0x3619 JUMP JUMPDEST DUP3 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x60 ADD MLOAD DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x21A0 SWAP2 SWAP1 PUSH2 0x3268 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x21AF SWAP2 SWAP1 PUSH2 0x3574 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x6E PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2286 SWAP3 SWAP2 SWAP1 PUSH2 0x2F23 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x22A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22C9 SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x96C76D5AEC8A8C11A9C8E02768E3FA309347330D08961E0CF9FD43B349B684C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x236A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2361 SWAP1 PUSH2 0x3554 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x237A PUSH2 0x2375 PUSH2 0x2313 JUMP JUMPDEST PUSH2 0x1D02 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x24CD DUP2 PUSH2 0x24BA JUMP JUMPDEST DUP2 EQ PUSH2 0x24D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24EA DUP2 PUSH2 0x24C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2506 JUMPI PUSH2 0x2505 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2514 DUP5 DUP3 DUP6 ADD PUSH2 0x24DB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2552 DUP2 PUSH2 0x24BA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x256E PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2549 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2581 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2549 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2593 DUP4 DUP4 PUSH2 0x2558 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25B7 DUP3 PUSH2 0x251D JUMP JUMPDEST PUSH2 0x25C1 DUP2 DUP6 PUSH2 0x2528 JUMP JUMPDEST SWAP4 POP PUSH2 0x25CC DUP4 PUSH2 0x2539 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25FD JUMPI DUP2 MLOAD PUSH2 0x25E4 DUP9 DUP3 PUSH2 0x2587 JUMP JUMPDEST SWAP8 POP PUSH2 0x25EF DUP4 PUSH2 0x259F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x25D0 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2624 DUP2 DUP5 PUSH2 0x25AC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2657 DUP3 PUSH2 0x262C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2667 DUP2 PUSH2 0x264C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2682 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x265E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x26D6 DUP3 PUSH2 0x268D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x26F5 JUMPI PUSH2 0x26F4 PUSH2 0x269E JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2708 PUSH2 0x24A6 JUMP JUMPDEST SWAP1 POP PUSH2 0x2714 DUP3 DUP3 PUSH2 0x26CD JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2734 JUMPI PUSH2 0x2733 PUSH2 0x269E JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2765 JUMPI PUSH2 0x2764 PUSH2 0x274A JUMP JUMPDEST JUMPDEST PUSH2 0x276F PUSH1 0x40 PUSH2 0x26FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x277F DUP5 DUP3 DUP6 ADD PUSH2 0x24DB JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x2793 DUP5 DUP3 DUP6 ADD PUSH2 0x24DB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27B2 PUSH2 0x27AD DUP5 PUSH2 0x2719 JUMP JUMPDEST PUSH2 0x26FE JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x27D5 JUMPI PUSH2 0x27D4 PUSH2 0x2745 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x27FE JUMPI DUP1 PUSH2 0x27EA DUP9 DUP3 PUSH2 0x274F JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x27D7 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x281D JUMPI PUSH2 0x281C PUSH2 0x2688 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x282D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x279F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x284D JUMPI PUSH2 0x284C PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x285B DUP6 DUP3 DUP7 ADD PUSH2 0x24DB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x287C JUMPI PUSH2 0x287B PUSH2 0x24B5 JUMP JUMPDEST JUMPDEST PUSH2 0x2888 DUP6 DUP3 DUP7 ADD PUSH2 0x2808 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x289B DUP2 PUSH2 0x264C JUMP JUMPDEST DUP2 EQ PUSH2 0x28A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x28B8 DUP2 PUSH2 0x2892 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28D5 JUMPI PUSH2 0x28D4 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28E3 DUP6 DUP3 DUP7 ADD PUSH2 0x24DB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x28F4 DUP6 DUP3 DUP7 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2913 DUP2 PUSH2 0x28FE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x292E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x290A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x294A JUMPI PUSH2 0x2949 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2958 DUP5 DUP3 DUP6 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x297E DUP2 PUSH2 0x2961 JUMP JUMPDEST DUP2 EQ PUSH2 0x2989 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x299B DUP2 PUSH2 0x2975 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x29BA JUMPI PUSH2 0x29B9 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x29C8 DUP7 DUP3 DUP8 ADD PUSH2 0x298C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x29D9 DUP7 DUP3 DUP8 ADD PUSH2 0x298C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x29EA DUP7 DUP3 DUP8 ADD PUSH2 0x298C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x29FD DUP2 PUSH2 0x264C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A16 DUP2 PUSH2 0x2A03 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A3D DUP2 PUSH2 0x2A1C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2A4C DUP2 PUSH2 0x28FE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2A69 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x29F4 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2A7C PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x29F4 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2A8F PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x29F4 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2AA2 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2A0D JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2AB5 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2A34 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2AC8 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2A43 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2ADB PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x29F4 JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x2AEE PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2A34 JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x2B03 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x2A0D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x2B1F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2A52 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2B3B PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2549 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2B4E PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2549 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2B69 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2B25 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2B78 DUP2 PUSH2 0x28FE JUMP JUMPDEST DUP2 EQ PUSH2 0x2B83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2B95 DUP2 PUSH2 0x2B6F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2BB4 JUMPI PUSH2 0x2BB3 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2BC2 DUP7 DUP3 DUP8 ADD PUSH2 0x24DB JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2BD3 DUP7 DUP3 DUP8 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2BE4 DUP7 DUP3 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x2BF7 DUP2 PUSH2 0x2961 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C06 DUP2 PUSH2 0x2A03 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2C21 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2BEE JUMP JUMPDEST PUSH2 0x2C2E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2BEE JUMP JUMPDEST PUSH2 0x2C3B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2BEE JUMP JUMPDEST PUSH2 0x2C48 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2BFD JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2C5A DUP2 PUSH2 0x2A03 JUMP JUMPDEST DUP2 EQ PUSH2 0x2C65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2C77 DUP2 PUSH2 0x2C51 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C86 DUP2 PUSH2 0x2A1C JUMP JUMPDEST DUP2 EQ PUSH2 0x2C91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2CA3 DUP2 PUSH2 0x2C7D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2CC4 JUMPI PUSH2 0x2CC3 PUSH2 0x2688 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2CE1 JUMPI PUSH2 0x2CE0 PUSH2 0x2CA9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2CFD JUMPI PUSH2 0x2CFC PUSH2 0x2745 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x2D27 JUMPI PUSH2 0x2D26 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D35 DUP13 DUP3 DUP14 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP10 POP POP PUSH1 0x20 PUSH2 0x2D46 DUP13 DUP3 DUP14 ADD PUSH2 0x2C68 JUMP JUMPDEST SWAP9 POP POP PUSH1 0x40 PUSH2 0x2D57 DUP13 DUP3 DUP14 ADD PUSH2 0x24DB JUMP JUMPDEST SWAP8 POP POP PUSH1 0x60 PUSH2 0x2D68 DUP13 DUP3 DUP14 ADD PUSH2 0x2C94 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x80 PUSH2 0x2D79 DUP13 DUP3 DUP14 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP6 POP POP PUSH1 0xA0 PUSH2 0x2D8A DUP13 DUP3 DUP14 ADD PUSH2 0x2C68 JUMP JUMPDEST SWAP5 POP POP PUSH1 0xC0 PUSH2 0x2D9B DUP13 DUP3 DUP14 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xE0 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2DBC JUMPI PUSH2 0x2DBB PUSH2 0x24B5 JUMP JUMPDEST JUMPDEST PUSH2 0x2DC8 DUP13 DUP3 DUP14 ADD PUSH2 0x2CAE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH2 0x2DE3 DUP2 PUSH2 0x24BA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2DFE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2DDA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2E1A JUMPI PUSH2 0x2E19 PUSH2 0x2688 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2E37 JUMPI PUSH2 0x2E36 PUSH2 0x2CA9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2E53 JUMPI PUSH2 0x2E52 PUSH2 0x2745 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2E77 JUMPI PUSH2 0x2E76 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E85 DUP10 DUP3 DUP11 ADD PUSH2 0x24DB JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x2E96 DUP10 DUP3 DUP11 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2EB7 JUMPI PUSH2 0x2EB6 PUSH2 0x24B5 JUMP JUMPDEST JUMPDEST PUSH2 0x2EC3 DUP10 DUP3 DUP11 ADD PUSH2 0x2E04 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 PUSH2 0x2ED6 DUP10 DUP3 DUP11 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x2EE7 DUP10 DUP3 DUP11 ADD PUSH2 0x2C94 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2F38 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x265E JUMP JUMPDEST PUSH2 0x2F45 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2BFD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2F5B DUP2 PUSH2 0x2B6F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F77 JUMPI PUSH2 0x2F76 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F85 DUP5 DUP3 DUP6 ADD PUSH2 0x2F4C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2FA3 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2BEE JUMP JUMPDEST PUSH2 0x2FB0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2BEE JUMP JUMPDEST PUSH2 0x2FBD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BEE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2FDA PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2DDA JUMP JUMPDEST PUSH2 0x2FE7 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x265E JUMP JUMPDEST PUSH2 0x2FF4 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x290A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3069 PUSH1 0x2E DUP4 PUSH2 0x2FFC JUMP JUMPDEST SWAP2 POP PUSH2 0x3074 DUP3 PUSH2 0x300D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3098 DUP2 PUSH2 0x305C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30DB PUSH2 0x30D6 PUSH2 0x30D1 DUP5 PUSH2 0x309F JUMP JUMPDEST PUSH2 0x30B6 JUMP JUMPDEST PUSH2 0x30A9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x30EB DUP2 PUSH2 0x30C0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3106 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x30E2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3121 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x265E JUMP JUMPDEST PUSH2 0x312E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x265E JUMP JUMPDEST PUSH2 0x313B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BFD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x317D DUP3 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x31AF JUMPI PUSH2 0x31AE PUSH2 0x3143 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31D5 DUP4 DUP6 PUSH2 0x2FFC JUMP JUMPDEST SWAP4 POP PUSH2 0x31E2 DUP4 DUP6 DUP5 PUSH2 0x31BA JUMP JUMPDEST PUSH2 0x31EB DUP4 PUSH2 0x268D JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x320B PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2DDA JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x321E DUP2 DUP5 DUP7 PUSH2 0x31C9 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3233 DUP3 PUSH2 0x2A1C JUMP JUMPDEST SWAP2 POP PUSH2 0x323E DUP4 PUSH2 0x2A1C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3262 JUMPI PUSH2 0x3261 PUSH2 0x3143 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3273 DUP3 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP PUSH2 0x327E DUP4 PUSH2 0x2A03 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3296 JUMPI PUSH2 0x3295 PUSH2 0x3143 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32C3 DUP4 DUP4 PUSH2 0x29F4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32DE PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x28A9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32FF DUP4 DUP6 PUSH2 0x329C JUMP JUMPDEST SWAP4 POP PUSH2 0x330A DUP3 PUSH2 0x32AD JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3343 JUMPI PUSH2 0x3320 DUP3 DUP5 PUSH2 0x32CF JUMP JUMPDEST PUSH2 0x332A DUP9 DUP3 PUSH2 0x32B7 JUMP JUMPDEST SWAP8 POP PUSH2 0x3335 DUP4 PUSH2 0x32E6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x330E JUMP JUMPDEST POP DUP6 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x3365 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x2DDA JUMP JUMPDEST PUSH2 0x3372 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x265E JUMP JUMPDEST PUSH2 0x337F PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x265E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x3392 DUP2 DUP7 DUP9 PUSH2 0x32F3 JUMP JUMPDEST SWAP1 POP PUSH2 0x33A1 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x2BFD JUMP JUMPDEST PUSH2 0x33AE PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x2BFD JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x33C3 DUP2 PUSH2 0x2A1C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x33DE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x33BA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3440 PUSH1 0x26 DUP4 PUSH2 0x2FFC JUMP JUMPDEST SWAP2 POP PUSH2 0x344B DUP3 PUSH2 0x33E4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x346F DUP2 PUSH2 0x3433 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34AC PUSH1 0x20 DUP4 PUSH2 0x2FFC JUMP JUMPDEST SWAP2 POP PUSH2 0x34B7 DUP3 PUSH2 0x3476 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x34DB DUP2 PUSH2 0x349F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x353E PUSH1 0x2B DUP4 PUSH2 0x2FFC JUMP JUMPDEST SWAP2 POP PUSH2 0x3549 DUP3 PUSH2 0x34E2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x356D DUP2 PUSH2 0x3531 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x357F DUP3 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP PUSH2 0x358A DUP4 PUSH2 0x2A03 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x35A2 JUMPI PUSH2 0x35A1 PUSH2 0x3143 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35B3 DUP3 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP PUSH2 0x35BE DUP4 PUSH2 0x2A03 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x35CC DUP2 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x35E3 JUMPI PUSH2 0x35E2 PUSH2 0x3143 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3624 DUP3 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP PUSH2 0x362F DUP4 PUSH2 0x2A03 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x363F JUMPI PUSH2 0x363E PUSH2 0x35EA JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB 0x28 0x1F CALLVALUE 0xDF PUSH22 0xF66F2570F9BBCF563667441FEEAE59272E3E7FF94F64 COINBASE 0xA9 0xD9 SWAP5 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"430:9421:16:-:0;;;426:7:17;399:34;;476:4;439:41;;;;;;;;;;;;;;;;;;;;537:3;492:48;;;;;;;;;;;;;;;;;;;;601:3;554:50;;;;;;;;;;;;;;;;;;;;897:53:16;;;;;;;;;;921:22;:20;;;:22;;:::i;:::-;430:9421;;5939:280:1;6007:13;;;;;;;;;;;6006:14;5998:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;6094:15;6078:31;;:12;;;;;;;;;;:31;;;6074:139;;6140:15;6125:12;;:30;;;;;;;;;;;;;;;;;;6174:28;6186:15;6174:28;;;;;;:::i;:::-;;;;;;;;6074:139;5939:280::o;7:169:23:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:226::-;322:34;318:1;310:6;306:14;299:58;391:9;386:2;378:6;374:15;367:34;182:226;:::o;414:366::-;556:3;577:67;641:2;636:3;577:67;:::i;:::-;570:74;;653:93;742:3;653:93;:::i;:::-;771:2;766:3;762:12;755:19;;414:366;;;:::o;786:419::-;952:4;990:2;979:9;975:18;967:26;;1039:9;1033:4;1029:20;1025:1;1014:9;1010:17;1003:47;1067:131;1193:4;1067:131;:::i;:::-;1059:139;;786:419;;;:::o;1211:86::-;1246:7;1286:4;1279:5;1275:16;1264:27;;1211:86;;;:::o;1303:112::-;1386:22;1402:5;1386:22;:::i;:::-;1381:3;1374:35;1303:112;;:::o;1421:214::-;1510:4;1548:2;1537:9;1533:18;1525:26;;1561:67;1625:1;1614:9;1610:17;1601:6;1561:67;:::i;:::-;1421:214;;;;:::o;430:9421:16:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__Ownable_init_26":{"entryPoint":7659,"id":26,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_37":{"entryPoint":8987,"id":37,"parameterSlots":0,"returnSlots":0},"@_calculateFees_4091":{"entryPoint":8230,"id":4091,"parameterSlots":2,"returnSlots":1},"@_checkOwner_68":{"entryPoint":7300,"id":68,"parameterSlots":0,"returnSlots":0},"@_handler_3755":{"entryPoint":7748,"id":3755,"parameterSlots":5,"returnSlots":0},"@_msgSender_1231":{"entryPoint":8979,"id":1231,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_125":{"entryPoint":7426,"id":125,"parameterSlots":1,"returnSlots":0},"@createOrder_3693":{"entryPoint":4625,"id":3693,"parameterSlots":9,"returnSlots":1},"@getFeeDetails_4210":{"entryPoint":4126,"id":4210,"parameterSlots":0,"returnSlots":4},"@getLiquidityAggregator_4219":{"entryPoint":1256,"id":4219,"parameterSlots":0,"returnSlots":1},"@getOrderInfo_4105":{"entryPoint":2965,"id":4105,"parameterSlots":1,"returnSlots":1},"@getSupportedInstitutionName_4132":{"entryPoint":3526,"id":4132,"parameterSlots":1,"returnSlots":1},"@getSupportedInstitutions_4191":{"entryPoint":938,"id":4191,"parameterSlots":1,"returnSlots":1},"@getWhitelistedStatus_4232":{"entryPoint":5703,"id":4232,"parameterSlots":1,"returnSlots":1},"@initialize_3589":{"entryPoint":4218,"id":3589,"parameterSlots":1,"returnSlots":0},"@isContract_892":{"entryPoint":7624,"id":892,"parameterSlots":1,"returnSlots":1},"@isTokenSupported_4118":{"entryPoint":2684,"id":4118,"parameterSlots":1,"returnSlots":1},"@owner_54":{"entryPoint":3591,"id":54,"parameterSlots":0,"returnSlots":1},"@refund_3992":{"entryPoint":2028,"id":3992,"parameterSlots":1,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":2008,"id":82,"parameterSlots":0,"returnSlots":0},"@setSupportedInstitutions_4432":{"entryPoint":1298,"id":4432,"parameterSlots":2,"returnSlots":0},"@settingManagerBool_4378":{"entryPoint":3633,"id":4378,"parameterSlots":3,"returnSlots":0},"@settle_3900":{"entryPoint":5789,"id":3900,"parameterSlots":6,"returnSlots":1},"@transferOwnership_105":{"entryPoint":7169,"id":105,"parameterSlots":1,"returnSlots":0},"@transferSenderFee_3936":{"entryPoint":8639,"id":3936,"parameterSlots":1,"returnSlots":0},"@updateFeeRecipient_4506":{"entryPoint":1574,"id":4506,"parameterSlots":2,"returnSlots":0},"@updateProtocolFees_4462":{"entryPoint":2770,"id":4462,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr":{"entryPoint":10143,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":10409,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_address_$dyn_calldata_ptr":{"entryPoint":11780,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr":{"entryPoint":10248,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":11142,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":12108,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":9435,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_calldata_ptr":{"entryPoint":11438,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_struct$_Institution_$4243_memory_ptr":{"entryPoint":10063,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":11368,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64":{"entryPoint":10636,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint96":{"entryPoint":11412,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":10548,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr":{"entryPoint":11524,"id":null,"parameterSlots":2,"returnSlots":9},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":12129,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":9456,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":10430,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_array$_t_address_$dyn_calldata_ptrt_addresst_uint96":{"entryPoint":11866,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":11163,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr":{"entryPoint":10294,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64t_uint64t_uint64":{"entryPoint":10657,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encodeUpdatedPos_t_address_to_t_address":{"entryPoint":12983,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_struct$_Institution_$4243_memory_ptr_to_t_struct$_Institution_$4243_memory_ptr":{"entryPoint":9607,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":10740,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":9822,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_address_$dyn_calldata_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":13043,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9644,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool":{"entryPoint":10819,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":10506,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32":{"entryPoint":9545,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":11738,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":12514,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":12745,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":13363,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":12380,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":13471,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":13617,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_InstitutionByCode_$4248_memory_ptr_to_t_struct$_InstitutionByCode_$4248_memory_ptr_fromStack":{"entryPoint":11045,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Institution_$4243_memory_ptr_to_t_struct$_Institution_$4243_memory_ptr":{"entryPoint":9560,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Order_$5007_memory_ptr_to_t_struct$_Order_$5007_memory_ptr_fromStack":{"entryPoint":10834,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":10765,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":11261,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":11246,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint96":{"entryPoint":10804,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint96_fromStack":{"entryPoint":13242,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":9837,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":12556,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":12067,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9738,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":10521,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":11753,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address_t_array$_t_address_$dyn_calldata_ptr_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_array$_t_address_$dyn_memory_ptr_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":13136,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":12229,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_string_calldata_ptr__to_t_bytes32_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12790,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":12529,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13398,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12415,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13506,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13652,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_InstitutionByCode_$4248_memory_ptr__to_t_struct$_InstitutionByCode_$4248_memory_ptr__fromStack_reversed":{"entryPoint":11092,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_struct$_Order_$5007_memory_ptr__to_t_struct$_Order_$5007_memory_ptr__fromStack_reversed":{"entryPoint":11017,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint64_t_uint64_t_uint64__to_t_uint64_t_uint64_t_uint64__fromStack_reversed":{"entryPoint":12174,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint64_t_uint64_t_uint64_t_uint256__to_t_uint64_t_uint64_t_uint64_t_uint256__fromStack_reversed":{"entryPoint":11276,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed":{"entryPoint":13257,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":9982,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":9382,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr":{"entryPoint":10009,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_address_$dyn_calldata_ptr":{"entryPoint":12973,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr":{"entryPoint":9529,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr":{"entryPoint":9501,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_address_$dyn_calldata_ptr":{"entryPoint":13030,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr":{"entryPoint":9631,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":12956,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9512,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":12284,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_access_t_address":{"entryPoint":13007,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":12904,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":13849,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":13736,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":13684,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint96":{"entryPoint":12840,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":9804,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":10494,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":9402,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":12447,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9772,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":10755,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":10593,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":12457,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint96":{"entryPoint":10780,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":12480,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":12730,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":9933,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":12470,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":12658,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":12611,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":13802,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":12020,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":9886,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":11433,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":9864,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":10058,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":10053,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":9397,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":9392,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":9869,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":13284,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":12301,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":13430,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":13538,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":10386,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":11119,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":9412,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":11345,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":10613,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint96":{"entryPoint":11389,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:34950:23","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:23","statements":[{"nodeType":"YulAssignment","src":"57:19:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:23"},"nodeType":"YulFunctionCall","src":"67:9:23"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:23"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:23","type":""}],"src":"7:75:23"},{"body":{"nodeType":"YulBlock","src":"177:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:23"},"nodeType":"YulFunctionCall","src":"187:12:23"},"nodeType":"YulExpressionStatement","src":"187:12:23"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:23"},{"body":{"nodeType":"YulBlock","src":"300:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:23"},"nodeType":"YulFunctionCall","src":"310:12:23"},"nodeType":"YulExpressionStatement","src":"310:12:23"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:23"},{"body":{"nodeType":"YulBlock","src":"379:32:23","statements":[{"nodeType":"YulAssignment","src":"389:16:23","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:23"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:23","type":""}],"src":"334:77:23"},{"body":{"nodeType":"YulBlock","src":"460:79:23","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:23"},"nodeType":"YulFunctionCall","src":"519:12:23"},"nodeType":"YulExpressionStatement","src":"519:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:23"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:23"},"nodeType":"YulFunctionCall","src":"490:24:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:23"},"nodeType":"YulFunctionCall","src":"480:35:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:23"},"nodeType":"YulFunctionCall","src":"473:43:23"},"nodeType":"YulIf","src":"470:63:23"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:23","type":""}],"src":"417:122:23"},{"body":{"nodeType":"YulBlock","src":"597:87:23","statements":[{"nodeType":"YulAssignment","src":"607:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:23"},"nodeType":"YulFunctionCall","src":"616:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:23"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:23"},"nodeType":"YulFunctionCall","src":"645:33:23"},"nodeType":"YulExpressionStatement","src":"645:33:23"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:23","type":""}],"src":"545:139:23"},{"body":{"nodeType":"YulBlock","src":"756:263:23","statements":[{"body":{"nodeType":"YulBlock","src":"802:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"804:77:23"},"nodeType":"YulFunctionCall","src":"804:79:23"},"nodeType":"YulExpressionStatement","src":"804:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"777:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"773:3:23"},"nodeType":"YulFunctionCall","src":"773:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"769:3:23"},"nodeType":"YulFunctionCall","src":"769:32:23"},"nodeType":"YulIf","src":"766:119:23"},{"nodeType":"YulBlock","src":"895:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"910:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"924:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:23","type":""}]},{"nodeType":"YulAssignment","src":"939:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"974:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"985:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:23"},"nodeType":"YulFunctionCall","src":"970:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"949:20:23"},"nodeType":"YulFunctionCall","src":"949:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"939:6:23"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"726:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"737:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"749:6:23","type":""}],"src":"690:329:23"},{"body":{"nodeType":"YulBlock","src":"1128:40:23","statements":[{"nodeType":"YulAssignment","src":"1139:22:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1155:5:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1149:5:23"},"nodeType":"YulFunctionCall","src":"1149:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1139:6:23"}]}]},"name":"array_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1111:5:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1121:6:23","type":""}],"src":"1025:143:23"},{"body":{"nodeType":"YulBlock","src":"1314:73:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1331:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"1336:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1324:6:23"},"nodeType":"YulFunctionCall","src":"1324:19:23"},"nodeType":"YulExpressionStatement","src":"1324:19:23"},{"nodeType":"YulAssignment","src":"1352:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1371:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"1376:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1367:3:23"},"nodeType":"YulFunctionCall","src":"1367:14:23"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1352:11:23"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1286:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"1291:6:23","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1302:11:23","type":""}],"src":"1174:213:23"},{"body":{"nodeType":"YulBlock","src":"1494:60:23","statements":[{"nodeType":"YulAssignment","src":"1504:11:23","value":{"name":"ptr","nodeType":"YulIdentifier","src":"1512:3:23"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1504:4:23"}]},{"nodeType":"YulAssignment","src":"1525:22:23","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1537:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"1542:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:23"},"nodeType":"YulFunctionCall","src":"1533:14:23"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1525:4:23"}]}]},"name":"array_dataslot_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1481:3:23","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1489:4:23","type":""}],"src":"1393:161:23"},{"body":{"nodeType":"YulBlock","src":"1615:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1632:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1655:5:23"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1637:17:23"},"nodeType":"YulFunctionCall","src":"1637:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1625:6:23"},"nodeType":"YulFunctionCall","src":"1625:37:23"},"nodeType":"YulExpressionStatement","src":"1625:37:23"}]},"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1603:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1610:3:23","type":""}],"src":"1560:108:23"},{"body":{"nodeType":"YulBlock","src":"1882:391:23","statements":[{"nodeType":"YulVariableDeclaration","src":"1892:26:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1908:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"1913:4:23","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1904:3:23"},"nodeType":"YulFunctionCall","src":"1904:14:23"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"1896:4:23","type":""}]},{"nodeType":"YulBlock","src":"1928:164:23","statements":[{"nodeType":"YulVariableDeclaration","src":"1963:43:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1993:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"2000:4:23","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1989:3:23"},"nodeType":"YulFunctionCall","src":"1989:16:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1983:5:23"},"nodeType":"YulFunctionCall","src":"1983:23:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"1967:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2053:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2071:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"2076:4:23","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2067:3:23"},"nodeType":"YulFunctionCall","src":"2067:14:23"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"2019:33:23"},"nodeType":"YulFunctionCall","src":"2019:63:23"},"nodeType":"YulExpressionStatement","src":"2019:63:23"}]},{"nodeType":"YulBlock","src":"2102:164:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2137:43:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2167:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"2174:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2163:3:23"},"nodeType":"YulFunctionCall","src":"2163:16:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2157:5:23"},"nodeType":"YulFunctionCall","src":"2157:23:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"2141:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2227:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2245:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"2250:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2241:3:23"},"nodeType":"YulFunctionCall","src":"2241:14:23"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"2193:33:23"},"nodeType":"YulFunctionCall","src":"2193:63:23"},"nodeType":"YulExpressionStatement","src":"2193:63:23"}]}]},"name":"abi_encode_t_struct$_Institution_$4243_memory_ptr_to_t_struct$_Institution_$4243_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1869:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1876:3:23","type":""}],"src":"1768:505:23"},{"body":{"nodeType":"YulBlock","src":"2417:157:23","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2519:6:23"},{"name":"pos","nodeType":"YulIdentifier","src":"2527:3:23"}],"functionName":{"name":"abi_encode_t_struct$_Institution_$4243_memory_ptr_to_t_struct$_Institution_$4243_memory_ptr","nodeType":"YulIdentifier","src":"2427:91:23"},"nodeType":"YulFunctionCall","src":"2427:104:23"},"nodeType":"YulExpressionStatement","src":"2427:104:23"},{"nodeType":"YulAssignment","src":"2540:28:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2558:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"2563:4:23","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2554:3:23"},"nodeType":"YulFunctionCall","src":"2554:14:23"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"2540:10:23"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_Institution_$4243_memory_ptr_to_t_struct$_Institution_$4243_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"2390:6:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2398:3:23","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"2406:10:23","type":""}],"src":"2279:295:23"},{"body":{"nodeType":"YulBlock","src":"2684:38:23","statements":[{"nodeType":"YulAssignment","src":"2694:22:23","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2706:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"2711:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2702:3:23"},"nodeType":"YulFunctionCall","src":"2702:14:23"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"2694:4:23"}]}]},"name":"array_nextElement_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2671:3:23","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"2679:4:23","type":""}],"src":"2580:142:23"},{"body":{"nodeType":"YulBlock","src":"3008:782:23","statements":[{"nodeType":"YulVariableDeclaration","src":"3018:97:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3109:5:23"}],"functionName":{"name":"array_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3032:76:23"},"nodeType":"YulFunctionCall","src":"3032:83:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3022:6:23","type":""}]},{"nodeType":"YulAssignment","src":"3124:122:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3234:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"3239:6:23"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3131:102:23"},"nodeType":"YulFunctionCall","src":"3131:115:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3124:3:23"}]},{"nodeType":"YulVariableDeclaration","src":"3255:100:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3349:5:23"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3270:78:23"},"nodeType":"YulFunctionCall","src":"3270:85:23"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"3259:7:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3364:21:23","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"3378:7:23"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"3368:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3454:311:23","statements":[{"nodeType":"YulVariableDeclaration","src":"3468:34:23","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3495:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3489:5:23"},"nodeType":"YulFunctionCall","src":"3489:13:23"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"3472:13:23","type":""}]},{"nodeType":"YulAssignment","src":"3515:128:23","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"3624:13:23"},{"name":"pos","nodeType":"YulIdentifier","src":"3639:3:23"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_Institution_$4243_memory_ptr_to_t_struct$_Institution_$4243_memory_ptr","nodeType":"YulIdentifier","src":"3522:101:23"},"nodeType":"YulFunctionCall","src":"3522:121:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3515:3:23"}]},{"nodeType":"YulAssignment","src":"3656:99:23","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3748:6:23"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3666:81:23"},"nodeType":"YulFunctionCall","src":"3666:89:23"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3656:6:23"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3416:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"3419:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3413:2:23"},"nodeType":"YulFunctionCall","src":"3413:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3427:18:23","statements":[{"nodeType":"YulAssignment","src":"3429:14:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3438:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"3441:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3434:3:23"},"nodeType":"YulFunctionCall","src":"3434:9:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3429:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"3398:14:23","statements":[{"nodeType":"YulVariableDeclaration","src":"3400:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"3409:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3404:1:23","type":""}]}]},"src":"3394:371:23"},{"nodeType":"YulAssignment","src":"3774:10:23","value":{"name":"pos","nodeType":"YulIdentifier","src":"3781:3:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3774:3:23"}]}]},"name":"abi_encode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2987:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2994:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3003:3:23","type":""}],"src":"2826:964:23"},{"body":{"nodeType":"YulBlock","src":"4002:283:23","statements":[{"nodeType":"YulAssignment","src":"4012:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4024:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4035:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4020:3:23"},"nodeType":"YulFunctionCall","src":"4020:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4012:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4059:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4070:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4055:3:23"},"nodeType":"YulFunctionCall","src":"4055:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4078:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"4084:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4074:3:23"},"nodeType":"YulFunctionCall","src":"4074:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4048:6:23"},"nodeType":"YulFunctionCall","src":"4048:47:23"},"nodeType":"YulExpressionStatement","src":"4048:47:23"},{"nodeType":"YulAssignment","src":"4104:174:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4264:6:23"},{"name":"tail","nodeType":"YulIdentifier","src":"4273:4:23"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4112:151:23"},"nodeType":"YulFunctionCall","src":"4112:166:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4104:4:23"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3974:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3986:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3997:4:23","type":""}],"src":"3796:489:23"},{"body":{"nodeType":"YulBlock","src":"4336:81:23","statements":[{"nodeType":"YulAssignment","src":"4346:65:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4361:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"4368:42:23","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4357:3:23"},"nodeType":"YulFunctionCall","src":"4357:54:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4346:7:23"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4318:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4328:7:23","type":""}],"src":"4291:126:23"},{"body":{"nodeType":"YulBlock","src":"4468:51:23","statements":[{"nodeType":"YulAssignment","src":"4478:35:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4507:5:23"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4489:17:23"},"nodeType":"YulFunctionCall","src":"4489:24:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4478:7:23"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4450:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4460:7:23","type":""}],"src":"4423:96:23"},{"body":{"nodeType":"YulBlock","src":"4590:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4607:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4630:5:23"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4612:17:23"},"nodeType":"YulFunctionCall","src":"4612:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4600:6:23"},"nodeType":"YulFunctionCall","src":"4600:37:23"},"nodeType":"YulExpressionStatement","src":"4600:37:23"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4578:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4585:3:23","type":""}],"src":"4525:118:23"},{"body":{"nodeType":"YulBlock","src":"4747:124:23","statements":[{"nodeType":"YulAssignment","src":"4757:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4769:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4780:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4765:3:23"},"nodeType":"YulFunctionCall","src":"4765:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4757:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4837:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4850:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4861:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4846:3:23"},"nodeType":"YulFunctionCall","src":"4846:17:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4793:43:23"},"nodeType":"YulFunctionCall","src":"4793:71:23"},"nodeType":"YulExpressionStatement","src":"4793:71:23"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4719:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4731:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4742:4:23","type":""}],"src":"4649:222:23"},{"body":{"nodeType":"YulBlock","src":"4966:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4983:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4986:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4976:6:23"},"nodeType":"YulFunctionCall","src":"4976:12:23"},"nodeType":"YulExpressionStatement","src":"4976:12:23"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"4877:117:23"},{"body":{"nodeType":"YulBlock","src":"5048:54:23","statements":[{"nodeType":"YulAssignment","src":"5058:38:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5076:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"5083:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5072:3:23"},"nodeType":"YulFunctionCall","src":"5072:14:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5092:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5088:3:23"},"nodeType":"YulFunctionCall","src":"5088:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5068:3:23"},"nodeType":"YulFunctionCall","src":"5068:28:23"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"5058:6:23"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5031:5:23","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"5041:6:23","type":""}],"src":"5000:102:23"},{"body":{"nodeType":"YulBlock","src":"5136:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5153:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5156:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5146:6:23"},"nodeType":"YulFunctionCall","src":"5146:88:23"},"nodeType":"YulExpressionStatement","src":"5146:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5250:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5253:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5243:6:23"},"nodeType":"YulFunctionCall","src":"5243:15:23"},"nodeType":"YulExpressionStatement","src":"5243:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5274:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5277:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5267:6:23"},"nodeType":"YulFunctionCall","src":"5267:15:23"},"nodeType":"YulExpressionStatement","src":"5267:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5108:180:23"},{"body":{"nodeType":"YulBlock","src":"5337:238:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5347:58:23","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5369:6:23"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5399:4:23"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5377:21:23"},"nodeType":"YulFunctionCall","src":"5377:27:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5365:3:23"},"nodeType":"YulFunctionCall","src":"5365:40:23"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5351:10:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"5516:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5518:16:23"},"nodeType":"YulFunctionCall","src":"5518:18:23"},"nodeType":"YulExpressionStatement","src":"5518:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5459:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"5471:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5456:2:23"},"nodeType":"YulFunctionCall","src":"5456:34:23"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5495:10:23"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5507:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5492:2:23"},"nodeType":"YulFunctionCall","src":"5492:22:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5453:2:23"},"nodeType":"YulFunctionCall","src":"5453:62:23"},"nodeType":"YulIf","src":"5450:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5554:2:23","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5558:10:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5547:6:23"},"nodeType":"YulFunctionCall","src":"5547:22:23"},"nodeType":"YulExpressionStatement","src":"5547:22:23"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5323:6:23","type":""},{"name":"size","nodeType":"YulTypedName","src":"5331:4:23","type":""}],"src":"5294:281:23"},{"body":{"nodeType":"YulBlock","src":"5622:88:23","statements":[{"nodeType":"YulAssignment","src":"5632:30:23","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"5642:18:23"},"nodeType":"YulFunctionCall","src":"5642:20:23"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5632:6:23"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5691:6:23"},{"name":"size","nodeType":"YulIdentifier","src":"5699:4:23"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5671:19:23"},"nodeType":"YulFunctionCall","src":"5671:33:23"},"nodeType":"YulExpressionStatement","src":"5671:33:23"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"5606:4:23","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5615:6:23","type":""}],"src":"5581:129:23"},{"body":{"nodeType":"YulBlock","src":"5827:229:23","statements":[{"body":{"nodeType":"YulBlock","src":"5932:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5934:16:23"},"nodeType":"YulFunctionCall","src":"5934:18:23"},"nodeType":"YulExpressionStatement","src":"5934:18:23"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5904:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"5912:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5901:2:23"},"nodeType":"YulFunctionCall","src":"5901:30:23"},"nodeType":"YulIf","src":"5898:56:23"},{"nodeType":"YulAssignment","src":"5964:25:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5976:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"5984:4:23","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5972:3:23"},"nodeType":"YulFunctionCall","src":"5972:17:23"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5964:4:23"}]},{"nodeType":"YulAssignment","src":"6026:23:23","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6038:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"6044:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6034:3:23"},"nodeType":"YulFunctionCall","src":"6034:15:23"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6026:4:23"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"5811:6:23","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"5822:4:23","type":""}],"src":"5716:340:23"},{"body":{"nodeType":"YulBlock","src":"6151:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6168:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6171:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6161:6:23"},"nodeType":"YulFunctionCall","src":"6161:12:23"},"nodeType":"YulExpressionStatement","src":"6161:12:23"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"6062:117:23"},{"body":{"nodeType":"YulBlock","src":"6274:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6291:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6294:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6284:6:23"},"nodeType":"YulFunctionCall","src":"6284:12:23"},"nodeType":"YulExpressionStatement","src":"6284:12:23"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"6185:117:23"},{"body":{"nodeType":"YulBlock","src":"6397:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6414:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6417:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6407:6:23"},"nodeType":"YulFunctionCall","src":"6407:12:23"},"nodeType":"YulExpressionStatement","src":"6407:12:23"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"6308:117:23"},{"body":{"nodeType":"YulBlock","src":"6564:494:23","statements":[{"body":{"nodeType":"YulBlock","src":"6608:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"6610:77:23"},"nodeType":"YulFunctionCall","src":"6610:79:23"},"nodeType":"YulExpressionStatement","src":"6610:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"6585:3:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"6590:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6581:3:23"},"nodeType":"YulFunctionCall","src":"6581:19:23"},{"kind":"number","nodeType":"YulLiteral","src":"6602:4:23","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6577:3:23"},"nodeType":"YulFunctionCall","src":"6577:30:23"},"nodeType":"YulIf","src":"6574:117:23"},{"nodeType":"YulAssignment","src":"6700:30:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6725:4:23","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6709:15:23"},"nodeType":"YulFunctionCall","src":"6709:21:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6700:5:23"}]},{"nodeType":"YulBlock","src":"6740:150:23","statements":[{"nodeType":"YulVariableDeclaration","src":"6775:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"6789:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6779:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6815:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"6822:4:23","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6811:3:23"},"nodeType":"YulFunctionCall","src":"6811:16:23"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6854:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"6865:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6850:3:23"},"nodeType":"YulFunctionCall","src":"6850:22:23"},{"name":"end","nodeType":"YulIdentifier","src":"6874:3:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6829:20:23"},"nodeType":"YulFunctionCall","src":"6829:49:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6804:6:23"},"nodeType":"YulFunctionCall","src":"6804:75:23"},"nodeType":"YulExpressionStatement","src":"6804:75:23"}]},{"nodeType":"YulBlock","src":"6900:151:23","statements":[{"nodeType":"YulVariableDeclaration","src":"6935:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"6949:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6939:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6976:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"6983:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6972:3:23"},"nodeType":"YulFunctionCall","src":"6972:16:23"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7015:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"7026:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7011:3:23"},"nodeType":"YulFunctionCall","src":"7011:22:23"},{"name":"end","nodeType":"YulIdentifier","src":"7035:3:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6990:20:23"},"nodeType":"YulFunctionCall","src":"6990:49:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6965:6:23"},"nodeType":"YulFunctionCall","src":"6965:75:23"},"nodeType":"YulExpressionStatement","src":"6965:75:23"}]}]},"name":"abi_decode_t_struct$_Institution_$4243_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6539:9:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"6550:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6558:5:23","type":""}],"src":"6480:578:23"},{"body":{"nodeType":"YulBlock","src":"7246:666:23","statements":[{"nodeType":"YulAssignment","src":"7256:119:23","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7367:6:23"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7281:85:23"},"nodeType":"YulFunctionCall","src":"7281:93:23"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"7265:15:23"},"nodeType":"YulFunctionCall","src":"7265:110:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7256:5:23"}]},{"nodeType":"YulVariableDeclaration","src":"7384:16:23","value":{"name":"array","nodeType":"YulIdentifier","src":"7395:5:23"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"7388:3:23","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7417:5:23"},{"name":"length","nodeType":"YulIdentifier","src":"7424:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7410:6:23"},"nodeType":"YulFunctionCall","src":"7410:21:23"},"nodeType":"YulExpressionStatement","src":"7410:21:23"},{"nodeType":"YulAssignment","src":"7440:23:23","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7451:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"7458:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7447:3:23"},"nodeType":"YulFunctionCall","src":"7447:16:23"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7440:3:23"}]},{"nodeType":"YulVariableDeclaration","src":"7473:44:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7491:6:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7503:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"7511:4:23","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7499:3:23"},"nodeType":"YulFunctionCall","src":"7499:17:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7487:3:23"},"nodeType":"YulFunctionCall","src":"7487:30:23"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"7477:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"7545:103:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"7559:77:23"},"nodeType":"YulFunctionCall","src":"7559:79:23"},"nodeType":"YulExpressionStatement","src":"7559:79:23"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"7532:6:23"},{"name":"end","nodeType":"YulIdentifier","src":"7540:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7529:2:23"},"nodeType":"YulFunctionCall","src":"7529:15:23"},"nodeType":"YulIf","src":"7526:122:23"},{"body":{"nodeType":"YulBlock","src":"7733:173:23","statements":[{"nodeType":"YulVariableDeclaration","src":"7748:21:23","value":{"name":"src","nodeType":"YulIdentifier","src":"7766:3:23"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"7752:10:23","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7790:3:23"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"7845:10:23"},{"name":"end","nodeType":"YulIdentifier","src":"7857:3:23"}],"functionName":{"name":"abi_decode_t_struct$_Institution_$4243_memory_ptr","nodeType":"YulIdentifier","src":"7795:49:23"},"nodeType":"YulFunctionCall","src":"7795:66:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7783:6:23"},"nodeType":"YulFunctionCall","src":"7783:79:23"},"nodeType":"YulExpressionStatement","src":"7783:79:23"},{"nodeType":"YulAssignment","src":"7875:21:23","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7886:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"7891:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7882:3:23"},"nodeType":"YulFunctionCall","src":"7882:14:23"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7875:3:23"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7686:3:23"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"7691:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7683:2:23"},"nodeType":"YulFunctionCall","src":"7683:15:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7699:25:23","statements":[{"nodeType":"YulAssignment","src":"7701:21:23","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7712:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"7717:4:23","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7708:3:23"},"nodeType":"YulFunctionCall","src":"7708:14:23"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"7701:3:23"}]}]},"pre":{"nodeType":"YulBlock","src":"7661:21:23","statements":[{"nodeType":"YulVariableDeclaration","src":"7663:17:23","value":{"name":"offset","nodeType":"YulIdentifier","src":"7674:6:23"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"7667:3:23","type":""}]}]},"src":"7657:249:23"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7216:6:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"7224:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"7232:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7240:5:23","type":""}],"src":"7115:797:23"},{"body":{"nodeType":"YulBlock","src":"8075:322:23","statements":[{"body":{"nodeType":"YulBlock","src":"8124:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8126:77:23"},"nodeType":"YulFunctionCall","src":"8126:79:23"},"nodeType":"YulExpressionStatement","src":"8126:79:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8103:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"8111:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8099:3:23"},"nodeType":"YulFunctionCall","src":"8099:17:23"},{"name":"end","nodeType":"YulIdentifier","src":"8118:3:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8095:3:23"},"nodeType":"YulFunctionCall","src":"8095:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8088:6:23"},"nodeType":"YulFunctionCall","src":"8088:35:23"},"nodeType":"YulIf","src":"8085:122:23"},{"nodeType":"YulVariableDeclaration","src":"8216:34:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8243:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8230:12:23"},"nodeType":"YulFunctionCall","src":"8230:20:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8220:6:23","type":""}]},{"nodeType":"YulAssignment","src":"8259:132:23","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8364:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"8372:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8360:3:23"},"nodeType":"YulFunctionCall","src":"8360:17:23"},{"name":"length","nodeType":"YulIdentifier","src":"8379:6:23"},{"name":"end","nodeType":"YulIdentifier","src":"8387:3:23"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8268:91:23"},"nodeType":"YulFunctionCall","src":"8268:123:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8259:5:23"}]}]},"name":"abi_decode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8053:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"8061:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8069:5:23","type":""}],"src":"7969:428:23"},{"body":{"nodeType":"YulBlock","src":"8540:605:23","statements":[{"body":{"nodeType":"YulBlock","src":"8586:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8588:77:23"},"nodeType":"YulFunctionCall","src":"8588:79:23"},"nodeType":"YulExpressionStatement","src":"8588:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8561:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"8570:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8557:3:23"},"nodeType":"YulFunctionCall","src":"8557:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"8582:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8553:3:23"},"nodeType":"YulFunctionCall","src":"8553:32:23"},"nodeType":"YulIf","src":"8550:119:23"},{"nodeType":"YulBlock","src":"8679:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"8694:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"8708:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8698:6:23","type":""}]},{"nodeType":"YulAssignment","src":"8723:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8758:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"8769:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8754:3:23"},"nodeType":"YulFunctionCall","src":"8754:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8778:7:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"8733:20:23"},"nodeType":"YulFunctionCall","src":"8733:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8723:6:23"}]}]},{"nodeType":"YulBlock","src":"8806:332:23","statements":[{"nodeType":"YulVariableDeclaration","src":"8821:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8852:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8863:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8848:3:23"},"nodeType":"YulFunctionCall","src":"8848:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8835:12:23"},"nodeType":"YulFunctionCall","src":"8835:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8825:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"8914:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8916:77:23"},"nodeType":"YulFunctionCall","src":"8916:79:23"},"nodeType":"YulExpressionStatement","src":"8916:79:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8886:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"8894:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8883:2:23"},"nodeType":"YulFunctionCall","src":"8883:30:23"},"nodeType":"YulIf","src":"8880:117:23"},{"nodeType":"YulAssignment","src":"9011:117:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9100:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"9111:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9096:3:23"},"nodeType":"YulFunctionCall","src":"9096:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9120:7:23"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"9021:74:23"},"nodeType":"YulFunctionCall","src":"9021:107:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9011:6:23"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8502:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8513:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8525:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8533:6:23","type":""}],"src":"8403:742:23"},{"body":{"nodeType":"YulBlock","src":"9194:79:23","statements":[{"body":{"nodeType":"YulBlock","src":"9251:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9260:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9263:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9253:6:23"},"nodeType":"YulFunctionCall","src":"9253:12:23"},"nodeType":"YulExpressionStatement","src":"9253:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9217:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9242:5:23"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"9224:17:23"},"nodeType":"YulFunctionCall","src":"9224:24:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9214:2:23"},"nodeType":"YulFunctionCall","src":"9214:35:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9207:6:23"},"nodeType":"YulFunctionCall","src":"9207:43:23"},"nodeType":"YulIf","src":"9204:63:23"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9187:5:23","type":""}],"src":"9151:122:23"},{"body":{"nodeType":"YulBlock","src":"9331:87:23","statements":[{"nodeType":"YulAssignment","src":"9341:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9363:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9350:12:23"},"nodeType":"YulFunctionCall","src":"9350:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9341:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9406:5:23"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"9379:26:23"},"nodeType":"YulFunctionCall","src":"9379:33:23"},"nodeType":"YulExpressionStatement","src":"9379:33:23"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9309:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"9317:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9325:5:23","type":""}],"src":"9279:139:23"},{"body":{"nodeType":"YulBlock","src":"9507:391:23","statements":[{"body":{"nodeType":"YulBlock","src":"9553:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9555:77:23"},"nodeType":"YulFunctionCall","src":"9555:79:23"},"nodeType":"YulExpressionStatement","src":"9555:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9528:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"9537:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9524:3:23"},"nodeType":"YulFunctionCall","src":"9524:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"9549:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9520:3:23"},"nodeType":"YulFunctionCall","src":"9520:32:23"},"nodeType":"YulIf","src":"9517:119:23"},{"nodeType":"YulBlock","src":"9646:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"9661:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"9675:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9665:6:23","type":""}]},{"nodeType":"YulAssignment","src":"9690:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9725:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"9736:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9721:3:23"},"nodeType":"YulFunctionCall","src":"9721:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9745:7:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"9700:20:23"},"nodeType":"YulFunctionCall","src":"9700:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9690:6:23"}]}]},{"nodeType":"YulBlock","src":"9773:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"9788:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"9802:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9792:6:23","type":""}]},{"nodeType":"YulAssignment","src":"9818:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9853:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"9864:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9849:3:23"},"nodeType":"YulFunctionCall","src":"9849:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9873:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9828:20:23"},"nodeType":"YulFunctionCall","src":"9828:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9818:6:23"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9469:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9480:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9492:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9500:6:23","type":""}],"src":"9424:474:23"},{"body":{"nodeType":"YulBlock","src":"9946:48:23","statements":[{"nodeType":"YulAssignment","src":"9956:32:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9981:5:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9974:6:23"},"nodeType":"YulFunctionCall","src":"9974:13:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9967:6:23"},"nodeType":"YulFunctionCall","src":"9967:21:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"9956:7:23"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9928:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"9938:7:23","type":""}],"src":"9904:90:23"},{"body":{"nodeType":"YulBlock","src":"10059:50:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10076:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10096:5:23"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"10081:14:23"},"nodeType":"YulFunctionCall","src":"10081:21:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10069:6:23"},"nodeType":"YulFunctionCall","src":"10069:34:23"},"nodeType":"YulExpressionStatement","src":"10069:34:23"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10047:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10054:3:23","type":""}],"src":"10000:109:23"},{"body":{"nodeType":"YulBlock","src":"10207:118:23","statements":[{"nodeType":"YulAssignment","src":"10217:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10229:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10240:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10225:3:23"},"nodeType":"YulFunctionCall","src":"10225:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10217:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10291:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10304:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10315:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10300:3:23"},"nodeType":"YulFunctionCall","src":"10300:17:23"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"10253:37:23"},"nodeType":"YulFunctionCall","src":"10253:65:23"},"nodeType":"YulExpressionStatement","src":"10253:65:23"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10179:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10191:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10202:4:23","type":""}],"src":"10115:210:23"},{"body":{"nodeType":"YulBlock","src":"10397:263:23","statements":[{"body":{"nodeType":"YulBlock","src":"10443:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10445:77:23"},"nodeType":"YulFunctionCall","src":"10445:79:23"},"nodeType":"YulExpressionStatement","src":"10445:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10418:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"10427:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10414:3:23"},"nodeType":"YulFunctionCall","src":"10414:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"10439:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10410:3:23"},"nodeType":"YulFunctionCall","src":"10410:32:23"},"nodeType":"YulIf","src":"10407:119:23"},{"nodeType":"YulBlock","src":"10536:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"10551:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"10565:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10555:6:23","type":""}]},{"nodeType":"YulAssignment","src":"10580:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10615:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"10626:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10611:3:23"},"nodeType":"YulFunctionCall","src":"10611:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10635:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10590:20:23"},"nodeType":"YulFunctionCall","src":"10590:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10580:6:23"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10367:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10378:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10390:6:23","type":""}],"src":"10331:329:23"},{"body":{"nodeType":"YulBlock","src":"10710:57:23","statements":[{"nodeType":"YulAssignment","src":"10720:41:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10735:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"10742:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10731:3:23"},"nodeType":"YulFunctionCall","src":"10731:30:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10720:7:23"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10692:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10702:7:23","type":""}],"src":"10666:101:23"},{"body":{"nodeType":"YulBlock","src":"10815:78:23","statements":[{"body":{"nodeType":"YulBlock","src":"10871:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10880:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10883:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10873:6:23"},"nodeType":"YulFunctionCall","src":"10873:12:23"},"nodeType":"YulExpressionStatement","src":"10873:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10838:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10862:5:23"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"10845:16:23"},"nodeType":"YulFunctionCall","src":"10845:23:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10835:2:23"},"nodeType":"YulFunctionCall","src":"10835:34:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10828:6:23"},"nodeType":"YulFunctionCall","src":"10828:42:23"},"nodeType":"YulIf","src":"10825:62:23"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10808:5:23","type":""}],"src":"10773:120:23"},{"body":{"nodeType":"YulBlock","src":"10950:86:23","statements":[{"nodeType":"YulAssignment","src":"10960:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10982:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10969:12:23"},"nodeType":"YulFunctionCall","src":"10969:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10960:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11024:5:23"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"10998:25:23"},"nodeType":"YulFunctionCall","src":"10998:32:23"},"nodeType":"YulExpressionStatement","src":"10998:32:23"}]},"name":"abi_decode_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10928:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"10936:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10944:5:23","type":""}],"src":"10899:137:23"},{"body":{"nodeType":"YulBlock","src":"11139:516:23","statements":[{"body":{"nodeType":"YulBlock","src":"11185:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11187:77:23"},"nodeType":"YulFunctionCall","src":"11187:79:23"},"nodeType":"YulExpressionStatement","src":"11187:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11160:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"11169:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11156:3:23"},"nodeType":"YulFunctionCall","src":"11156:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"11181:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11152:3:23"},"nodeType":"YulFunctionCall","src":"11152:32:23"},"nodeType":"YulIf","src":"11149:119:23"},{"nodeType":"YulBlock","src":"11278:116:23","statements":[{"nodeType":"YulVariableDeclaration","src":"11293:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"11307:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11297:6:23","type":""}]},{"nodeType":"YulAssignment","src":"11322:62:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11356:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"11367:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11352:3:23"},"nodeType":"YulFunctionCall","src":"11352:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11376:7:23"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"11332:19:23"},"nodeType":"YulFunctionCall","src":"11332:52:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11322:6:23"}]}]},{"nodeType":"YulBlock","src":"11404:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"11419:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"11433:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11423:6:23","type":""}]},{"nodeType":"YulAssignment","src":"11449:62:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11483:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"11494:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11479:3:23"},"nodeType":"YulFunctionCall","src":"11479:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11503:7:23"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"11459:19:23"},"nodeType":"YulFunctionCall","src":"11459:52:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11449:6:23"}]}]},{"nodeType":"YulBlock","src":"11531:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"11546:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"11560:2:23","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11550:6:23","type":""}]},{"nodeType":"YulAssignment","src":"11576:62:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11610:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"11621:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11606:3:23"},"nodeType":"YulFunctionCall","src":"11606:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11630:7:23"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"11586:19:23"},"nodeType":"YulFunctionCall","src":"11586:52:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11576:6:23"}]}]}]},"name":"abi_decode_tuple_t_uint64t_uint64t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11093:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11104:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11116:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11124:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11132:6:23","type":""}],"src":"11042:613:23"},{"body":{"nodeType":"YulBlock","src":"11716:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11733:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11756:5:23"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"11738:17:23"},"nodeType":"YulFunctionCall","src":"11738:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11726:6:23"},"nodeType":"YulFunctionCall","src":"11726:37:23"},"nodeType":"YulExpressionStatement","src":"11726:37:23"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11704:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11711:3:23","type":""}],"src":"11661:108:23"},{"body":{"nodeType":"YulBlock","src":"11820:32:23","statements":[{"nodeType":"YulAssignment","src":"11830:16:23","value":{"name":"value","nodeType":"YulIdentifier","src":"11841:5:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11830:7:23"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11802:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11812:7:23","type":""}],"src":"11775:77:23"},{"body":{"nodeType":"YulBlock","src":"11913:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11930:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11953:5:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11935:17:23"},"nodeType":"YulFunctionCall","src":"11935:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11923:6:23"},"nodeType":"YulFunctionCall","src":"11923:37:23"},"nodeType":"YulExpressionStatement","src":"11923:37:23"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11901:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11908:3:23","type":""}],"src":"11858:108:23"},{"body":{"nodeType":"YulBlock","src":"12016:65:23","statements":[{"nodeType":"YulAssignment","src":"12026:49:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12041:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"12048:26:23","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12037:3:23"},"nodeType":"YulFunctionCall","src":"12037:38:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12026:7:23"}]}]},"name":"cleanup_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11998:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"12008:7:23","type":""}],"src":"11972:109:23"},{"body":{"nodeType":"YulBlock","src":"12140:52:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12157:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12179:5:23"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"12162:16:23"},"nodeType":"YulFunctionCall","src":"12162:23:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12150:6:23"},"nodeType":"YulFunctionCall","src":"12150:36:23"},"nodeType":"YulExpressionStatement","src":"12150:36:23"}]},"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12128:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12135:3:23","type":""}],"src":"12087:105:23"},{"body":{"nodeType":"YulBlock","src":"12247:50:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12264:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12284:5:23"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"12269:14:23"},"nodeType":"YulFunctionCall","src":"12269:21:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12257:6:23"},"nodeType":"YulFunctionCall","src":"12257:34:23"},"nodeType":"YulExpressionStatement","src":"12257:34:23"}]},"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12235:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12242:3:23","type":""}],"src":"12198:99:23"},{"body":{"nodeType":"YulBlock","src":"12471:1651:23","statements":[{"nodeType":"YulVariableDeclaration","src":"12481:28:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12497:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"12502:6:23","type":"","value":"0x0120"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12493:3:23"},"nodeType":"YulFunctionCall","src":"12493:16:23"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"12485:4:23","type":""}]},{"nodeType":"YulBlock","src":"12519:166:23","statements":[{"nodeType":"YulVariableDeclaration","src":"12556:43:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12586:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"12593:4:23","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12582:3:23"},"nodeType":"YulFunctionCall","src":"12582:16:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12576:5:23"},"nodeType":"YulFunctionCall","src":"12576:23:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"12560:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"12646:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12664:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"12669:4:23","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12660:3:23"},"nodeType":"YulFunctionCall","src":"12660:14:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"12612:33:23"},"nodeType":"YulFunctionCall","src":"12612:63:23"},"nodeType":"YulExpressionStatement","src":"12612:63:23"}]},{"nodeType":"YulBlock","src":"12695:165:23","statements":[{"nodeType":"YulVariableDeclaration","src":"12731:43:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12761:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"12768:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12757:3:23"},"nodeType":"YulFunctionCall","src":"12757:16:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12751:5:23"},"nodeType":"YulFunctionCall","src":"12751:23:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"12735:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"12821:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12839:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"12844:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12835:3:23"},"nodeType":"YulFunctionCall","src":"12835:14:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"12787:33:23"},"nodeType":"YulFunctionCall","src":"12787:63:23"},"nodeType":"YulExpressionStatement","src":"12787:63:23"}]},{"nodeType":"YulBlock","src":"12870:178:23","statements":[{"nodeType":"YulVariableDeclaration","src":"12919:43:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12949:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"12956:4:23","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12945:3:23"},"nodeType":"YulFunctionCall","src":"12945:16:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12939:5:23"},"nodeType":"YulFunctionCall","src":"12939:23:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"12923:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"13009:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13027:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"13032:4:23","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13023:3:23"},"nodeType":"YulFunctionCall","src":"13023:14:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"12975:33:23"},"nodeType":"YulFunctionCall","src":"12975:63:23"},"nodeType":"YulExpressionStatement","src":"12975:63:23"}]},{"nodeType":"YulBlock","src":"13058:169:23","statements":[{"nodeType":"YulVariableDeclaration","src":"13098:43:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13128:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"13135:4:23","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13124:3:23"},"nodeType":"YulFunctionCall","src":"13124:16:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13118:5:23"},"nodeType":"YulFunctionCall","src":"13118:23:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"13102:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"13188:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13206:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"13211:4:23","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13202:3:23"},"nodeType":"YulFunctionCall","src":"13202:14:23"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"13154:33:23"},"nodeType":"YulFunctionCall","src":"13154:63:23"},"nodeType":"YulExpressionStatement","src":"13154:63:23"}]},{"nodeType":"YulBlock","src":"13237:162:23","statements":[{"nodeType":"YulVariableDeclaration","src":"13272:43:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13302:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"13309:4:23","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13298:3:23"},"nodeType":"YulFunctionCall","src":"13298:16:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13292:5:23"},"nodeType":"YulFunctionCall","src":"13292:23:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"13276:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"13360:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13378:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"13383:4:23","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13374:3:23"},"nodeType":"YulFunctionCall","src":"13374:14:23"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulIdentifier","src":"13328:31:23"},"nodeType":"YulFunctionCall","src":"13328:61:23"},"nodeType":"YulExpressionStatement","src":"13328:61:23"}]},{"nodeType":"YulBlock","src":"13409:165:23","statements":[{"nodeType":"YulVariableDeclaration","src":"13451:43:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13481:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"13488:4:23","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13477:3:23"},"nodeType":"YulFunctionCall","src":"13477:16:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13471:5:23"},"nodeType":"YulFunctionCall","src":"13471:23:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"13455:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"13535:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13553:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"13558:4:23","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13549:3:23"},"nodeType":"YulFunctionCall","src":"13549:14:23"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"13507:27:23"},"nodeType":"YulFunctionCall","src":"13507:57:23"},"nodeType":"YulExpressionStatement","src":"13507:57:23"}]},{"nodeType":"YulBlock","src":"13584:173:23","statements":[{"nodeType":"YulVariableDeclaration","src":"13628:43:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13658:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"13665:4:23","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13654:3:23"},"nodeType":"YulFunctionCall","src":"13654:16:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13648:5:23"},"nodeType":"YulFunctionCall","src":"13648:23:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"13632:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"13718:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13736:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"13741:4:23","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13732:3:23"},"nodeType":"YulFunctionCall","src":"13732:14:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"13684:33:23"},"nodeType":"YulFunctionCall","src":"13684:63:23"},"nodeType":"YulExpressionStatement","src":"13684:63:23"}]},{"nodeType":"YulBlock","src":"13767:168:23","statements":[{"nodeType":"YulVariableDeclaration","src":"13808:43:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13838:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"13845:4:23","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13834:3:23"},"nodeType":"YulFunctionCall","src":"13834:16:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13828:5:23"},"nodeType":"YulFunctionCall","src":"13828:23:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"13812:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"13896:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13914:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"13919:4:23","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13910:3:23"},"nodeType":"YulFunctionCall","src":"13910:14:23"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulIdentifier","src":"13864:31:23"},"nodeType":"YulFunctionCall","src":"13864:61:23"},"nodeType":"YulExpressionStatement","src":"13864:61:23"}]},{"nodeType":"YulBlock","src":"13945:170:23","statements":[{"nodeType":"YulVariableDeclaration","src":"13982:45:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14012:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"14019:6:23","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14008:3:23"},"nodeType":"YulFunctionCall","src":"14008:18:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14002:5:23"},"nodeType":"YulFunctionCall","src":"14002:25:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"13986:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"14074:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14092:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"14097:6:23","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14088:3:23"},"nodeType":"YulFunctionCall","src":"14088:16:23"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"14040:33:23"},"nodeType":"YulFunctionCall","src":"14040:65:23"},"nodeType":"YulExpressionStatement","src":"14040:65:23"}]}]},"name":"abi_encode_t_struct$_Order_$5007_memory_ptr_to_t_struct$_Order_$5007_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12458:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12465:3:23","type":""}],"src":"12359:1763:23"},{"body":{"nodeType":"YulBlock","src":"14272:171:23","statements":[{"nodeType":"YulAssignment","src":"14282:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14294:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14305:3:23","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14290:3:23"},"nodeType":"YulFunctionCall","src":"14290:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14282:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14409:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14422:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14433:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14418:3:23"},"nodeType":"YulFunctionCall","src":"14418:17:23"}],"functionName":{"name":"abi_encode_t_struct$_Order_$5007_memory_ptr_to_t_struct$_Order_$5007_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14319:89:23"},"nodeType":"YulFunctionCall","src":"14319:117:23"},"nodeType":"YulExpressionStatement","src":"14319:117:23"}]},"name":"abi_encode_tuple_t_struct$_Order_$5007_memory_ptr__to_t_struct$_Order_$5007_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14244:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14256:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14267:4:23","type":""}],"src":"14128:315:23"},{"body":{"nodeType":"YulBlock","src":"14691:395:23","statements":[{"nodeType":"YulVariableDeclaration","src":"14701:26:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14717:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"14722:4:23","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14713:3:23"},"nodeType":"YulFunctionCall","src":"14713:14:23"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"14705:4:23","type":""}]},{"nodeType":"YulBlock","src":"14737:164:23","statements":[{"nodeType":"YulVariableDeclaration","src":"14772:43:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14802:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"14809:4:23","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14798:3:23"},"nodeType":"YulFunctionCall","src":"14798:16:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14792:5:23"},"nodeType":"YulFunctionCall","src":"14792:23:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"14776:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"14862:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14880:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"14885:4:23","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14876:3:23"},"nodeType":"YulFunctionCall","src":"14876:14:23"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"14828:33:23"},"nodeType":"YulFunctionCall","src":"14828:63:23"},"nodeType":"YulExpressionStatement","src":"14828:63:23"}]},{"nodeType":"YulBlock","src":"14911:168:23","statements":[{"nodeType":"YulVariableDeclaration","src":"14950:43:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14980:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"14987:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14976:3:23"},"nodeType":"YulFunctionCall","src":"14976:16:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14970:5:23"},"nodeType":"YulFunctionCall","src":"14970:23:23"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"14954:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"15040:12:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15058:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"15063:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15054:3:23"},"nodeType":"YulFunctionCall","src":"15054:14:23"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"15006:33:23"},"nodeType":"YulFunctionCall","src":"15006:63:23"},"nodeType":"YulExpressionStatement","src":"15006:63:23"}]}]},"name":"abi_encode_t_struct$_InstitutionByCode_$4248_memory_ptr_to_t_struct$_InstitutionByCode_$4248_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14678:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14685:3:23","type":""}],"src":"14555:531:23"},{"body":{"nodeType":"YulBlock","src":"15260:194:23","statements":[{"nodeType":"YulAssignment","src":"15270:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15282:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15293:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15278:3:23"},"nodeType":"YulFunctionCall","src":"15278:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15270:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15420:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15433:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15444:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15429:3:23"},"nodeType":"YulFunctionCall","src":"15429:17:23"}],"functionName":{"name":"abi_encode_t_struct$_InstitutionByCode_$4248_memory_ptr_to_t_struct$_InstitutionByCode_$4248_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15306:113:23"},"nodeType":"YulFunctionCall","src":"15306:141:23"},"nodeType":"YulExpressionStatement","src":"15306:141:23"}]},"name":"abi_encode_tuple_t_struct$_InstitutionByCode_$4248_memory_ptr__to_t_struct$_InstitutionByCode_$4248_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15232:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15244:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15255:4:23","type":""}],"src":"15092:362:23"},{"body":{"nodeType":"YulBlock","src":"15500:76:23","statements":[{"body":{"nodeType":"YulBlock","src":"15554:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15563:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15566:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15556:6:23"},"nodeType":"YulFunctionCall","src":"15556:12:23"},"nodeType":"YulExpressionStatement","src":"15556:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15523:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15545:5:23"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"15530:14:23"},"nodeType":"YulFunctionCall","src":"15530:21:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15520:2:23"},"nodeType":"YulFunctionCall","src":"15520:32:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15513:6:23"},"nodeType":"YulFunctionCall","src":"15513:40:23"},"nodeType":"YulIf","src":"15510:60:23"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15493:5:23","type":""}],"src":"15460:116:23"},{"body":{"nodeType":"YulBlock","src":"15631:84:23","statements":[{"nodeType":"YulAssignment","src":"15641:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15663:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15650:12:23"},"nodeType":"YulFunctionCall","src":"15650:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"15641:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15703:5:23"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"15679:23:23"},"nodeType":"YulFunctionCall","src":"15679:30:23"},"nodeType":"YulExpressionStatement","src":"15679:30:23"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"15609:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"15617:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"15625:5:23","type":""}],"src":"15582:133:23"},{"body":{"nodeType":"YulBlock","src":"15818:516:23","statements":[{"body":{"nodeType":"YulBlock","src":"15864:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"15866:77:23"},"nodeType":"YulFunctionCall","src":"15866:79:23"},"nodeType":"YulExpressionStatement","src":"15866:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15839:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"15848:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15835:3:23"},"nodeType":"YulFunctionCall","src":"15835:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"15860:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15831:3:23"},"nodeType":"YulFunctionCall","src":"15831:32:23"},"nodeType":"YulIf","src":"15828:119:23"},{"nodeType":"YulBlock","src":"15957:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"15972:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"15986:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15976:6:23","type":""}]},{"nodeType":"YulAssignment","src":"16001:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16036:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"16047:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16032:3:23"},"nodeType":"YulFunctionCall","src":"16032:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16056:7:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"16011:20:23"},"nodeType":"YulFunctionCall","src":"16011:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16001:6:23"}]}]},{"nodeType":"YulBlock","src":"16084:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"16099:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"16113:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16103:6:23","type":""}]},{"nodeType":"YulAssignment","src":"16129:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16164:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"16175:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16160:3:23"},"nodeType":"YulFunctionCall","src":"16160:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16184:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"16139:20:23"},"nodeType":"YulFunctionCall","src":"16139:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"16129:6:23"}]}]},{"nodeType":"YulBlock","src":"16212:115:23","statements":[{"nodeType":"YulVariableDeclaration","src":"16227:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"16241:2:23","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16231:6:23","type":""}]},{"nodeType":"YulAssignment","src":"16257:60:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16289:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"16300:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16285:3:23"},"nodeType":"YulFunctionCall","src":"16285:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16309:7:23"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"16267:17:23"},"nodeType":"YulFunctionCall","src":"16267:50:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"16257:6:23"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15772:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15783:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15795:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15803:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15811:6:23","type":""}],"src":"15721:613:23"},{"body":{"nodeType":"YulBlock","src":"16403:52:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16420:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16442:5:23"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"16425:16:23"},"nodeType":"YulFunctionCall","src":"16425:23:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16413:6:23"},"nodeType":"YulFunctionCall","src":"16413:36:23"},"nodeType":"YulExpressionStatement","src":"16413:36:23"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16391:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16398:3:23","type":""}],"src":"16340:115:23"},{"body":{"nodeType":"YulBlock","src":"16526:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16543:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16566:5:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"16548:17:23"},"nodeType":"YulFunctionCall","src":"16548:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16536:6:23"},"nodeType":"YulFunctionCall","src":"16536:37:23"},"nodeType":"YulExpressionStatement","src":"16536:37:23"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16514:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16521:3:23","type":""}],"src":"16461:118:23"},{"body":{"nodeType":"YulBlock","src":"16761:365:23","statements":[{"nodeType":"YulAssignment","src":"16771:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16783:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16794:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16779:3:23"},"nodeType":"YulFunctionCall","src":"16779:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16771:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16850:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16863:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16874:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16859:3:23"},"nodeType":"YulFunctionCall","src":"16859:17:23"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"16808:41:23"},"nodeType":"YulFunctionCall","src":"16808:69:23"},"nodeType":"YulExpressionStatement","src":"16808:69:23"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16929:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16942:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16953:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16938:3:23"},"nodeType":"YulFunctionCall","src":"16938:18:23"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"16887:41:23"},"nodeType":"YulFunctionCall","src":"16887:70:23"},"nodeType":"YulExpressionStatement","src":"16887:70:23"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"17009:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17022:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17033:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17018:3:23"},"nodeType":"YulFunctionCall","src":"17018:18:23"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"16967:41:23"},"nodeType":"YulFunctionCall","src":"16967:70:23"},"nodeType":"YulExpressionStatement","src":"16967:70:23"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"17091:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17104:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17115:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17100:3:23"},"nodeType":"YulFunctionCall","src":"17100:18:23"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"17047:43:23"},"nodeType":"YulFunctionCall","src":"17047:72:23"},"nodeType":"YulExpressionStatement","src":"17047:72:23"}]},"name":"abi_encode_tuple_t_uint64_t_uint64_t_uint64_t_uint256__to_t_uint64_t_uint64_t_uint64_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16709:9:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16721:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16729:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16737:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16745:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16756:4:23","type":""}],"src":"16585:541:23"},{"body":{"nodeType":"YulBlock","src":"17175:79:23","statements":[{"body":{"nodeType":"YulBlock","src":"17232:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17241:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17244:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17234:6:23"},"nodeType":"YulFunctionCall","src":"17234:12:23"},"nodeType":"YulExpressionStatement","src":"17234:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17198:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17223:5:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17205:17:23"},"nodeType":"YulFunctionCall","src":"17205:24:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17195:2:23"},"nodeType":"YulFunctionCall","src":"17195:35:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17188:6:23"},"nodeType":"YulFunctionCall","src":"17188:43:23"},"nodeType":"YulIf","src":"17185:63:23"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17168:5:23","type":""}],"src":"17132:122:23"},{"body":{"nodeType":"YulBlock","src":"17312:87:23","statements":[{"nodeType":"YulAssignment","src":"17322:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"17344:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17331:12:23"},"nodeType":"YulFunctionCall","src":"17331:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"17322:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17387:5:23"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"17360:26:23"},"nodeType":"YulFunctionCall","src":"17360:33:23"},"nodeType":"YulExpressionStatement","src":"17360:33:23"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"17290:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"17298:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"17306:5:23","type":""}],"src":"17260:139:23"},{"body":{"nodeType":"YulBlock","src":"17447:78:23","statements":[{"body":{"nodeType":"YulBlock","src":"17503:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17512:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17515:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17505:6:23"},"nodeType":"YulFunctionCall","src":"17505:12:23"},"nodeType":"YulExpressionStatement","src":"17505:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17470:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17494:5:23"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"17477:16:23"},"nodeType":"YulFunctionCall","src":"17477:23:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17467:2:23"},"nodeType":"YulFunctionCall","src":"17467:34:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17460:6:23"},"nodeType":"YulFunctionCall","src":"17460:42:23"},"nodeType":"YulIf","src":"17457:62:23"}]},"name":"validator_revert_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17440:5:23","type":""}],"src":"17405:120:23"},{"body":{"nodeType":"YulBlock","src":"17582:86:23","statements":[{"nodeType":"YulAssignment","src":"17592:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"17614:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17601:12:23"},"nodeType":"YulFunctionCall","src":"17601:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"17592:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17656:5:23"}],"functionName":{"name":"validator_revert_t_uint96","nodeType":"YulIdentifier","src":"17630:25:23"},"nodeType":"YulFunctionCall","src":"17630:32:23"},"nodeType":"YulExpressionStatement","src":"17630:32:23"}]},"name":"abi_decode_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"17560:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"17568:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"17576:5:23","type":""}],"src":"17531:137:23"},{"body":{"nodeType":"YulBlock","src":"17763:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17780:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17783:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17773:6:23"},"nodeType":"YulFunctionCall","src":"17773:12:23"},"nodeType":"YulExpressionStatement","src":"17773:12:23"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"17674:117:23"},{"body":{"nodeType":"YulBlock","src":"17886:478:23","statements":[{"body":{"nodeType":"YulBlock","src":"17935:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"17937:77:23"},"nodeType":"YulFunctionCall","src":"17937:79:23"},"nodeType":"YulExpressionStatement","src":"17937:79:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"17914:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"17922:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17910:3:23"},"nodeType":"YulFunctionCall","src":"17910:17:23"},{"name":"end","nodeType":"YulIdentifier","src":"17929:3:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17906:3:23"},"nodeType":"YulFunctionCall","src":"17906:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17899:6:23"},"nodeType":"YulFunctionCall","src":"17899:35:23"},"nodeType":"YulIf","src":"17896:122:23"},{"nodeType":"YulAssignment","src":"18027:30:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18050:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18037:12:23"},"nodeType":"YulFunctionCall","src":"18037:20:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"18027:6:23"}]},{"body":{"nodeType":"YulBlock","src":"18100:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"18102:77:23"},"nodeType":"YulFunctionCall","src":"18102:79:23"},"nodeType":"YulExpressionStatement","src":"18102:79:23"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"18072:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"18080:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18069:2:23"},"nodeType":"YulFunctionCall","src":"18069:30:23"},"nodeType":"YulIf","src":"18066:117:23"},{"nodeType":"YulAssignment","src":"18192:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18208:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"18216:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18204:3:23"},"nodeType":"YulFunctionCall","src":"18204:17:23"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"18192:8:23"}]},{"body":{"nodeType":"YulBlock","src":"18275:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"18277:77:23"},"nodeType":"YulFunctionCall","src":"18277:79:23"},"nodeType":"YulExpressionStatement","src":"18277:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"18240:8:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"18254:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"18262:4:23","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"18250:3:23"},"nodeType":"YulFunctionCall","src":"18250:17:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18236:3:23"},"nodeType":"YulFunctionCall","src":"18236:32:23"},{"name":"end","nodeType":"YulIdentifier","src":"18270:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18233:2:23"},"nodeType":"YulFunctionCall","src":"18233:41:23"},"nodeType":"YulIf","src":"18230:128:23"}]},"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"17853:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"17861:3:23","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"17869:8:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"17879:6:23","type":""}],"src":"17811:553:23"},{"body":{"nodeType":"YulBlock","src":"18574:1343:23","statements":[{"body":{"nodeType":"YulBlock","src":"18621:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"18623:77:23"},"nodeType":"YulFunctionCall","src":"18623:79:23"},"nodeType":"YulExpressionStatement","src":"18623:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18595:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"18604:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18591:3:23"},"nodeType":"YulFunctionCall","src":"18591:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"18616:3:23","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18587:3:23"},"nodeType":"YulFunctionCall","src":"18587:33:23"},"nodeType":"YulIf","src":"18584:120:23"},{"nodeType":"YulBlock","src":"18714:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"18729:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"18743:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18733:6:23","type":""}]},{"nodeType":"YulAssignment","src":"18758:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18793:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"18804:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18789:3:23"},"nodeType":"YulFunctionCall","src":"18789:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18813:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"18768:20:23"},"nodeType":"YulFunctionCall","src":"18768:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18758:6:23"}]}]},{"nodeType":"YulBlock","src":"18841:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"18856:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"18870:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18860:6:23","type":""}]},{"nodeType":"YulAssignment","src":"18886:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18921:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"18932:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18917:3:23"},"nodeType":"YulFunctionCall","src":"18917:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18941:7:23"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"18896:20:23"},"nodeType":"YulFunctionCall","src":"18896:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"18886:6:23"}]}]},{"nodeType":"YulBlock","src":"18969:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"18984:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"18998:2:23","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18988:6:23","type":""}]},{"nodeType":"YulAssignment","src":"19014:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19049:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"19060:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19045:3:23"},"nodeType":"YulFunctionCall","src":"19045:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19069:7:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"19024:20:23"},"nodeType":"YulFunctionCall","src":"19024:53:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"19014:6:23"}]}]},{"nodeType":"YulBlock","src":"19097:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"19112:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"19126:2:23","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19116:6:23","type":""}]},{"nodeType":"YulAssignment","src":"19142:62:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19176:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"19187:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19172:3:23"},"nodeType":"YulFunctionCall","src":"19172:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19196:7:23"}],"functionName":{"name":"abi_decode_t_uint96","nodeType":"YulIdentifier","src":"19152:19:23"},"nodeType":"YulFunctionCall","src":"19152:52:23"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"19142:6:23"}]}]},{"nodeType":"YulBlock","src":"19224:119:23","statements":[{"nodeType":"YulVariableDeclaration","src":"19239:17:23","value":{"kind":"number","nodeType":"YulLiteral","src":"19253:3:23","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19243:6:23","type":""}]},{"nodeType":"YulAssignment","src":"19270:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19305:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"19316:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19301:3:23"},"nodeType":"YulFunctionCall","src":"19301:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19325:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19280:20:23"},"nodeType":"YulFunctionCall","src":"19280:53:23"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"19270:6:23"}]}]},{"nodeType":"YulBlock","src":"19353:119:23","statements":[{"nodeType":"YulVariableDeclaration","src":"19368:17:23","value":{"kind":"number","nodeType":"YulLiteral","src":"19382:3:23","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19372:6:23","type":""}]},{"nodeType":"YulAssignment","src":"19399:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19434:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"19445:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19430:3:23"},"nodeType":"YulFunctionCall","src":"19430:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19454:7:23"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"19409:20:23"},"nodeType":"YulFunctionCall","src":"19409:53:23"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"19399:6:23"}]}]},{"nodeType":"YulBlock","src":"19482:119:23","statements":[{"nodeType":"YulVariableDeclaration","src":"19497:17:23","value":{"kind":"number","nodeType":"YulLiteral","src":"19511:3:23","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19501:6:23","type":""}]},{"nodeType":"YulAssignment","src":"19528:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19563:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"19574:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19559:3:23"},"nodeType":"YulFunctionCall","src":"19559:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19583:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19538:20:23"},"nodeType":"YulFunctionCall","src":"19538:53:23"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"19528:6:23"}]}]},{"nodeType":"YulBlock","src":"19611:299:23","statements":[{"nodeType":"YulVariableDeclaration","src":"19626:47:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19657:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"19668:3:23","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19653:3:23"},"nodeType":"YulFunctionCall","src":"19653:19:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19640:12:23"},"nodeType":"YulFunctionCall","src":"19640:33:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19630:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"19720:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"19722:77:23"},"nodeType":"YulFunctionCall","src":"19722:79:23"},"nodeType":"YulExpressionStatement","src":"19722:79:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"19692:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"19700:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19689:2:23"},"nodeType":"YulFunctionCall","src":"19689:30:23"},"nodeType":"YulIf","src":"19686:117:23"},{"nodeType":"YulAssignment","src":"19817:83:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19872:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"19883:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19868:3:23"},"nodeType":"YulFunctionCall","src":"19868:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19892:7:23"}],"functionName":{"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulIdentifier","src":"19835:32:23"},"nodeType":"YulFunctionCall","src":"19835:65:23"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"19817:6:23"},{"name":"value8","nodeType":"YulIdentifier","src":"19825:6:23"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18480:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18491:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18503:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18511:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18519:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"18527:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"18535:6:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"18543:6:23","type":""},{"name":"value6","nodeType":"YulTypedName","src":"18551:6:23","type":""},{"name":"value7","nodeType":"YulTypedName","src":"18559:6:23","type":""},{"name":"value8","nodeType":"YulTypedName","src":"18567:6:23","type":""}],"src":"18370:1547:23"},{"body":{"nodeType":"YulBlock","src":"19988:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20005:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20028:5:23"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"20010:17:23"},"nodeType":"YulFunctionCall","src":"20010:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19998:6:23"},"nodeType":"YulFunctionCall","src":"19998:37:23"},"nodeType":"YulExpressionStatement","src":"19998:37:23"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19976:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"19983:3:23","type":""}],"src":"19923:118:23"},{"body":{"nodeType":"YulBlock","src":"20145:124:23","statements":[{"nodeType":"YulAssignment","src":"20155:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20167:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"20178:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20163:3:23"},"nodeType":"YulFunctionCall","src":"20163:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20155:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20235:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20248:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"20259:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20244:3:23"},"nodeType":"YulFunctionCall","src":"20244:17:23"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"20191:43:23"},"nodeType":"YulFunctionCall","src":"20191:71:23"},"nodeType":"YulExpressionStatement","src":"20191:71:23"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20117:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20129:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20140:4:23","type":""}],"src":"20047:222:23"},{"body":{"nodeType":"YulBlock","src":"20382:478:23","statements":[{"body":{"nodeType":"YulBlock","src":"20431:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"20433:77:23"},"nodeType":"YulFunctionCall","src":"20433:79:23"},"nodeType":"YulExpressionStatement","src":"20433:79:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20410:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"20418:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20406:3:23"},"nodeType":"YulFunctionCall","src":"20406:17:23"},{"name":"end","nodeType":"YulIdentifier","src":"20425:3:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20402:3:23"},"nodeType":"YulFunctionCall","src":"20402:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20395:6:23"},"nodeType":"YulFunctionCall","src":"20395:35:23"},"nodeType":"YulIf","src":"20392:122:23"},{"nodeType":"YulAssignment","src":"20523:30:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20546:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20533:12:23"},"nodeType":"YulFunctionCall","src":"20533:20:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"20523:6:23"}]},{"body":{"nodeType":"YulBlock","src":"20596:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"20598:77:23"},"nodeType":"YulFunctionCall","src":"20598:79:23"},"nodeType":"YulExpressionStatement","src":"20598:79:23"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"20568:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"20576:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20565:2:23"},"nodeType":"YulFunctionCall","src":"20565:30:23"},"nodeType":"YulIf","src":"20562:117:23"},{"nodeType":"YulAssignment","src":"20688:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20704:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"20712:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20700:3:23"},"nodeType":"YulFunctionCall","src":"20700:17:23"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"20688:8:23"}]},{"body":{"nodeType":"YulBlock","src":"20771:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"20773:77:23"},"nodeType":"YulFunctionCall","src":"20773:79:23"},"nodeType":"YulExpressionStatement","src":"20773:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"20736:8:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"20750:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"20758:4:23","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"20746:3:23"},"nodeType":"YulFunctionCall","src":"20746:17:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20732:3:23"},"nodeType":"YulFunctionCall","src":"20732:32:23"},{"name":"end","nodeType":"YulIdentifier","src":"20766:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20729:2:23"},"nodeType":"YulFunctionCall","src":"20729:41:23"},"nodeType":"YulIf","src":"20726:128:23"}]},"name":"abi_decode_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"20349:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"20357:3:23","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"20365:8:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"20375:6:23","type":""}],"src":"20292:568:23"},{"body":{"nodeType":"YulBlock","src":"21034:971:23","statements":[{"body":{"nodeType":"YulBlock","src":"21081:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"21083:77:23"},"nodeType":"YulFunctionCall","src":"21083:79:23"},"nodeType":"YulExpressionStatement","src":"21083:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21055:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"21064:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21051:3:23"},"nodeType":"YulFunctionCall","src":"21051:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"21076:3:23","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21047:3:23"},"nodeType":"YulFunctionCall","src":"21047:33:23"},"nodeType":"YulIf","src":"21044:120:23"},{"nodeType":"YulBlock","src":"21174:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"21189:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"21203:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21193:6:23","type":""}]},{"nodeType":"YulAssignment","src":"21218:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21253:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"21264:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21249:3:23"},"nodeType":"YulFunctionCall","src":"21249:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21273:7:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"21228:20:23"},"nodeType":"YulFunctionCall","src":"21228:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"21218:6:23"}]}]},{"nodeType":"YulBlock","src":"21301:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"21316:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"21330:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21320:6:23","type":""}]},{"nodeType":"YulAssignment","src":"21346:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21381:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"21392:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21377:3:23"},"nodeType":"YulFunctionCall","src":"21377:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21401:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"21356:20:23"},"nodeType":"YulFunctionCall","src":"21356:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"21346:6:23"}]}]},{"nodeType":"YulBlock","src":"21429:313:23","statements":[{"nodeType":"YulVariableDeclaration","src":"21444:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21475:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"21486:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21471:3:23"},"nodeType":"YulFunctionCall","src":"21471:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"21458:12:23"},"nodeType":"YulFunctionCall","src":"21458:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21448:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"21537:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"21539:77:23"},"nodeType":"YulFunctionCall","src":"21539:79:23"},"nodeType":"YulExpressionStatement","src":"21539:79:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"21509:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"21517:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21506:2:23"},"nodeType":"YulFunctionCall","src":"21506:30:23"},"nodeType":"YulIf","src":"21503:117:23"},{"nodeType":"YulAssignment","src":"21634:98:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21704:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"21715:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21700:3:23"},"nodeType":"YulFunctionCall","src":"21700:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21724:7:23"}],"functionName":{"name":"abi_decode_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"21652:47:23"},"nodeType":"YulFunctionCall","src":"21652:80:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"21634:6:23"},{"name":"value3","nodeType":"YulIdentifier","src":"21642:6:23"}]}]},{"nodeType":"YulBlock","src":"21752:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"21767:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"21781:2:23","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21771:6:23","type":""}]},{"nodeType":"YulAssignment","src":"21797:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21832:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"21843:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21828:3:23"},"nodeType":"YulFunctionCall","src":"21828:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21852:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"21807:20:23"},"nodeType":"YulFunctionCall","src":"21807:53:23"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"21797:6:23"}]}]},{"nodeType":"YulBlock","src":"21880:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"21895:17:23","value":{"kind":"number","nodeType":"YulLiteral","src":"21909:3:23","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21899:6:23","type":""}]},{"nodeType":"YulAssignment","src":"21926:62:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21960:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"21971:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21956:3:23"},"nodeType":"YulFunctionCall","src":"21956:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21980:7:23"}],"functionName":{"name":"abi_decode_t_uint96","nodeType":"YulIdentifier","src":"21936:19:23"},"nodeType":"YulFunctionCall","src":"21936:52:23"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"21926:6:23"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_array$_t_address_$dyn_calldata_ptrt_addresst_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20964:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20975:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"20987:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20995:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21003:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21011:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"21019:6:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"21027:6:23","type":""}],"src":"20866:1139:23"},{"body":{"nodeType":"YulBlock","src":"22039:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22056:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22059:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22049:6:23"},"nodeType":"YulFunctionCall","src":"22049:88:23"},"nodeType":"YulExpressionStatement","src":"22049:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22153:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"22156:4:23","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22146:6:23"},"nodeType":"YulFunctionCall","src":"22146:15:23"},"nodeType":"YulExpressionStatement","src":"22146:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22177:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22180:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22170:6:23"},"nodeType":"YulFunctionCall","src":"22170:15:23"},"nodeType":"YulExpressionStatement","src":"22170:15:23"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"22011:180:23"},{"body":{"nodeType":"YulBlock","src":"22323:206:23","statements":[{"nodeType":"YulAssignment","src":"22333:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22345:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"22356:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22341:3:23"},"nodeType":"YulFunctionCall","src":"22341:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22333:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22413:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22426:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"22437:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22422:3:23"},"nodeType":"YulFunctionCall","src":"22422:17:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22369:43:23"},"nodeType":"YulFunctionCall","src":"22369:71:23"},"nodeType":"YulExpressionStatement","src":"22369:71:23"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22494:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22507:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"22518:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22503:3:23"},"nodeType":"YulFunctionCall","src":"22503:18:23"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"22450:43:23"},"nodeType":"YulFunctionCall","src":"22450:72:23"},"nodeType":"YulExpressionStatement","src":"22450:72:23"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22287:9:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22299:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22307:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22318:4:23","type":""}],"src":"22197:332:23"},{"body":{"nodeType":"YulBlock","src":"22595:77:23","statements":[{"nodeType":"YulAssignment","src":"22605:22:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22620:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22614:5:23"},"nodeType":"YulFunctionCall","src":"22614:13:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"22605:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22660:5:23"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"22636:23:23"},"nodeType":"YulFunctionCall","src":"22636:30:23"},"nodeType":"YulExpressionStatement","src":"22636:30:23"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"22573:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"22581:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"22589:5:23","type":""}],"src":"22535:137:23"},{"body":{"nodeType":"YulBlock","src":"22752:271:23","statements":[{"body":{"nodeType":"YulBlock","src":"22798:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"22800:77:23"},"nodeType":"YulFunctionCall","src":"22800:79:23"},"nodeType":"YulExpressionStatement","src":"22800:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22773:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"22782:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22769:3:23"},"nodeType":"YulFunctionCall","src":"22769:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"22794:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22765:3:23"},"nodeType":"YulFunctionCall","src":"22765:32:23"},"nodeType":"YulIf","src":"22762:119:23"},{"nodeType":"YulBlock","src":"22891:125:23","statements":[{"nodeType":"YulVariableDeclaration","src":"22906:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"22920:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"22910:6:23","type":""}]},{"nodeType":"YulAssignment","src":"22935:71:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22978:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"22989:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22974:3:23"},"nodeType":"YulFunctionCall","src":"22974:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22998:7:23"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"22945:28:23"},"nodeType":"YulFunctionCall","src":"22945:61:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"22935:6:23"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22722:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"22733:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"22745:6:23","type":""}],"src":"22678:345:23"},{"body":{"nodeType":"YulBlock","src":"23177:282:23","statements":[{"nodeType":"YulAssignment","src":"23187:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23199:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"23210:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23195:3:23"},"nodeType":"YulFunctionCall","src":"23195:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23187:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23265:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23278:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"23289:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23274:3:23"},"nodeType":"YulFunctionCall","src":"23274:17:23"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"23223:41:23"},"nodeType":"YulFunctionCall","src":"23223:69:23"},"nodeType":"YulExpressionStatement","src":"23223:69:23"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23344:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23357:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"23368:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23353:3:23"},"nodeType":"YulFunctionCall","src":"23353:18:23"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"23302:41:23"},"nodeType":"YulFunctionCall","src":"23302:70:23"},"nodeType":"YulExpressionStatement","src":"23302:70:23"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23424:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23437:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"23448:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23433:3:23"},"nodeType":"YulFunctionCall","src":"23433:18:23"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"23382:41:23"},"nodeType":"YulFunctionCall","src":"23382:70:23"},"nodeType":"YulExpressionStatement","src":"23382:70:23"}]},"name":"abi_encode_tuple_t_uint64_t_uint64_t_uint64__to_t_uint64_t_uint64_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23133:9:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23145:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23153:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23161:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23172:4:23","type":""}],"src":"23029:430:23"},{"body":{"nodeType":"YulBlock","src":"23613:282:23","statements":[{"nodeType":"YulAssignment","src":"23623:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23635:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"23646:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23631:3:23"},"nodeType":"YulFunctionCall","src":"23631:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23623:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23703:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23716:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"23727:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23712:3:23"},"nodeType":"YulFunctionCall","src":"23712:17:23"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"23659:43:23"},"nodeType":"YulFunctionCall","src":"23659:71:23"},"nodeType":"YulExpressionStatement","src":"23659:71:23"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23784:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23797:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"23808:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23793:3:23"},"nodeType":"YulFunctionCall","src":"23793:18:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"23740:43:23"},"nodeType":"YulFunctionCall","src":"23740:72:23"},"nodeType":"YulExpressionStatement","src":"23740:72:23"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23860:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23873:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"23884:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23869:3:23"},"nodeType":"YulFunctionCall","src":"23869:18:23"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"23822:37:23"},"nodeType":"YulFunctionCall","src":"23822:66:23"},"nodeType":"YulExpressionStatement","src":"23822:66:23"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23569:9:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23581:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23589:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23597:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23608:4:23","type":""}],"src":"23465:430:23"},{"body":{"nodeType":"YulBlock","src":"23997:73:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24014:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"24019:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24007:6:23"},"nodeType":"YulFunctionCall","src":"24007:19:23"},"nodeType":"YulExpressionStatement","src":"24007:19:23"},{"nodeType":"YulAssignment","src":"24035:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24054:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"24059:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24050:3:23"},"nodeType":"YulFunctionCall","src":"24050:14:23"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"24035:11:23"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23969:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"23974:6:23","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"23985:11:23","type":""}],"src":"23901:169:23"},{"body":{"nodeType":"YulBlock","src":"24182:127:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24204:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"24212:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24200:3:23"},"nodeType":"YulFunctionCall","src":"24200:14:23"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"24216:34:23","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24193:6:23"},"nodeType":"YulFunctionCall","src":"24193:58:23"},"nodeType":"YulExpressionStatement","src":"24193:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24272:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"24280:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24268:3:23"},"nodeType":"YulFunctionCall","src":"24268:15:23"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"24285:16:23","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24261:6:23"},"nodeType":"YulFunctionCall","src":"24261:41:23"},"nodeType":"YulExpressionStatement","src":"24261:41:23"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24174:6:23","type":""}],"src":"24076:233:23"},{"body":{"nodeType":"YulBlock","src":"24461:220:23","statements":[{"nodeType":"YulAssignment","src":"24471:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24537:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"24542:2:23","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24478:58:23"},"nodeType":"YulFunctionCall","src":"24478:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24471:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24643:3:23"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"24554:88:23"},"nodeType":"YulFunctionCall","src":"24554:93:23"},"nodeType":"YulExpressionStatement","src":"24554:93:23"},{"nodeType":"YulAssignment","src":"24656:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24667:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"24672:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24663:3:23"},"nodeType":"YulFunctionCall","src":"24663:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24656:3:23"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24449:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24457:3:23","type":""}],"src":"24315:366:23"},{"body":{"nodeType":"YulBlock","src":"24858:248:23","statements":[{"nodeType":"YulAssignment","src":"24868:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24880:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"24891:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24876:3:23"},"nodeType":"YulFunctionCall","src":"24876:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24868:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24915:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"24926:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24911:3:23"},"nodeType":"YulFunctionCall","src":"24911:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24934:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"24940:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24930:3:23"},"nodeType":"YulFunctionCall","src":"24930:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24904:6:23"},"nodeType":"YulFunctionCall","src":"24904:47:23"},"nodeType":"YulExpressionStatement","src":"24904:47:23"},{"nodeType":"YulAssignment","src":"24960:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25094:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24968:124:23"},"nodeType":"YulFunctionCall","src":"24968:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24960:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24838:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24853:4:23","type":""}],"src":"24687:419:23"},{"body":{"nodeType":"YulBlock","src":"25165:32:23","statements":[{"nodeType":"YulAssignment","src":"25175:16:23","value":{"name":"value","nodeType":"YulIdentifier","src":"25186:5:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"25175:7:23"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25147:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"25157:7:23","type":""}],"src":"25112:85:23"},{"body":{"nodeType":"YulBlock","src":"25246:43:23","statements":[{"nodeType":"YulAssignment","src":"25256:27:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25271:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"25278:4:23","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25267:3:23"},"nodeType":"YulFunctionCall","src":"25267:16:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"25256:7:23"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25228:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"25238:7:23","type":""}],"src":"25203:86:23"},{"body":{"nodeType":"YulBlock","src":"25327:28:23","statements":[{"nodeType":"YulAssignment","src":"25337:12:23","value":{"name":"value","nodeType":"YulIdentifier","src":"25344:5:23"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"25337:3:23"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25313:5:23","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"25323:3:23","type":""}],"src":"25295:60:23"},{"body":{"nodeType":"YulBlock","src":"25427:88:23","statements":[{"nodeType":"YulAssignment","src":"25437:72:23","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25501:5:23"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"25475:25:23"},"nodeType":"YulFunctionCall","src":"25475:32:23"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"25466:8:23"},"nodeType":"YulFunctionCall","src":"25466:42:23"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"25450:15:23"},"nodeType":"YulFunctionCall","src":"25450:59:23"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"25437:9:23"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25407:5:23","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"25417:9:23","type":""}],"src":"25361:154:23"},{"body":{"nodeType":"YulBlock","src":"25592:72:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25609:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25651:5:23"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"25614:36:23"},"nodeType":"YulFunctionCall","src":"25614:43:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25602:6:23"},"nodeType":"YulFunctionCall","src":"25602:56:23"},"nodeType":"YulExpressionStatement","src":"25602:56:23"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25580:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"25587:3:23","type":""}],"src":"25521:143:23"},{"body":{"nodeType":"YulBlock","src":"25774:130:23","statements":[{"nodeType":"YulAssignment","src":"25784:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25796:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"25807:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25792:3:23"},"nodeType":"YulFunctionCall","src":"25792:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25784:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25870:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25883:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"25894:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25879:3:23"},"nodeType":"YulFunctionCall","src":"25879:17:23"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"25820:49:23"},"nodeType":"YulFunctionCall","src":"25820:77:23"},"nodeType":"YulExpressionStatement","src":"25820:77:23"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25746:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25758:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25769:4:23","type":""}],"src":"25670:234:23"},{"body":{"nodeType":"YulBlock","src":"26064:288:23","statements":[{"nodeType":"YulAssignment","src":"26074:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26086:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"26097:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26082:3:23"},"nodeType":"YulFunctionCall","src":"26082:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26074:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26154:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26167:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"26178:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26163:3:23"},"nodeType":"YulFunctionCall","src":"26163:17:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"26110:43:23"},"nodeType":"YulFunctionCall","src":"26110:71:23"},"nodeType":"YulExpressionStatement","src":"26110:71:23"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26235:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26248:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"26259:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26244:3:23"},"nodeType":"YulFunctionCall","src":"26244:18:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"26191:43:23"},"nodeType":"YulFunctionCall","src":"26191:72:23"},"nodeType":"YulExpressionStatement","src":"26191:72:23"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"26317:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26330:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"26341:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26326:3:23"},"nodeType":"YulFunctionCall","src":"26326:18:23"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26273:43:23"},"nodeType":"YulFunctionCall","src":"26273:72:23"},"nodeType":"YulExpressionStatement","src":"26273:72:23"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26020:9:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26032:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26040:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26048:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26059:4:23","type":""}],"src":"25910:442:23"},{"body":{"nodeType":"YulBlock","src":"26386:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26403:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"26406:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26396:6:23"},"nodeType":"YulFunctionCall","src":"26396:88:23"},"nodeType":"YulExpressionStatement","src":"26396:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26500:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"26503:4:23","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26493:6:23"},"nodeType":"YulFunctionCall","src":"26493:15:23"},"nodeType":"YulExpressionStatement","src":"26493:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26524:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"26527:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26517:6:23"},"nodeType":"YulFunctionCall","src":"26517:15:23"},"nodeType":"YulExpressionStatement","src":"26517:15:23"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"26358:180:23"},{"body":{"nodeType":"YulBlock","src":"26587:190:23","statements":[{"nodeType":"YulAssignment","src":"26597:33:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26624:5:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26606:17:23"},"nodeType":"YulFunctionCall","src":"26606:24:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"26597:5:23"}]},{"body":{"nodeType":"YulBlock","src":"26720:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"26722:16:23"},"nodeType":"YulFunctionCall","src":"26722:18:23"},"nodeType":"YulExpressionStatement","src":"26722:18:23"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26645:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"26652:66:23","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"26642:2:23"},"nodeType":"YulFunctionCall","src":"26642:77:23"},"nodeType":"YulIf","src":"26639:103:23"},{"nodeType":"YulAssignment","src":"26751:20:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26762:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"26769:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26758:3:23"},"nodeType":"YulFunctionCall","src":"26758:13:23"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"26751:3:23"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26573:5:23","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"26583:3:23","type":""}],"src":"26544:233:23"},{"body":{"nodeType":"YulBlock","src":"26847:82:23","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"26870:3:23"},{"name":"src","nodeType":"YulIdentifier","src":"26875:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"26880:6:23"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"26857:12:23"},"nodeType":"YulFunctionCall","src":"26857:30:23"},"nodeType":"YulExpressionStatement","src":"26857:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"26907:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"26912:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26903:3:23"},"nodeType":"YulFunctionCall","src":"26903:16:23"},{"kind":"number","nodeType":"YulLiteral","src":"26921:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26896:6:23"},"nodeType":"YulFunctionCall","src":"26896:27:23"},"nodeType":"YulExpressionStatement","src":"26896:27:23"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"26829:3:23","type":""},{"name":"dst","nodeType":"YulTypedName","src":"26834:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"26839:6:23","type":""}],"src":"26783:146:23"},{"body":{"nodeType":"YulBlock","src":"27061:215:23","statements":[{"nodeType":"YulAssignment","src":"27071:78:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27137:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"27142:6:23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27078:58:23"},"nodeType":"YulFunctionCall","src":"27078:71:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27071:3:23"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"27196:5:23"},{"name":"pos","nodeType":"YulIdentifier","src":"27203:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"27208:6:23"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"27159:36:23"},"nodeType":"YulFunctionCall","src":"27159:56:23"},"nodeType":"YulExpressionStatement","src":"27159:56:23"},{"nodeType":"YulAssignment","src":"27224:46:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27235:3:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27262:6:23"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"27240:21:23"},"nodeType":"YulFunctionCall","src":"27240:29:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27231:3:23"},"nodeType":"YulFunctionCall","src":"27231:39:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27224:3:23"}]}]},"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"27034:5:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"27041:6:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"27049:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27057:3:23","type":""}],"src":"26959:317:23"},{"body":{"nodeType":"YulBlock","src":"27438:287:23","statements":[{"nodeType":"YulAssignment","src":"27448:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27460:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"27471:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27456:3:23"},"nodeType":"YulFunctionCall","src":"27456:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27448:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27528:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27541:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"27552:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27537:3:23"},"nodeType":"YulFunctionCall","src":"27537:17:23"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"27484:43:23"},"nodeType":"YulFunctionCall","src":"27484:71:23"},"nodeType":"YulExpressionStatement","src":"27484:71:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27576:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"27587:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27572:3:23"},"nodeType":"YulFunctionCall","src":"27572:18:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27596:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"27602:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27592:3:23"},"nodeType":"YulFunctionCall","src":"27592:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27565:6:23"},"nodeType":"YulFunctionCall","src":"27565:48:23"},"nodeType":"YulExpressionStatement","src":"27565:48:23"},{"nodeType":"YulAssignment","src":"27622:96:23","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27696:6:23"},{"name":"value2","nodeType":"YulIdentifier","src":"27704:6:23"},{"name":"tail","nodeType":"YulIdentifier","src":"27713:4:23"}],"functionName":{"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27630:65:23"},"nodeType":"YulFunctionCall","src":"27630:88:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27622:4:23"}]}]},"name":"abi_encode_tuple_t_bytes32_t_string_calldata_ptr__to_t_bytes32_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27394:9:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"27406:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27414:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27422:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27433:4:23","type":""}],"src":"27282:443:23"},{"body":{"nodeType":"YulBlock","src":"27775:172:23","statements":[{"nodeType":"YulAssignment","src":"27785:24:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27807:1:23"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"27790:16:23"},"nodeType":"YulFunctionCall","src":"27790:19:23"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"27785:1:23"}]},{"nodeType":"YulAssignment","src":"27818:24:23","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"27840:1:23"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"27823:16:23"},"nodeType":"YulFunctionCall","src":"27823:19:23"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"27818:1:23"}]},{"nodeType":"YulAssignment","src":"27851:17:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27863:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"27866:1:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27859:3:23"},"nodeType":"YulFunctionCall","src":"27859:9:23"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"27851:4:23"}]},{"body":{"nodeType":"YulBlock","src":"27918:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"27920:16:23"},"nodeType":"YulFunctionCall","src":"27920:18:23"},"nodeType":"YulExpressionStatement","src":"27920:18:23"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"27884:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"27890:26:23","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27881:2:23"},"nodeType":"YulFunctionCall","src":"27881:36:23"},"nodeType":"YulIf","src":"27878:62:23"}]},"name":"checked_sub_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"27761:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"27764:1:23","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"27770:4:23","type":""}],"src":"27731:216:23"},{"body":{"nodeType":"YulBlock","src":"27997:147:23","statements":[{"nodeType":"YulAssignment","src":"28007:25:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28030:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28012:17:23"},"nodeType":"YulFunctionCall","src":"28012:20:23"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"28007:1:23"}]},{"nodeType":"YulAssignment","src":"28041:25:23","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"28064:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28046:17:23"},"nodeType":"YulFunctionCall","src":"28046:20:23"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"28041:1:23"}]},{"nodeType":"YulAssignment","src":"28075:16:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28086:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"28089:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28082:3:23"},"nodeType":"YulFunctionCall","src":"28082:9:23"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"28075:3:23"}]},{"body":{"nodeType":"YulBlock","src":"28115:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"28117:16:23"},"nodeType":"YulFunctionCall","src":"28117:18:23"},"nodeType":"YulExpressionStatement","src":"28117:18:23"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28107:1:23"},{"name":"sum","nodeType":"YulIdentifier","src":"28110:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28104:2:23"},"nodeType":"YulFunctionCall","src":"28104:10:23"},"nodeType":"YulIf","src":"28101:36:23"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"27984:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"27987:1:23","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"27993:3:23","type":""}],"src":"27953:191:23"},{"body":{"nodeType":"YulBlock","src":"28261:73:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28278:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"28283:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28271:6:23"},"nodeType":"YulFunctionCall","src":"28271:19:23"},"nodeType":"YulExpressionStatement","src":"28271:19:23"},{"nodeType":"YulAssignment","src":"28299:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28318:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"28323:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28314:3:23"},"nodeType":"YulFunctionCall","src":"28314:14:23"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"28299:11:23"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28233:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"28238:6:23","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"28249:11:23","type":""}],"src":"28150:184:23"},{"body":{"nodeType":"YulBlock","src":"28414:28:23","statements":[{"nodeType":"YulAssignment","src":"28424:11:23","value":{"name":"ptr","nodeType":"YulIdentifier","src":"28432:3:23"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"28424:4:23"}]}]},"name":"array_dataslot_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"28401:3:23","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"28409:4:23","type":""}],"src":"28340:102:23"},{"body":{"nodeType":"YulBlock","src":"28528:99:23","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28572:6:23"},{"name":"pos","nodeType":"YulIdentifier","src":"28580:3:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"28538:33:23"},"nodeType":"YulFunctionCall","src":"28538:46:23"},"nodeType":"YulExpressionStatement","src":"28538:46:23"},{"nodeType":"YulAssignment","src":"28593:28:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28611:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"28616:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28607:3:23"},"nodeType":"YulFunctionCall","src":"28607:14:23"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"28593:10:23"}]}]},"name":"abi_encodeUpdatedPos_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"28501:6:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"28509:3:23","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"28517:10:23","type":""}],"src":"28448:179:23"},{"body":{"nodeType":"YulBlock","src":"28691:64:23","statements":[{"nodeType":"YulAssignment","src":"28701:48:23","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"28731:3:23"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"28740:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"28745:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28736:3:23"},"nodeType":"YulFunctionCall","src":"28736:12:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"28710:20:23"},"nodeType":"YulFunctionCall","src":"28710:39:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"28701:5:23"}]}]},"name":"calldata_access_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"baseRef","nodeType":"YulTypedName","src":"28668:7:23","type":""},{"name":"ptr","nodeType":"YulTypedName","src":"28677:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"28685:5:23","type":""}],"src":"28633:122:23"},{"body":{"nodeType":"YulBlock","src":"28838:38:23","statements":[{"nodeType":"YulAssignment","src":"28848:22:23","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"28860:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"28865:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28856:3:23"},"nodeType":"YulFunctionCall","src":"28856:14:23"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"28848:4:23"}]}]},"name":"array_nextElement_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"28825:3:23","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"28833:4:23","type":""}],"src":"28761:115:23"},{"body":{"nodeType":"YulBlock","src":"29046:565:23","statements":[{"nodeType":"YulAssignment","src":"29057:93:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29138:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"29143:6:23"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29064:73:23"},"nodeType":"YulFunctionCall","src":"29064:86:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29057:3:23"}]},{"nodeType":"YulVariableDeclaration","src":"29159:73:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29226:5:23"}],"functionName":{"name":"array_dataslot_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"29174:51:23"},"nodeType":"YulFunctionCall","src":"29174:58:23"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"29163:7:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"29241:21:23","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"29255:7:23"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"29245:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"29331:255:23","statements":[{"nodeType":"YulVariableDeclaration","src":"29345:63:23","value":{"arguments":[{"name":"baseRef","nodeType":"YulIdentifier","src":"29392:7:23"},{"name":"srcPtr","nodeType":"YulIdentifier","src":"29401:6:23"}],"functionName":{"name":"calldata_access_t_address","nodeType":"YulIdentifier","src":"29366:25:23"},"nodeType":"YulFunctionCall","src":"29366:42:23"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"29349:13:23","type":""}]},{"nodeType":"YulAssignment","src":"29421:70:23","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"29472:13:23"},{"name":"pos","nodeType":"YulIdentifier","src":"29487:3:23"}],"functionName":{"name":"abi_encodeUpdatedPos_t_address_to_t_address","nodeType":"YulIdentifier","src":"29428:43:23"},"nodeType":"YulFunctionCall","src":"29428:63:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29421:3:23"}]},{"nodeType":"YulAssignment","src":"29504:72:23","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"29569:6:23"}],"functionName":{"name":"array_nextElement_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"29514:54:23"},"nodeType":"YulFunctionCall","src":"29514:62:23"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"29504:6:23"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"29293:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"29296:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"29290:2:23"},"nodeType":"YulFunctionCall","src":"29290:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"29304:18:23","statements":[{"nodeType":"YulAssignment","src":"29306:14:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"29315:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"29318:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29311:3:23"},"nodeType":"YulFunctionCall","src":"29311:9:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"29306:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"29275:14:23","statements":[{"nodeType":"YulVariableDeclaration","src":"29277:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"29286:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"29281:1:23","type":""}]}]},"src":"29271:315:23"},{"nodeType":"YulAssignment","src":"29595:10:23","value":{"name":"pos","nodeType":"YulIdentifier","src":"29602:3:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29595:3:23"}]}]},"name":"abi_encode_t_array$_t_address_$dyn_calldata_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29017:5:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"29024:6:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"29032:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29041:3:23","type":""}],"src":"28912:699:23"},{"body":{"nodeType":"YulBlock","src":"29915:648:23","statements":[{"nodeType":"YulAssignment","src":"29925:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29937:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"29948:3:23","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29933:3:23"},"nodeType":"YulFunctionCall","src":"29933:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29925:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"30006:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30019:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"30030:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30015:3:23"},"nodeType":"YulFunctionCall","src":"30015:17:23"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29962:43:23"},"nodeType":"YulFunctionCall","src":"29962:71:23"},"nodeType":"YulExpressionStatement","src":"29962:71:23"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"30087:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30100:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"30111:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30096:3:23"},"nodeType":"YulFunctionCall","src":"30096:18:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"30043:43:23"},"nodeType":"YulFunctionCall","src":"30043:72:23"},"nodeType":"YulExpressionStatement","src":"30043:72:23"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"30169:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30182:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"30193:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30178:3:23"},"nodeType":"YulFunctionCall","src":"30178:18:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"30125:43:23"},"nodeType":"YulFunctionCall","src":"30125:72:23"},"nodeType":"YulExpressionStatement","src":"30125:72:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30218:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"30229:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30214:3:23"},"nodeType":"YulFunctionCall","src":"30214:18:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30238:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"30244:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30234:3:23"},"nodeType":"YulFunctionCall","src":"30234:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30207:6:23"},"nodeType":"YulFunctionCall","src":"30207:48:23"},"nodeType":"YulExpressionStatement","src":"30207:48:23"},{"nodeType":"YulAssignment","src":"30264:126:23","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"30368:6:23"},{"name":"value4","nodeType":"YulIdentifier","src":"30376:6:23"},{"name":"tail","nodeType":"YulIdentifier","src":"30385:4:23"}],"functionName":{"name":"abi_encode_t_array$_t_address_$dyn_calldata_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30272:95:23"},"nodeType":"YulFunctionCall","src":"30272:118:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30264:4:23"}]},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"30444:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30457:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"30468:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30453:3:23"},"nodeType":"YulFunctionCall","src":"30453:19:23"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"30400:43:23"},"nodeType":"YulFunctionCall","src":"30400:73:23"},"nodeType":"YulExpressionStatement","src":"30400:73:23"},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"30527:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30540:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"30551:3:23","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30536:3:23"},"nodeType":"YulFunctionCall","src":"30536:19:23"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"30483:43:23"},"nodeType":"YulFunctionCall","src":"30483:73:23"},"nodeType":"YulExpressionStatement","src":"30483:73:23"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_array$_t_address_$dyn_calldata_ptr_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_array$_t_address_$dyn_memory_ptr_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29839:9:23","type":""},{"name":"value6","nodeType":"YulTypedName","src":"29851:6:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"29859:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"29867:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"29875:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29883:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29891:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29899:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29910:4:23","type":""}],"src":"29617:946:23"},{"body":{"nodeType":"YulBlock","src":"30632:52:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30649:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30671:5:23"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"30654:16:23"},"nodeType":"YulFunctionCall","src":"30654:23:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30642:6:23"},"nodeType":"YulFunctionCall","src":"30642:36:23"},"nodeType":"YulExpressionStatement","src":"30642:36:23"}]},"name":"abi_encode_t_uint96_to_t_uint96_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30620:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"30627:3:23","type":""}],"src":"30569:115:23"},{"body":{"nodeType":"YulBlock","src":"30786:122:23","statements":[{"nodeType":"YulAssignment","src":"30796:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30808:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"30819:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30804:3:23"},"nodeType":"YulFunctionCall","src":"30804:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30796:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"30874:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30887:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"30898:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30883:3:23"},"nodeType":"YulFunctionCall","src":"30883:17:23"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96_fromStack","nodeType":"YulIdentifier","src":"30832:41:23"},"nodeType":"YulFunctionCall","src":"30832:69:23"},"nodeType":"YulExpressionStatement","src":"30832:69:23"}]},"name":"abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30758:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"30770:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30781:4:23","type":""}],"src":"30690:218:23"},{"body":{"nodeType":"YulBlock","src":"31020:119:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31042:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"31050:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31038:3:23"},"nodeType":"YulFunctionCall","src":"31038:14:23"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"31054:34:23","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31031:6:23"},"nodeType":"YulFunctionCall","src":"31031:58:23"},"nodeType":"YulExpressionStatement","src":"31031:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31110:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"31118:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31106:3:23"},"nodeType":"YulFunctionCall","src":"31106:15:23"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"31123:8:23","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31099:6:23"},"nodeType":"YulFunctionCall","src":"31099:33:23"},"nodeType":"YulExpressionStatement","src":"31099:33:23"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31012:6:23","type":""}],"src":"30914:225:23"},{"body":{"nodeType":"YulBlock","src":"31291:220:23","statements":[{"nodeType":"YulAssignment","src":"31301:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31367:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"31372:2:23","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31308:58:23"},"nodeType":"YulFunctionCall","src":"31308:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31301:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31473:3:23"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"31384:88:23"},"nodeType":"YulFunctionCall","src":"31384:93:23"},"nodeType":"YulExpressionStatement","src":"31384:93:23"},{"nodeType":"YulAssignment","src":"31486:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31497:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"31502:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31493:3:23"},"nodeType":"YulFunctionCall","src":"31493:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31486:3:23"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31279:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31287:3:23","type":""}],"src":"31145:366:23"},{"body":{"nodeType":"YulBlock","src":"31688:248:23","statements":[{"nodeType":"YulAssignment","src":"31698:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31710:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"31721:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31706:3:23"},"nodeType":"YulFunctionCall","src":"31706:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31698:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31745:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"31756:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31741:3:23"},"nodeType":"YulFunctionCall","src":"31741:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31764:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"31770:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31760:3:23"},"nodeType":"YulFunctionCall","src":"31760:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31734:6:23"},"nodeType":"YulFunctionCall","src":"31734:47:23"},"nodeType":"YulExpressionStatement","src":"31734:47:23"},{"nodeType":"YulAssignment","src":"31790:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31924:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31798:124:23"},"nodeType":"YulFunctionCall","src":"31798:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31790:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31668:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31683:4:23","type":""}],"src":"31517:419:23"},{"body":{"nodeType":"YulBlock","src":"32048:76:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32070:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"32078:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32066:3:23"},"nodeType":"YulFunctionCall","src":"32066:14:23"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"32082:34:23","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32059:6:23"},"nodeType":"YulFunctionCall","src":"32059:58:23"},"nodeType":"YulExpressionStatement","src":"32059:58:23"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32040:6:23","type":""}],"src":"31942:182:23"},{"body":{"nodeType":"YulBlock","src":"32276:220:23","statements":[{"nodeType":"YulAssignment","src":"32286:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32352:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"32357:2:23","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32293:58:23"},"nodeType":"YulFunctionCall","src":"32293:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32286:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32458:3:23"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"32369:88:23"},"nodeType":"YulFunctionCall","src":"32369:93:23"},"nodeType":"YulExpressionStatement","src":"32369:93:23"},{"nodeType":"YulAssignment","src":"32471:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32482:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"32487:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32478:3:23"},"nodeType":"YulFunctionCall","src":"32478:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32471:3:23"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32264:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32272:3:23","type":""}],"src":"32130:366:23"},{"body":{"nodeType":"YulBlock","src":"32673:248:23","statements":[{"nodeType":"YulAssignment","src":"32683:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32695:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"32706:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32691:3:23"},"nodeType":"YulFunctionCall","src":"32691:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32683:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32730:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"32741:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32726:3:23"},"nodeType":"YulFunctionCall","src":"32726:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32749:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"32755:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32745:3:23"},"nodeType":"YulFunctionCall","src":"32745:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32719:6:23"},"nodeType":"YulFunctionCall","src":"32719:47:23"},"nodeType":"YulExpressionStatement","src":"32719:47:23"},{"nodeType":"YulAssignment","src":"32775:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32909:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32783:124:23"},"nodeType":"YulFunctionCall","src":"32783:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32775:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32653:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32668:4:23","type":""}],"src":"32502:419:23"},{"body":{"nodeType":"YulBlock","src":"33033:124:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33055:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"33063:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33051:3:23"},"nodeType":"YulFunctionCall","src":"33051:14:23"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"33067:34:23","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33044:6:23"},"nodeType":"YulFunctionCall","src":"33044:58:23"},"nodeType":"YulExpressionStatement","src":"33044:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33123:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"33131:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33119:3:23"},"nodeType":"YulFunctionCall","src":"33119:15:23"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"33136:13:23","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33112:6:23"},"nodeType":"YulFunctionCall","src":"33112:38:23"},"nodeType":"YulExpressionStatement","src":"33112:38:23"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33025:6:23","type":""}],"src":"32927:230:23"},{"body":{"nodeType":"YulBlock","src":"33309:220:23","statements":[{"nodeType":"YulAssignment","src":"33319:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33385:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"33390:2:23","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33326:58:23"},"nodeType":"YulFunctionCall","src":"33326:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33319:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33491:3:23"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"33402:88:23"},"nodeType":"YulFunctionCall","src":"33402:93:23"},"nodeType":"YulExpressionStatement","src":"33402:93:23"},{"nodeType":"YulAssignment","src":"33504:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33515:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"33520:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33511:3:23"},"nodeType":"YulFunctionCall","src":"33511:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33504:3:23"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33297:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33305:3:23","type":""}],"src":"33163:366:23"},{"body":{"nodeType":"YulBlock","src":"33706:248:23","statements":[{"nodeType":"YulAssignment","src":"33716:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33728:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"33739:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33724:3:23"},"nodeType":"YulFunctionCall","src":"33724:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33716:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33763:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"33774:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33759:3:23"},"nodeType":"YulFunctionCall","src":"33759:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33782:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"33788:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33778:3:23"},"nodeType":"YulFunctionCall","src":"33778:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33752:6:23"},"nodeType":"YulFunctionCall","src":"33752:47:23"},"nodeType":"YulExpressionStatement","src":"33752:47:23"},{"nodeType":"YulAssignment","src":"33808:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33942:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33816:124:23"},"nodeType":"YulFunctionCall","src":"33816:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33808:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33686:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33701:4:23","type":""}],"src":"33535:419:23"},{"body":{"nodeType":"YulBlock","src":"34005:149:23","statements":[{"nodeType":"YulAssignment","src":"34015:25:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"34038:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34020:17:23"},"nodeType":"YulFunctionCall","src":"34020:20:23"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"34015:1:23"}]},{"nodeType":"YulAssignment","src":"34049:25:23","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"34072:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34054:17:23"},"nodeType":"YulFunctionCall","src":"34054:20:23"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"34049:1:23"}]},{"nodeType":"YulAssignment","src":"34083:17:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"34095:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"34098:1:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34091:3:23"},"nodeType":"YulFunctionCall","src":"34091:9:23"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"34083:4:23"}]},{"body":{"nodeType":"YulBlock","src":"34125:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"34127:16:23"},"nodeType":"YulFunctionCall","src":"34127:18:23"},"nodeType":"YulExpressionStatement","src":"34127:18:23"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"34116:4:23"},{"name":"x","nodeType":"YulIdentifier","src":"34122:1:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"34113:2:23"},"nodeType":"YulFunctionCall","src":"34113:11:23"},"nodeType":"YulIf","src":"34110:37:23"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"33991:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"33994:1:23","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"34000:4:23","type":""}],"src":"33960:194:23"},{"body":{"nodeType":"YulBlock","src":"34208:362:23","statements":[{"nodeType":"YulAssignment","src":"34218:25:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"34241:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34223:17:23"},"nodeType":"YulFunctionCall","src":"34223:20:23"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"34218:1:23"}]},{"nodeType":"YulAssignment","src":"34252:25:23","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"34275:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34257:17:23"},"nodeType":"YulFunctionCall","src":"34257:20:23"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"34252:1:23"}]},{"nodeType":"YulVariableDeclaration","src":"34286:28:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"34309:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"34312:1:23"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"34305:3:23"},"nodeType":"YulFunctionCall","src":"34305:9:23"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"34290:11:23","type":""}]},{"nodeType":"YulAssignment","src":"34323:41:23","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"34352:11:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34334:17:23"},"nodeType":"YulFunctionCall","src":"34334:30:23"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"34323:7:23"}]},{"body":{"nodeType":"YulBlock","src":"34541:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"34543:16:23"},"nodeType":"YulFunctionCall","src":"34543:18:23"},"nodeType":"YulExpressionStatement","src":"34543:18:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"34474:1:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"34467:6:23"},"nodeType":"YulFunctionCall","src":"34467:9:23"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"34497:1:23"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"34504:7:23"},{"name":"x","nodeType":"YulIdentifier","src":"34513:1:23"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"34500:3:23"},"nodeType":"YulFunctionCall","src":"34500:15:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"34494:2:23"},"nodeType":"YulFunctionCall","src":"34494:22:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"34447:2:23"},"nodeType":"YulFunctionCall","src":"34447:83:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"34427:6:23"},"nodeType":"YulFunctionCall","src":"34427:113:23"},"nodeType":"YulIf","src":"34424:139:23"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"34191:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"34194:1:23","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"34200:7:23","type":""}],"src":"34160:410:23"},{"body":{"nodeType":"YulBlock","src":"34604:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34621:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34624:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34614:6:23"},"nodeType":"YulFunctionCall","src":"34614:88:23"},"nodeType":"YulExpressionStatement","src":"34614:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34718:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"34721:4:23","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34711:6:23"},"nodeType":"YulFunctionCall","src":"34711:15:23"},"nodeType":"YulExpressionStatement","src":"34711:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34742:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34745:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"34735:6:23"},"nodeType":"YulFunctionCall","src":"34735:15:23"},"nodeType":"YulExpressionStatement","src":"34735:15:23"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"34576:180:23"},{"body":{"nodeType":"YulBlock","src":"34804:143:23","statements":[{"nodeType":"YulAssignment","src":"34814:25:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"34837:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34819:17:23"},"nodeType":"YulFunctionCall","src":"34819:20:23"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"34814:1:23"}]},{"nodeType":"YulAssignment","src":"34848:25:23","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"34871:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34853:17:23"},"nodeType":"YulFunctionCall","src":"34853:20:23"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"34848:1:23"}]},{"body":{"nodeType":"YulBlock","src":"34895:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"34897:16:23"},"nodeType":"YulFunctionCall","src":"34897:18:23"},"nodeType":"YulExpressionStatement","src":"34897:18:23"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"34892:1:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"34885:6:23"},"nodeType":"YulFunctionCall","src":"34885:9:23"},"nodeType":"YulIf","src":"34882:35:23"},{"nodeType":"YulAssignment","src":"34927:14:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"34936:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"34939:1:23"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"34932:3:23"},"nodeType":"YulFunctionCall","src":"34932:9:23"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"34927:1:23"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"34793:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"34796:1:23","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"34802:1:23","type":""}],"src":"34762:185:23"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    // struct PaycrestSettingManager.Institution -> struct PaycrestSettingManager.Institution\n    function abi_encode_t_struct$_Institution_$4243_memory_ptr_to_t_struct$_Institution_$4243_memory_ptr(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // code\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Institution_$4243_memory_ptr_to_t_struct$_Institution_$4243_memory_ptr(value0, pos) -> updatedPos {\n        abi_encode_t_struct$_Institution_$4243_memory_ptr_to_t_struct$_Institution_$4243_memory_ptr(value0, pos)\n        updatedPos := add(pos, 0x40)\n    }\n\n    function array_nextElement_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct PaycrestSettingManager.Institution[] -> struct PaycrestSettingManager.Institution[]\n    function abi_encode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_Institution_$4243_memory_ptr_to_t_struct$_Institution_$4243_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct PaycrestSettingManager.Institution\n    function abi_decode_t_struct$_Institution_$4243_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // code\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // name\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_available_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Institution_$4243_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint64t_uint64t_uint64(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function cleanup_t_uint96(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffff)\n    }\n\n    function abi_encode_t_uint96_to_t_uint96(value, pos) {\n        mstore(pos, cleanup_t_uint96(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    // struct IPaycrest.Order -> struct IPaycrest.Order\n    function abi_encode_t_struct$_Order_$5007_memory_ptr_to_t_struct$_Order_$5007_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x0120)\n\n        {\n            // seller\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // token\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // senderFeeRecipient\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // senderFee\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // rate\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint96_to_t_uint96(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // isFulfilled\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // refundAddress\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0xc0))\n        }\n\n        {\n            // currentBPS\n\n            let memberValue0 := mload(add(value, 0xe0))\n            abi_encode_t_uint96_to_t_uint96(memberValue0, add(pos, 0xe0))\n        }\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x0100))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x0100))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_Order_$5007_memory_ptr__to_t_struct$_Order_$5007_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 288)\n\n        abi_encode_t_struct$_Order_$5007_memory_ptr_to_t_struct$_Order_$5007_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    // struct PaycrestSettingManager.InstitutionByCode -> struct PaycrestSettingManager.InstitutionByCode\n    function abi_encode_t_struct$_InstitutionByCode_$4248_memory_ptr_to_t_struct$_InstitutionByCode_$4248_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // currency\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_InstitutionByCode_$4248_memory_ptr__to_t_struct$_InstitutionByCode_$4248_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_struct$_InstitutionByCode_$4248_memory_ptr_to_t_struct$_InstitutionByCode_$4248_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint64_t_uint64_t_uint64_t_uint256__to_t_uint64_t_uint64_t_uint64_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function validator_revert_t_uint96(value) {\n        if iszero(eq(value, cleanup_t_uint96(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint96(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint96(value)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    // string\n    function abi_decode_t_string_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8 {\n        if slt(sub(dataEnd, headStart), 256) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint96(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 224))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value7, value8 := abi_decode_t_string_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    // address[]\n    function abi_decode_t_array$_t_address_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_array$_t_address_$dyn_calldata_ptrt_addresst_uint96(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2, value3 := abi_decode_t_array$_t_address_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value4 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value5 := abi_decode_t_uint96(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint64_t_uint64_t_uint64__to_t_uint64_t_uint64_t_uint64__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // string -> string\n    function abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_string_calldata_ptr__to_t_bytes32_t_string_memory_ptr__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(value1, value2,  tail)\n\n    }\n\n    function checked_sub_t_uint96(x, y) -> diff {\n        x := cleanup_t_uint96(x)\n        y := cleanup_t_uint96(y)\n        diff := sub(x, y)\n\n        if gt(diff, 0xffffffffffffffffffffffff) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_address_$dyn_calldata_ptr(ptr) -> data {\n        data := ptr\n\n    }\n\n    function abi_encodeUpdatedPos_t_address_to_t_address(value0, pos) -> updatedPos {\n        abi_encode_t_address_to_t_address(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function calldata_access_t_address(baseRef, ptr) -> value {\n        value := abi_decode_t_address(ptr, add(ptr, 32))\n    }\n\n    function array_nextElement_t_array$_t_address_$dyn_calldata_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // address[] -> address[]\n    function abi_encode_t_array$_t_address_$dyn_calldata_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value, length, pos)  -> end  {\n\n        pos := array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_address_$dyn_calldata_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := calldata_access_t_address(baseRef, srcPtr)\n            pos := abi_encodeUpdatedPos_t_address_to_t_address(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_address_$dyn_calldata_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_array$_t_address_$dyn_calldata_ptr_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_array$_t_address_$dyn_memory_ptr_t_uint256_t_uint256__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_address_$dyn_calldata_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value3, value4,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value6,  add(headStart, 160))\n\n    }\n\n    function abi_encode_t_uint96_to_t_uint96_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint96(value))\n    }\n\n    function abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint96_to_t_uint96_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n}\n","id":23,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101165760003560e01c806387490d86116100a2578063c4d66de811610071578063c4d66de8146102e2578063d12ff20a146102fe578063d8e8de341461032e578063e5b32cdf1461035e578063f2fde38b1461038e57610116565b806387490d86146102575780638da5cb5b1461028757806399e3c0b4146102a5578063b810c636146102c157610116565b8063715018a6116100e9578063715018a6146101a15780637249fbb6146101ab57806375151b63146101db578063764bc3551461020b578063768c6ec01461022757610116565b8063026213381461011b5780632ebc53561461014b57806332200882146101695780633d8f8fb214610185575b600080fd5b610135600480360381019061013091906124f0565b6103aa565b604051610142919061260a565b60405180910390f35b6101536104e8565b604051610160919061266d565b60405180910390f35b610183600480360381019061017e9190612836565b610512565b005b61019f600480360381019061019a91906128be565b610626565b005b6101a96107d8565b005b6101c560048036038101906101c091906124f0565b6107ec565b6040516101d29190612919565b60405180910390f35b6101f560048036038101906101f09190612934565b610a7c565b6040516102029190612919565b60405180910390f35b610225600480360381019061022091906129a1565b610ad2565b005b610241600480360381019061023c91906124f0565b610b95565b60405161024e9190612b09565b60405180910390f35b610271600480360381019061026c91906124f0565b610dc6565b60405161027e9190612b54565b60405180910390f35b61028f610e07565b60405161029c919061266d565b60405180910390f35b6102bf60048036038101906102ba9190612b9b565b610e31565b005b6102c961101e565b6040516102d99493929190612c0c565b60405180910390f35b6102fc60048036038101906102f79190612934565b61107a565b005b61031860048036038101906103139190612d04565b611211565b6040516103259190612de9565b60405180910390f35b61034860048036038101906103439190612934565b611647565b6040516103559190612919565b60405180910390f35b61037860048036038101906103739190612e5a565b61169d565b6040516103859190612919565b60405180910390f35b6103a860048036038101906103a39190612934565b611c01565b005b60606000606c6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610427578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906103e1565b50505050905060008151905060008167ffffffffffffffff81111561044f5761044e61269e565b5b60405190808252806020026020018201604052801561048857816020015b61047561237c565b81526020019060019003908161046d5790505b50905060005b828110156104dc578381815181106104a9576104a8612ef4565b5b60200260200101518282815181106104c4576104c3612ef4565b5b6020026020010181905250808060010191505061048e565b50809350505050919050565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61051a611c84565b60008151905060005b8181101561062057606c600085815260200190815260200160002083828151811061055157610550612ef4565b5b602002602001015190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060405180604001604052808483815181106105b6576105b5612ef4565b5b602002602001015160200151815260200185815250606d60008584815181106105e2576105e1612ef4565b5b602002602001015160000151815260200190815260200160002060008201518160000155602082015181600101559050508080600101915050610523565b50505050565b61062e611c84565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610694576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036106fd5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f7200000000000000000000000000000000000000000000820361076a5780606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107d4565b7f7374616b6500000000000000000000000000000000000000000000000000000082036107d35780606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b6107e0611c84565b6107ea6000611d02565b565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610875576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606e6000838152602001908152602001600020600401600c9054906101000a900460ff16156108d0576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001606e6000848152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055506000606e600084815260200190815260200160002060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550606e600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606e600085815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606e6000868152602001908152602001600020600601546040518363ffffffff1660e01b8152600401610a02929190612f23565b6020604051808303816000875af1158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612f61565b50817ffe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf060405160405180910390a260019050919050565b6000606a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610ada611c84565b82606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081606660086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080606660106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fced6b79f1325154aec329e6ff932857cb4f91fa8eb4c6791ce5b460f47995758838383604051610b8893929190612f8e565b60405180910390a1505050565b610b9d61239c565b606e6000838152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff161515151581526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b610dce61245e565b606d6000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e39611c84565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e9f576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f746f6b656e0000000000000000000000000000000000000000000000000000008303610f1e5780606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c69737400000000000000000000000000000000000000000000008303610fa15780606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610fde565b826040517f48bae5b8000000000000000000000000000000000000000000000000000000008152600401610fd59190612de9565b60405180910390fd5b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161101193929190612fc5565b60405180910390a1505050565b600080600080606660009054906101000a900467ffffffffffffffff16606660089054906101000a900467ffffffffffffffff16606660109054906101000a900467ffffffffffffffff16606554935093509350935090919293565b60008060019054906101000a900460ff161590508080156110ab5750600160008054906101000a900460ff1660ff16105b806110d857506110ba30611dc8565b1580156110d75750600160008054906101000a900460ff1660ff16145b5b611117576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110e9061307f565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611154576001600060016101000a81548160ff0219169083151502179055505b6001606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506111b4611deb565b801561120d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161120491906130f1565b60405180910390a15b5050565b60006112208a8a86898c611e44565b8973ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b815260040161125d9392919061310c565b6020604051808303816000875af115801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a09190612f61565b50606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906112f190613172565b919050555033606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051602001611348929190612f23565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001886bffffffffffffffffffffffff1681526020016000151581526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016065546bffffffffffffffffffffffff1681526020018a815250606e600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506101008201518160060155905050866bffffffffffffffffffffffff1689827fbcd03c92e4cfe8dc461872f6cd67c811155fa7d92c918619e82e6b6b44733e7e8b8787604051611632939291906131f6565b60405180910390a49998505050505050505050565b6000606b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611726576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606e6000888152602001908152602001600020600401600c9054906101000a900460ff1615611781576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606e600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082606e60008a815260200190815260200160002060050160148282829054906101000a90046bffffffffffffffffffffffff166117f99190613228565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506000606e60008a815260200190815260200160002060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff160361189b576001606e60008a8152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055505b60006118a78985612026565b90506000606e60008b815260200190815260200160002060030154905060008111156118d7576118d68a6121bf565b5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600001516040518363ffffffff1660e01b8152600401611938929190612f23565b6020604051808303816000875af1158015611957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197b9190612f61565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8784602001516040518363ffffffff1660e01b81526004016119bb929190612f23565b6020604051808303816000875af11580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe9190612f61565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684606001518560400151611a529190613268565b6040518363ffffffff1660e01b8152600401611a6f929190612f23565b6020604051808303816000875af1158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab29190612f61565b506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a223c368c868d8d8d89604001518a606001516040518863ffffffff1660e01b8152600401611b249796959493929190613350565b6020604051808303816000875af1158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b679190612f61565b905080611ba0576040517fbcb00c1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168b7fce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e3388604051611be791906133c9565b60405180910390a360019450505050509695505050505050565b611c09611c84565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6f90613456565b60405180910390fd5b611c8181611d02565b50565b611c8c612313565b73ffffffffffffffffffffffffffffffffffffffff16611caa610e07565b73ffffffffffffffffffffffffffffffffffffffff1614611d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf7906134c2565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3190613554565b60405180910390fd5b611e4261231b565b565b606a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611ec7576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008403611f01576040517f43ad20fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611f67576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611fcd576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000801b606d6000838152602001908152602001600020600001540361201f576040517f38f5fc3500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b61202e61247e565b6000606e6000858152602001908152602001600020600601549050606e6000858152602001908152602001600020600301548161206b9190613574565b9050606554836bffffffffffffffffffffffff168261208a91906135a8565b6120949190613619565b826020018181525050606554606660009054906101000a900467ffffffffffffffff1667ffffffffffffffff1683602001516120d091906135a8565b6120da9190613619565b826000018181525050816000015182602001516120f79190613574565b826020018181525050606554606660089054906101000a900467ffffffffffffffff1667ffffffffffffffff16836000015161213391906135a8565b61213d9190613619565b826040018181525050606554606660109054906101000a900467ffffffffffffffff1667ffffffffffffffff16836000015161217991906135a8565b6121839190613619565b826060018181525050816060015182604001516121a09190613268565b82600001516121af9190613574565b8260000181815250505092915050565b6000606e600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000606e6000848152602001908152602001600020600301549050606e600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401612286929190612f23565b6020604051808303816000875af11580156122a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c99190612f61565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b600033905090565b600060019054906101000a900460ff1661236a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236190613554565b60405180910390fd5b61237a612375612313565b611d02565b565b604051806040016040528060008019168152602001600080191681525090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006bffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008019168152602001600080191681525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6124cd816124ba565b81146124d857600080fd5b50565b6000813590506124ea816124c4565b92915050565b600060208284031215612506576125056124b0565b5b6000612514848285016124db565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612552816124ba565b82525050565b60408201600082015161256e6000850182612549565b5060208201516125816020850182612549565b50505050565b60006125938383612558565b60408301905092915050565b6000602082019050919050565b60006125b78261251d565b6125c18185612528565b93506125cc83612539565b8060005b838110156125fd5781516125e48882612587565b97506125ef8361259f565b9250506001810190506125d0565b5085935050505092915050565b6000602082019050818103600083015261262481846125ac565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126578261262c565b9050919050565b6126678161264c565b82525050565b6000602082019050612682600083018461265e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6126d68261268d565b810181811067ffffffffffffffff821117156126f5576126f461269e565b5b80604052505050565b60006127086124a6565b905061271482826126cd565b919050565b600067ffffffffffffffff8211156127345761273361269e565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156127655761276461274a565b5b61276f60406126fe565b9050600061277f848285016124db565b6000830152506020612793848285016124db565b60208301525092915050565b60006127b26127ad84612719565b6126fe565b905080838252602082019050604084028301858111156127d5576127d4612745565b5b835b818110156127fe57806127ea888261274f565b8452602084019350506040810190506127d7565b5050509392505050565b600082601f83011261281d5761281c612688565b5b813561282d84826020860161279f565b91505092915050565b6000806040838503121561284d5761284c6124b0565b5b600061285b858286016124db565b925050602083013567ffffffffffffffff81111561287c5761287b6124b5565b5b61288885828601612808565b9150509250929050565b61289b8161264c565b81146128a657600080fd5b50565b6000813590506128b881612892565b92915050565b600080604083850312156128d5576128d46124b0565b5b60006128e3858286016124db565b92505060206128f4858286016128a9565b9150509250929050565b60008115159050919050565b612913816128fe565b82525050565b600060208201905061292e600083018461290a565b92915050565b60006020828403121561294a576129496124b0565b5b6000612958848285016128a9565b91505092915050565b600067ffffffffffffffff82169050919050565b61297e81612961565b811461298957600080fd5b50565b60008135905061299b81612975565b92915050565b6000806000606084860312156129ba576129b96124b0565b5b60006129c88682870161298c565b93505060206129d98682870161298c565b92505060406129ea8682870161298c565b9150509250925092565b6129fd8161264c565b82525050565b6000819050919050565b612a1681612a03565b82525050565b60006bffffffffffffffffffffffff82169050919050565b612a3d81612a1c565b82525050565b612a4c816128fe565b82525050565b61012082016000820151612a6960008501826129f4565b506020820151612a7c60208501826129f4565b506040820151612a8f60408501826129f4565b506060820151612aa26060850182612a0d565b506080820151612ab56080850182612a34565b5060a0820151612ac860a0850182612a43565b5060c0820151612adb60c08501826129f4565b5060e0820151612aee60e0850182612a34565b50610100820151612b03610100850182612a0d565b50505050565b600061012082019050612b1f6000830184612a52565b92915050565b604082016000820151612b3b6000850182612549565b506020820151612b4e6020850182612549565b50505050565b6000604082019050612b696000830184612b25565b92915050565b612b78816128fe565b8114612b8357600080fd5b50565b600081359050612b9581612b6f565b92915050565b600080600060608486031215612bb457612bb36124b0565b5b6000612bc2868287016124db565b9350506020612bd3868287016128a9565b9250506040612be486828701612b86565b9150509250925092565b612bf781612961565b82525050565b612c0681612a03565b82525050565b6000608082019050612c216000830187612bee565b612c2e6020830186612bee565b612c3b6040830185612bee565b612c486060830184612bfd565b95945050505050565b612c5a81612a03565b8114612c6557600080fd5b50565b600081359050612c7781612c51565b92915050565b612c8681612a1c565b8114612c9157600080fd5b50565b600081359050612ca381612c7d565b92915050565b600080fd5b60008083601f840112612cc457612cc3612688565b5b8235905067ffffffffffffffff811115612ce157612ce0612ca9565b5b602083019150836001820283011115612cfd57612cfc612745565b5b9250929050565b60008060008060008060008060006101008a8c031215612d2757612d266124b0565b5b6000612d358c828d016128a9565b9950506020612d468c828d01612c68565b9850506040612d578c828d016124db565b9750506060612d688c828d01612c94565b9650506080612d798c828d016128a9565b95505060a0612d8a8c828d01612c68565b94505060c0612d9b8c828d016128a9565b93505060e08a013567ffffffffffffffff811115612dbc57612dbb6124b5565b5b612dc88c828d01612cae565b92509250509295985092959850929598565b612de3816124ba565b82525050565b6000602082019050612dfe6000830184612dda565b92915050565b60008083601f840112612e1a57612e19612688565b5b8235905067ffffffffffffffff811115612e3757612e36612ca9565b5b602083019150836020820283011115612e5357612e52612745565b5b9250929050565b60008060008060008060a08789031215612e7757612e766124b0565b5b6000612e8589828a016124db565b9650506020612e9689828a016128a9565b955050604087013567ffffffffffffffff811115612eb757612eb66124b5565b5b612ec389828a01612e04565b94509450506060612ed689828a016128a9565b9250506080612ee789828a01612c94565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050612f38600083018561265e565b612f456020830184612bfd565b9392505050565b600081519050612f5b81612b6f565b92915050565b600060208284031215612f7757612f766124b0565b5b6000612f8584828501612f4c565b91505092915050565b6000606082019050612fa36000830186612bee565b612fb06020830185612bee565b612fbd6040830184612bee565b949350505050565b6000606082019050612fda6000830186612dda565b612fe7602083018561265e565b612ff4604083018461290a565b949350505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613069602e83612ffc565b91506130748261300d565b604082019050919050565b600060208201905081810360008301526130988161305c565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006130db6130d66130d18461309f565b6130b6565b6130a9565b9050919050565b6130eb816130c0565b82525050565b600060208201905061310660008301846130e2565b92915050565b6000606082019050613121600083018661265e565b61312e602083018561265e565b61313b6040830184612bfd565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061317d82612a03565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131af576131ae613143565b5b600182019050919050565b82818337600083830152505050565b60006131d58385612ffc565b93506131e28385846131ba565b6131eb8361268d565b840190509392505050565b600060408201905061320b6000830186612dda565b818103602083015261321e8184866131c9565b9050949350505050565b600061323382612a1c565b915061323e83612a1c565b925082820390506bffffffffffffffffffffffff81111561326257613261613143565b5b92915050565b600061327382612a03565b915061327e83612a03565b925082820190508082111561329657613295613143565b5b92915050565b600082825260208201905092915050565b6000819050919050565b60006132c383836129f4565b60208301905092915050565b60006132de60208401846128a9565b905092915050565b6000602082019050919050565b60006132ff838561329c565b935061330a826132ad565b8060005b858110156133435761332082846132cf565b61332a88826132b7565b9750613335836132e6565b92505060018101905061330e565b5085925050509392505050565b600060c082019050613365600083018a612dda565b613372602083018961265e565b61337f604083018861265e565b81810360608301526133928186886132f3565b90506133a16080830185612bfd565b6133ae60a0830184612bfd565b98975050505050505050565b6133c381612a1c565b82525050565b60006020820190506133de60008301846133ba565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613440602683612ffc565b915061344b826133e4565b604082019050919050565b6000602082019050818103600083015261346f81613433565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006134ac602083612ffc565b91506134b782613476565b602082019050919050565b600060208201905081810360008301526134db8161349f565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061353e602b83612ffc565b9150613549826134e2565b604082019050919050565b6000602082019050818103600083015261356d81613531565b9050919050565b600061357f82612a03565b915061358a83612a03565b92508282039050818111156135a2576135a1613143565b5b92915050565b60006135b382612a03565b91506135be83612a03565b92508282026135cc81612a03565b915082820484148315176135e3576135e2613143565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061362482612a03565b915061362f83612a03565b92508261363f5761363e6135ea565b5b82820490509291505056fea2646970667358221220eb281f34df75f66f2570f9bbcf563667441feeae59272e3e7ff94f6441a9d99464736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x116 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x87490D86 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xC4D66DE8 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x2E2 JUMPI DUP1 PUSH4 0xD12FF20A EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0xD8E8DE34 EQ PUSH2 0x32E JUMPI DUP1 PUSH4 0xE5B32CDF EQ PUSH2 0x35E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x38E JUMPI PUSH2 0x116 JUMP JUMPDEST DUP1 PUSH4 0x87490D86 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x287 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x2C1 JUMPI PUSH2 0x116 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x7249FBB6 EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x764BC355 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x768C6EC0 EQ PUSH2 0x227 JUMPI PUSH2 0x116 JUMP JUMPDEST DUP1 PUSH4 0x2621338 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x2EBC5356 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x32200882 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0x3D8F8FB2 EQ PUSH2 0x185 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x135 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x130 SWAP2 SWAP1 PUSH2 0x24F0 JUMP JUMPDEST PUSH2 0x3AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x142 SWAP2 SWAP1 PUSH2 0x260A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x153 PUSH2 0x4E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 SWAP2 SWAP1 PUSH2 0x266D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x183 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17E SWAP2 SWAP1 PUSH2 0x2836 JUMP JUMPDEST PUSH2 0x512 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x19F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19A SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST PUSH2 0x626 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A9 PUSH2 0x7D8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C0 SWAP2 SWAP1 PUSH2 0x24F0 JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x2934 JUMP JUMPDEST PUSH2 0xA7C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x202 SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x225 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x220 SWAP2 SWAP1 PUSH2 0x29A1 JUMP JUMPDEST PUSH2 0xAD2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x241 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23C SWAP2 SWAP1 PUSH2 0x24F0 JUMP JUMPDEST PUSH2 0xB95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24E SWAP2 SWAP1 PUSH2 0x2B09 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x271 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26C SWAP2 SWAP1 PUSH2 0x24F0 JUMP JUMPDEST PUSH2 0xDC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27E SWAP2 SWAP1 PUSH2 0x2B54 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28F PUSH2 0xE07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29C SWAP2 SWAP1 PUSH2 0x266D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BA SWAP2 SWAP1 PUSH2 0x2B9B JUMP JUMPDEST PUSH2 0xE31 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C9 PUSH2 0x101E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F7 SWAP2 SWAP1 PUSH2 0x2934 JUMP JUMPDEST PUSH2 0x107A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x318 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x313 SWAP2 SWAP1 PUSH2 0x2D04 JUMP JUMPDEST PUSH2 0x1211 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x2DE9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x348 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x343 SWAP2 SWAP1 PUSH2 0x2934 JUMP JUMPDEST PUSH2 0x1647 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x355 SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x378 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x373 SWAP2 SWAP1 PUSH2 0x2E5A JUMP JUMPDEST PUSH2 0x169D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x385 SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A3 SWAP2 SWAP1 PUSH2 0x2934 JUMP JUMPDEST PUSH2 0x1C01 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x6C PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x427 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x3E1 JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x44F JUMPI PUSH2 0x44E PUSH2 0x269E JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x488 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x475 PUSH2 0x237C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x46D JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4DC JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4A9 JUMPI PUSH2 0x4A8 PUSH2 0x2EF4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4C4 JUMPI PUSH2 0x4C3 PUSH2 0x2EF4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x48E JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x69 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x1C84 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x620 JUMPI PUSH1 0x6C PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x551 JUMPI PUSH2 0x550 PUSH2 0x2EF4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5B6 JUMPI PUSH2 0x5B5 PUSH2 0x2EF4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x6D PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5E2 JUMPI PUSH2 0x5E1 PUSH2 0x2EF4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x523 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x62E PUSH2 0x1C84 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x694 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x6FD JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x76A JUMPI DUP1 PUSH1 0x69 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x7D4 JUMP JUMPDEST PUSH32 0x7374616B65000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x7D3 JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7E0 PUSH2 0x1C84 JUMP JUMPDEST PUSH2 0x7EA PUSH1 0x0 PUSH2 0x1D02 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x69 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x875 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE9D8299200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x56F1733F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x6E PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x6E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x6E PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6E PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA02 SWAP3 SWAP2 SWAP1 PUSH2 0x2F23 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA21 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA45 SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST POP DUP2 PUSH32 0xFE509803C09416B28FF3D8F690C8B0C61462A892C46D5430C8FB20ABE472DAF0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6A PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xADA PUSH2 0x1C84 JUMP JUMPDEST DUP3 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x66 PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xCED6B79F1325154AEC329E6FF932857CB4F91FA8EB4C6791CE5B460F47995758 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xB88 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F8E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0xB9D PUSH2 0x239C JUMP JUMPDEST PUSH1 0x6E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDCE PUSH2 0x245E JUMP JUMPDEST PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xE39 PUSH2 0x1C84 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE9F JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0xF1E JUMPI DUP1 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0xFA1 JUMPI DUP1 PUSH1 0x6B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xFDE JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH32 0x48BAE5B800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFD5 SWAP2 SWAP1 PUSH2 0x2DE9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1011 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2FC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x66 PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x65 SLOAD SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP1 SWAP2 SWAP3 SWAP4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x10AB JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x10D8 JUMPI POP PUSH2 0x10BA ADDRESS PUSH2 0x1DC8 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x10D7 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x1117 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x110E SWAP1 PUSH2 0x307F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1154 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x11B4 PUSH2 0x1DEB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x120D JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x1204 SWAP2 SWAP1 PUSH2 0x30F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1220 DUP11 DUP11 DUP7 DUP10 DUP13 PUSH2 0x1E44 JUMP JUMPDEST DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP13 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x125D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x310C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x127C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12A0 SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST POP PUSH1 0x6F PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x12F1 SWAP1 PUSH2 0x3172 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH1 0x6F PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1348 SWAP3 SWAP2 SWAP1 PUSH2 0x2F23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x65 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE POP PUSH1 0x6E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 DUP3 PUSH32 0xBCD03C92E4CFE8DC461872F6CD67C811155FA7D92C918619E82E6B6B44733E7E DUP12 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1632 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6B PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x69 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1726 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE9D8299200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6E PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1781 JUMPI PUSH1 0x40 MLOAD PUSH32 0x56F1733F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 PUSH1 0x6E PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x17F9 SWAP2 SWAP1 PUSH2 0x3228 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x189B JUMPI PUSH1 0x1 PUSH1 0x6E PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH2 0x18A7 DUP10 DUP6 PUSH2 0x2026 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x18D7 JUMPI PUSH2 0x18D6 DUP11 PUSH2 0x21BF JUMP JUMPDEST JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1938 SWAP3 SWAP2 SWAP1 PUSH2 0x2F23 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1957 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x197B SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP8 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19BB SWAP3 SWAP2 SWAP1 PUSH2 0x2F23 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x19DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19FE SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x68 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x1A52 SWAP2 SWAP1 PUSH2 0x3268 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A6F SWAP3 SWAP2 SWAP1 PUSH2 0x2F23 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A8E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AB2 SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x68 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4A223C36 DUP13 DUP7 DUP14 DUP14 DUP14 DUP10 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B24 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3350 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B43 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B67 SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1BA0 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBCB00C1600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH32 0xCE38752AC5ED47DD3CFF11297A4261A0C644BE6CA65DC3FC7AE1C3A97C209E33 DUP9 PUSH1 0x40 MLOAD PUSH2 0x1BE7 SWAP2 SWAP1 PUSH2 0x33C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP5 POP POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1C09 PUSH2 0x1C84 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1C78 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6F SWAP1 PUSH2 0x3456 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C81 DUP2 PUSH2 0x1D02 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1C8C PUSH2 0x2313 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1CAA PUSH2 0xE07 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D00 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CF7 SWAP1 PUSH2 0x34C2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E31 SWAP1 PUSH2 0x3554 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E42 PUSH2 0x231B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x6A PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1EC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3DD1B30500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 SUB PUSH2 0x1F01 JUMPI PUSH1 0x40 MLOAD PUSH32 0x43AD20FC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1F67 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1FCD JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x201F JUMPI PUSH1 0x40 MLOAD PUSH32 0x38F5FC3500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x202E PUSH2 0x247E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x6E PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD DUP2 PUSH2 0x206B SWAP2 SWAP1 PUSH2 0x3574 JUMP JUMPDEST SWAP1 POP PUSH1 0x65 SLOAD DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x208A SWAP2 SWAP1 PUSH2 0x35A8 JUMP JUMPDEST PUSH2 0x2094 SWAP2 SWAP1 PUSH2 0x3619 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x20D0 SWAP2 SWAP1 PUSH2 0x35A8 JUMP JUMPDEST PUSH2 0x20DA SWAP2 SWAP1 PUSH2 0x3619 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x20F7 SWAP2 SWAP1 PUSH2 0x3574 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x2133 SWAP2 SWAP1 PUSH2 0x35A8 JUMP JUMPDEST PUSH2 0x213D SWAP2 SWAP1 PUSH2 0x3619 JUMP JUMPDEST DUP3 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x2179 SWAP2 SWAP1 PUSH2 0x35A8 JUMP JUMPDEST PUSH2 0x2183 SWAP2 SWAP1 PUSH2 0x3619 JUMP JUMPDEST DUP3 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x60 ADD MLOAD DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x21A0 SWAP2 SWAP1 PUSH2 0x3268 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x21AF SWAP2 SWAP1 PUSH2 0x3574 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x6E PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x6E PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2286 SWAP3 SWAP2 SWAP1 PUSH2 0x2F23 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x22A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22C9 SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x96C76D5AEC8A8C11A9C8E02768E3FA309347330D08961E0CF9FD43B349B684C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x236A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2361 SWAP1 PUSH2 0x3554 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x237A PUSH2 0x2375 PUSH2 0x2313 JUMP JUMPDEST PUSH2 0x1D02 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x24CD DUP2 PUSH2 0x24BA JUMP JUMPDEST DUP2 EQ PUSH2 0x24D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24EA DUP2 PUSH2 0x24C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2506 JUMPI PUSH2 0x2505 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2514 DUP5 DUP3 DUP6 ADD PUSH2 0x24DB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2552 DUP2 PUSH2 0x24BA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x256E PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2549 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2581 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2549 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2593 DUP4 DUP4 PUSH2 0x2558 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25B7 DUP3 PUSH2 0x251D JUMP JUMPDEST PUSH2 0x25C1 DUP2 DUP6 PUSH2 0x2528 JUMP JUMPDEST SWAP4 POP PUSH2 0x25CC DUP4 PUSH2 0x2539 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25FD JUMPI DUP2 MLOAD PUSH2 0x25E4 DUP9 DUP3 PUSH2 0x2587 JUMP JUMPDEST SWAP8 POP PUSH2 0x25EF DUP4 PUSH2 0x259F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x25D0 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2624 DUP2 DUP5 PUSH2 0x25AC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2657 DUP3 PUSH2 0x262C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2667 DUP2 PUSH2 0x264C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2682 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x265E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x26D6 DUP3 PUSH2 0x268D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x26F5 JUMPI PUSH2 0x26F4 PUSH2 0x269E JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2708 PUSH2 0x24A6 JUMP JUMPDEST SWAP1 POP PUSH2 0x2714 DUP3 DUP3 PUSH2 0x26CD JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2734 JUMPI PUSH2 0x2733 PUSH2 0x269E JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2765 JUMPI PUSH2 0x2764 PUSH2 0x274A JUMP JUMPDEST JUMPDEST PUSH2 0x276F PUSH1 0x40 PUSH2 0x26FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x277F DUP5 DUP3 DUP6 ADD PUSH2 0x24DB JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x2793 DUP5 DUP3 DUP6 ADD PUSH2 0x24DB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27B2 PUSH2 0x27AD DUP5 PUSH2 0x2719 JUMP JUMPDEST PUSH2 0x26FE JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x27D5 JUMPI PUSH2 0x27D4 PUSH2 0x2745 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x27FE JUMPI DUP1 PUSH2 0x27EA DUP9 DUP3 PUSH2 0x274F JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x27D7 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x281D JUMPI PUSH2 0x281C PUSH2 0x2688 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x282D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x279F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x284D JUMPI PUSH2 0x284C PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x285B DUP6 DUP3 DUP7 ADD PUSH2 0x24DB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x287C JUMPI PUSH2 0x287B PUSH2 0x24B5 JUMP JUMPDEST JUMPDEST PUSH2 0x2888 DUP6 DUP3 DUP7 ADD PUSH2 0x2808 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x289B DUP2 PUSH2 0x264C JUMP JUMPDEST DUP2 EQ PUSH2 0x28A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x28B8 DUP2 PUSH2 0x2892 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28D5 JUMPI PUSH2 0x28D4 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28E3 DUP6 DUP3 DUP7 ADD PUSH2 0x24DB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x28F4 DUP6 DUP3 DUP7 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2913 DUP2 PUSH2 0x28FE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x292E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x290A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x294A JUMPI PUSH2 0x2949 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2958 DUP5 DUP3 DUP6 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x297E DUP2 PUSH2 0x2961 JUMP JUMPDEST DUP2 EQ PUSH2 0x2989 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x299B DUP2 PUSH2 0x2975 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x29BA JUMPI PUSH2 0x29B9 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x29C8 DUP7 DUP3 DUP8 ADD PUSH2 0x298C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x29D9 DUP7 DUP3 DUP8 ADD PUSH2 0x298C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x29EA DUP7 DUP3 DUP8 ADD PUSH2 0x298C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x29FD DUP2 PUSH2 0x264C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A16 DUP2 PUSH2 0x2A03 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A3D DUP2 PUSH2 0x2A1C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2A4C DUP2 PUSH2 0x28FE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2A69 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x29F4 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2A7C PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x29F4 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2A8F PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x29F4 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2AA2 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2A0D JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2AB5 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2A34 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2AC8 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2A43 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2ADB PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x29F4 JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x2AEE PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2A34 JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x2B03 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x2A0D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x2B1F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2A52 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2B3B PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2549 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2B4E PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2549 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2B69 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2B25 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2B78 DUP2 PUSH2 0x28FE JUMP JUMPDEST DUP2 EQ PUSH2 0x2B83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2B95 DUP2 PUSH2 0x2B6F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2BB4 JUMPI PUSH2 0x2BB3 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2BC2 DUP7 DUP3 DUP8 ADD PUSH2 0x24DB JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2BD3 DUP7 DUP3 DUP8 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2BE4 DUP7 DUP3 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x2BF7 DUP2 PUSH2 0x2961 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C06 DUP2 PUSH2 0x2A03 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2C21 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2BEE JUMP JUMPDEST PUSH2 0x2C2E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2BEE JUMP JUMPDEST PUSH2 0x2C3B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2BEE JUMP JUMPDEST PUSH2 0x2C48 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2BFD JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2C5A DUP2 PUSH2 0x2A03 JUMP JUMPDEST DUP2 EQ PUSH2 0x2C65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2C77 DUP2 PUSH2 0x2C51 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C86 DUP2 PUSH2 0x2A1C JUMP JUMPDEST DUP2 EQ PUSH2 0x2C91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2CA3 DUP2 PUSH2 0x2C7D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2CC4 JUMPI PUSH2 0x2CC3 PUSH2 0x2688 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2CE1 JUMPI PUSH2 0x2CE0 PUSH2 0x2CA9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2CFD JUMPI PUSH2 0x2CFC PUSH2 0x2745 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x2D27 JUMPI PUSH2 0x2D26 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D35 DUP13 DUP3 DUP14 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP10 POP POP PUSH1 0x20 PUSH2 0x2D46 DUP13 DUP3 DUP14 ADD PUSH2 0x2C68 JUMP JUMPDEST SWAP9 POP POP PUSH1 0x40 PUSH2 0x2D57 DUP13 DUP3 DUP14 ADD PUSH2 0x24DB JUMP JUMPDEST SWAP8 POP POP PUSH1 0x60 PUSH2 0x2D68 DUP13 DUP3 DUP14 ADD PUSH2 0x2C94 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x80 PUSH2 0x2D79 DUP13 DUP3 DUP14 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP6 POP POP PUSH1 0xA0 PUSH2 0x2D8A DUP13 DUP3 DUP14 ADD PUSH2 0x2C68 JUMP JUMPDEST SWAP5 POP POP PUSH1 0xC0 PUSH2 0x2D9B DUP13 DUP3 DUP14 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xE0 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2DBC JUMPI PUSH2 0x2DBB PUSH2 0x24B5 JUMP JUMPDEST JUMPDEST PUSH2 0x2DC8 DUP13 DUP3 DUP14 ADD PUSH2 0x2CAE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH2 0x2DE3 DUP2 PUSH2 0x24BA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2DFE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2DDA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2E1A JUMPI PUSH2 0x2E19 PUSH2 0x2688 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2E37 JUMPI PUSH2 0x2E36 PUSH2 0x2CA9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2E53 JUMPI PUSH2 0x2E52 PUSH2 0x2745 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2E77 JUMPI PUSH2 0x2E76 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E85 DUP10 DUP3 DUP11 ADD PUSH2 0x24DB JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x2E96 DUP10 DUP3 DUP11 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2EB7 JUMPI PUSH2 0x2EB6 PUSH2 0x24B5 JUMP JUMPDEST JUMPDEST PUSH2 0x2EC3 DUP10 DUP3 DUP11 ADD PUSH2 0x2E04 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 PUSH2 0x2ED6 DUP10 DUP3 DUP11 ADD PUSH2 0x28A9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x2EE7 DUP10 DUP3 DUP11 ADD PUSH2 0x2C94 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2F38 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x265E JUMP JUMPDEST PUSH2 0x2F45 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2BFD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2F5B DUP2 PUSH2 0x2B6F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F77 JUMPI PUSH2 0x2F76 PUSH2 0x24B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F85 DUP5 DUP3 DUP6 ADD PUSH2 0x2F4C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2FA3 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2BEE JUMP JUMPDEST PUSH2 0x2FB0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2BEE JUMP JUMPDEST PUSH2 0x2FBD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BEE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2FDA PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2DDA JUMP JUMPDEST PUSH2 0x2FE7 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x265E JUMP JUMPDEST PUSH2 0x2FF4 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x290A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3069 PUSH1 0x2E DUP4 PUSH2 0x2FFC JUMP JUMPDEST SWAP2 POP PUSH2 0x3074 DUP3 PUSH2 0x300D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3098 DUP2 PUSH2 0x305C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30DB PUSH2 0x30D6 PUSH2 0x30D1 DUP5 PUSH2 0x309F JUMP JUMPDEST PUSH2 0x30B6 JUMP JUMPDEST PUSH2 0x30A9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x30EB DUP2 PUSH2 0x30C0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3106 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x30E2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3121 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x265E JUMP JUMPDEST PUSH2 0x312E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x265E JUMP JUMPDEST PUSH2 0x313B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BFD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x317D DUP3 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x31AF JUMPI PUSH2 0x31AE PUSH2 0x3143 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31D5 DUP4 DUP6 PUSH2 0x2FFC JUMP JUMPDEST SWAP4 POP PUSH2 0x31E2 DUP4 DUP6 DUP5 PUSH2 0x31BA JUMP JUMPDEST PUSH2 0x31EB DUP4 PUSH2 0x268D JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x320B PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2DDA JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x321E DUP2 DUP5 DUP7 PUSH2 0x31C9 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3233 DUP3 PUSH2 0x2A1C JUMP JUMPDEST SWAP2 POP PUSH2 0x323E DUP4 PUSH2 0x2A1C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3262 JUMPI PUSH2 0x3261 PUSH2 0x3143 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3273 DUP3 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP PUSH2 0x327E DUP4 PUSH2 0x2A03 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3296 JUMPI PUSH2 0x3295 PUSH2 0x3143 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32C3 DUP4 DUP4 PUSH2 0x29F4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32DE PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x28A9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32FF DUP4 DUP6 PUSH2 0x329C JUMP JUMPDEST SWAP4 POP PUSH2 0x330A DUP3 PUSH2 0x32AD JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3343 JUMPI PUSH2 0x3320 DUP3 DUP5 PUSH2 0x32CF JUMP JUMPDEST PUSH2 0x332A DUP9 DUP3 PUSH2 0x32B7 JUMP JUMPDEST SWAP8 POP PUSH2 0x3335 DUP4 PUSH2 0x32E6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x330E JUMP JUMPDEST POP DUP6 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x3365 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x2DDA JUMP JUMPDEST PUSH2 0x3372 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x265E JUMP JUMPDEST PUSH2 0x337F PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x265E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x3392 DUP2 DUP7 DUP9 PUSH2 0x32F3 JUMP JUMPDEST SWAP1 POP PUSH2 0x33A1 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x2BFD JUMP JUMPDEST PUSH2 0x33AE PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x2BFD JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x33C3 DUP2 PUSH2 0x2A1C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x33DE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x33BA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3440 PUSH1 0x26 DUP4 PUSH2 0x2FFC JUMP JUMPDEST SWAP2 POP PUSH2 0x344B DUP3 PUSH2 0x33E4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x346F DUP2 PUSH2 0x3433 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34AC PUSH1 0x20 DUP4 PUSH2 0x2FFC JUMP JUMPDEST SWAP2 POP PUSH2 0x34B7 DUP3 PUSH2 0x3476 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x34DB DUP2 PUSH2 0x349F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x353E PUSH1 0x2B DUP4 PUSH2 0x2FFC JUMP JUMPDEST SWAP2 POP PUSH2 0x3549 DUP3 PUSH2 0x34E2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x356D DUP2 PUSH2 0x3531 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x357F DUP3 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP PUSH2 0x358A DUP4 PUSH2 0x2A03 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x35A2 JUMPI PUSH2 0x35A1 PUSH2 0x3143 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35B3 DUP3 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP PUSH2 0x35BE DUP4 PUSH2 0x2A03 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x35CC DUP2 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x35E3 JUMPI PUSH2 0x35E2 PUSH2 0x3143 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3624 DUP3 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP PUSH2 0x362F DUP4 PUSH2 0x2A03 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x363F JUMPI PUSH2 0x363E PUSH2 0x35EA JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB 0x28 0x1F CALLVALUE 0xDF PUSH22 0xF66F2570F9BBCF563667441FEEAE59272E3E7FF94F64 COINBASE 0xA9 0xD9 SWAP5 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"430:9421:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8727:487;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9559:109;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2270:500:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3214:323;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2064:101:0;;;:::i;:::-;;6088:522:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8378:119;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2776:432:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8207:115:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8564:157;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1441:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1881:383:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9267:230:16;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;956:138;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1549:1389;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9728:120;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3708:1985;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2314:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8727:487:16;8802:20;8834:33;8870:21;:31;8892:8;8870:31;;;;;;;;;;;8834:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8911:14;8928:12;:19;8911:36;;8957:27;9005:6;8987:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;8957:55;;9036:9;9031:145;9055:6;9051:1;:10;9031:145;;;9091:12;9104:1;9091:15;;;;;;;;:::i;:::-;;;;;;;;9079:6;9086:1;9079:9;;;;;;;;:::i;:::-;;;;;;;:27;;;;9148:3;;;;;;;9031:145;;;;9201:6;9194:13;;;;;8727:487;;;:::o;9559:109::-;9615:7;9641:20;;;;;;;;;;;9634:27;;9559:109;:::o;2270:500:17:-;1334:13:0;:11;:13::i;:::-;2387:14:17::1;2404:12;:19;2387:36;;2438:6;2433:331;2454:6;2450:1;:10;2433:331;;;2478:21;:31;2500:8;2478:31;;;;;;;;;;;2515:12;2528:1;2515:15;;;;;;;;:::i;:::-;;;;;;;;2478:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2597:97;;;;;;;;2639:12;2652:1;2639:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2597:97;;;;2671:8;2597:97;;::::0;2545:27:::1;:49;2573:12;2586:1;2573:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2545:49;;;;;;;;;;;:149;;;;;;;;;;;;;;;;;;;2736:3;;;;;;;2433:331;;;;2376:394;2270:500:::0;;:::o;3214:323::-;1334:13:0;:11;:13::i;:::-;3321:1:17::1;3304:19;;:5;:19;;::::0;3300:50:::1;;3332:18;;;;;;;;;;;;;;3300:50;3364:13;:4;:13:::0;3360:39:::1;;3394:5;3379:12;;:20;;;;;;;;;;;;;;;;;;3360:39;3413:20;:4;:20:::0;3409:121:::1;;3458:5;3435:20;;:28;;;;;;;;;;;;;;;;;;3409:121;;;3482:15;:4;:15:::0;3478:52:::1;;3525:5;3499:23;;:31;;;;;;;;;;;;;;;;;;3478:52;3409:121;3214:323:::0;;:::o;2064:101:0:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;6088:522:16:-;6157:4;1240:20;;;;;;;;;;;1226:34;;:10;:34;;;1223:62;;1269:16;;;;;;;;;;;;;;1223:62;6233:5:::1;:15;6239:8;6233:15;;;;;;;;;;;:27;;;;;;;;;;;;6230:55;;;6269:16;;;;;;;;;;;;;;6230:55;6355:4;6325:5;:15;6331:8;6325:15;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;6398:1;6369:5;:15;6375:8;6369:15;;;;;;;;;;;:26;;;:30;;;;;;;;;;;;;;;;;;6447:5;:15;6453:8;6447:15;;;;;;;;;;;:21;;;;;;;;;;;;6440:38;;;6479:5;:15;6485:8;6479:15;;;;;;;;;;;:29;;;;;;;;;;;;6510:5;:15;6516:8;6510:15;;;;;;;;;;;:22;;;6440:93;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6573:8;6564:18;;;;;;;;;;6599:4;6592:11;;6088:522:::0;;;:::o;8378:119::-;8442:4;8465:17;:25;8483:6;8465:25;;;;;;;;;;;;;;;;;;;;;;;;;8458:32;;8378:119;;;:::o;2776:432:17:-;1334:13:0;:11;:13::i;:::-;2950:19:17::1;2929:18;;:40;;;;;;;;;;;;;;;;;;3008:24;2979:26;;:53;;;;;;;;;;;;;;;;;;3073:26;3042:28;;:57;;;;;;;;;;;;;;;;;;3114:87;3127:19;3148:24;3174:26;3114:87;;;;;;;;:::i;:::-;;;;;;;;2776:432:::0;;;:::o;8207:115:16:-;8269:12;;:::i;:::-;8300:5;:15;8306:8;8300:15;;;;;;;;;;;8293:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8207:115;;;:::o;8564:157::-;8638:24;;:::i;:::-;8681:27;:33;8709:4;8681:33;;;;;;;;;;;8674:40;;;;;;;;;;;;;;;;;;;;;;;;;;;8564:157;;;:::o;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;1881:383:17:-;1334:13:0;:11;:13::i;:::-;2001:1:17::1;1984:19;;:5;:19;;::::0;1980:50:::1;;2012:18;;;;;;;;;;;;;;1980:50;2044:15;:4;:15:::0;2040:54:::1;;2088:6;2061:17;:24;2079:5;2061:24;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;2040:54;2108:19;:4;:19:::0;2104:99:::1;;2153:6;2129:14;:21;2144:5;2129:21;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;2104:99;;;2198:4;2181:22;;;;;;;;;;;:::i;:::-;;;;;;;;2104:99;2218:39;2237:4;2243:5;2250:6;2218:39;;;;;;;;:::i;:::-;;;;;;;;1881:383:::0;;;:::o;9267:230:16:-;9323:6;9340;9357;9373:7;9404:18;;;;;;;;;;;9424:26;;;;;;;;;;;9452:28;;;;;;;;;;;9482:7;;9397:93;;;;;;;;9267:230;;;;:::o;956:138::-;3279:19:1;3302:13;;;;;;;;;;;3301:14;3279:36;;3347:14;:34;;;;;3380:1;3365:12;;;;;;;;;;:16;;;3347:34;3346:108;;;;3388:44;3426:4;3388:29;:44::i;:::-;3387:45;:66;;;;;3452:1;3436:12;;;;;;;;;;:17;;;3387:66;3346:108;3325:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3551:1;3536:12;;:16;;;;;;;;;;;;;;;;;;3566:14;3562:65;;;3612:4;3596:13;;:20;;;;;;;;;;;;;;;;;;3562:65;1053:4:16::1;1026:17;:24;1044:5;1026:24;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;1071:16;:14;:16::i;:::-;3651:14:1::0;3647:99;;;3697:5;3681:13;;:21;;;;;;;;;;;;;;;;;;3721:14;3733:1;3721:14;;;;;;:::i;:::-;;;;;;;;3647:99;3269:483;956:138:16;:::o;1549:1389::-;1837:15;2016:80;2025:6;2033:7;2042:14;2058:19;2079:16;2016:8;:80::i;:::-;2161:6;2154:27;;;2182:10;2202:4;2209:7;2154:63;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2283:6;:18;2290:10;2283:18;;;;;;;;;;;;;;;;:21;;;;;;;;;:::i;:::-;;;;;;2400:10;2412:6;:18;2419:10;2412:18;;;;;;;;;;;;;;;;2389:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2379:53;;;;;;2369:63;;2489:334;;;;;;;;2517:10;2489:334;;;;;;2548:6;2489:334;;;;;;2588:19;2489:334;;;;;;2632:10;2489:334;;;;2662:5;2489:334;;;;;;2694:5;2489:334;;;;;;2728:14;2489:334;;;;;;2775:7;;2489:334;;;;;;2805:7;2489:334;;;2472:5;:14;2478:7;2472:14;;;;;;;;;;;:351;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2894:5;2868:63;;2885:7;2876;2868:63;2901:16;2919:11;;2868:63;;;;;;;;:::i;:::-;;;;;;;;1549:1389;;;;;;;;;;;:::o;9728:120::-;9796:4;9819:14;:22;9834:6;9819:22;;;;;;;;;;;;;;;;;;;;;;;;;9812:29;;9728:120;;;:::o;3708:1985::-;3950:4;1240:20;;;;;;;;;;;1226:34;;:10;:34;;;1223:62;;1269:16;;;;;;;;;;;;;;1223:62;4026:5:::1;:15;4032:8;4026:15;;;;;;;;;;;:27;;;;;;;;;;;;4023:55;;;4062:16;;;;;;;;;;;;;;4023:55;4126:13;4142:5;:15;4148:8;4142:15;;;;;;;;;;;:21;;;;;;;;;;;;4126:37;;4272:14;4242:5;:15;4248:8;4242:15;;;;;;;;;;;:26;;;:44;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4370:1;4340:5;:15;4346:8;4340:15;;;;;;;;;;;:26;;;;;;;;;;;;:31;;::::0;4337:149:::1;;4471:4;4441:5;:15;4447:8;4441:15;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;4337:149;4587:21;4614:40;4629:8;4639:14;4614;:40::i;:::-;4585:69;;4664:12;4679:5;:15;4685:8;4679:15;;;;;;;;;;;:25;;;4664:40;;4725:1;4718:4;:8;4714:101;;;4777:27;4795:8;4777:17;:27::i;:::-;4714:101;4864:5;4857:22;;;4880:12;;;;;;;;;;;4894:10;:22;;;4857:60;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4980:5;4973:22;;;4996:18;5016:10;:34;;;4973:78;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5068:5;5061:22;;;5092:23;;;;;;;;;;;5155:10;:36;;;5119:10;:33;;;:72;;;;:::i;:::-;5061:132;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5236:11;5265:23;;;;;;;;;;;5250:56;;;5320:8;5342:5;5361:17;5393:20;;5428:10;:33;;;5476:10;:36;;;5250:272;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5236:286;;5536:6;5532:43;;5551:24;;;;;;;;;;;;;;5532:43;5630:18;5612:53;;5620:8;5612:53;5650:14;5612:53;;;;;;:::i;:::-;;;;;;;;5682:4;5675:11;;;;;;3708:1985:::0;;;;;;;;:::o;2314:198:0:-;1334:13;:11;:13::i;:::-;2422:1:::1;2402:22;;:8;:22;;::::0;2394:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;1599:130::-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;2666:187::-;2739:16;2758:6;;;;;;;;;;;2739:25;;2783:8;2774:6;;:17;;;;;;;;;;;;;;;;;;2837:8;2806:40;;2827:8;2806:40;;;;;;;;;;;;2729:124;2666:187;:::o;1423:320:6:-;1483:4;1735:1;1713:7;:19;;;:23;1706:30;;1423:320;;;:::o;1003:95:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1065:26:0::1;:24;:26::i;:::-;1003:95::o:0;2944:517:16:-;3102:17;:25;3120:6;3102:25;;;;;;;;;;;;;;;;;;;;;;;;;3098:57;;3136:19;;;;;;;;;;;;;;3098:57;3179:1;3168:7;:12;3165:38;;3189:14;;;;;;;;;;;;;;3165:38;3242:1;3216:28;;:14;:28;;;3213:58;;3253:18;;;;;;;;;;;;;;3213:58;3315:1;3284:33;;:19;:33;;;3281:63;;3326:18;;;;;;;;;;;;;;3281:63;3419:1;3411:10;;3357:27;:45;3385:16;3357:45;;;;;;;;;;;:50;;;:64;3354:100;;3430:24;;;;;;;;;;;;;;3354:100;2944:517;;;;;:::o;6616:1344::-;6702:21;;:::i;:::-;6796:14;6813:5;:15;6819:8;6813:15;;;;;;;;;;;:22;;;6796:39;;6901:5;:15;6907:8;6901:15;;;;;;;;;;;:25;;;6892:6;:34;;;;:::i;:::-;6883:43;;7070:7;;7052:14;7043:23;;:6;:23;;;;:::i;:::-;7042:35;;;;:::i;:::-;7005:10;:34;;:72;;;;;7230:7;;7208:18;;;;;;;;;;;7171:55;;:10;:34;;;:55;;;;:::i;:::-;7170:67;;;;:::i;:::-;7145:10;:22;;:92;;;;;7410:10;:22;;;7373:10;:34;;;:59;;;;:::i;:::-;7335:10;:34;;:98;;;;;7598:7;;7568:26;;;;;;;;;;;7543:51;;:10;:22;;;:51;;;;:::i;:::-;7542:63;;;;:::i;:::-;7506:10;:33;;:99;;;;;7777:7;;7745:28;;;;;;;;;;;7720:53;;:10;:22;;;:53;;;;:::i;:::-;7719:65;;;;:::i;:::-;7680:10;:36;;:104;;;;;7916:10;:36;;;7880:10;:33;;;:72;;;;:::i;:::-;7854:10;:22;;;:99;;;;:::i;:::-;7829:10;:22;;:124;;;;;6726:1234;6616:1344;;;;:::o;5699:343::-;5763:17;5783:5;:15;5789:8;5783:15;;;;;;;;;;;:34;;;;;;;;;;;;5763:54;;5827:12;5842:5;:15;5848:8;5842:15;;;;;;;;;;;:25;;;5827:40;;5915:5;:15;5921:8;5915:15;;;;;;;;;;;:21;;;;;;;;;;;;5908:38;;;5947:9;5958:4;5908:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6030:4;6019:9;6001:34;;;;;;;;;;;;5753:289;;5699:343;:::o;850:96:7:-;903:7;929:10;922:17;;850:96;:::o;1104:111:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1176:32:0::1;1195:12;:10;:12::i;:::-;1176:18;:32::i;:::-;1104:111::o:0;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:23:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:143::-;1121:6;1155:5;1149:12;1139:22;;1025:143;;;:::o;1174:213::-;1302:11;1336:6;1331:3;1324:19;1376:4;1371:3;1367:14;1352:29;;1174:213;;;;:::o;1393:161::-;1489:4;1512:3;1504:11;;1542:4;1537:3;1533:14;1525:22;;1393:161;;;:::o;1560:108::-;1637:24;1655:5;1637:24;:::i;:::-;1632:3;1625:37;1560:108;;:::o;1768:505::-;1913:4;1908:3;1904:14;2000:4;1993:5;1989:16;1983:23;2019:63;2076:4;2071:3;2067:14;2053:12;2019:63;:::i;:::-;1928:164;2174:4;2167:5;2163:16;2157:23;2193:63;2250:4;2245:3;2241:14;2227:12;2193:63;:::i;:::-;2102:164;1882:391;1768:505;;:::o;2279:295::-;2406:10;2427:104;2527:3;2519:6;2427:104;:::i;:::-;2563:4;2558:3;2554:14;2540:28;;2279:295;;;;:::o;2580:142::-;2679:4;2711;2706:3;2702:14;2694:22;;2580:142;;;:::o;2826:964::-;3003:3;3032:83;3109:5;3032:83;:::i;:::-;3131:115;3239:6;3234:3;3131:115;:::i;:::-;3124:122;;3270:85;3349:5;3270:85;:::i;:::-;3378:7;3409:1;3394:371;3419:6;3416:1;3413:13;3394:371;;;3495:6;3489:13;3522:121;3639:3;3624:13;3522:121;:::i;:::-;3515:128;;3666:89;3748:6;3666:89;:::i;:::-;3656:99;;3454:311;3441:1;3438;3434:9;3429:14;;3394:371;;;3398:14;3781:3;3774:10;;3008:782;;;2826:964;;;;:::o;3796:489::-;3997:4;4035:2;4024:9;4020:18;4012:26;;4084:9;4078:4;4074:20;4070:1;4059:9;4055:17;4048:47;4112:166;4273:4;4264:6;4112:166;:::i;:::-;4104:174;;3796:489;;;;:::o;4291:126::-;4328:7;4368:42;4361:5;4357:54;4346:65;;4291:126;;;:::o;4423:96::-;4460:7;4489:24;4507:5;4489:24;:::i;:::-;4478:35;;4423:96;;;:::o;4525:118::-;4612:24;4630:5;4612:24;:::i;:::-;4607:3;4600:37;4525:118;;:::o;4649:222::-;4742:4;4780:2;4769:9;4765:18;4757:26;;4793:71;4861:1;4850:9;4846:17;4837:6;4793:71;:::i;:::-;4649:222;;;;:::o;4877:117::-;4986:1;4983;4976:12;5000:102;5041:6;5092:2;5088:7;5083:2;5076:5;5072:14;5068:28;5058:38;;5000:102;;;:::o;5108:180::-;5156:77;5153:1;5146:88;5253:4;5250:1;5243:15;5277:4;5274:1;5267:15;5294:281;5377:27;5399:4;5377:27;:::i;:::-;5369:6;5365:40;5507:6;5495:10;5492:22;5471:18;5459:10;5456:34;5453:62;5450:88;;;5518:18;;:::i;:::-;5450:88;5558:10;5554:2;5547:22;5337:238;5294:281;;:::o;5581:129::-;5615:6;5642:20;;:::i;:::-;5632:30;;5671:33;5699:4;5691:6;5671:33;:::i;:::-;5581:129;;;:::o;5716:340::-;5822:4;5912:18;5904:6;5901:30;5898:56;;;5934:18;;:::i;:::-;5898:56;5984:4;5976:6;5972:17;5964:25;;6044:4;6038;6034:15;6026:23;;5716:340;;;:::o;6062:117::-;6171:1;6168;6161:12;6185:117;6294:1;6291;6284:12;6480:578;6558:5;6602:4;6590:9;6585:3;6581:19;6577:30;6574:117;;;6610:79;;:::i;:::-;6574:117;6709:21;6725:4;6709:21;:::i;:::-;6700:30;;6789:1;6829:49;6874:3;6865:6;6854:9;6850:22;6829:49;:::i;:::-;6822:4;6815:5;6811:16;6804:75;6740:150;6949:2;6990:49;7035:3;7026:6;7015:9;7011:22;6990:49;:::i;:::-;6983:4;6976:5;6972:16;6965:75;6900:151;6480:578;;;;:::o;7115:797::-;7240:5;7265:110;7281:93;7367:6;7281:93;:::i;:::-;7265:110;:::i;:::-;7256:119;;7395:5;7424:6;7417:5;7410:21;7458:4;7451:5;7447:16;7440:23;;7511:4;7503:6;7499:17;7491:6;7487:30;7540:3;7532:6;7529:15;7526:122;;;7559:79;;:::i;:::-;7526:122;7674:6;7657:249;7691:6;7686:3;7683:15;7657:249;;;7766:3;7795:66;7857:3;7845:10;7795:66;:::i;:::-;7790:3;7783:79;7891:4;7886:3;7882:14;7875:21;;7733:173;7717:4;7712:3;7708:14;7701:21;;7657:249;;;7661:21;7246:666;;7115:797;;;;;:::o;7969:428::-;8069:5;8118:3;8111:4;8103:6;8099:17;8095:27;8085:122;;8126:79;;:::i;:::-;8085:122;8243:6;8230:20;8268:123;8387:3;8379:6;8372:4;8364:6;8360:17;8268:123;:::i;:::-;8259:132;;8075:322;7969:428;;;;:::o;8403:742::-;8525:6;8533;8582:2;8570:9;8561:7;8557:23;8553:32;8550:119;;;8588:79;;:::i;:::-;8550:119;8708:1;8733:53;8778:7;8769:6;8758:9;8754:22;8733:53;:::i;:::-;8723:63;;8679:117;8863:2;8852:9;8848:18;8835:32;8894:18;8886:6;8883:30;8880:117;;;8916:79;;:::i;:::-;8880:117;9021:107;9120:7;9111:6;9100:9;9096:22;9021:107;:::i;:::-;9011:117;;8806:332;8403:742;;;;;:::o;9151:122::-;9224:24;9242:5;9224:24;:::i;:::-;9217:5;9214:35;9204:63;;9263:1;9260;9253:12;9204:63;9151:122;:::o;9279:139::-;9325:5;9363:6;9350:20;9341:29;;9379:33;9406:5;9379:33;:::i;:::-;9279:139;;;;:::o;9424:474::-;9492:6;9500;9549:2;9537:9;9528:7;9524:23;9520:32;9517:119;;;9555:79;;:::i;:::-;9517:119;9675:1;9700:53;9745:7;9736:6;9725:9;9721:22;9700:53;:::i;:::-;9690:63;;9646:117;9802:2;9828:53;9873:7;9864:6;9853:9;9849:22;9828:53;:::i;:::-;9818:63;;9773:118;9424:474;;;;;:::o;9904:90::-;9938:7;9981:5;9974:13;9967:21;9956:32;;9904:90;;;:::o;10000:109::-;10081:21;10096:5;10081:21;:::i;:::-;10076:3;10069:34;10000:109;;:::o;10115:210::-;10202:4;10240:2;10229:9;10225:18;10217:26;;10253:65;10315:1;10304:9;10300:17;10291:6;10253:65;:::i;:::-;10115:210;;;;:::o;10331:329::-;10390:6;10439:2;10427:9;10418:7;10414:23;10410:32;10407:119;;;10445:79;;:::i;:::-;10407:119;10565:1;10590:53;10635:7;10626:6;10615:9;10611:22;10590:53;:::i;:::-;10580:63;;10536:117;10331:329;;;;:::o;10666:101::-;10702:7;10742:18;10735:5;10731:30;10720:41;;10666:101;;;:::o;10773:120::-;10845:23;10862:5;10845:23;:::i;:::-;10838:5;10835:34;10825:62;;10883:1;10880;10873:12;10825:62;10773:120;:::o;10899:137::-;10944:5;10982:6;10969:20;10960:29;;10998:32;11024:5;10998:32;:::i;:::-;10899:137;;;;:::o;11042:613::-;11116:6;11124;11132;11181:2;11169:9;11160:7;11156:23;11152:32;11149:119;;;11187:79;;:::i;:::-;11149:119;11307:1;11332:52;11376:7;11367:6;11356:9;11352:22;11332:52;:::i;:::-;11322:62;;11278:116;11433:2;11459:52;11503:7;11494:6;11483:9;11479:22;11459:52;:::i;:::-;11449:62;;11404:117;11560:2;11586:52;11630:7;11621:6;11610:9;11606:22;11586:52;:::i;:::-;11576:62;;11531:117;11042:613;;;;;:::o;11661:108::-;11738:24;11756:5;11738:24;:::i;:::-;11733:3;11726:37;11661:108;;:::o;11775:77::-;11812:7;11841:5;11830:16;;11775:77;;;:::o;11858:108::-;11935:24;11953:5;11935:24;:::i;:::-;11930:3;11923:37;11858:108;;:::o;11972:109::-;12008:7;12048:26;12041:5;12037:38;12026:49;;11972:109;;;:::o;12087:105::-;12162:23;12179:5;12162:23;:::i;:::-;12157:3;12150:36;12087:105;;:::o;12198:99::-;12269:21;12284:5;12269:21;:::i;:::-;12264:3;12257:34;12198:99;;:::o;12359:1763::-;12502:6;12497:3;12493:16;12593:4;12586:5;12582:16;12576:23;12612:63;12669:4;12664:3;12660:14;12646:12;12612:63;:::i;:::-;12519:166;12768:4;12761:5;12757:16;12751:23;12787:63;12844:4;12839:3;12835:14;12821:12;12787:63;:::i;:::-;12695:165;12956:4;12949:5;12945:16;12939:23;12975:63;13032:4;13027:3;13023:14;13009:12;12975:63;:::i;:::-;12870:178;13135:4;13128:5;13124:16;13118:23;13154:63;13211:4;13206:3;13202:14;13188:12;13154:63;:::i;:::-;13058:169;13309:4;13302:5;13298:16;13292:23;13328:61;13383:4;13378:3;13374:14;13360:12;13328:61;:::i;:::-;13237:162;13488:4;13481:5;13477:16;13471:23;13507:57;13558:4;13553:3;13549:14;13535:12;13507:57;:::i;:::-;13409:165;13665:4;13658:5;13654:16;13648:23;13684:63;13741:4;13736:3;13732:14;13718:12;13684:63;:::i;:::-;13584:173;13845:4;13838:5;13834:16;13828:23;13864:61;13919:4;13914:3;13910:14;13896:12;13864:61;:::i;:::-;13767:168;14019:6;14012:5;14008:18;14002:25;14040:65;14097:6;14092:3;14088:16;14074:12;14040:65;:::i;:::-;13945:170;12471:1651;12359:1763;;:::o;14128:315::-;14267:4;14305:3;14294:9;14290:19;14282:27;;14319:117;14433:1;14422:9;14418:17;14409:6;14319:117;:::i;:::-;14128:315;;;;:::o;14555:531::-;14722:4;14717:3;14713:14;14809:4;14802:5;14798:16;14792:23;14828:63;14885:4;14880:3;14876:14;14862:12;14828:63;:::i;:::-;14737:164;14987:4;14980:5;14976:16;14970:23;15006:63;15063:4;15058:3;15054:14;15040:12;15006:63;:::i;:::-;14911:168;14691:395;14555:531;;:::o;15092:362::-;15255:4;15293:2;15282:9;15278:18;15270:26;;15306:141;15444:1;15433:9;15429:17;15420:6;15306:141;:::i;:::-;15092:362;;;;:::o;15460:116::-;15530:21;15545:5;15530:21;:::i;:::-;15523:5;15520:32;15510:60;;15566:1;15563;15556:12;15510:60;15460:116;:::o;15582:133::-;15625:5;15663:6;15650:20;15641:29;;15679:30;15703:5;15679:30;:::i;:::-;15582:133;;;;:::o;15721:613::-;15795:6;15803;15811;15860:2;15848:9;15839:7;15835:23;15831:32;15828:119;;;15866:79;;:::i;:::-;15828:119;15986:1;16011:53;16056:7;16047:6;16036:9;16032:22;16011:53;:::i;:::-;16001:63;;15957:117;16113:2;16139:53;16184:7;16175:6;16164:9;16160:22;16139:53;:::i;:::-;16129:63;;16084:118;16241:2;16267:50;16309:7;16300:6;16289:9;16285:22;16267:50;:::i;:::-;16257:60;;16212:115;15721:613;;;;;:::o;16340:115::-;16425:23;16442:5;16425:23;:::i;:::-;16420:3;16413:36;16340:115;;:::o;16461:118::-;16548:24;16566:5;16548:24;:::i;:::-;16543:3;16536:37;16461:118;;:::o;16585:541::-;16756:4;16794:3;16783:9;16779:19;16771:27;;16808:69;16874:1;16863:9;16859:17;16850:6;16808:69;:::i;:::-;16887:70;16953:2;16942:9;16938:18;16929:6;16887:70;:::i;:::-;16967;17033:2;17022:9;17018:18;17009:6;16967:70;:::i;:::-;17047:72;17115:2;17104:9;17100:18;17091:6;17047:72;:::i;:::-;16585:541;;;;;;;:::o;17132:122::-;17205:24;17223:5;17205:24;:::i;:::-;17198:5;17195:35;17185:63;;17244:1;17241;17234:12;17185:63;17132:122;:::o;17260:139::-;17306:5;17344:6;17331:20;17322:29;;17360:33;17387:5;17360:33;:::i;:::-;17260:139;;;;:::o;17405:120::-;17477:23;17494:5;17477:23;:::i;:::-;17470:5;17467:34;17457:62;;17515:1;17512;17505:12;17457:62;17405:120;:::o;17531:137::-;17576:5;17614:6;17601:20;17592:29;;17630:32;17656:5;17630:32;:::i;:::-;17531:137;;;;:::o;17674:117::-;17783:1;17780;17773:12;17811:553;17869:8;17879:6;17929:3;17922:4;17914:6;17910:17;17906:27;17896:122;;17937:79;;:::i;:::-;17896:122;18050:6;18037:20;18027:30;;18080:18;18072:6;18069:30;18066:117;;;18102:79;;:::i;:::-;18066:117;18216:4;18208:6;18204:17;18192:29;;18270:3;18262:4;18254:6;18250:17;18240:8;18236:32;18233:41;18230:128;;;18277:79;;:::i;:::-;18230:128;17811:553;;;;;:::o;18370:1547::-;18503:6;18511;18519;18527;18535;18543;18551;18559;18567;18616:3;18604:9;18595:7;18591:23;18587:33;18584:120;;;18623:79;;:::i;:::-;18584:120;18743:1;18768:53;18813:7;18804:6;18793:9;18789:22;18768:53;:::i;:::-;18758:63;;18714:117;18870:2;18896:53;18941:7;18932:6;18921:9;18917:22;18896:53;:::i;:::-;18886:63;;18841:118;18998:2;19024:53;19069:7;19060:6;19049:9;19045:22;19024:53;:::i;:::-;19014:63;;18969:118;19126:2;19152:52;19196:7;19187:6;19176:9;19172:22;19152:52;:::i;:::-;19142:62;;19097:117;19253:3;19280:53;19325:7;19316:6;19305:9;19301:22;19280:53;:::i;:::-;19270:63;;19224:119;19382:3;19409:53;19454:7;19445:6;19434:9;19430:22;19409:53;:::i;:::-;19399:63;;19353:119;19511:3;19538:53;19583:7;19574:6;19563:9;19559:22;19538:53;:::i;:::-;19528:63;;19482:119;19668:3;19657:9;19653:19;19640:33;19700:18;19692:6;19689:30;19686:117;;;19722:79;;:::i;:::-;19686:117;19835:65;19892:7;19883:6;19872:9;19868:22;19835:65;:::i;:::-;19817:83;;;;19611:299;18370:1547;;;;;;;;;;;:::o;19923:118::-;20010:24;20028:5;20010:24;:::i;:::-;20005:3;19998:37;19923:118;;:::o;20047:222::-;20140:4;20178:2;20167:9;20163:18;20155:26;;20191:71;20259:1;20248:9;20244:17;20235:6;20191:71;:::i;:::-;20047:222;;;;:::o;20292:568::-;20365:8;20375:6;20425:3;20418:4;20410:6;20406:17;20402:27;20392:122;;20433:79;;:::i;:::-;20392:122;20546:6;20533:20;20523:30;;20576:18;20568:6;20565:30;20562:117;;;20598:79;;:::i;:::-;20562:117;20712:4;20704:6;20700:17;20688:29;;20766:3;20758:4;20750:6;20746:17;20736:8;20732:32;20729:41;20726:128;;;20773:79;;:::i;:::-;20726:128;20292:568;;;;;:::o;20866:1139::-;20987:6;20995;21003;21011;21019;21027;21076:3;21064:9;21055:7;21051:23;21047:33;21044:120;;;21083:79;;:::i;:::-;21044:120;21203:1;21228:53;21273:7;21264:6;21253:9;21249:22;21228:53;:::i;:::-;21218:63;;21174:117;21330:2;21356:53;21401:7;21392:6;21381:9;21377:22;21356:53;:::i;:::-;21346:63;;21301:118;21486:2;21475:9;21471:18;21458:32;21517:18;21509:6;21506:30;21503:117;;;21539:79;;:::i;:::-;21503:117;21652:80;21724:7;21715:6;21704:9;21700:22;21652:80;:::i;:::-;21634:98;;;;21429:313;21781:2;21807:53;21852:7;21843:6;21832:9;21828:22;21807:53;:::i;:::-;21797:63;;21752:118;21909:3;21936:52;21980:7;21971:6;21960:9;21956:22;21936:52;:::i;:::-;21926:62;;21880:118;20866:1139;;;;;;;;:::o;22011:180::-;22059:77;22056:1;22049:88;22156:4;22153:1;22146:15;22180:4;22177:1;22170:15;22197:332;22318:4;22356:2;22345:9;22341:18;22333:26;;22369:71;22437:1;22426:9;22422:17;22413:6;22369:71;:::i;:::-;22450:72;22518:2;22507:9;22503:18;22494:6;22450:72;:::i;:::-;22197:332;;;;;:::o;22535:137::-;22589:5;22620:6;22614:13;22605:22;;22636:30;22660:5;22636:30;:::i;:::-;22535:137;;;;:::o;22678:345::-;22745:6;22794:2;22782:9;22773:7;22769:23;22765:32;22762:119;;;22800:79;;:::i;:::-;22762:119;22920:1;22945:61;22998:7;22989:6;22978:9;22974:22;22945:61;:::i;:::-;22935:71;;22891:125;22678:345;;;;:::o;23029:430::-;23172:4;23210:2;23199:9;23195:18;23187:26;;23223:69;23289:1;23278:9;23274:17;23265:6;23223:69;:::i;:::-;23302:70;23368:2;23357:9;23353:18;23344:6;23302:70;:::i;:::-;23382;23448:2;23437:9;23433:18;23424:6;23382:70;:::i;:::-;23029:430;;;;;;:::o;23465:::-;23608:4;23646:2;23635:9;23631:18;23623:26;;23659:71;23727:1;23716:9;23712:17;23703:6;23659:71;:::i;:::-;23740:72;23808:2;23797:9;23793:18;23784:6;23740:72;:::i;:::-;23822:66;23884:2;23873:9;23869:18;23860:6;23822:66;:::i;:::-;23465:430;;;;;;:::o;23901:169::-;23985:11;24019:6;24014:3;24007:19;24059:4;24054:3;24050:14;24035:29;;23901:169;;;;:::o;24076:233::-;24216:34;24212:1;24204:6;24200:14;24193:58;24285:16;24280:2;24272:6;24268:15;24261:41;24076:233;:::o;24315:366::-;24457:3;24478:67;24542:2;24537:3;24478:67;:::i;:::-;24471:74;;24554:93;24643:3;24554:93;:::i;:::-;24672:2;24667:3;24663:12;24656:19;;24315:366;;;:::o;24687:419::-;24853:4;24891:2;24880:9;24876:18;24868:26;;24940:9;24934:4;24930:20;24926:1;24915:9;24911:17;24904:47;24968:131;25094:4;24968:131;:::i;:::-;24960:139;;24687:419;;;:::o;25112:85::-;25157:7;25186:5;25175:16;;25112:85;;;:::o;25203:86::-;25238:7;25278:4;25271:5;25267:16;25256:27;;25203:86;;;:::o;25295:60::-;25323:3;25344:5;25337:12;;25295:60;;;:::o;25361:154::-;25417:9;25450:59;25466:42;25475:32;25501:5;25475:32;:::i;:::-;25466:42;:::i;:::-;25450:59;:::i;:::-;25437:72;;25361:154;;;:::o;25521:143::-;25614:43;25651:5;25614:43;:::i;:::-;25609:3;25602:56;25521:143;;:::o;25670:234::-;25769:4;25807:2;25796:9;25792:18;25784:26;;25820:77;25894:1;25883:9;25879:17;25870:6;25820:77;:::i;:::-;25670:234;;;;:::o;25910:442::-;26059:4;26097:2;26086:9;26082:18;26074:26;;26110:71;26178:1;26167:9;26163:17;26154:6;26110:71;:::i;:::-;26191:72;26259:2;26248:9;26244:18;26235:6;26191:72;:::i;:::-;26273;26341:2;26330:9;26326:18;26317:6;26273:72;:::i;:::-;25910:442;;;;;;:::o;26358:180::-;26406:77;26403:1;26396:88;26503:4;26500:1;26493:15;26527:4;26524:1;26517:15;26544:233;26583:3;26606:24;26624:5;26606:24;:::i;:::-;26597:33;;26652:66;26645:5;26642:77;26639:103;;26722:18;;:::i;:::-;26639:103;26769:1;26762:5;26758:13;26751:20;;26544:233;;;:::o;26783:146::-;26880:6;26875:3;26870;26857:30;26921:1;26912:6;26907:3;26903:16;26896:27;26783:146;;;:::o;26959:317::-;27057:3;27078:71;27142:6;27137:3;27078:71;:::i;:::-;27071:78;;27159:56;27208:6;27203:3;27196:5;27159:56;:::i;:::-;27240:29;27262:6;27240:29;:::i;:::-;27235:3;27231:39;27224:46;;26959:317;;;;;:::o;27282:443::-;27433:4;27471:2;27460:9;27456:18;27448:26;;27484:71;27552:1;27541:9;27537:17;27528:6;27484:71;:::i;:::-;27602:9;27596:4;27592:20;27587:2;27576:9;27572:18;27565:48;27630:88;27713:4;27704:6;27696;27630:88;:::i;:::-;27622:96;;27282:443;;;;;;:::o;27731:216::-;27770:4;27790:19;27807:1;27790:19;:::i;:::-;27785:24;;27823:19;27840:1;27823:19;:::i;:::-;27818:24;;27866:1;27863;27859:9;27851:17;;27890:26;27884:4;27881:36;27878:62;;;27920:18;;:::i;:::-;27878:62;27731:216;;;;:::o;27953:191::-;27993:3;28012:20;28030:1;28012:20;:::i;:::-;28007:25;;28046:20;28064:1;28046:20;:::i;:::-;28041:25;;28089:1;28086;28082:9;28075:16;;28110:3;28107:1;28104:10;28101:36;;;28117:18;;:::i;:::-;28101:36;27953:191;;;;:::o;28150:184::-;28249:11;28283:6;28278:3;28271:19;28323:4;28318:3;28314:14;28299:29;;28150:184;;;;:::o;28340:102::-;28409:4;28432:3;28424:11;;28340:102;;;:::o;28448:179::-;28517:10;28538:46;28580:3;28572:6;28538:46;:::i;:::-;28616:4;28611:3;28607:14;28593:28;;28448:179;;;;:::o;28633:122::-;28685:5;28710:39;28745:2;28740:3;28736:12;28731:3;28710:39;:::i;:::-;28701:48;;28633:122;;;;:::o;28761:115::-;28833:4;28865;28860:3;28856:14;28848:22;;28761:115;;;:::o;28912:699::-;29041:3;29064:86;29143:6;29138:3;29064:86;:::i;:::-;29057:93;;29174:58;29226:5;29174:58;:::i;:::-;29255:7;29286:1;29271:315;29296:6;29293:1;29290:13;29271:315;;;29366:42;29401:6;29392:7;29366:42;:::i;:::-;29428:63;29487:3;29472:13;29428:63;:::i;:::-;29421:70;;29514:62;29569:6;29514:62;:::i;:::-;29504:72;;29331:255;29318:1;29315;29311:9;29306:14;;29271:315;;;29275:14;29602:3;29595:10;;29046:565;;28912:699;;;;;:::o;29617:946::-;29910:4;29948:3;29937:9;29933:19;29925:27;;29962:71;30030:1;30019:9;30015:17;30006:6;29962:71;:::i;:::-;30043:72;30111:2;30100:9;30096:18;30087:6;30043:72;:::i;:::-;30125;30193:2;30182:9;30178:18;30169:6;30125:72;:::i;:::-;30244:9;30238:4;30234:20;30229:2;30218:9;30214:18;30207:48;30272:118;30385:4;30376:6;30368;30272:118;:::i;:::-;30264:126;;30400:73;30468:3;30457:9;30453:19;30444:6;30400:73;:::i;:::-;30483;30551:3;30540:9;30536:19;30527:6;30483:73;:::i;:::-;29617:946;;;;;;;;;;:::o;30569:115::-;30654:23;30671:5;30654:23;:::i;:::-;30649:3;30642:36;30569:115;;:::o;30690:218::-;30781:4;30819:2;30808:9;30804:18;30796:26;;30832:69;30898:1;30887:9;30883:17;30874:6;30832:69;:::i;:::-;30690:218;;;;:::o;30914:225::-;31054:34;31050:1;31042:6;31038:14;31031:58;31123:8;31118:2;31110:6;31106:15;31099:33;30914:225;:::o;31145:366::-;31287:3;31308:67;31372:2;31367:3;31308:67;:::i;:::-;31301:74;;31384:93;31473:3;31384:93;:::i;:::-;31502:2;31497:3;31493:12;31486:19;;31145:366;;;:::o;31517:419::-;31683:4;31721:2;31710:9;31706:18;31698:26;;31770:9;31764:4;31760:20;31756:1;31745:9;31741:17;31734:47;31798:131;31924:4;31798:131;:::i;:::-;31790:139;;31517:419;;;:::o;31942:182::-;32082:34;32078:1;32070:6;32066:14;32059:58;31942:182;:::o;32130:366::-;32272:3;32293:67;32357:2;32352:3;32293:67;:::i;:::-;32286:74;;32369:93;32458:3;32369:93;:::i;:::-;32487:2;32482:3;32478:12;32471:19;;32130:366;;;:::o;32502:419::-;32668:4;32706:2;32695:9;32691:18;32683:26;;32755:9;32749:4;32745:20;32741:1;32730:9;32726:17;32719:47;32783:131;32909:4;32783:131;:::i;:::-;32775:139;;32502:419;;;:::o;32927:230::-;33067:34;33063:1;33055:6;33051:14;33044:58;33136:13;33131:2;33123:6;33119:15;33112:38;32927:230;:::o;33163:366::-;33305:3;33326:67;33390:2;33385:3;33326:67;:::i;:::-;33319:74;;33402:93;33491:3;33402:93;:::i;:::-;33520:2;33515:3;33511:12;33504:19;;33163:366;;;:::o;33535:419::-;33701:4;33739:2;33728:9;33724:18;33716:26;;33788:9;33782:4;33778:20;33774:1;33763:9;33759:17;33752:47;33816:131;33942:4;33816:131;:::i;:::-;33808:139;;33535:419;;;:::o;33960:194::-;34000:4;34020:20;34038:1;34020:20;:::i;:::-;34015:25;;34054:20;34072:1;34054:20;:::i;:::-;34049:25;;34098:1;34095;34091:9;34083:17;;34122:1;34116:4;34113:11;34110:37;;;34127:18;;:::i;:::-;34110:37;33960:194;;;;:::o;34160:410::-;34200:7;34223:20;34241:1;34223:20;:::i;:::-;34218:25;;34257:20;34275:1;34257:20;:::i;:::-;34252:25;;34312:1;34309;34305:9;34334:30;34352:11;34334:30;:::i;:::-;34323:41;;34513:1;34504:7;34500:15;34497:1;34494:22;34474:1;34467:9;34447:83;34424:139;;34543:18;;:::i;:::-;34424:139;34208:362;34160:410;;;;:::o;34576:180::-;34624:77;34621:1;34614:88;34721:4;34718:1;34711:15;34745:4;34742:1;34735:15;34762:185;34802:1;34819:20;34837:1;34819:20;:::i;:::-;34814:25;;34853:20;34871:1;34853:20;:::i;:::-;34848:25;;34892:1;34882:35;;34897:18;;:::i;:::-;34882:35;34939:1;34936;34932:9;34927:14;;34762:185;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2790400","executionCost":"infinite","totalCost":"infinite"},"external":{"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)":"infinite","getFeeDetails()":"infinite","getLiquidityAggregator()":"2568","getOrderInfo(bytes32)":"infinite","getSupportedInstitutionName(bytes32)":"infinite","getSupportedInstitutions(bytes32)":"infinite","getWhitelistedStatus(address)":"2949","initialize(address)":"140817","isTokenSupported(address)":"2950","owner()":"2567","refund(bytes32)":"infinite","renounceOwnership()":"30421","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"infinite","settingManagerBool(bytes32,address,bool)":"infinite","settle(bytes32,address,address[],address,uint96)":"infinite","transferOwnership(address)":"30854","updateFeeRecipient(bytes32,address)":"51621","updateProtocolFees(uint64,uint64,uint64)":"infinite"},"internal":{"_calculateFees(bytes32,uint96)":"infinite","_handler(address,uint256,address,address,bytes32)":"infinite","transferSenderFee(bytes32)":"infinite"}},"methodIdentifiers":{"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)":"d12ff20a","getFeeDetails()":"b810c636","getLiquidityAggregator()":"2ebc5356","getOrderInfo(bytes32)":"768c6ec0","getSupportedInstitutionName(bytes32)":"87490d86","getSupportedInstitutions(bytes32)":"02621338","getWhitelistedStatus(address)":"d8e8de34","initialize(address)":"c4d66de8","isTokenSupported(address)":"75151b63","owner()":"8da5cb5b","refund(bytes32)":"7249fbb6","renounceOwnership()":"715018a6","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"32200882","settingManagerBool(bytes32,address,bool)":"99e3c0b4","settle(bytes32,address,address[],address,uint96)":"e5b32cdf","transferOwnership(address)":"f2fde38b","updateFeeRecipient(bytes32,address)":"3d8f8fb2","updateProtocolFees(uint64,uint64,uint64)":"764bc355"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInstitutionCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"}],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAggregator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderFulfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableToProcessRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unsuported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"primaryValidator\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"secondaryValidator\",\"type\":\"uint64\"}],\"name\":\"PaycrestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"value\",\"type\":\"bytes8\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"status\",\"type\":\"bytes8\"}],\"name\":\"SettingManagerForInstitution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionName\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_primaryValidator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_secondaryValidators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_settlePercent\",\"type\":\"uint96\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_primaryValidatorPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondaryValidatorPercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deposit(bytes32,uint256,uint256,bytes32,string)\":{\"details\":\"Emitted when deposit is made.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Refunded(bytes32)\":{\"details\":\"Emitted when aggregator refund transaction.\"},\"Settled(bytes32,address,uint96)\":{\"details\":\"Emitted when aggregator settle transaction.\"},\"TransferSenderFee(address,uint256)\":{\"details\":\"Emitted when sender get therir rewards.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"See {createOrder-IPaycrest}. \"},\"getFeeDetails()\":{\"details\":\"See {getFeeDetails-IPaycrest}. \"},\"getLiquidityAggregator()\":{\"details\":\"See {getLiquidityAggregator-IPaycrest}. \"},\"getOrderInfo(bytes32)\":{\"details\":\"See {getOrderInfo-IPaycrest}. \"},\"getSupportedInstitutionName(bytes32)\":{\"details\":\"See {getSupportedInstitutionName-IPaycrest}. \"},\"getWhitelistedStatus(address)\":{\"details\":\"See {getWhitelistedStatus-IPaycrest}. \"},\"isTokenSupported(address)\":{\"details\":\"See {isTokenSupported-IPaycrest}. \"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"refund(bytes32)\":{\"details\":\"See {refund-IPaycrest}. \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"settle(bytes32,address,address[],address,uint96)\":{\"details\":\"See {settle-IPaycrest}. \"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AmountIsZero()\":[{\"notice\":\"Revert when input amount is zero\"}],\"InvalidParameter(bytes32)\":[{\"notice\":\"Revert when zero address is passed in\"}],\"InvalidSigner()\":[{\"notice\":\"Revert with invalid signer\"}],\"OnlyAggregator()\":[{\"notice\":\"Revert when caller is not an aggregator\"}],\"OrderFulfilled()\":[{\"notice\":\"Revert when trx has been fulfilled\"}],\"ThrowZeroAddress()\":[{\"notice\":\"Revert when zero address is passed in\"}],\"ThrowZeroValue()\":[{\"notice\":\"Revert when zero address is passed in\"}],\"TokenNotSupported()\":[{\"notice\":\"Revert when invalid token is provided\"}],\"UnableToProcessRewards()\":[{\"notice\":\"Revert when rewards are not been distributed.\"}],\"Unsuported()\":[{\"notice\":\"Revert when input amount is zero\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Paycrest.sol\":\"Paycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Paycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {PaycrestSettingManager} from \\\"./PaycrestSettingManager.sol\\\";\\nimport {IPaycrestStake} from \\\"./interface/IPaycrestStake.sol\\\";\\nimport {IPaycrest, IERC20} from \\\"./interface/IPaycrest.sol\\\";\\ncontract Paycrest is IPaycrest, PaycrestSettingManager { \\n    using SafeERC20Upgradeable for IERC20;\\n    using ECDSAUpgradeable for bytes32;\\n    struct fee {\\n        uint256 protocolFee;\\n        uint256 liquidityProviderAmount;\\n        uint256 primaryValidatorReward;\\n        uint256 secondaryValidatorsReward;\\n    }\\n    mapping(bytes32 => Order) private order;\\n    mapping(address => uint256) private _nonce;\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _usdc) external initializer {    \\n        _isTokenSupported[_usdc] = true;    \\n        __Ownable_init();\\n    }\\n    // constructor(address _usdc) {\\n    //     _isTokenSupported[_usdc] = true;\\n    // }\\n\\n    modifier onlyAggregator {\\n        if(msg.sender != _liquidityAggregator) revert OnlyAggregator();\\n        _;\\n    }\\n    \\n    /* ##################################################################\\n                                USER CALLS\\n    ################################################################## */\\n    /** @dev See {createOrder-IPaycrest}. */\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash\\n    )  external returns(bytes32 orderId) {\\n        // sender must be a whitelisted address\\n        // if(!_isWhitelisted[msg.sender]) revert NotWhitelisted();\\n        // checks that are required\\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _institutionCode);\\n        // first transfer token from msg.sender\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n        // increase users nonce to avoid replay attacks\\n        _nonce[msg.sender] ++;\\n        // generate transaction id for the transaction\\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\\n        // update transaction\\n        order[orderId] = Order({\\n            seller: msg.sender,\\n            token: _token,\\n            senderFeeRecipient: _senderFeeRecipient,\\n            senderFee: _senderFee,\\n            rate: _rate,\\n            isFulfilled: false,\\n            refundAddress: _refundAddress,\\n            currentBPS: uint96(MAX_BPS),\\n            amount: _amount\\n        });\\n        // emit deposit event\\n        emit Deposit(orderId, _amount, _rate, _institutionCode, messageHash);\\n    }\\n\\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, bytes32 _institutionCode) internal view {\\n        if(!_isTokenSupported[_token]) revert TokenNotSupported();\\n        if(_amount == 0) revert AmountIsZero();\\n        if(_refundAddress == address(0)) revert ThrowZeroAddress();\\n        if(_senderFeeRecipient == address(0)) revert ThrowZeroAddress();\\n        if(supportedInstitutionsByCode[_institutionCode].name == bytes32(0)) revert InvalidInstitutionCode();\\n    }\\n\\n    /* ##################################################################\\n                                AGGREGATOR FUNCTIONS\\n    ################################################################## */\\n    /** @dev See {settle-IPaycrest}. */\\n    function settle(\\n        bytes32 _orderId, \\n        address _primaryValidator, \\n        address[] calldata _secondaryValidators, \\n        address _liquidityProvider, \\n        uint96 _settlePercent\\n        )  external onlyAggregator() returns(bool) {\\n        // ensure the transaction has not been fulfilled\\n        if(order[_orderId].isFulfilled) revert OrderFulfilled();\\n        // load the token into memory\\n        address token = order[_orderId].token;\\n        // substract sum of amount based on the input _settlePercent\\n        order[_orderId].currentBPS -= _settlePercent;\\n        // if transaction amount is zero\\n        if(order[_orderId].currentBPS == 0) {\\n            // update the transaction to be fulfilled\\n            order[_orderId].isFulfilled = true;\\n        }\\n\\n        // load the fees and transfer associated protocol fees to protocol fee recipient\\n        ( fee memory _feeParams  ) = _calculateFees(_orderId, _settlePercent);\\n        uint256 _fee = order[_orderId].senderFee;\\n        if (_fee > 0) {\\n            // transfer sender fee\\n            transferSenderFee(_orderId);\\n        }\\n        // transfer protocol fee\\n        IERC20(token).transfer(feeRecipient, _feeParams.protocolFee);\\n        // // transfer to liquidity provider \\n        IERC20(token).transfer(_liquidityProvider, _feeParams.liquidityProviderAmount);\\n        IERC20(token).transfer(address(PaycrestStakingContract), (_feeParams.primaryValidatorReward + _feeParams.secondaryValidatorsReward));\\n        // // distribute rewards\\n        bool status = IPaycrestStake(PaycrestStakingContract).rewardValidators(\\n            _orderId,\\n            token,\\n            _primaryValidator, \\n            _secondaryValidators, \\n            _feeParams.primaryValidatorReward, \\n            _feeParams.secondaryValidatorsReward\\n        );\\n        if(!status) revert UnableToProcessRewards();\\n        // emit event\\n        emit Settled(_orderId, _liquidityProvider, _settlePercent);\\n        return true;\\n    }\\n\\n    function transferSenderFee(bytes32 _orderId) internal {\\n        address recipient = order[_orderId].senderFeeRecipient;\\n        uint256 _fee = order[_orderId].senderFee;\\n        // transfer sender fee\\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\\n        // emmit event\\n        emit TransferSenderFee(recipient, _fee);\\n    }\\n\\n    /** @dev See {refund-IPaycrest}. */\\n    function refund(bytes32 _orderId)  external onlyAggregator() returns(bool) {\\n        // ensure the transaction has not been fulfilled\\n        if(order[_orderId].isFulfilled) revert OrderFulfilled();\\n        // reser state values\\n        order[_orderId].isFulfilled = true;\\n        order[_orderId].currentBPS = 0;\\n        // transfer to seller \\n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, order[_orderId].amount);\\n        // emit\\n        emit Refunded(_orderId);\\n        return true;\\n    }\\n\\n    function _calculateFees(bytes32 _orderId, uint96 _settlePercent) private view returns(fee memory _feeParams ) {\\n        // get the total amount associated with the orderId\\n        uint256 amount = order[_orderId].amount;\\n        // get sender fee from amount\\n        amount = amount - order[_orderId].senderFee;\\n        // get the settled percent that is scheduled for this amount\\n        _feeParams.liquidityProviderAmount = (amount * _settlePercent) / MAX_BPS;\\n        // deduct protocol fees from the new total amount\\n        _feeParams.protocolFee = (_feeParams.liquidityProviderAmount * protocolFeePercent) / MAX_BPS; \\n        // substract total fees from the new amount after getting the scheduled amount\\n        _feeParams.liquidityProviderAmount = (_feeParams.liquidityProviderAmount - _feeParams.protocolFee);\\n        // get primary validators fees primaryValidatorsReward\\n        _feeParams.primaryValidatorReward = (_feeParams.protocolFee * primaryValidatorFeePercent) / MAX_BPS;\\n        // get primary validators fees secondaryValidatorsReward\\n        _feeParams.secondaryValidatorsReward = (_feeParams.protocolFee * secondaryValidatorFeePercent) / MAX_BPS;\\n        // update new protocol fee\\n        _feeParams.protocolFee = _feeParams.protocolFee - (_feeParams.primaryValidatorReward + _feeParams.secondaryValidatorsReward);\\n    }\\n    \\n    /* ##################################################################\\n                                VIEW CALLS\\n    ################################################################## */\\n    /** @dev See {getOrderInfo-IPaycrest}. */\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\\n        return order[_orderId];\\n    }\\n\\n    /** @dev See {isTokenSupported-IPaycrest}. */\\n    function isTokenSupported(address _token) external view returns(bool) {\\n        return _isTokenSupported[_token];\\n    }\\n\\n    /** @dev See {getSupportedInstitutionName-IPaycrest}. */\\n    function getSupportedInstitutionName(bytes32 code) external view returns (InstitutionByCode memory) {\\n        return supportedInstitutionsByCode[code];\\n    }\\n\\n    function getSupportedInstitutions(bytes32 currency) external view returns (Institution[] memory) {\\n        Institution[] memory institutions = supportedInstitutions[currency];\\n        uint256 length = institutions.length;\\n        Institution[] memory result = new Institution[](length);\\n        \\n        for (uint256 i = 0; i < length; ) {\\n            result[i] = institutions[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n\\n    /** @dev See {getFeeDetails-IPaycrest}. */\\n    function getFeeDetails() external view returns(\\n        uint64, \\n        uint64, \\n        uint64,\\n        uint256\\n    ) {\\n        return(protocolFeePercent, primaryValidatorFeePercent, secondaryValidatorFeePercent, MAX_BPS);\\n    }\\n\\n    /** @dev See {getLiquidityAggregator-IPaycrest}. */\\n    function getLiquidityAggregator() external view returns(address) {\\n        return _liquidityAggregator;\\n    }\\n\\n    /** @dev See {getWhitelistedStatus-IPaycrest}. */\\n    function getWhitelistedStatus(address sender) external view returns(bool) {\\n        return _isWhitelisted[sender];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x3ef0716a97fe662c5392f1c9b3a1d485d0b77f0df33190ab85733fbedf467506\",\"license\":\"UNLICENSED\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    struct Institution {\\n        bytes32 code; // usually not more than 8 letters\\n        bytes32 name; // \\n    }\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n    uint256 internal MAX_BPS = 100_000;\\n    uint64 internal protocolFeePercent = 5000; // 5%\\n    uint64 internal primaryValidatorFeePercent = 500; // 0.5%\\n    uint64 internal secondaryValidatorFeePercent = 500; // 0.5%\\n    address internal feeRecipient;\\n    address internal PaycrestStakingContract;\\n    address internal _liquidityAggregator;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n    mapping(address => bool) internal _isWhitelisted;\\n\\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    /// @notice Revert when zero address is passed in\\n    error ThrowZeroAddress();\\n    /// @notice Revert when zero address is passed in\\n    error ThrowZeroValue();\\n    /// @notice Revert when zero address is passed in\\n    error InvalidParameter(bytes32 what);\\n    /// @notice Revert when invalid token is provided\\n    error TokenNotSupported();\\n    /// @notice Revert when input amount is zero\\n    error AmountIsZero();\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status);\\n    event PaycrestFees(uint64 protocolFee, uint64 primaryValidator, uint64 secondaryValidator);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        if (value == address(0)) revert ThrowZeroAddress();\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n        if (what == \\\"whitelist\\\") _isWhitelisted[value] = status;\\n        else revert InvalidParameter(what);\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function updateProtocolFees(uint64 _protocolFeePercent, uint64 _primaryValidatorPercent, uint64 _secondaryValidatorPercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        primaryValidatorFeePercent = _primaryValidatorPercent;\\n        secondaryValidatorFeePercent = _secondaryValidatorPercent;\\n        emit PaycrestFees(_protocolFeePercent, _primaryValidatorPercent, _secondaryValidatorPercent);\\n    }\\n\\n    function updateFeeRecipient(bytes32 what, address value) external onlyOwner {\\n        if (value == address(0)) revert ThrowZeroAddress();\\n        if (what == \\\"fee\\\") feeRecipient = value;\\n        if (what == \\\"aggregator\\\") _liquidityAggregator = value;\\n        else if (what == \\\"stake\\\") PaycrestStakingContract = value;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x994730755637e5a55163a87738b7197715d471e7edcd2776cda604bbf83b2ab8\",\"license\":\"UNLICENSED\"},\"contracts/interface/IPaycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/**\\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /// @dev Emitted when deposit is made.\\n    event Deposit(bytes32 indexed orderId, uint256 indexed amount, uint256 indexed rate, bytes32 institutionCode, string messageHash);\\n    /// @dev Emitted when aggregator settle transaction.\\n    event Settled(bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent);\\n    /// @dev Emitted when aggregator refund transaction.\\n    event Refunded(bytes32 indexed orderId);\\n    /// @dev Emitted when sender get therir rewards.\\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\\n\\n    /* ##################################################################\\n                                CUSTOM ERRORS\\n    ################################################################## */\\n    /// @notice Revert when caller is not an aggregator\\n    error OnlyAggregator();\\n    /// @notice Revert with invalid signer\\n    error InvalidSigner();\\n    /// @notice Revert when input amount is zero\\n    error Unsuported();\\n    /// @notice Revert when trx has been fulfilled\\n    error OrderFulfilled();\\n    /// @notice Revert when rewards are not been distributed.\\n    error UnableToProcessRewards();\\n    error InvalidInstitutionCode();\\n    error NotWhitelisted();\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    struct TransactionMetadata {\\n        bytes8 identifier;                 //                                                                   slot 0\\n        bytes8 institution;                //                                                                   slot 0\\n        bytes8 name;                       //                                                                   slot 0\\n        bytes8 currency;                   //                                                                   slot 0\\n        uint256 liquidityProviderID;       //                                                                   slot 1\\n    }\\n\\n    struct Order {\\n        address seller;                     //                                                                   slot 0\\n        address token;                      //                                                                   slot 1\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint96 rate;                        //                                                                   slot 1\\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\\n        uint96 currentBPS;                  //                                                                   slot 2 {}\\n        uint256 amount;                     //                                                                   slot 3\\n    }\\n\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /// @notice lock sender `_amount` of `token` into Paycrest.\\n    /// Requirements:\\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _token address of the token.\\n    /// @param _amount amount in the decimal of `_token` above.\\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\\n    /// @return _orderId the bytes20 which is the orderId\\n    function createOrder(address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash)  external returns(bytes32 _orderId);\\n\\n    /// @notice settle transaction and distribute rewards accordingly.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _orderId transaction Id.\\n    /// @param _primaryValidator address primary validator.\\n    /// @param _secondaryValidators arrays of secondary validators.\\n    /// @param _liquidityProvider address of the liquidity provider.\\n    /// @param _settlePercent rate at which the transaction is settled.\\n    /// @return return the status of transaction {bool}\\n    function settle(bytes32 _orderId, address _primaryValidator, address[] calldata _secondaryValidators, address _liquidityProvider, uint96 _settlePercent)  external returns(bool);\\n\\n    /// @notice refund to the specified refundable address.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `isFulfilled` must be false.\\n    /// @param _orderId transaction Id.\\n    /// @return return the status of transaction {bool}\\n    function refund(bytes32 _orderId)  external returns(bool);\\n\\n    /// @notice get supported token from Paycrest.\\n    /// @param _token address of the token to check.\\n    /// @return return the status of `_token` {bool}\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /// @notice get order details.\\n    /// @param _orderId transaction Id.\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /// @notice get every rewards and address on Paycrest.\\n    /// @return protocolReward amount that will be taken in percentage on all trade.\\n    /// @return primaryValidatorReward amount that will be given to primary validator in percentage from `protocolReward`\\n    /// @return secondaryValidatorReward amount that will be shared between secondary validator in percentage from `protocolReward`\\n    /// @return max_bps maximum amount in bps \\\"100% == 100_000\\\".\\n    function getFeeDetails() external view returns(\\n        uint64 protocolReward, \\n        uint64 primaryValidatorReward, \\n        uint64 secondaryValidatorReward,\\n        uint256 max_bps\\n    );\\n\\n    /// @notice get address of liquidity aggregator.\\n    /// @return address of `liquidityAggregator`.\\n    function getLiquidityAggregator() external view returns(address);\\n\\n    \\n    /// @notice get address of sender whitelisting status.\\n    /// @param sender address of the sender.\\n    /// @return address of `status`.\\n    function getWhitelistedStatus(address sender) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x6ff831e0fbc139276a793dcf7bfa3c6dc664a661dfacd555a7b22fa4b58fc7e0\",\"license\":\"UNLICENSED\"},\"contracts/interface/IPaycrestStake.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\n/**\\n * @author Chef Photons, Vaultka Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrestStake {\\n    \\n    function rewardValidators(bytes32 orderId, address token, address primaryValidator, address[] memory secondaryValidators, uint256 primaryValidatorsReward, uint256 secondaryValidatorsReward) external returns(bool);\\n    \\n}\\n\",\"keccak256\":\"0x7f2fb3af09d1a6236c7ada47fcac021358876c675dc4b27e3f99a2c17542db0e\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/Paycrest.sol:Paycrest","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"contracts/Paycrest.sol:Paycrest","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1245,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/Paycrest.sol:Paycrest","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":4251,"contract":"contracts/Paycrest.sol:Paycrest","label":"MAX_BPS","offset":0,"slot":"101","type":"t_uint256"},{"astId":4254,"contract":"contracts/Paycrest.sol:Paycrest","label":"protocolFeePercent","offset":0,"slot":"102","type":"t_uint64"},{"astId":4257,"contract":"contracts/Paycrest.sol:Paycrest","label":"primaryValidatorFeePercent","offset":8,"slot":"102","type":"t_uint64"},{"astId":4260,"contract":"contracts/Paycrest.sol:Paycrest","label":"secondaryValidatorFeePercent","offset":16,"slot":"102","type":"t_uint64"},{"astId":4262,"contract":"contracts/Paycrest.sol:Paycrest","label":"feeRecipient","offset":0,"slot":"103","type":"t_address"},{"astId":4264,"contract":"contracts/Paycrest.sol:Paycrest","label":"PaycrestStakingContract","offset":0,"slot":"104","type":"t_address"},{"astId":4266,"contract":"contracts/Paycrest.sol:Paycrest","label":"_liquidityAggregator","offset":0,"slot":"105","type":"t_address"},{"astId":4270,"contract":"contracts/Paycrest.sol:Paycrest","label":"_isTokenSupported","offset":0,"slot":"106","type":"t_mapping(t_address,t_bool)"},{"astId":4274,"contract":"contracts/Paycrest.sol:Paycrest","label":"_isWhitelisted","offset":0,"slot":"107","type":"t_mapping(t_address,t_bool)"},{"astId":4280,"contract":"contracts/Paycrest.sol:Paycrest","label":"supportedInstitutions","offset":0,"slot":"108","type":"t_mapping(t_bytes32,t_array(t_struct(Institution)4243_storage)dyn_storage)"},{"astId":4285,"contract":"contracts/Paycrest.sol:Paycrest","label":"supportedInstitutionsByCode","offset":0,"slot":"109","type":"t_mapping(t_bytes32,t_struct(InstitutionByCode)4248_storage)"},{"astId":3560,"contract":"contracts/Paycrest.sol:Paycrest","label":"order","offset":0,"slot":"110","type":"t_mapping(t_bytes32,t_struct(Order)5007_storage)"},{"astId":3564,"contract":"contracts/Paycrest.sol:Paycrest","label":"_nonce","offset":0,"slot":"111","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Institution)4243_storage)dyn_storage":{"base":"t_struct(Institution)4243_storage","encoding":"dynamic_array","label":"struct PaycrestSettingManager.Institution[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_array(t_struct(Institution)4243_storage)dyn_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])","numberOfBytes":"32","value":"t_array(t_struct(Institution)4243_storage)dyn_storage"},"t_mapping(t_bytes32,t_struct(InstitutionByCode)4248_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)","numberOfBytes":"32","value":"t_struct(InstitutionByCode)4248_storage"},"t_mapping(t_bytes32,t_struct(Order)5007_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IPaycrest.Order)","numberOfBytes":"32","value":"t_struct(Order)5007_storage"},"t_struct(Institution)4243_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.Institution","members":[{"astId":4240,"contract":"contracts/Paycrest.sol:Paycrest","label":"code","offset":0,"slot":"0","type":"t_bytes32"},{"astId":4242,"contract":"contracts/Paycrest.sol:Paycrest","label":"name","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(InstitutionByCode)4248_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.InstitutionByCode","members":[{"astId":4245,"contract":"contracts/Paycrest.sol:Paycrest","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":4247,"contract":"contracts/Paycrest.sol:Paycrest","label":"currency","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Order)5007_storage":{"encoding":"inplace","label":"struct IPaycrest.Order","members":[{"astId":4990,"contract":"contracts/Paycrest.sol:Paycrest","label":"seller","offset":0,"slot":"0","type":"t_address"},{"astId":4992,"contract":"contracts/Paycrest.sol:Paycrest","label":"token","offset":0,"slot":"1","type":"t_address"},{"astId":4994,"contract":"contracts/Paycrest.sol:Paycrest","label":"senderFeeRecipient","offset":0,"slot":"2","type":"t_address"},{"astId":4996,"contract":"contracts/Paycrest.sol:Paycrest","label":"senderFee","offset":0,"slot":"3","type":"t_uint256"},{"astId":4998,"contract":"contracts/Paycrest.sol:Paycrest","label":"rate","offset":0,"slot":"4","type":"t_uint96"},{"astId":5000,"contract":"contracts/Paycrest.sol:Paycrest","label":"isFulfilled","offset":12,"slot":"4","type":"t_bool"},{"astId":5002,"contract":"contracts/Paycrest.sol:Paycrest","label":"refundAddress","offset":0,"slot":"5","type":"t_address"},{"astId":5004,"contract":"contracts/Paycrest.sol:Paycrest","label":"currentBPS","offset":20,"slot":"5","type":"t_uint96"},{"astId":5006,"contract":"contracts/Paycrest.sol:Paycrest","label":"amount","offset":0,"slot":"6","type":"t_uint256"}],"numberOfBytes":"224"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"errors":{"AmountIsZero()":[{"notice":"Revert when input amount is zero"}],"InvalidParameter(bytes32)":[{"notice":"Revert when zero address is passed in"}],"InvalidSigner()":[{"notice":"Revert with invalid signer"}],"OnlyAggregator()":[{"notice":"Revert when caller is not an aggregator"}],"OrderFulfilled()":[{"notice":"Revert when trx has been fulfilled"}],"ThrowZeroAddress()":[{"notice":"Revert when zero address is passed in"}],"ThrowZeroValue()":[{"notice":"Revert when zero address is passed in"}],"TokenNotSupported()":[{"notice":"Revert when invalid token is provided"}],"UnableToProcessRewards()":[{"notice":"Revert when rewards are not been distributed."}],"Unsuported()":[{"notice":"Revert when input amount is zero"}]},"kind":"user","methods":{},"version":1}}},"contracts/PaycrestSettingManager.sol":{"PaycrestSettingManager":{"abi":[{"inputs":[],"name":"AmountIsZero","type":"error"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"}],"name":"InvalidParameter","type":"error"},{"inputs":[],"name":"ThrowZeroAddress","type":"error"},{"inputs":[],"name":"ThrowZeroValue","type":"error"},{"inputs":[],"name":"TokenNotSupported","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"protocolFee","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"primaryValidator","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"secondaryValidator","type":"uint64"}],"name":"PaycrestFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"SettingManagerBool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"bytes8","name":"value","type":"bytes8"},{"indexed":false,"internalType":"bytes8","name":"status","type":"bytes8"}],"name":"SettingManagerForInstitution","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"institutions","type":"tuple[]"}],"name":"setSupportedInstitutions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateFeeRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_protocolFeePercent","type":"uint64"},{"internalType":"uint64","name":"_primaryValidatorPercent","type":"uint64"},{"internalType":"uint64","name":"_secondaryValidatorPercent","type":"uint64"}],"name":"updateProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052620186a0606555611388606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101f4606660086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101f4606660106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555034801561009857600080fd5b50610f4a806100a86000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063764bc3551161005b578063764bc355146100c45780638da5cb5b146100e057806399e3c0b4146100fe578063f2fde38b1461011a5761007d565b806332200882146100825780633d8f8fb21461009e578063715018a6146100ba575b600080fd5b61009c60048036038101906100979190610ab1565b610136565b005b6100b860048036038101906100b39190610b6b565b61024a565b005b6100c26103fc565b005b6100de60048036038101906100d99190610beb565b610410565b005b6100e86104d3565b6040516100f59190610c4d565b60405180910390f35b61011860048036038101906101139190610ca0565b6104fd565b005b610134600480360381019061012f9190610cf3565b6106ea565b005b61013e61076d565b60008151905060005b8181101561024457606c600085815260200190815260200160002083828151811061017557610174610d20565b5b602002602001015190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060405180604001604052808483815181106101da576101d9610d20565b5b602002602001015160200151815260200185815250606d600085848151811061020657610205610d20565b5b602002602001015160000151815260200190815260200160002060008201518160000155602082015181600101559050508080600101915050610147565b50505050565b61025261076d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102b8576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036103215780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f7200000000000000000000000000000000000000000000820361038e5780606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506103f8565b7f7374616b6500000000000000000000000000000000000000000000000000000082036103f75780606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b61040461076d565b61040e60006107eb565b565b61041861076d565b82606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081606660086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080606660106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fced6b79f1325154aec329e6ff932857cb4f91fa8eb4c6791ce5b460f479957588383836040516104c693929190610d5e565b60405180910390a1505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61050561076d565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361056b576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036105ea5780606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c6973740000000000000000000000000000000000000000000000830361066d5780606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506106aa565b826040517f48bae5b80000000000000000000000000000000000000000000000000000000081526004016106a19190610da4565b60405180910390fd5b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace9308383836040516106dd93929190610dce565b60405180910390a1505050565b6106f261076d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610761576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075890610e88565b60405180910390fd5b61076a816107eb565b50565b6107756108b1565b73ffffffffffffffffffffffffffffffffffffffff166107936104d3565b73ffffffffffffffffffffffffffffffffffffffff16146107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090610ef4565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108e0816108cd565b81146108eb57600080fd5b50565b6000813590506108fd816108d7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61095182610908565b810181811067ffffffffffffffff821117156109705761096f610919565b5b80604052505050565b60006109836108b9565b905061098f8282610948565b919050565b600067ffffffffffffffff8211156109af576109ae610919565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156109e0576109df6109c5565b5b6109ea6040610979565b905060006109fa848285016108ee565b6000830152506020610a0e848285016108ee565b60208301525092915050565b6000610a2d610a2884610994565b610979565b90508083825260208201905060408402830185811115610a5057610a4f6109c0565b5b835b81811015610a795780610a6588826109ca565b845260208401935050604081019050610a52565b5050509392505050565b600082601f830112610a9857610a97610903565b5b8135610aa8848260208601610a1a565b91505092915050565b60008060408385031215610ac857610ac76108c3565b5b6000610ad6858286016108ee565b925050602083013567ffffffffffffffff811115610af757610af66108c8565b5b610b0385828601610a83565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3882610b0d565b9050919050565b610b4881610b2d565b8114610b5357600080fd5b50565b600081359050610b6581610b3f565b92915050565b60008060408385031215610b8257610b816108c3565b5b6000610b90858286016108ee565b9250506020610ba185828601610b56565b9150509250929050565b600067ffffffffffffffff82169050919050565b610bc881610bab565b8114610bd357600080fd5b50565b600081359050610be581610bbf565b92915050565b600080600060608486031215610c0457610c036108c3565b5b6000610c1286828701610bd6565b9350506020610c2386828701610bd6565b9250506040610c3486828701610bd6565b9150509250925092565b610c4781610b2d565b82525050565b6000602082019050610c626000830184610c3e565b92915050565b60008115159050919050565b610c7d81610c68565b8114610c8857600080fd5b50565b600081359050610c9a81610c74565b92915050565b600080600060608486031215610cb957610cb86108c3565b5b6000610cc7868287016108ee565b9350506020610cd886828701610b56565b9250506040610ce986828701610c8b565b9150509250925092565b600060208284031215610d0957610d086108c3565b5b6000610d1784828501610b56565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610d5881610bab565b82525050565b6000606082019050610d736000830186610d4f565b610d806020830185610d4f565b610d8d6040830184610d4f565b949350505050565b610d9e816108cd565b82525050565b6000602082019050610db96000830184610d95565b92915050565b610dc881610c68565b82525050565b6000606082019050610de36000830186610d95565b610df06020830185610c3e565b610dfd6040830184610dbf565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e72602683610e05565b9150610e7d82610e16565b604082019050919050565b60006020820190508181036000830152610ea181610e65565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610ede602083610e05565b9150610ee982610ea8565b602082019050919050565b60006020820190508181036000830152610f0d81610ed1565b905091905056fea2646970667358221220422453e612eaa3327cea009e9cd752f5207119c8440016e3d82c8d4c648e491164736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH3 0x186A0 PUSH1 0x65 SSTORE PUSH2 0x1388 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1F4 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1F4 PUSH1 0x66 PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF4A DUP1 PUSH2 0xA8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x764BC355 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x764BC355 EQ PUSH2 0xC4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x11A JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x32200882 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x3D8F8FB2 EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xBA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x97 SWAP2 SWAP1 PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0x136 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB3 SWAP2 SWAP1 PUSH2 0xB6B JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC2 PUSH2 0x3FC JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD9 SWAP2 SWAP1 PUSH2 0xBEB JUMP JUMPDEST PUSH2 0x410 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE8 PUSH2 0x4D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF5 SWAP2 SWAP1 PUSH2 0xC4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x118 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x113 SWAP2 SWAP1 PUSH2 0xCA0 JUMP JUMPDEST PUSH2 0x4FD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH2 0x6EA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13E PUSH2 0x76D JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x244 JUMPI PUSH1 0x6C PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x175 JUMPI PUSH2 0x174 PUSH2 0xD20 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1DA JUMPI PUSH2 0x1D9 PUSH2 0xD20 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x6D PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x206 JUMPI PUSH2 0x205 PUSH2 0xD20 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x147 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x252 PUSH2 0x76D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x321 JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x38E JUMPI DUP1 PUSH1 0x69 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x3F8 JUMP JUMPDEST PUSH32 0x7374616B65000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x3F7 JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x404 PUSH2 0x76D JUMP JUMPDEST PUSH2 0x40E PUSH1 0x0 PUSH2 0x7EB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x418 PUSH2 0x76D JUMP JUMPDEST DUP3 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x66 PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xCED6B79F1325154AEC329E6FF932857CB4F91FA8EB4C6791CE5B460F47995758 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x4C6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x505 PUSH2 0x76D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x56B JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x5EA JUMPI DUP1 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x66D JUMPI DUP1 PUSH1 0x6B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x6AA JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH32 0x48BAE5B800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A1 SWAP2 SWAP1 PUSH2 0xDA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x6DD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xDCE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x76D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x761 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x758 SWAP1 PUSH2 0xE88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x76A DUP2 PUSH2 0x7EB JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x775 PUSH2 0x8B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x793 PUSH2 0x4D3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E0 SWAP1 PUSH2 0xEF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8E0 DUP2 PUSH2 0x8CD JUMP JUMPDEST DUP2 EQ PUSH2 0x8EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x8FD DUP2 PUSH2 0x8D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x951 DUP3 PUSH2 0x908 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x970 JUMPI PUSH2 0x96F PUSH2 0x919 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x983 PUSH2 0x8B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x98F DUP3 DUP3 PUSH2 0x948 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x9AF JUMPI PUSH2 0x9AE PUSH2 0x919 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9E0 JUMPI PUSH2 0x9DF PUSH2 0x9C5 JUMP JUMPDEST JUMPDEST PUSH2 0x9EA PUSH1 0x40 PUSH2 0x979 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9FA DUP5 DUP3 DUP6 ADD PUSH2 0x8EE JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0xA0E DUP5 DUP3 DUP6 ADD PUSH2 0x8EE JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA2D PUSH2 0xA28 DUP5 PUSH2 0x994 JUMP JUMPDEST PUSH2 0x979 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0xA50 JUMPI PUSH2 0xA4F PUSH2 0x9C0 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA79 JUMPI DUP1 PUSH2 0xA65 DUP9 DUP3 PUSH2 0x9CA JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0xA52 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA98 JUMPI PUSH2 0xA97 PUSH2 0x903 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAA8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xA1A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAC8 JUMPI PUSH2 0xAC7 PUSH2 0x8C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAD6 DUP6 DUP3 DUP7 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAF7 JUMPI PUSH2 0xAF6 PUSH2 0x8C8 JUMP JUMPDEST JUMPDEST PUSH2 0xB03 DUP6 DUP3 DUP7 ADD PUSH2 0xA83 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB38 DUP3 PUSH2 0xB0D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB48 DUP2 PUSH2 0xB2D JUMP JUMPDEST DUP2 EQ PUSH2 0xB53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB65 DUP2 PUSH2 0xB3F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB82 JUMPI PUSH2 0xB81 PUSH2 0x8C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB90 DUP6 DUP3 DUP7 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBA1 DUP6 DUP3 DUP7 ADD PUSH2 0xB56 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBC8 DUP2 PUSH2 0xBAB JUMP JUMPDEST DUP2 EQ PUSH2 0xBD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBE5 DUP2 PUSH2 0xBBF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC04 JUMPI PUSH2 0xC03 PUSH2 0x8C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC12 DUP7 DUP3 DUP8 ADD PUSH2 0xBD6 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC23 DUP7 DUP3 DUP8 ADD PUSH2 0xBD6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xC34 DUP7 DUP3 DUP8 ADD PUSH2 0xBD6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xC47 DUP2 PUSH2 0xB2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC62 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC3E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC7D DUP2 PUSH2 0xC68 JUMP JUMPDEST DUP2 EQ PUSH2 0xC88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xC9A DUP2 PUSH2 0xC74 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCB9 JUMPI PUSH2 0xCB8 PUSH2 0x8C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCC7 DUP7 DUP3 DUP8 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCD8 DUP7 DUP3 DUP8 ADD PUSH2 0xB56 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCE9 DUP7 DUP3 DUP8 ADD PUSH2 0xC8B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD09 JUMPI PUSH2 0xD08 PUSH2 0x8C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD17 DUP5 DUP3 DUP6 ADD PUSH2 0xB56 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xD58 DUP2 PUSH2 0xBAB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xD73 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xD4F JUMP JUMPDEST PUSH2 0xD80 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xD4F JUMP JUMPDEST PUSH2 0xD8D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xD4F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xD9E DUP2 PUSH2 0x8CD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDB9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD95 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDC8 DUP2 PUSH2 0xC68 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xDE3 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xD95 JUMP JUMPDEST PUSH2 0xDF0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xC3E JUMP JUMPDEST PUSH2 0xDFD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xDBF JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE72 PUSH1 0x26 DUP4 PUSH2 0xE05 JUMP JUMPDEST SWAP2 POP PUSH2 0xE7D DUP3 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEA1 DUP2 PUSH2 0xE65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEDE PUSH1 0x20 DUP4 PUSH2 0xE05 JUMP JUMPDEST SWAP2 POP PUSH2 0xEE9 DUP3 PUSH2 0xEA8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF0D DUP2 PUSH2 0xED1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP 0x24 MSTORE8 0xE6 SLT 0xEA LOG3 ORIGIN PUSH29 0xEA009E9CD752F5207119C8440016E3D82C8D4C648E491164736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"139:3401:17:-:0;;;426:7;399:34;;476:4;439:41;;;;;;;;;;;;;;;;;;;;537:3;492:48;;;;;;;;;;;;;;;;;;;;601:3;554:50;;;;;;;;;;;;;;;;;;;;139:3401;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_68":{"entryPoint":1901,"id":68,"parameterSlots":0,"returnSlots":0},"@_msgSender_1231":{"entryPoint":2225,"id":1231,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_125":{"entryPoint":2027,"id":125,"parameterSlots":1,"returnSlots":0},"@owner_54":{"entryPoint":1235,"id":54,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":1020,"id":82,"parameterSlots":0,"returnSlots":0},"@setSupportedInstitutions_4432":{"entryPoint":310,"id":4432,"parameterSlots":2,"returnSlots":0},"@settingManagerBool_4378":{"entryPoint":1277,"id":4378,"parameterSlots":3,"returnSlots":0},"@transferOwnership_105":{"entryPoint":1770,"id":105,"parameterSlots":1,"returnSlots":0},"@updateFeeRecipient_4506":{"entryPoint":586,"id":4506,"parameterSlots":2,"returnSlots":0},"@updateProtocolFees_4462":{"entryPoint":1040,"id":4462,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr":{"entryPoint":2586,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2902,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr":{"entryPoint":2691,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":3211,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":2286,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_Institution_$4243_memory_ptr":{"entryPoint":2506,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64":{"entryPoint":3030,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3315,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":2923,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":3232,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr":{"entryPoint":2737,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64t_uint64t_uint64":{"entryPoint":3051,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":3134,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3519,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3477,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":3685,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":3793,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":3407,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":3149,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":3492,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":3534,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3720,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3828,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint64_t_uint64_t_uint64__to_t_uint64_t_uint64_t_uint64__fromStack_reversed":{"entryPoint":3422,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":2425,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":2233,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr":{"entryPoint":2452,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3589,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2861,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3176,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":2253,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2829,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":2987,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":2376,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x32":{"entryPoint":3360,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2329,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":2307,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":2501,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":2496,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":2248,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2243,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2312,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":3606,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":3752,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2879,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":3188,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":2263,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":3007,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12440:23","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:23","statements":[{"nodeType":"YulAssignment","src":"57:19:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:23"},"nodeType":"YulFunctionCall","src":"67:9:23"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:23"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:23","type":""}],"src":"7:75:23"},{"body":{"nodeType":"YulBlock","src":"177:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:23"},"nodeType":"YulFunctionCall","src":"187:12:23"},"nodeType":"YulExpressionStatement","src":"187:12:23"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:23"},{"body":{"nodeType":"YulBlock","src":"300:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:23"},"nodeType":"YulFunctionCall","src":"310:12:23"},"nodeType":"YulExpressionStatement","src":"310:12:23"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:23"},{"body":{"nodeType":"YulBlock","src":"379:32:23","statements":[{"nodeType":"YulAssignment","src":"389:16:23","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:23"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:23","type":""}],"src":"334:77:23"},{"body":{"nodeType":"YulBlock","src":"460:79:23","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:23"},"nodeType":"YulFunctionCall","src":"519:12:23"},"nodeType":"YulExpressionStatement","src":"519:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:23"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:23"},"nodeType":"YulFunctionCall","src":"490:24:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:23"},"nodeType":"YulFunctionCall","src":"480:35:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:23"},"nodeType":"YulFunctionCall","src":"473:43:23"},"nodeType":"YulIf","src":"470:63:23"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:23","type":""}],"src":"417:122:23"},{"body":{"nodeType":"YulBlock","src":"597:87:23","statements":[{"nodeType":"YulAssignment","src":"607:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:23"},"nodeType":"YulFunctionCall","src":"616:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:23"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:23"},"nodeType":"YulFunctionCall","src":"645:33:23"},"nodeType":"YulExpressionStatement","src":"645:33:23"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:23","type":""}],"src":"545:139:23"},{"body":{"nodeType":"YulBlock","src":"779:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"796:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"799:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"789:6:23"},"nodeType":"YulFunctionCall","src":"789:12:23"},"nodeType":"YulExpressionStatement","src":"789:12:23"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"690:117:23"},{"body":{"nodeType":"YulBlock","src":"861:54:23","statements":[{"nodeType":"YulAssignment","src":"871:38:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"889:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"896:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"885:3:23"},"nodeType":"YulFunctionCall","src":"885:14:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"905:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"901:3:23"},"nodeType":"YulFunctionCall","src":"901:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"881:3:23"},"nodeType":"YulFunctionCall","src":"881:28:23"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"871:6:23"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"844:5:23","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"854:6:23","type":""}],"src":"813:102:23"},{"body":{"nodeType":"YulBlock","src":"949:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"966:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"969:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"959:6:23"},"nodeType":"YulFunctionCall","src":"959:88:23"},"nodeType":"YulExpressionStatement","src":"959:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1063:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1066:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1056:6:23"},"nodeType":"YulFunctionCall","src":"1056:15:23"},"nodeType":"YulExpressionStatement","src":"1056:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1087:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1090:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1080:6:23"},"nodeType":"YulFunctionCall","src":"1080:15:23"},"nodeType":"YulExpressionStatement","src":"1080:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"921:180:23"},{"body":{"nodeType":"YulBlock","src":"1150:238:23","statements":[{"nodeType":"YulVariableDeclaration","src":"1160:58:23","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1182:6:23"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1212:4:23"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1190:21:23"},"nodeType":"YulFunctionCall","src":"1190:27:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1178:3:23"},"nodeType":"YulFunctionCall","src":"1178:40:23"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1164:10:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1329:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1331:16:23"},"nodeType":"YulFunctionCall","src":"1331:18:23"},"nodeType":"YulExpressionStatement","src":"1331:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1272:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"1284:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1269:2:23"},"nodeType":"YulFunctionCall","src":"1269:34:23"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1308:10:23"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1320:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1305:2:23"},"nodeType":"YulFunctionCall","src":"1305:22:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1266:2:23"},"nodeType":"YulFunctionCall","src":"1266:62:23"},"nodeType":"YulIf","src":"1263:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1367:2:23","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1371:10:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1360:6:23"},"nodeType":"YulFunctionCall","src":"1360:22:23"},"nodeType":"YulExpressionStatement","src":"1360:22:23"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1136:6:23","type":""},{"name":"size","nodeType":"YulTypedName","src":"1144:4:23","type":""}],"src":"1107:281:23"},{"body":{"nodeType":"YulBlock","src":"1435:88:23","statements":[{"nodeType":"YulAssignment","src":"1445:30:23","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1455:18:23"},"nodeType":"YulFunctionCall","src":"1455:20:23"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1445:6:23"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1504:6:23"},{"name":"size","nodeType":"YulIdentifier","src":"1512:4:23"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1484:19:23"},"nodeType":"YulFunctionCall","src":"1484:33:23"},"nodeType":"YulExpressionStatement","src":"1484:33:23"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1419:4:23","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1428:6:23","type":""}],"src":"1394:129:23"},{"body":{"nodeType":"YulBlock","src":"1640:229:23","statements":[{"body":{"nodeType":"YulBlock","src":"1745:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1747:16:23"},"nodeType":"YulFunctionCall","src":"1747:18:23"},"nodeType":"YulExpressionStatement","src":"1747:18:23"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1717:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"1725:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1714:2:23"},"nodeType":"YulFunctionCall","src":"1714:30:23"},"nodeType":"YulIf","src":"1711:56:23"},{"nodeType":"YulAssignment","src":"1777:25:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1789:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"1797:4:23","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1785:3:23"},"nodeType":"YulFunctionCall","src":"1785:17:23"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1777:4:23"}]},{"nodeType":"YulAssignment","src":"1839:23:23","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1851:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"1857:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1847:3:23"},"nodeType":"YulFunctionCall","src":"1847:15:23"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1839:4:23"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1624:6:23","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1635:4:23","type":""}],"src":"1529:340:23"},{"body":{"nodeType":"YulBlock","src":"1964:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1981:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1984:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1974:6:23"},"nodeType":"YulFunctionCall","src":"1974:12:23"},"nodeType":"YulExpressionStatement","src":"1974:12:23"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"1875:117:23"},{"body":{"nodeType":"YulBlock","src":"2087:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2104:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2107:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2097:6:23"},"nodeType":"YulFunctionCall","src":"2097:12:23"},"nodeType":"YulExpressionStatement","src":"2097:12:23"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"1998:117:23"},{"body":{"nodeType":"YulBlock","src":"2210:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2227:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2230:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2220:6:23"},"nodeType":"YulFunctionCall","src":"2220:12:23"},"nodeType":"YulExpressionStatement","src":"2220:12:23"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"2121:117:23"},{"body":{"nodeType":"YulBlock","src":"2377:494:23","statements":[{"body":{"nodeType":"YulBlock","src":"2421:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"2423:77:23"},"nodeType":"YulFunctionCall","src":"2423:79:23"},"nodeType":"YulExpressionStatement","src":"2423:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"2398:3:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2403:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2394:3:23"},"nodeType":"YulFunctionCall","src":"2394:19:23"},{"kind":"number","nodeType":"YulLiteral","src":"2415:4:23","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2390:3:23"},"nodeType":"YulFunctionCall","src":"2390:30:23"},"nodeType":"YulIf","src":"2387:117:23"},{"nodeType":"YulAssignment","src":"2513:30:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2538:4:23","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2522:15:23"},"nodeType":"YulFunctionCall","src":"2522:21:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2513:5:23"}]},{"nodeType":"YulBlock","src":"2553:150:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2588:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"2602:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2592:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2628:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"2635:4:23","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2624:3:23"},"nodeType":"YulFunctionCall","src":"2624:16:23"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2667:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"2678:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2663:3:23"},"nodeType":"YulFunctionCall","src":"2663:22:23"},{"name":"end","nodeType":"YulIdentifier","src":"2687:3:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2642:20:23"},"nodeType":"YulFunctionCall","src":"2642:49:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2617:6:23"},"nodeType":"YulFunctionCall","src":"2617:75:23"},"nodeType":"YulExpressionStatement","src":"2617:75:23"}]},{"nodeType":"YulBlock","src":"2713:151:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2748:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"2762:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2752:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2789:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"2796:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2785:3:23"},"nodeType":"YulFunctionCall","src":"2785:16:23"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2828:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"2839:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2824:3:23"},"nodeType":"YulFunctionCall","src":"2824:22:23"},{"name":"end","nodeType":"YulIdentifier","src":"2848:3:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2803:20:23"},"nodeType":"YulFunctionCall","src":"2803:49:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2778:6:23"},"nodeType":"YulFunctionCall","src":"2778:75:23"},"nodeType":"YulExpressionStatement","src":"2778:75:23"}]}]},"name":"abi_decode_t_struct$_Institution_$4243_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2352:9:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"2363:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2371:5:23","type":""}],"src":"2293:578:23"},{"body":{"nodeType":"YulBlock","src":"3059:666:23","statements":[{"nodeType":"YulAssignment","src":"3069:119:23","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3180:6:23"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3094:85:23"},"nodeType":"YulFunctionCall","src":"3094:93:23"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3078:15:23"},"nodeType":"YulFunctionCall","src":"3078:110:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3069:5:23"}]},{"nodeType":"YulVariableDeclaration","src":"3197:16:23","value":{"name":"array","nodeType":"YulIdentifier","src":"3208:5:23"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3201:3:23","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3230:5:23"},{"name":"length","nodeType":"YulIdentifier","src":"3237:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3223:6:23"},"nodeType":"YulFunctionCall","src":"3223:21:23"},"nodeType":"YulExpressionStatement","src":"3223:21:23"},{"nodeType":"YulAssignment","src":"3253:23:23","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3264:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"3271:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3260:3:23"},"nodeType":"YulFunctionCall","src":"3260:16:23"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3253:3:23"}]},{"nodeType":"YulVariableDeclaration","src":"3286:44:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3304:6:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3316:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3324:4:23","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3312:3:23"},"nodeType":"YulFunctionCall","src":"3312:17:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3300:3:23"},"nodeType":"YulFunctionCall","src":"3300:30:23"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3290:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3358:103:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"3372:77:23"},"nodeType":"YulFunctionCall","src":"3372:79:23"},"nodeType":"YulExpressionStatement","src":"3372:79:23"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3345:6:23"},{"name":"end","nodeType":"YulIdentifier","src":"3353:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3342:2:23"},"nodeType":"YulFunctionCall","src":"3342:15:23"},"nodeType":"YulIf","src":"3339:122:23"},{"body":{"nodeType":"YulBlock","src":"3546:173:23","statements":[{"nodeType":"YulVariableDeclaration","src":"3561:21:23","value":{"name":"src","nodeType":"YulIdentifier","src":"3579:3:23"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"3565:10:23","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3603:3:23"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"3658:10:23"},{"name":"end","nodeType":"YulIdentifier","src":"3670:3:23"}],"functionName":{"name":"abi_decode_t_struct$_Institution_$4243_memory_ptr","nodeType":"YulIdentifier","src":"3608:49:23"},"nodeType":"YulFunctionCall","src":"3608:66:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3596:6:23"},"nodeType":"YulFunctionCall","src":"3596:79:23"},"nodeType":"YulExpressionStatement","src":"3596:79:23"},{"nodeType":"YulAssignment","src":"3688:21:23","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3699:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"3704:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3695:3:23"},"nodeType":"YulFunctionCall","src":"3695:14:23"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3688:3:23"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3499:3:23"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3504:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3496:2:23"},"nodeType":"YulFunctionCall","src":"3496:15:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3512:25:23","statements":[{"nodeType":"YulAssignment","src":"3514:21:23","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3525:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"3530:4:23","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3521:3:23"},"nodeType":"YulFunctionCall","src":"3521:14:23"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3514:3:23"}]}]},"pre":{"nodeType":"YulBlock","src":"3474:21:23","statements":[{"nodeType":"YulVariableDeclaration","src":"3476:17:23","value":{"name":"offset","nodeType":"YulIdentifier","src":"3487:6:23"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3480:3:23","type":""}]}]},"src":"3470:249:23"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3029:6:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"3037:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"3045:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3053:5:23","type":""}],"src":"2928:797:23"},{"body":{"nodeType":"YulBlock","src":"3888:322:23","statements":[{"body":{"nodeType":"YulBlock","src":"3937:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3939:77:23"},"nodeType":"YulFunctionCall","src":"3939:79:23"},"nodeType":"YulExpressionStatement","src":"3939:79:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3916:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3924:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3912:3:23"},"nodeType":"YulFunctionCall","src":"3912:17:23"},{"name":"end","nodeType":"YulIdentifier","src":"3931:3:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3908:3:23"},"nodeType":"YulFunctionCall","src":"3908:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3901:6:23"},"nodeType":"YulFunctionCall","src":"3901:35:23"},"nodeType":"YulIf","src":"3898:122:23"},{"nodeType":"YulVariableDeclaration","src":"4029:34:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4056:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4043:12:23"},"nodeType":"YulFunctionCall","src":"4043:20:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4033:6:23","type":""}]},{"nodeType":"YulAssignment","src":"4072:132:23","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4177:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4185:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4173:3:23"},"nodeType":"YulFunctionCall","src":"4173:17:23"},{"name":"length","nodeType":"YulIdentifier","src":"4192:6:23"},{"name":"end","nodeType":"YulIdentifier","src":"4200:3:23"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4081:91:23"},"nodeType":"YulFunctionCall","src":"4081:123:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4072:5:23"}]}]},"name":"abi_decode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3866:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"3874:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3882:5:23","type":""}],"src":"3782:428:23"},{"body":{"nodeType":"YulBlock","src":"4353:605:23","statements":[{"body":{"nodeType":"YulBlock","src":"4399:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4401:77:23"},"nodeType":"YulFunctionCall","src":"4401:79:23"},"nodeType":"YulExpressionStatement","src":"4401:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4374:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"4383:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4370:3:23"},"nodeType":"YulFunctionCall","src":"4370:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4395:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4366:3:23"},"nodeType":"YulFunctionCall","src":"4366:32:23"},"nodeType":"YulIf","src":"4363:119:23"},{"nodeType":"YulBlock","src":"4492:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4507:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4521:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4511:6:23","type":""}]},{"nodeType":"YulAssignment","src":"4536:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4582:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4567:3:23"},"nodeType":"YulFunctionCall","src":"4567:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4591:7:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4546:20:23"},"nodeType":"YulFunctionCall","src":"4546:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4536:6:23"}]}]},{"nodeType":"YulBlock","src":"4619:332:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4634:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4665:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4676:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4661:3:23"},"nodeType":"YulFunctionCall","src":"4661:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4648:12:23"},"nodeType":"YulFunctionCall","src":"4648:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4638:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4727:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4729:77:23"},"nodeType":"YulFunctionCall","src":"4729:79:23"},"nodeType":"YulExpressionStatement","src":"4729:79:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4699:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4707:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4696:2:23"},"nodeType":"YulFunctionCall","src":"4696:30:23"},"nodeType":"YulIf","src":"4693:117:23"},{"nodeType":"YulAssignment","src":"4824:117:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4913:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4924:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4909:3:23"},"nodeType":"YulFunctionCall","src":"4909:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4933:7:23"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4834:74:23"},"nodeType":"YulFunctionCall","src":"4834:107:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4824:6:23"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4315:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4326:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4338:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4346:6:23","type":""}],"src":"4216:742:23"},{"body":{"nodeType":"YulBlock","src":"5009:81:23","statements":[{"nodeType":"YulAssignment","src":"5019:65:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5034:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"5041:42:23","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5030:3:23"},"nodeType":"YulFunctionCall","src":"5030:54:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5019:7:23"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4991:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5001:7:23","type":""}],"src":"4964:126:23"},{"body":{"nodeType":"YulBlock","src":"5141:51:23","statements":[{"nodeType":"YulAssignment","src":"5151:35:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5180:5:23"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"5162:17:23"},"nodeType":"YulFunctionCall","src":"5162:24:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5151:7:23"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5123:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5133:7:23","type":""}],"src":"5096:96:23"},{"body":{"nodeType":"YulBlock","src":"5241:79:23","statements":[{"body":{"nodeType":"YulBlock","src":"5298:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5307:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5310:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5300:6:23"},"nodeType":"YulFunctionCall","src":"5300:12:23"},"nodeType":"YulExpressionStatement","src":"5300:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5264:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5289:5:23"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5271:17:23"},"nodeType":"YulFunctionCall","src":"5271:24:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5261:2:23"},"nodeType":"YulFunctionCall","src":"5261:35:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5254:6:23"},"nodeType":"YulFunctionCall","src":"5254:43:23"},"nodeType":"YulIf","src":"5251:63:23"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5234:5:23","type":""}],"src":"5198:122:23"},{"body":{"nodeType":"YulBlock","src":"5378:87:23","statements":[{"nodeType":"YulAssignment","src":"5388:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5410:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5397:12:23"},"nodeType":"YulFunctionCall","src":"5397:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5388:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5453:5:23"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"5426:26:23"},"nodeType":"YulFunctionCall","src":"5426:33:23"},"nodeType":"YulExpressionStatement","src":"5426:33:23"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5356:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"5364:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5372:5:23","type":""}],"src":"5326:139:23"},{"body":{"nodeType":"YulBlock","src":"5554:391:23","statements":[{"body":{"nodeType":"YulBlock","src":"5600:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5602:77:23"},"nodeType":"YulFunctionCall","src":"5602:79:23"},"nodeType":"YulExpressionStatement","src":"5602:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5575:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"5584:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5571:3:23"},"nodeType":"YulFunctionCall","src":"5571:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"5596:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5567:3:23"},"nodeType":"YulFunctionCall","src":"5567:32:23"},"nodeType":"YulIf","src":"5564:119:23"},{"nodeType":"YulBlock","src":"5693:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5708:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"5722:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5712:6:23","type":""}]},{"nodeType":"YulAssignment","src":"5737:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5772:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5783:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5768:3:23"},"nodeType":"YulFunctionCall","src":"5768:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5792:7:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"5747:20:23"},"nodeType":"YulFunctionCall","src":"5747:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5737:6:23"}]}]},{"nodeType":"YulBlock","src":"5820:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5835:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"5849:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5839:6:23","type":""}]},{"nodeType":"YulAssignment","src":"5865:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5900:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5911:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5896:3:23"},"nodeType":"YulFunctionCall","src":"5896:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5920:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5875:20:23"},"nodeType":"YulFunctionCall","src":"5875:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5865:6:23"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5516:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5527:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5539:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5547:6:23","type":""}],"src":"5471:474:23"},{"body":{"nodeType":"YulBlock","src":"5995:57:23","statements":[{"nodeType":"YulAssignment","src":"6005:41:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6020:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"6027:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6016:3:23"},"nodeType":"YulFunctionCall","src":"6016:30:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6005:7:23"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5977:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5987:7:23","type":""}],"src":"5951:101:23"},{"body":{"nodeType":"YulBlock","src":"6100:78:23","statements":[{"body":{"nodeType":"YulBlock","src":"6156:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6165:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6168:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6158:6:23"},"nodeType":"YulFunctionCall","src":"6158:12:23"},"nodeType":"YulExpressionStatement","src":"6158:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6123:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6147:5:23"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"6130:16:23"},"nodeType":"YulFunctionCall","src":"6130:23:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6120:2:23"},"nodeType":"YulFunctionCall","src":"6120:34:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6113:6:23"},"nodeType":"YulFunctionCall","src":"6113:42:23"},"nodeType":"YulIf","src":"6110:62:23"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6093:5:23","type":""}],"src":"6058:120:23"},{"body":{"nodeType":"YulBlock","src":"6235:86:23","statements":[{"nodeType":"YulAssignment","src":"6245:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6267:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6254:12:23"},"nodeType":"YulFunctionCall","src":"6254:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6245:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6309:5:23"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"6283:25:23"},"nodeType":"YulFunctionCall","src":"6283:32:23"},"nodeType":"YulExpressionStatement","src":"6283:32:23"}]},"name":"abi_decode_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6213:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"6221:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6229:5:23","type":""}],"src":"6184:137:23"},{"body":{"nodeType":"YulBlock","src":"6424:516:23","statements":[{"body":{"nodeType":"YulBlock","src":"6470:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6472:77:23"},"nodeType":"YulFunctionCall","src":"6472:79:23"},"nodeType":"YulExpressionStatement","src":"6472:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6445:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"6454:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6441:3:23"},"nodeType":"YulFunctionCall","src":"6441:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"6466:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6437:3:23"},"nodeType":"YulFunctionCall","src":"6437:32:23"},"nodeType":"YulIf","src":"6434:119:23"},{"nodeType":"YulBlock","src":"6563:116:23","statements":[{"nodeType":"YulVariableDeclaration","src":"6578:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"6592:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6582:6:23","type":""}]},{"nodeType":"YulAssignment","src":"6607:62:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6641:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"6652:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6637:3:23"},"nodeType":"YulFunctionCall","src":"6637:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6661:7:23"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"6617:19:23"},"nodeType":"YulFunctionCall","src":"6617:52:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6607:6:23"}]}]},{"nodeType":"YulBlock","src":"6689:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"6704:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"6718:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6708:6:23","type":""}]},{"nodeType":"YulAssignment","src":"6734:62:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6768:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"6779:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6764:3:23"},"nodeType":"YulFunctionCall","src":"6764:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6788:7:23"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"6744:19:23"},"nodeType":"YulFunctionCall","src":"6744:52:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6734:6:23"}]}]},{"nodeType":"YulBlock","src":"6816:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"6831:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"6845:2:23","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6835:6:23","type":""}]},{"nodeType":"YulAssignment","src":"6861:62:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6895:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"6906:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6891:3:23"},"nodeType":"YulFunctionCall","src":"6891:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6915:7:23"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"6871:19:23"},"nodeType":"YulFunctionCall","src":"6871:52:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6861:6:23"}]}]}]},"name":"abi_decode_tuple_t_uint64t_uint64t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6378:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6389:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6401:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6409:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6417:6:23","type":""}],"src":"6327:613:23"},{"body":{"nodeType":"YulBlock","src":"7011:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7028:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7051:5:23"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"7033:17:23"},"nodeType":"YulFunctionCall","src":"7033:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7021:6:23"},"nodeType":"YulFunctionCall","src":"7021:37:23"},"nodeType":"YulExpressionStatement","src":"7021:37:23"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6999:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7006:3:23","type":""}],"src":"6946:118:23"},{"body":{"nodeType":"YulBlock","src":"7168:124:23","statements":[{"nodeType":"YulAssignment","src":"7178:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7190:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7201:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7186:3:23"},"nodeType":"YulFunctionCall","src":"7186:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7178:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7258:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7271:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7282:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7267:3:23"},"nodeType":"YulFunctionCall","src":"7267:17:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"7214:43:23"},"nodeType":"YulFunctionCall","src":"7214:71:23"},"nodeType":"YulExpressionStatement","src":"7214:71:23"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7140:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7152:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7163:4:23","type":""}],"src":"7070:222:23"},{"body":{"nodeType":"YulBlock","src":"7340:48:23","statements":[{"nodeType":"YulAssignment","src":"7350:32:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7375:5:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7368:6:23"},"nodeType":"YulFunctionCall","src":"7368:13:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7361:6:23"},"nodeType":"YulFunctionCall","src":"7361:21:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7350:7:23"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7322:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7332:7:23","type":""}],"src":"7298:90:23"},{"body":{"nodeType":"YulBlock","src":"7434:76:23","statements":[{"body":{"nodeType":"YulBlock","src":"7488:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7497:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7500:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7490:6:23"},"nodeType":"YulFunctionCall","src":"7490:12:23"},"nodeType":"YulExpressionStatement","src":"7490:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7457:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7479:5:23"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"7464:14:23"},"nodeType":"YulFunctionCall","src":"7464:21:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7454:2:23"},"nodeType":"YulFunctionCall","src":"7454:32:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7447:6:23"},"nodeType":"YulFunctionCall","src":"7447:40:23"},"nodeType":"YulIf","src":"7444:60:23"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7427:5:23","type":""}],"src":"7394:116:23"},{"body":{"nodeType":"YulBlock","src":"7565:84:23","statements":[{"nodeType":"YulAssignment","src":"7575:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7597:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7584:12:23"},"nodeType":"YulFunctionCall","src":"7584:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7575:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7637:5:23"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"7613:23:23"},"nodeType":"YulFunctionCall","src":"7613:30:23"},"nodeType":"YulExpressionStatement","src":"7613:30:23"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7543:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"7551:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7559:5:23","type":""}],"src":"7516:133:23"},{"body":{"nodeType":"YulBlock","src":"7752:516:23","statements":[{"body":{"nodeType":"YulBlock","src":"7798:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7800:77:23"},"nodeType":"YulFunctionCall","src":"7800:79:23"},"nodeType":"YulExpressionStatement","src":"7800:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7773:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"7782:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7769:3:23"},"nodeType":"YulFunctionCall","src":"7769:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"7794:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7765:3:23"},"nodeType":"YulFunctionCall","src":"7765:32:23"},"nodeType":"YulIf","src":"7762:119:23"},{"nodeType":"YulBlock","src":"7891:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"7906:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"7920:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7910:6:23","type":""}]},{"nodeType":"YulAssignment","src":"7935:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7970:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"7981:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7966:3:23"},"nodeType":"YulFunctionCall","src":"7966:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7990:7:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7945:20:23"},"nodeType":"YulFunctionCall","src":"7945:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7935:6:23"}]}]},{"nodeType":"YulBlock","src":"8018:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"8033:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"8047:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8037:6:23","type":""}]},{"nodeType":"YulAssignment","src":"8063:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8098:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"8109:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8094:3:23"},"nodeType":"YulFunctionCall","src":"8094:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8118:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8073:20:23"},"nodeType":"YulFunctionCall","src":"8073:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8063:6:23"}]}]},{"nodeType":"YulBlock","src":"8146:115:23","statements":[{"nodeType":"YulVariableDeclaration","src":"8161:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"8175:2:23","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8165:6:23","type":""}]},{"nodeType":"YulAssignment","src":"8191:60:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8223:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"8234:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8219:3:23"},"nodeType":"YulFunctionCall","src":"8219:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8243:7:23"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"8201:17:23"},"nodeType":"YulFunctionCall","src":"8201:50:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8191:6:23"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7706:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7717:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7729:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7737:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7745:6:23","type":""}],"src":"7655:613:23"},{"body":{"nodeType":"YulBlock","src":"8340:263:23","statements":[{"body":{"nodeType":"YulBlock","src":"8386:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8388:77:23"},"nodeType":"YulFunctionCall","src":"8388:79:23"},"nodeType":"YulExpressionStatement","src":"8388:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8361:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"8370:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8357:3:23"},"nodeType":"YulFunctionCall","src":"8357:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"8382:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8353:3:23"},"nodeType":"YulFunctionCall","src":"8353:32:23"},"nodeType":"YulIf","src":"8350:119:23"},{"nodeType":"YulBlock","src":"8479:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"8494:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"8508:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8498:6:23","type":""}]},{"nodeType":"YulAssignment","src":"8523:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8558:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"8569:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8554:3:23"},"nodeType":"YulFunctionCall","src":"8554:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8578:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8533:20:23"},"nodeType":"YulFunctionCall","src":"8533:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8523:6:23"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8310:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8321:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8333:6:23","type":""}],"src":"8274:329:23"},{"body":{"nodeType":"YulBlock","src":"8637:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8654:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8657:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8647:6:23"},"nodeType":"YulFunctionCall","src":"8647:88:23"},"nodeType":"YulExpressionStatement","src":"8647:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8751:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8754:4:23","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8744:6:23"},"nodeType":"YulFunctionCall","src":"8744:15:23"},"nodeType":"YulExpressionStatement","src":"8744:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8775:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8778:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8768:6:23"},"nodeType":"YulFunctionCall","src":"8768:15:23"},"nodeType":"YulExpressionStatement","src":"8768:15:23"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"8609:180:23"},{"body":{"nodeType":"YulBlock","src":"8858:52:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8875:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8897:5:23"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"8880:16:23"},"nodeType":"YulFunctionCall","src":"8880:23:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8868:6:23"},"nodeType":"YulFunctionCall","src":"8868:36:23"},"nodeType":"YulExpressionStatement","src":"8868:36:23"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8846:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8853:3:23","type":""}],"src":"8795:115:23"},{"body":{"nodeType":"YulBlock","src":"9064:282:23","statements":[{"nodeType":"YulAssignment","src":"9074:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9086:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9097:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9082:3:23"},"nodeType":"YulFunctionCall","src":"9082:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9074:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9152:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9165:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9176:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9161:3:23"},"nodeType":"YulFunctionCall","src":"9161:17:23"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"9110:41:23"},"nodeType":"YulFunctionCall","src":"9110:69:23"},"nodeType":"YulExpressionStatement","src":"9110:69:23"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9231:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9244:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9255:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9240:3:23"},"nodeType":"YulFunctionCall","src":"9240:18:23"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"9189:41:23"},"nodeType":"YulFunctionCall","src":"9189:70:23"},"nodeType":"YulExpressionStatement","src":"9189:70:23"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"9311:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9324:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9335:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9320:3:23"},"nodeType":"YulFunctionCall","src":"9320:18:23"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"9269:41:23"},"nodeType":"YulFunctionCall","src":"9269:70:23"},"nodeType":"YulExpressionStatement","src":"9269:70:23"}]},"name":"abi_encode_tuple_t_uint64_t_uint64_t_uint64__to_t_uint64_t_uint64_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9020:9:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9032:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9040:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9048:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9059:4:23","type":""}],"src":"8916:430:23"},{"body":{"nodeType":"YulBlock","src":"9417:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9434:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9457:5:23"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"9439:17:23"},"nodeType":"YulFunctionCall","src":"9439:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9427:6:23"},"nodeType":"YulFunctionCall","src":"9427:37:23"},"nodeType":"YulExpressionStatement","src":"9427:37:23"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9405:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9412:3:23","type":""}],"src":"9352:118:23"},{"body":{"nodeType":"YulBlock","src":"9574:124:23","statements":[{"nodeType":"YulAssignment","src":"9584:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9596:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9607:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9592:3:23"},"nodeType":"YulFunctionCall","src":"9592:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9584:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9664:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9677:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9688:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9673:3:23"},"nodeType":"YulFunctionCall","src":"9673:17:23"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"9620:43:23"},"nodeType":"YulFunctionCall","src":"9620:71:23"},"nodeType":"YulExpressionStatement","src":"9620:71:23"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9546:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9558:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9569:4:23","type":""}],"src":"9476:222:23"},{"body":{"nodeType":"YulBlock","src":"9763:50:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9780:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9800:5:23"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"9785:14:23"},"nodeType":"YulFunctionCall","src":"9785:21:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9773:6:23"},"nodeType":"YulFunctionCall","src":"9773:34:23"},"nodeType":"YulExpressionStatement","src":"9773:34:23"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9751:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9758:3:23","type":""}],"src":"9704:109:23"},{"body":{"nodeType":"YulBlock","src":"9967:282:23","statements":[{"nodeType":"YulAssignment","src":"9977:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9989:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10000:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9985:3:23"},"nodeType":"YulFunctionCall","src":"9985:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9977:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10057:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10070:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10081:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10066:3:23"},"nodeType":"YulFunctionCall","src":"10066:17:23"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"10013:43:23"},"nodeType":"YulFunctionCall","src":"10013:71:23"},"nodeType":"YulExpressionStatement","src":"10013:71:23"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10138:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10151:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10162:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10147:3:23"},"nodeType":"YulFunctionCall","src":"10147:18:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10094:43:23"},"nodeType":"YulFunctionCall","src":"10094:72:23"},"nodeType":"YulExpressionStatement","src":"10094:72:23"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"10214:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10227:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10238:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10223:3:23"},"nodeType":"YulFunctionCall","src":"10223:18:23"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"10176:37:23"},"nodeType":"YulFunctionCall","src":"10176:66:23"},"nodeType":"YulExpressionStatement","src":"10176:66:23"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9923:9:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9935:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9943:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9951:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9962:4:23","type":""}],"src":"9819:430:23"},{"body":{"nodeType":"YulBlock","src":"10351:73:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10368:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"10373:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10361:6:23"},"nodeType":"YulFunctionCall","src":"10361:19:23"},"nodeType":"YulExpressionStatement","src":"10361:19:23"},{"nodeType":"YulAssignment","src":"10389:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10408:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"10413:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10404:3:23"},"nodeType":"YulFunctionCall","src":"10404:14:23"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"10389:11:23"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10323:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"10328:6:23","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"10339:11:23","type":""}],"src":"10255:169:23"},{"body":{"nodeType":"YulBlock","src":"10536:119:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10558:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"10566:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10554:3:23"},"nodeType":"YulFunctionCall","src":"10554:14:23"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"10570:34:23","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10547:6:23"},"nodeType":"YulFunctionCall","src":"10547:58:23"},"nodeType":"YulExpressionStatement","src":"10547:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10626:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"10634:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10622:3:23"},"nodeType":"YulFunctionCall","src":"10622:15:23"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"10639:8:23","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10615:6:23"},"nodeType":"YulFunctionCall","src":"10615:33:23"},"nodeType":"YulExpressionStatement","src":"10615:33:23"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10528:6:23","type":""}],"src":"10430:225:23"},{"body":{"nodeType":"YulBlock","src":"10807:220:23","statements":[{"nodeType":"YulAssignment","src":"10817:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10883:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"10888:2:23","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10824:58:23"},"nodeType":"YulFunctionCall","src":"10824:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10817:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10989:3:23"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"10900:88:23"},"nodeType":"YulFunctionCall","src":"10900:93:23"},"nodeType":"YulExpressionStatement","src":"10900:93:23"},{"nodeType":"YulAssignment","src":"11002:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11013:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"11018:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11009:3:23"},"nodeType":"YulFunctionCall","src":"11009:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11002:3:23"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10795:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10803:3:23","type":""}],"src":"10661:366:23"},{"body":{"nodeType":"YulBlock","src":"11204:248:23","statements":[{"nodeType":"YulAssignment","src":"11214:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11226:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11237:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11222:3:23"},"nodeType":"YulFunctionCall","src":"11222:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11214:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11261:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11272:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11257:3:23"},"nodeType":"YulFunctionCall","src":"11257:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11280:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"11286:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11276:3:23"},"nodeType":"YulFunctionCall","src":"11276:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11250:6:23"},"nodeType":"YulFunctionCall","src":"11250:47:23"},"nodeType":"YulExpressionStatement","src":"11250:47:23"},{"nodeType":"YulAssignment","src":"11306:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11440:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11314:124:23"},"nodeType":"YulFunctionCall","src":"11314:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11306:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11184:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11199:4:23","type":""}],"src":"11033:419:23"},{"body":{"nodeType":"YulBlock","src":"11564:76:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11586:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"11594:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11582:3:23"},"nodeType":"YulFunctionCall","src":"11582:14:23"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"11598:34:23","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11575:6:23"},"nodeType":"YulFunctionCall","src":"11575:58:23"},"nodeType":"YulExpressionStatement","src":"11575:58:23"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11556:6:23","type":""}],"src":"11458:182:23"},{"body":{"nodeType":"YulBlock","src":"11792:220:23","statements":[{"nodeType":"YulAssignment","src":"11802:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11868:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"11873:2:23","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11809:58:23"},"nodeType":"YulFunctionCall","src":"11809:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11802:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11974:3:23"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"11885:88:23"},"nodeType":"YulFunctionCall","src":"11885:93:23"},"nodeType":"YulExpressionStatement","src":"11885:93:23"},{"nodeType":"YulAssignment","src":"11987:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11998:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"12003:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11994:3:23"},"nodeType":"YulFunctionCall","src":"11994:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11987:3:23"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11780:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11788:3:23","type":""}],"src":"11646:366:23"},{"body":{"nodeType":"YulBlock","src":"12189:248:23","statements":[{"nodeType":"YulAssignment","src":"12199:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12211:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12222:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12207:3:23"},"nodeType":"YulFunctionCall","src":"12207:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12199:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12246:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12257:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12242:3:23"},"nodeType":"YulFunctionCall","src":"12242:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12265:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"12271:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12261:3:23"},"nodeType":"YulFunctionCall","src":"12261:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12235:6:23"},"nodeType":"YulFunctionCall","src":"12235:47:23"},"nodeType":"YulExpressionStatement","src":"12235:47:23"},{"nodeType":"YulAssignment","src":"12291:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12425:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12299:124:23"},"nodeType":"YulFunctionCall","src":"12299:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12291:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12169:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12184:4:23","type":""}],"src":"12018:419:23"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct PaycrestSettingManager.Institution\n    function abi_decode_t_struct$_Institution_$4243_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // code\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // name\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_available_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Institution_$4243_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_struct$_Institution_$4243_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint64t_uint64t_uint64(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_uint64_t_uint64_t_uint64__to_t_uint64_t_uint64_t_uint64__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":23,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061007d5760003560e01c8063764bc3551161005b578063764bc355146100c45780638da5cb5b146100e057806399e3c0b4146100fe578063f2fde38b1461011a5761007d565b806332200882146100825780633d8f8fb21461009e578063715018a6146100ba575b600080fd5b61009c60048036038101906100979190610ab1565b610136565b005b6100b860048036038101906100b39190610b6b565b61024a565b005b6100c26103fc565b005b6100de60048036038101906100d99190610beb565b610410565b005b6100e86104d3565b6040516100f59190610c4d565b60405180910390f35b61011860048036038101906101139190610ca0565b6104fd565b005b610134600480360381019061012f9190610cf3565b6106ea565b005b61013e61076d565b60008151905060005b8181101561024457606c600085815260200190815260200160002083828151811061017557610174610d20565b5b602002602001015190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060405180604001604052808483815181106101da576101d9610d20565b5b602002602001015160200151815260200185815250606d600085848151811061020657610205610d20565b5b602002602001015160000151815260200190815260200160002060008201518160000155602082015181600101559050508080600101915050610147565b50505050565b61025261076d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102b8576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036103215780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f7200000000000000000000000000000000000000000000820361038e5780606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506103f8565b7f7374616b6500000000000000000000000000000000000000000000000000000082036103f75780606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b61040461076d565b61040e60006107eb565b565b61041861076d565b82606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081606660086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080606660106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fced6b79f1325154aec329e6ff932857cb4f91fa8eb4c6791ce5b460f479957588383836040516104c693929190610d5e565b60405180910390a1505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61050561076d565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361056b576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036105ea5780606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c6973740000000000000000000000000000000000000000000000830361066d5780606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506106aa565b826040517f48bae5b80000000000000000000000000000000000000000000000000000000081526004016106a19190610da4565b60405180910390fd5b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace9308383836040516106dd93929190610dce565b60405180910390a1505050565b6106f261076d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610761576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075890610e88565b60405180910390fd5b61076a816107eb565b50565b6107756108b1565b73ffffffffffffffffffffffffffffffffffffffff166107936104d3565b73ffffffffffffffffffffffffffffffffffffffff16146107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090610ef4565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108e0816108cd565b81146108eb57600080fd5b50565b6000813590506108fd816108d7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61095182610908565b810181811067ffffffffffffffff821117156109705761096f610919565b5b80604052505050565b60006109836108b9565b905061098f8282610948565b919050565b600067ffffffffffffffff8211156109af576109ae610919565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156109e0576109df6109c5565b5b6109ea6040610979565b905060006109fa848285016108ee565b6000830152506020610a0e848285016108ee565b60208301525092915050565b6000610a2d610a2884610994565b610979565b90508083825260208201905060408402830185811115610a5057610a4f6109c0565b5b835b81811015610a795780610a6588826109ca565b845260208401935050604081019050610a52565b5050509392505050565b600082601f830112610a9857610a97610903565b5b8135610aa8848260208601610a1a565b91505092915050565b60008060408385031215610ac857610ac76108c3565b5b6000610ad6858286016108ee565b925050602083013567ffffffffffffffff811115610af757610af66108c8565b5b610b0385828601610a83565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3882610b0d565b9050919050565b610b4881610b2d565b8114610b5357600080fd5b50565b600081359050610b6581610b3f565b92915050565b60008060408385031215610b8257610b816108c3565b5b6000610b90858286016108ee565b9250506020610ba185828601610b56565b9150509250929050565b600067ffffffffffffffff82169050919050565b610bc881610bab565b8114610bd357600080fd5b50565b600081359050610be581610bbf565b92915050565b600080600060608486031215610c0457610c036108c3565b5b6000610c1286828701610bd6565b9350506020610c2386828701610bd6565b9250506040610c3486828701610bd6565b9150509250925092565b610c4781610b2d565b82525050565b6000602082019050610c626000830184610c3e565b92915050565b60008115159050919050565b610c7d81610c68565b8114610c8857600080fd5b50565b600081359050610c9a81610c74565b92915050565b600080600060608486031215610cb957610cb86108c3565b5b6000610cc7868287016108ee565b9350506020610cd886828701610b56565b9250506040610ce986828701610c8b565b9150509250925092565b600060208284031215610d0957610d086108c3565b5b6000610d1784828501610b56565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610d5881610bab565b82525050565b6000606082019050610d736000830186610d4f565b610d806020830185610d4f565b610d8d6040830184610d4f565b949350505050565b610d9e816108cd565b82525050565b6000602082019050610db96000830184610d95565b92915050565b610dc881610c68565b82525050565b6000606082019050610de36000830186610d95565b610df06020830185610c3e565b610dfd6040830184610dbf565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e72602683610e05565b9150610e7d82610e16565b604082019050919050565b60006020820190508181036000830152610ea181610e65565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610ede602083610e05565b9150610ee982610ea8565b602082019050919050565b60006020820190508181036000830152610f0d81610ed1565b905091905056fea2646970667358221220422453e612eaa3327cea009e9cd752f5207119c8440016e3d82c8d4c648e491164736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x764BC355 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x764BC355 EQ PUSH2 0xC4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x11A JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x32200882 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x3D8F8FB2 EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xBA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x97 SWAP2 SWAP1 PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0x136 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB3 SWAP2 SWAP1 PUSH2 0xB6B JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC2 PUSH2 0x3FC JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD9 SWAP2 SWAP1 PUSH2 0xBEB JUMP JUMPDEST PUSH2 0x410 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE8 PUSH2 0x4D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF5 SWAP2 SWAP1 PUSH2 0xC4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x118 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x113 SWAP2 SWAP1 PUSH2 0xCA0 JUMP JUMPDEST PUSH2 0x4FD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH2 0x6EA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13E PUSH2 0x76D JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x244 JUMPI PUSH1 0x6C PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x175 JUMPI PUSH2 0x174 PUSH2 0xD20 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1DA JUMPI PUSH2 0x1D9 PUSH2 0xD20 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x6D PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x206 JUMPI PUSH2 0x205 PUSH2 0xD20 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x147 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x252 PUSH2 0x76D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x321 JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x38E JUMPI DUP1 PUSH1 0x69 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x3F8 JUMP JUMPDEST PUSH32 0x7374616B65000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x3F7 JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x404 PUSH2 0x76D JUMP JUMPDEST PUSH2 0x40E PUSH1 0x0 PUSH2 0x7EB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x418 PUSH2 0x76D JUMP JUMPDEST DUP3 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x66 PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xCED6B79F1325154AEC329E6FF932857CB4F91FA8EB4C6791CE5B460F47995758 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x4C6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x505 PUSH2 0x76D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x56B JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x5EA JUMPI DUP1 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x66D JUMPI DUP1 PUSH1 0x6B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x6AA JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH32 0x48BAE5B800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A1 SWAP2 SWAP1 PUSH2 0xDA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x6DD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xDCE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x76D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x761 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x758 SWAP1 PUSH2 0xE88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x76A DUP2 PUSH2 0x7EB JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x775 PUSH2 0x8B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x793 PUSH2 0x4D3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E0 SWAP1 PUSH2 0xEF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8E0 DUP2 PUSH2 0x8CD JUMP JUMPDEST DUP2 EQ PUSH2 0x8EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x8FD DUP2 PUSH2 0x8D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x951 DUP3 PUSH2 0x908 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x970 JUMPI PUSH2 0x96F PUSH2 0x919 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x983 PUSH2 0x8B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x98F DUP3 DUP3 PUSH2 0x948 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x9AF JUMPI PUSH2 0x9AE PUSH2 0x919 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9E0 JUMPI PUSH2 0x9DF PUSH2 0x9C5 JUMP JUMPDEST JUMPDEST PUSH2 0x9EA PUSH1 0x40 PUSH2 0x979 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9FA DUP5 DUP3 DUP6 ADD PUSH2 0x8EE JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0xA0E DUP5 DUP3 DUP6 ADD PUSH2 0x8EE JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA2D PUSH2 0xA28 DUP5 PUSH2 0x994 JUMP JUMPDEST PUSH2 0x979 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0xA50 JUMPI PUSH2 0xA4F PUSH2 0x9C0 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA79 JUMPI DUP1 PUSH2 0xA65 DUP9 DUP3 PUSH2 0x9CA JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0xA52 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA98 JUMPI PUSH2 0xA97 PUSH2 0x903 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAA8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xA1A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAC8 JUMPI PUSH2 0xAC7 PUSH2 0x8C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAD6 DUP6 DUP3 DUP7 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAF7 JUMPI PUSH2 0xAF6 PUSH2 0x8C8 JUMP JUMPDEST JUMPDEST PUSH2 0xB03 DUP6 DUP3 DUP7 ADD PUSH2 0xA83 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB38 DUP3 PUSH2 0xB0D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB48 DUP2 PUSH2 0xB2D JUMP JUMPDEST DUP2 EQ PUSH2 0xB53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB65 DUP2 PUSH2 0xB3F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB82 JUMPI PUSH2 0xB81 PUSH2 0x8C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB90 DUP6 DUP3 DUP7 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBA1 DUP6 DUP3 DUP7 ADD PUSH2 0xB56 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBC8 DUP2 PUSH2 0xBAB JUMP JUMPDEST DUP2 EQ PUSH2 0xBD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBE5 DUP2 PUSH2 0xBBF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC04 JUMPI PUSH2 0xC03 PUSH2 0x8C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC12 DUP7 DUP3 DUP8 ADD PUSH2 0xBD6 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC23 DUP7 DUP3 DUP8 ADD PUSH2 0xBD6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xC34 DUP7 DUP3 DUP8 ADD PUSH2 0xBD6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xC47 DUP2 PUSH2 0xB2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC62 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC3E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC7D DUP2 PUSH2 0xC68 JUMP JUMPDEST DUP2 EQ PUSH2 0xC88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xC9A DUP2 PUSH2 0xC74 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCB9 JUMPI PUSH2 0xCB8 PUSH2 0x8C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCC7 DUP7 DUP3 DUP8 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCD8 DUP7 DUP3 DUP8 ADD PUSH2 0xB56 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCE9 DUP7 DUP3 DUP8 ADD PUSH2 0xC8B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD09 JUMPI PUSH2 0xD08 PUSH2 0x8C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD17 DUP5 DUP3 DUP6 ADD PUSH2 0xB56 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xD58 DUP2 PUSH2 0xBAB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xD73 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xD4F JUMP JUMPDEST PUSH2 0xD80 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xD4F JUMP JUMPDEST PUSH2 0xD8D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xD4F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xD9E DUP2 PUSH2 0x8CD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDB9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD95 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDC8 DUP2 PUSH2 0xC68 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xDE3 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xD95 JUMP JUMPDEST PUSH2 0xDF0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xC3E JUMP JUMPDEST PUSH2 0xDFD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xDBF JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE72 PUSH1 0x26 DUP4 PUSH2 0xE05 JUMP JUMPDEST SWAP2 POP PUSH2 0xE7D DUP3 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEA1 DUP2 PUSH2 0xE65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEDE PUSH1 0x20 DUP4 PUSH2 0xE05 JUMP JUMPDEST SWAP2 POP PUSH2 0xEE9 DUP3 PUSH2 0xEA8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF0D DUP2 PUSH2 0xED1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP 0x24 MSTORE8 0xE6 SLT 0xEA LOG3 ORIGIN PUSH29 0xEA009E9CD752F5207119C8440016E3D82C8D4C648E491164736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"139:3401:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2270:500;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3214:323;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2064:101:0;;;:::i;:::-;;2776:432:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1441:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1881:383:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2314:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2270:500:17;1334:13:0;:11;:13::i;:::-;2387:14:17::1;2404:12;:19;2387:36;;2438:6;2433:331;2454:6;2450:1;:10;2433:331;;;2478:21;:31;2500:8;2478:31;;;;;;;;;;;2515:12;2528:1;2515:15;;;;;;;;:::i;:::-;;;;;;;;2478:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2597:97;;;;;;;;2639:12;2652:1;2639:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2597:97;;;;2671:8;2597:97;;::::0;2545:27:::1;:49;2573:12;2586:1;2573:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2545:49;;;;;;;;;;;:149;;;;;;;;;;;;;;;;;;;2736:3;;;;;;;2433:331;;;;2376:394;2270:500:::0;;:::o;3214:323::-;1334:13:0;:11;:13::i;:::-;3321:1:17::1;3304:19;;:5;:19;;::::0;3300:50:::1;;3332:18;;;;;;;;;;;;;;3300:50;3364:13;:4;:13:::0;3360:39:::1;;3394:5;3379:12;;:20;;;;;;;;;;;;;;;;;;3360:39;3413:20;:4;:20:::0;3409:121:::1;;3458:5;3435:20;;:28;;;;;;;;;;;;;;;;;;3409:121;;;3482:15;:4;:15:::0;3478:52:::1;;3525:5;3499:23;;:31;;;;;;;;;;;;;;;;;;3478:52;3409:121;3214:323:::0;;:::o;2064:101:0:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;2776:432:17:-;1334:13:0;:11;:13::i;:::-;2950:19:17::1;2929:18;;:40;;;;;;;;;;;;;;;;;;3008:24;2979:26;;:53;;;;;;;;;;;;;;;;;;3073:26;3042:28;;:57;;;;;;;;;;;;;;;;;;3114:87;3127:19;3148:24;3174:26;3114:87;;;;;;;;:::i;:::-;;;;;;;;2776:432:::0;;;:::o;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;1881:383:17:-;1334:13:0;:11;:13::i;:::-;2001:1:17::1;1984:19;;:5;:19;;::::0;1980:50:::1;;2012:18;;;;;;;;;;;;;;1980:50;2044:15;:4;:15:::0;2040:54:::1;;2088:6;2061:17;:24;2079:5;2061:24;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;2040:54;2108:19;:4;:19:::0;2104:99:::1;;2153:6;2129:14;:21;2144:5;2129:21;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;2104:99;;;2198:4;2181:22;;;;;;;;;;;:::i;:::-;;;;;;;;2104:99;2218:39;2237:4;2243:5;2250:6;2218:39;;;;;;;;:::i;:::-;;;;;;;;1881:383:::0;;;:::o;2314:198:0:-;1334:13;:11;:13::i;:::-;2422:1:::1;2402:22;;:8;:22;;::::0;2394:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;1599:130::-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;2666:187::-;2739:16;2758:6;;;;;;;;;;;2739:25;;2783:8;2774:6;;:17;;;;;;;;;;;;;;;;;;2837:8;2806:40;;2827:8;2806:40;;;;;;;;;;;;2729:124;2666:187;:::o;850:96:7:-;903:7;929:10;922:17;;850:96;:::o;7:75:23:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:117::-;799:1;796;789:12;813:102;854:6;905:2;901:7;896:2;889:5;885:14;881:28;871:38;;813:102;;;:::o;921:180::-;969:77;966:1;959:88;1066:4;1063:1;1056:15;1090:4;1087:1;1080:15;1107:281;1190:27;1212:4;1190:27;:::i;:::-;1182:6;1178:40;1320:6;1308:10;1305:22;1284:18;1272:10;1269:34;1266:62;1263:88;;;1331:18;;:::i;:::-;1263:88;1371:10;1367:2;1360:22;1150:238;1107:281;;:::o;1394:129::-;1428:6;1455:20;;:::i;:::-;1445:30;;1484:33;1512:4;1504:6;1484:33;:::i;:::-;1394:129;;;:::o;1529:340::-;1635:4;1725:18;1717:6;1714:30;1711:56;;;1747:18;;:::i;:::-;1711:56;1797:4;1789:6;1785:17;1777:25;;1857:4;1851;1847:15;1839:23;;1529:340;;;:::o;1875:117::-;1984:1;1981;1974:12;1998:117;2107:1;2104;2097:12;2293:578;2371:5;2415:4;2403:9;2398:3;2394:19;2390:30;2387:117;;;2423:79;;:::i;:::-;2387:117;2522:21;2538:4;2522:21;:::i;:::-;2513:30;;2602:1;2642:49;2687:3;2678:6;2667:9;2663:22;2642:49;:::i;:::-;2635:4;2628:5;2624:16;2617:75;2553:150;2762:2;2803:49;2848:3;2839:6;2828:9;2824:22;2803:49;:::i;:::-;2796:4;2789:5;2785:16;2778:75;2713:151;2293:578;;;;:::o;2928:797::-;3053:5;3078:110;3094:93;3180:6;3094:93;:::i;:::-;3078:110;:::i;:::-;3069:119;;3208:5;3237:6;3230:5;3223:21;3271:4;3264:5;3260:16;3253:23;;3324:4;3316:6;3312:17;3304:6;3300:30;3353:3;3345:6;3342:15;3339:122;;;3372:79;;:::i;:::-;3339:122;3487:6;3470:249;3504:6;3499:3;3496:15;3470:249;;;3579:3;3608:66;3670:3;3658:10;3608:66;:::i;:::-;3603:3;3596:79;3704:4;3699:3;3695:14;3688:21;;3546:173;3530:4;3525:3;3521:14;3514:21;;3470:249;;;3474:21;3059:666;;2928:797;;;;;:::o;3782:428::-;3882:5;3931:3;3924:4;3916:6;3912:17;3908:27;3898:122;;3939:79;;:::i;:::-;3898:122;4056:6;4043:20;4081:123;4200:3;4192:6;4185:4;4177:6;4173:17;4081:123;:::i;:::-;4072:132;;3888:322;3782:428;;;;:::o;4216:742::-;4338:6;4346;4395:2;4383:9;4374:7;4370:23;4366:32;4363:119;;;4401:79;;:::i;:::-;4363:119;4521:1;4546:53;4591:7;4582:6;4571:9;4567:22;4546:53;:::i;:::-;4536:63;;4492:117;4676:2;4665:9;4661:18;4648:32;4707:18;4699:6;4696:30;4693:117;;;4729:79;;:::i;:::-;4693:117;4834:107;4933:7;4924:6;4913:9;4909:22;4834:107;:::i;:::-;4824:117;;4619:332;4216:742;;;;;:::o;4964:126::-;5001:7;5041:42;5034:5;5030:54;5019:65;;4964:126;;;:::o;5096:96::-;5133:7;5162:24;5180:5;5162:24;:::i;:::-;5151:35;;5096:96;;;:::o;5198:122::-;5271:24;5289:5;5271:24;:::i;:::-;5264:5;5261:35;5251:63;;5310:1;5307;5300:12;5251:63;5198:122;:::o;5326:139::-;5372:5;5410:6;5397:20;5388:29;;5426:33;5453:5;5426:33;:::i;:::-;5326:139;;;;:::o;5471:474::-;5539:6;5547;5596:2;5584:9;5575:7;5571:23;5567:32;5564:119;;;5602:79;;:::i;:::-;5564:119;5722:1;5747:53;5792:7;5783:6;5772:9;5768:22;5747:53;:::i;:::-;5737:63;;5693:117;5849:2;5875:53;5920:7;5911:6;5900:9;5896:22;5875:53;:::i;:::-;5865:63;;5820:118;5471:474;;;;;:::o;5951:101::-;5987:7;6027:18;6020:5;6016:30;6005:41;;5951:101;;;:::o;6058:120::-;6130:23;6147:5;6130:23;:::i;:::-;6123:5;6120:34;6110:62;;6168:1;6165;6158:12;6110:62;6058:120;:::o;6184:137::-;6229:5;6267:6;6254:20;6245:29;;6283:32;6309:5;6283:32;:::i;:::-;6184:137;;;;:::o;6327:613::-;6401:6;6409;6417;6466:2;6454:9;6445:7;6441:23;6437:32;6434:119;;;6472:79;;:::i;:::-;6434:119;6592:1;6617:52;6661:7;6652:6;6641:9;6637:22;6617:52;:::i;:::-;6607:62;;6563:116;6718:2;6744:52;6788:7;6779:6;6768:9;6764:22;6744:52;:::i;:::-;6734:62;;6689:117;6845:2;6871:52;6915:7;6906:6;6895:9;6891:22;6871:52;:::i;:::-;6861:62;;6816:117;6327:613;;;;;:::o;6946:118::-;7033:24;7051:5;7033:24;:::i;:::-;7028:3;7021:37;6946:118;;:::o;7070:222::-;7163:4;7201:2;7190:9;7186:18;7178:26;;7214:71;7282:1;7271:9;7267:17;7258:6;7214:71;:::i;:::-;7070:222;;;;:::o;7298:90::-;7332:7;7375:5;7368:13;7361:21;7350:32;;7298:90;;;:::o;7394:116::-;7464:21;7479:5;7464:21;:::i;:::-;7457:5;7454:32;7444:60;;7500:1;7497;7490:12;7444:60;7394:116;:::o;7516:133::-;7559:5;7597:6;7584:20;7575:29;;7613:30;7637:5;7613:30;:::i;:::-;7516:133;;;;:::o;7655:613::-;7729:6;7737;7745;7794:2;7782:9;7773:7;7769:23;7765:32;7762:119;;;7800:79;;:::i;:::-;7762:119;7920:1;7945:53;7990:7;7981:6;7970:9;7966:22;7945:53;:::i;:::-;7935:63;;7891:117;8047:2;8073:53;8118:7;8109:6;8098:9;8094:22;8073:53;:::i;:::-;8063:63;;8018:118;8175:2;8201:50;8243:7;8234:6;8223:9;8219:22;8201:50;:::i;:::-;8191:60;;8146:115;7655:613;;;;;:::o;8274:329::-;8333:6;8382:2;8370:9;8361:7;8357:23;8353:32;8350:119;;;8388:79;;:::i;:::-;8350:119;8508:1;8533:53;8578:7;8569:6;8558:9;8554:22;8533:53;:::i;:::-;8523:63;;8479:117;8274:329;;;;:::o;8609:180::-;8657:77;8654:1;8647:88;8754:4;8751:1;8744:15;8778:4;8775:1;8768:15;8795:115;8880:23;8897:5;8880:23;:::i;:::-;8875:3;8868:36;8795:115;;:::o;8916:430::-;9059:4;9097:2;9086:9;9082:18;9074:26;;9110:69;9176:1;9165:9;9161:17;9152:6;9110:69;:::i;:::-;9189:70;9255:2;9244:9;9240:18;9231:6;9189:70;:::i;:::-;9269;9335:2;9324:9;9320:18;9311:6;9269:70;:::i;:::-;8916:430;;;;;;:::o;9352:118::-;9439:24;9457:5;9439:24;:::i;:::-;9434:3;9427:37;9352:118;;:::o;9476:222::-;9569:4;9607:2;9596:9;9592:18;9584:26;;9620:71;9688:1;9677:9;9673:17;9664:6;9620:71;:::i;:::-;9476:222;;;;:::o;9704:109::-;9785:21;9800:5;9785:21;:::i;:::-;9780:3;9773:34;9704:109;;:::o;9819:430::-;9962:4;10000:2;9989:9;9985:18;9977:26;;10013:71;10081:1;10070:9;10066:17;10057:6;10013:71;:::i;:::-;10094:72;10162:2;10151:9;10147:18;10138:6;10094:72;:::i;:::-;10176:66;10238:2;10227:9;10223:18;10214:6;10176:66;:::i;:::-;9819:430;;;;;;:::o;10255:169::-;10339:11;10373:6;10368:3;10361:19;10413:4;10408:3;10404:14;10389:29;;10255:169;;;;:::o;10430:225::-;10570:34;10566:1;10558:6;10554:14;10547:58;10639:8;10634:2;10626:6;10622:15;10615:33;10430:225;:::o;10661:366::-;10803:3;10824:67;10888:2;10883:3;10824:67;:::i;:::-;10817:74;;10900:93;10989:3;10900:93;:::i;:::-;11018:2;11013:3;11009:12;11002:19;;10661:366;;;:::o;11033:419::-;11199:4;11237:2;11226:9;11222:18;11214:26;;11286:9;11280:4;11276:20;11272:1;11261:9;11257:17;11250:47;11314:131;11440:4;11314:131;:::i;:::-;11306:139;;11033:419;;;:::o;11458:182::-;11598:34;11594:1;11586:6;11582:14;11575:58;11458:182;:::o;11646:366::-;11788:3;11809:67;11873:2;11868:3;11809:67;:::i;:::-;11802:74;;11885:93;11974:3;11885:93;:::i;:::-;12003:2;11998:3;11994:12;11987:19;;11646:366;;;:::o;12018:419::-;12184:4;12222:2;12211:9;12207:18;12199:26;;12271:9;12265:4;12261:20;12257:1;12246:9;12242:17;12235:47;12299:131;12425:4;12299:131;:::i;:::-;12291:139;;12018:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"782800","executionCost":"95825","totalCost":"878625"},"external":{"owner()":"2544","renounceOwnership()":"30443","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"infinite","settingManagerBool(bytes32,address,bool)":"infinite","transferOwnership(address)":"30810","updateFeeRecipient(bytes32,address)":"51554","updateProtocolFees(uint64,uint64,uint64)":"infinite"}},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"32200882","settingManagerBool(bytes32,address,bool)":"99e3c0b4","transferOwnership(address)":"f2fde38b","updateFeeRecipient(bytes32,address)":"3d8f8fb2","updateProtocolFees(uint64,uint64,uint64)":"764bc355"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"}],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"primaryValidator\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"secondaryValidator\",\"type\":\"uint64\"}],\"name\":\"PaycrestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"value\",\"type\":\"bytes8\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"status\",\"type\":\"bytes8\"}],\"name\":\"SettingManagerForInstitution\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_primaryValidatorPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondaryValidatorPercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AmountIsZero()\":[{\"notice\":\"Revert when input amount is zero\"}],\"InvalidParameter(bytes32)\":[{\"notice\":\"Revert when zero address is passed in\"}],\"ThrowZeroAddress()\":[{\"notice\":\"Revert when zero address is passed in\"}],\"ThrowZeroValue()\":[{\"notice\":\"Revert when zero address is passed in\"}],\"TokenNotSupported()\":[{\"notice\":\"Revert when invalid token is provided\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaycrestSettingManager.sol\":\"PaycrestSettingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    struct Institution {\\n        bytes32 code; // usually not more than 8 letters\\n        bytes32 name; // \\n    }\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n    uint256 internal MAX_BPS = 100_000;\\n    uint64 internal protocolFeePercent = 5000; // 5%\\n    uint64 internal primaryValidatorFeePercent = 500; // 0.5%\\n    uint64 internal secondaryValidatorFeePercent = 500; // 0.5%\\n    address internal feeRecipient;\\n    address internal PaycrestStakingContract;\\n    address internal _liquidityAggregator;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n    mapping(address => bool) internal _isWhitelisted;\\n\\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    /// @notice Revert when zero address is passed in\\n    error ThrowZeroAddress();\\n    /// @notice Revert when zero address is passed in\\n    error ThrowZeroValue();\\n    /// @notice Revert when zero address is passed in\\n    error InvalidParameter(bytes32 what);\\n    /// @notice Revert when invalid token is provided\\n    error TokenNotSupported();\\n    /// @notice Revert when input amount is zero\\n    error AmountIsZero();\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status);\\n    event PaycrestFees(uint64 protocolFee, uint64 primaryValidator, uint64 secondaryValidator);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        if (value == address(0)) revert ThrowZeroAddress();\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n        if (what == \\\"whitelist\\\") _isWhitelisted[value] = status;\\n        else revert InvalidParameter(what);\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function updateProtocolFees(uint64 _protocolFeePercent, uint64 _primaryValidatorPercent, uint64 _secondaryValidatorPercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        primaryValidatorFeePercent = _primaryValidatorPercent;\\n        secondaryValidatorFeePercent = _secondaryValidatorPercent;\\n        emit PaycrestFees(_protocolFeePercent, _primaryValidatorPercent, _secondaryValidatorPercent);\\n    }\\n\\n    function updateFeeRecipient(bytes32 what, address value) external onlyOwner {\\n        if (value == address(0)) revert ThrowZeroAddress();\\n        if (what == \\\"fee\\\") feeRecipient = value;\\n        if (what == \\\"aggregator\\\") _liquidityAggregator = value;\\n        else if (what == \\\"stake\\\") PaycrestStakingContract = value;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x994730755637e5a55163a87738b7197715d471e7edcd2776cda604bbf83b2ab8\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1245,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":4251,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"MAX_BPS","offset":0,"slot":"101","type":"t_uint256"},{"astId":4254,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"protocolFeePercent","offset":0,"slot":"102","type":"t_uint64"},{"astId":4257,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"primaryValidatorFeePercent","offset":8,"slot":"102","type":"t_uint64"},{"astId":4260,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"secondaryValidatorFeePercent","offset":16,"slot":"102","type":"t_uint64"},{"astId":4262,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"feeRecipient","offset":0,"slot":"103","type":"t_address"},{"astId":4264,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"PaycrestStakingContract","offset":0,"slot":"104","type":"t_address"},{"astId":4266,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_liquidityAggregator","offset":0,"slot":"105","type":"t_address"},{"astId":4270,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_isTokenSupported","offset":0,"slot":"106","type":"t_mapping(t_address,t_bool)"},{"astId":4274,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_isWhitelisted","offset":0,"slot":"107","type":"t_mapping(t_address,t_bool)"},{"astId":4280,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"supportedInstitutions","offset":0,"slot":"108","type":"t_mapping(t_bytes32,t_array(t_struct(Institution)4243_storage)dyn_storage)"},{"astId":4285,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"supportedInstitutionsByCode","offset":0,"slot":"109","type":"t_mapping(t_bytes32,t_struct(InstitutionByCode)4248_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Institution)4243_storage)dyn_storage":{"base":"t_struct(Institution)4243_storage","encoding":"dynamic_array","label":"struct PaycrestSettingManager.Institution[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_array(t_struct(Institution)4243_storage)dyn_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])","numberOfBytes":"32","value":"t_array(t_struct(Institution)4243_storage)dyn_storage"},"t_mapping(t_bytes32,t_struct(InstitutionByCode)4248_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)","numberOfBytes":"32","value":"t_struct(InstitutionByCode)4248_storage"},"t_struct(Institution)4243_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.Institution","members":[{"astId":4240,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"code","offset":0,"slot":"0","type":"t_bytes32"},{"astId":4242,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"name","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(InstitutionByCode)4248_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.InstitutionByCode","members":[{"astId":4245,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":4247,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"currency","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"errors":{"AmountIsZero()":[{"notice":"Revert when input amount is zero"}],"InvalidParameter(bytes32)":[{"notice":"Revert when zero address is passed in"}],"ThrowZeroAddress()":[{"notice":"Revert when zero address is passed in"}],"ThrowZeroValue()":[{"notice":"Revert when zero address is passed in"}],"TokenNotSupported()":[{"notice":"Revert when invalid token is provided"}]},"kind":"user","methods":{},"version":1}}},"contracts/PaycrestValidator.sol":{"PaycrestValidator":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"Insufficient","type":"error"},{"inputs":[],"name":"MinimumRequired","type":"error"},{"inputs":[],"name":"ThrowInitPaused","type":"error"},{"inputs":[],"name":"ThrowPaycrest","type":"error"},{"inputs":[],"name":"TokenNotSupported","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"status","type":"bool"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"minimumStakeAmount","type":"uint256"}],"name":"NewTokenSupported","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"validator","type":"address"},{"indexed":true,"internalType":"uint256","name":"validatorsReward","type":"uint256"}],"name":"RewardValidators","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"getInitializationState","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getMinimumAmountRequiredFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaycrest","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"}],"name":"getValidatorInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_paycrest","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"status","type":"bool"}],"name":"initialized","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"orderId","type":"bytes32"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"primaryValidator","type":"address"},{"internalType":"address[]","name":"secondaryValidators","type":"address[]"},{"internalType":"uint256","name":"primaryValidatorsReward","type":"uint256"},{"internalType":"uint256","name":"secondaryValidatorsReward","type":"uint256"}],"name":"rewardValidators","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"minimumStakeAmount","type":"uint256"}],"name":"setMinimumAmountForTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"stake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4543":{"entryPoint":null,"id":4543,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_281":{"entryPoint":40,"id":281,"parameterSlots":0,"returnSlots":0},"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack":{"entryPoint":334,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":420,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":373,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":437,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":238,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":407,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a":{"entryPoint":255,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1638:23","statements":[{"body":{"nodeType":"YulBlock","src":"103:73:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"120:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"125:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"113:6:23"},"nodeType":"YulFunctionCall","src":"113:19:23"},"nodeType":"YulExpressionStatement","src":"113:19:23"},{"nodeType":"YulAssignment","src":"141:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"160:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"165:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"156:3:23"},"nodeType":"YulFunctionCall","src":"156:14:23"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"141:11:23"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"75:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:23","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"91:11:23","type":""}],"src":"7:169:23"},{"body":{"nodeType":"YulBlock","src":"288:120:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"310:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"318:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"306:3:23"},"nodeType":"YulFunctionCall","src":"306:14:23"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"322:34:23","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"299:6:23"},"nodeType":"YulFunctionCall","src":"299:58:23"},"nodeType":"YulExpressionStatement","src":"299:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"378:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"386:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"374:3:23"},"nodeType":"YulFunctionCall","src":"374:15:23"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"391:9:23","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"367:6:23"},"nodeType":"YulFunctionCall","src":"367:34:23"},"nodeType":"YulExpressionStatement","src":"367:34:23"}]},"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"280:6:23","type":""}],"src":"182:226:23"},{"body":{"nodeType":"YulBlock","src":"560:220:23","statements":[{"nodeType":"YulAssignment","src":"570:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"636:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"641:2:23","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"577:58:23"},"nodeType":"YulFunctionCall","src":"577:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"570:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"742:3:23"}],"functionName":{"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulIdentifier","src":"653:88:23"},"nodeType":"YulFunctionCall","src":"653:93:23"},"nodeType":"YulExpressionStatement","src":"653:93:23"},{"nodeType":"YulAssignment","src":"755:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"766:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"771:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:23"},"nodeType":"YulFunctionCall","src":"762:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"755:3:23"}]}]},"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"548:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"556:3:23","type":""}],"src":"414:366:23"},{"body":{"nodeType":"YulBlock","src":"957:248:23","statements":[{"nodeType":"YulAssignment","src":"967:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"979:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"990:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"975:3:23"},"nodeType":"YulFunctionCall","src":"975:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"967:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1014:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1025:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1010:3:23"},"nodeType":"YulFunctionCall","src":"1010:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1033:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1039:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1029:3:23"},"nodeType":"YulFunctionCall","src":"1029:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1003:6:23"},"nodeType":"YulFunctionCall","src":"1003:47:23"},"nodeType":"YulExpressionStatement","src":"1003:47:23"},{"nodeType":"YulAssignment","src":"1059:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1193:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1067:124:23"},"nodeType":"YulFunctionCall","src":"1067:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1059:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"937:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"952:4:23","type":""}],"src":"786:419:23"},{"body":{"nodeType":"YulBlock","src":"1254:43:23","statements":[{"nodeType":"YulAssignment","src":"1264:27:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1279:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"1286:4:23","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1275:3:23"},"nodeType":"YulFunctionCall","src":"1275:16:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1264:7:23"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1236:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1246:7:23","type":""}],"src":"1211:86:23"},{"body":{"nodeType":"YulBlock","src":"1364:51:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1381:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1402:5:23"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"1386:15:23"},"nodeType":"YulFunctionCall","src":"1386:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1374:6:23"},"nodeType":"YulFunctionCall","src":"1374:35:23"},"nodeType":"YulExpressionStatement","src":"1374:35:23"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1352:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1359:3:23","type":""}],"src":"1303:112:23"},{"body":{"nodeType":"YulBlock","src":"1515:120:23","statements":[{"nodeType":"YulAssignment","src":"1525:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1537:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1548:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:23"},"nodeType":"YulFunctionCall","src":"1533:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1525:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1601:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1614:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1625:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1610:3:23"},"nodeType":"YulFunctionCall","src":"1610:17:23"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"1561:39:23"},"nodeType":"YulFunctionCall","src":"1561:67:23"},"nodeType":"YulExpressionStatement","src":"1561:67:23"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1487:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1499:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1510:4:23","type":""}],"src":"1421:214:23"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is initi\")\n\n        mstore(add(memPtr, 32), \"alizing\")\n\n    }\n\n    function abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":23,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b611d0a80620001e26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063c4a0bb071161008c578063c5923aaf11610066578063c5923aaf146101d8578063e74599f314610208578063f239c62614610238578063f2fde38b14610254576100cf565b8063c4a0bb0714610182578063c4d66de81461019e578063c56f80c1146101ba576100cf565b80634a223c36146100d4578063715018a6146101045780638da5cb5b1461010e578063adc9772e1461012c578063b460af9414610148578063c2b4610b14610164575b600080fd5b6100ee60048036038101906100e991906114b4565b610270565b6040516100fb9190611578565b60405180910390f35b61010c610534565b005b610116610548565b60405161012391906115a2565b60405180910390f35b610146600480360381019061014191906115bd565b610572565b005b610162600480360381019061015d91906115fd565b6107cc565b005b61016c6109f3565b6040516101799190611578565b60405180910390f35b61019c6004803603810190610197919061167c565b610a0a565b005b6101b860048036038101906101b391906116a9565b610a5e565b005b6101c2610c01565b6040516101cf91906115a2565b60405180910390f35b6101f260048036038101906101ed91906116d6565b610c2b565b6040516101ff9190611725565b60405180910390f35b610222600480360381019061021d91906116a9565b610cb2565b60405161022f9190611725565b60405180910390f35b610252600480360381019061024d91906115bd565b610cfb565b005b61026e600480360381019061026991906116a9565b610d8f565b005b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102f9576040517f1db1ec8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000845190506000818461030d919061179e565b905060005b8281101561043f578160996000898481518110610332576103316117cf565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103c091906117fe565b92505081905550818782815181106103db576103da6117cf565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f11ff273d7118e74553c17c252f7ca4a9c4bc57aa9939391776a348e5b388f6f78c8c60405161042a929190611841565b60405180910390a38080600101915050610312565b5084609960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104cc91906117fe565b92505081905550848773ffffffffffffffffffffffffffffffffffffffff167f11ff273d7118e74553c17c252f7ca4a9c4bc57aa9939391776a348e5b388f6f78b8b60405161051c929190611841565b60405180910390a36001925050509695505050505050565b61053c610e12565b6105466000610e90565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b609760149054906101000a900460ff166105b8576040517f5179f46700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105c182610f56565b6105f7576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811015610670576040517f0eed1a4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016106ad9392919061186a565b6020604051808303816000875af11580156106cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f091906118b6565b5080609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461077d91906117fe565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a35050565b6107d461108d565b6000609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508084111561088f576040517f1dc930eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461091b91906118e3565b925050819055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83866040518363ffffffff1660e01b815260040161095d929190611917565b6020604051808303816000875af115801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a091906118b6565b50833373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d560405160405180910390a3506109ee6110dc565b505050565b6000609760149054906101000a900460ff16905090565b610a12610e12565b80609760146101000a81548160ff0219169083151502179055508015157fdebf9dd297d3980055770d6c047a67eed8f6b1e91397831703b5f2a73bec132060405160405180910390a250565b60008060019054906101000a900460ff16159050808015610a8f5750600160008054906101000a900460ff1660ff16105b80610abc5750610a9e306110e6565b158015610abb5750600160008054906101000a900460ff1660ff16145b5b610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af2906119c3565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b38576001600060016101000a81548160ff0219169083151502179055505b81609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001609760146101000a81548160ff021916908315150217905550610b9c611109565b610ba4611162565b8015610bfd5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610bf49190611a35565b60405180910390a15b5050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d03610e12565b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808273ffffffffffffffffffffffffffffffffffffffff167fd0380f7d3d322fabf37539b9c6b985c069348a14121a426f3cceb8b5a93cd9ab60405160405180910390a35050565b610d97610e12565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfd90611ac2565b60405180910390fd5b610e0f81610e90565b50565b610e1a6111bb565b73ffffffffffffffffffffffffffffffffffffffff16610e38610548565b73ffffffffffffffffffffffffffffffffffffffff1614610e8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8590611b2e565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051602401610fa391906115a2565b6040516020818303038152906040527f75151b63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161102d9190611bbf565b600060405180830381855afa9150503d8060008114611068576040519150601f19603f3d011682016040523d82523d6000602084013e61106d565b606091505b509150508080602001905181019061108591906118b6565b915050919050565b6002606554036110d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c990611c22565b60405180910390fd5b6002606581905550565b6001606581905550565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114f90611cb4565b60405180910390fd5b6111606111c3565b565b600060019054906101000a900460ff166111b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a890611cb4565b60405180910390fd5b6111b9611224565b565b600033905090565b600060019054906101000a900460ff16611212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120990611cb4565b60405180910390fd5b61122261121d6111bb565b610e90565b565b600060019054906101000a900460ff16611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126a90611cb4565b60405180910390fd5b6001606581905550565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6112a481611291565b81146112af57600080fd5b50565b6000813590506112c18161129b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112f2826112c7565b9050919050565b611302816112e7565b811461130d57600080fd5b50565b60008135905061131f816112f9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113738261132a565b810181811067ffffffffffffffff821117156113925761139161133b565b5b80604052505050565b60006113a561127d565b90506113b1828261136a565b919050565b600067ffffffffffffffff8211156113d1576113d061133b565b5b602082029050602081019050919050565b600080fd5b60006113fa6113f5846113b6565b61139b565b9050808382526020820190506020840283018581111561141d5761141c6113e2565b5b835b8181101561144657806114328882611310565b84526020840193505060208101905061141f565b5050509392505050565b600082601f83011261146557611464611325565b5b81356114758482602086016113e7565b91505092915050565b6000819050919050565b6114918161147e565b811461149c57600080fd5b50565b6000813590506114ae81611488565b92915050565b60008060008060008060c087890312156114d1576114d0611287565b5b60006114df89828a016112b2565b96505060206114f089828a01611310565b955050604061150189828a01611310565b945050606087013567ffffffffffffffff8111156115225761152161128c565b5b61152e89828a01611450565b935050608061153f89828a0161149f565b92505060a061155089828a0161149f565b9150509295509295509295565b60008115159050919050565b6115728161155d565b82525050565b600060208201905061158d6000830184611569565b92915050565b61159c816112e7565b82525050565b60006020820190506115b76000830184611593565b92915050565b600080604083850312156115d4576115d3611287565b5b60006115e285828601611310565b92505060206115f38582860161149f565b9150509250929050565b60008060006060848603121561161657611615611287565b5b60006116248682870161149f565b935050602061163586828701611310565b925050604061164686828701611310565b9150509250925092565b6116598161155d565b811461166457600080fd5b50565b60008135905061167681611650565b92915050565b60006020828403121561169257611691611287565b5b60006116a084828501611667565b91505092915050565b6000602082840312156116bf576116be611287565b5b60006116cd84828501611310565b91505092915050565b600080604083850312156116ed576116ec611287565b5b60006116fb85828601611310565b925050602061170c85828601611310565b9150509250929050565b61171f8161147e565b82525050565b600060208201905061173a6000830184611716565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006117a98261147e565b91506117b48361147e565b9250826117c4576117c3611740565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006118098261147e565b91506118148361147e565b925082820190508082111561182c5761182b61176f565b5b92915050565b61183b81611291565b82525050565b60006040820190506118566000830185611832565b6118636020830184611593565b9392505050565b600060608201905061187f6000830186611593565b61188c6020830185611593565b6118996040830184611716565b949350505050565b6000815190506118b081611650565b92915050565b6000602082840312156118cc576118cb611287565b5b60006118da848285016118a1565b91505092915050565b60006118ee8261147e565b91506118f98361147e565b92508282039050818111156119115761191061176f565b5b92915050565b600060408201905061192c6000830185611593565b6119396020830184611716565b9392505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006119ad602e83611940565b91506119b882611951565b604082019050919050565b600060208201905081810360008301526119dc816119a0565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611a1f611a1a611a15846119e3565b6119fa565b6119ed565b9050919050565b611a2f81611a04565b82525050565b6000602082019050611a4a6000830184611a26565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611aac602683611940565b9150611ab782611a50565b604082019050919050565b60006020820190508181036000830152611adb81611a9f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611b18602083611940565b9150611b2382611ae2565b602082019050919050565b60006020820190508181036000830152611b4781611b0b565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611b82578082015181840152602081019050611b67565b60008484015250505050565b6000611b9982611b4e565b611ba38185611b59565b9350611bb3818560208601611b64565b80840191505092915050565b6000611bcb8284611b8e565b915081905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611c0c601f83611940565b9150611c1782611bd6565b602082019050919050565b60006020820190508181036000830152611c3b81611bff565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611c9e602b83611940565b9150611ca982611c42565b604082019050919050565b60006020820190508181036000830152611ccd81611c91565b905091905056fea264697066735822122093ebfce873937e7a13a77bf8c550a2de8c442df4c3ae20f8f10ae4ad9f1b93c064736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x22 PUSH3 0x28 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x72 SWAP1 PUSH3 0x175 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP1 AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH3 0xEC JUMPI PUSH1 0xFF PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH3 0xE3 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C697A696E6700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15D PUSH1 0x27 DUP4 PUSH3 0xEE JUMP JUMPDEST SWAP2 POP PUSH3 0x16A DUP3 PUSH3 0xFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x190 DUP2 PUSH3 0x14E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1AF DUP2 PUSH3 0x197 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x1CC PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1D0A DUP1 PUSH3 0x1E2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC4A0BB07 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC5923AAF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC5923AAF EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xE74599F3 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0xF239C626 EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x254 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0xC4A0BB07 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0xC56F80C1 EQ PUSH2 0x1BA JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x4A223C36 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0xADC9772E EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0xC2B4610B EQ PUSH2 0x164 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x14B4 JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1578 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x534 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x116 PUSH2 0x548 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x123 SWAP2 SWAP1 PUSH2 0x15A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x146 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x141 SWAP2 SWAP1 PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x572 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15D SWAP2 SWAP1 PUSH2 0x15FD JUMP JUMPDEST PUSH2 0x7CC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16C PUSH2 0x9F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP2 SWAP1 PUSH2 0x1578 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x197 SWAP2 SWAP1 PUSH2 0x167C JUMP JUMPDEST PUSH2 0xA0A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B3 SWAP2 SWAP1 PUSH2 0x16A9 JUMP JUMPDEST PUSH2 0xA5E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C2 PUSH2 0xC01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CF SWAP2 SWAP1 PUSH2 0x15A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1ED SWAP2 SWAP1 PUSH2 0x16D6 JUMP JUMPDEST PUSH2 0xC2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x1725 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x222 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21D SWAP2 SWAP1 PUSH2 0x16A9 JUMP JUMPDEST PUSH2 0xCB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x1725 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x252 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24D SWAP2 SWAP1 PUSH2 0x15BD JUMP JUMPDEST PUSH2 0xCFB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x26E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x269 SWAP2 SWAP1 PUSH2 0x16A9 JUMP JUMPDEST PUSH2 0xD8F JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1DB1EC8500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 MLOAD SWAP1 POP PUSH1 0x0 DUP2 DUP5 PUSH2 0x30D SWAP2 SWAP1 PUSH2 0x179E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x43F JUMPI DUP2 PUSH1 0x99 PUSH1 0x0 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x332 JUMPI PUSH2 0x331 PUSH2 0x17CF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3C0 SWAP2 SWAP1 PUSH2 0x17FE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3DB JUMPI PUSH2 0x3DA PUSH2 0x17CF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x11FF273D7118E74553C17C252F7CA4A9C4BC57AA9939391776A348E5B388F6F7 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH2 0x42A SWAP3 SWAP2 SWAP1 PUSH2 0x1841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x312 JUMP JUMPDEST POP DUP5 PUSH1 0x99 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4CC SWAP2 SWAP1 PUSH2 0x17FE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x11FF273D7118E74553C17C252F7CA4A9C4BC57AA9939391776A348E5B388F6F7 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH2 0x51C SWAP3 SWAP2 SWAP1 PUSH2 0x1841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP3 POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x53C PUSH2 0xE12 JUMP JUMPDEST PUSH2 0x546 PUSH1 0x0 PUSH2 0xE90 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x97 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x5B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5179F46700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5C1 DUP3 PUSH2 0xF56 JUMP JUMPDEST PUSH2 0x5F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3DD1B30500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x98 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x670 JUMPI PUSH1 0x40 MLOAD PUSH32 0xEED1A4700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6F0 SWAP2 SWAP1 PUSH2 0x18B6 JUMP JUMPDEST POP DUP1 PUSH1 0x99 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x77D SWAP2 SWAP1 PUSH2 0x17FE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x7D4 PUSH2 0x108D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x99 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x88F JUMPI PUSH1 0x40 MLOAD PUSH32 0x1DC930EB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x99 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x91B SWAP2 SWAP1 PUSH2 0x18E3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x95D SWAP3 SWAP2 SWAP1 PUSH2 0x1917 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x97C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9A0 SWAP2 SWAP1 PUSH2 0x18B6 JUMP JUMPDEST POP DUP4 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH2 0x9EE PUSH2 0x10DC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA12 PUSH2 0xE12 JUMP JUMPDEST DUP1 PUSH1 0x97 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 ISZERO ISZERO PUSH32 0xDEBF9DD297D3980055770D6C047A67EED8F6B1E91397831703B5F2A73BEC1320 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xA8F JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xABC JUMPI POP PUSH2 0xA9E ADDRESS PUSH2 0x10E6 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xABB JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xAFB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAF2 SWAP1 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xB38 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST DUP2 PUSH1 0x97 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x97 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xB9C PUSH2 0x1109 JUMP JUMPDEST PUSH2 0xBA4 PUSH2 0x1162 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBFD JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xBF4 SWAP2 SWAP1 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x99 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x98 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD03 PUSH2 0xE12 JUMP JUMPDEST DUP1 PUSH1 0x98 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD0380F7D3D322FABF37539B9C6B985C069348A14121A426F3CCEB8B5A93CD9AB PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xD97 PUSH2 0xE12 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDFD SWAP1 PUSH2 0x1AC2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE0F DUP2 PUSH2 0xE90 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xE1A PUSH2 0x11BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE38 PUSH2 0x548 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE85 SWAP1 PUSH2 0x1B2E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x97 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFA3 SWAP2 SWAP1 PUSH2 0x15A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0x75151B6300000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x102D SWAP2 SWAP1 PUSH2 0x1BBF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1068 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x106D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1085 SWAP2 SWAP1 PUSH2 0x18B6 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x65 SLOAD SUB PUSH2 0x10D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10C9 SWAP1 PUSH2 0x1C22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x65 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x65 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1158 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x114F SWAP1 PUSH2 0x1CB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1160 PUSH2 0x11C3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x11B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11A8 SWAP1 PUSH2 0x1CB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11B9 PUSH2 0x1224 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1212 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1209 SWAP1 PUSH2 0x1CB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1222 PUSH2 0x121D PUSH2 0x11BB JUMP JUMPDEST PUSH2 0xE90 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1273 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x126A SWAP1 PUSH2 0x1CB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x65 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12A4 DUP2 PUSH2 0x1291 JUMP JUMPDEST DUP2 EQ PUSH2 0x12AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x12C1 DUP2 PUSH2 0x129B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12F2 DUP3 PUSH2 0x12C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1302 DUP2 PUSH2 0x12E7 JUMP JUMPDEST DUP2 EQ PUSH2 0x130D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x131F DUP2 PUSH2 0x12F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1373 DUP3 PUSH2 0x132A JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1392 JUMPI PUSH2 0x1391 PUSH2 0x133B JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13A5 PUSH2 0x127D JUMP JUMPDEST SWAP1 POP PUSH2 0x13B1 DUP3 DUP3 PUSH2 0x136A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x13D1 JUMPI PUSH2 0x13D0 PUSH2 0x133B JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13FA PUSH2 0x13F5 DUP5 PUSH2 0x13B6 JUMP JUMPDEST PUSH2 0x139B JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x141D JUMPI PUSH2 0x141C PUSH2 0x13E2 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1446 JUMPI DUP1 PUSH2 0x1432 DUP9 DUP3 PUSH2 0x1310 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x141F JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1465 JUMPI PUSH2 0x1464 PUSH2 0x1325 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1475 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x13E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1491 DUP2 PUSH2 0x147E JUMP JUMPDEST DUP2 EQ PUSH2 0x149C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x14AE DUP2 PUSH2 0x1488 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x14D1 JUMPI PUSH2 0x14D0 PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x14DF DUP10 DUP3 DUP11 ADD PUSH2 0x12B2 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x14F0 DUP10 DUP3 DUP11 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x1501 DUP10 DUP3 DUP11 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1522 JUMPI PUSH2 0x1521 PUSH2 0x128C JUMP JUMPDEST JUMPDEST PUSH2 0x152E DUP10 DUP3 DUP11 ADD PUSH2 0x1450 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x153F DUP10 DUP3 DUP11 ADD PUSH2 0x149F JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x1550 DUP10 DUP3 DUP11 ADD PUSH2 0x149F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1572 DUP2 PUSH2 0x155D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x158D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1569 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x159C DUP2 PUSH2 0x12E7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x15B7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1593 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15D4 JUMPI PUSH2 0x15D3 PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x15E2 DUP6 DUP3 DUP7 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x15F3 DUP6 DUP3 DUP7 ADD PUSH2 0x149F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1616 JUMPI PUSH2 0x1615 PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1624 DUP7 DUP3 DUP8 ADD PUSH2 0x149F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1635 DUP7 DUP3 DUP8 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1646 DUP7 DUP3 DUP8 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x1659 DUP2 PUSH2 0x155D JUMP JUMPDEST DUP2 EQ PUSH2 0x1664 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1676 DUP2 PUSH2 0x1650 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1692 JUMPI PUSH2 0x1691 PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16A0 DUP5 DUP3 DUP6 ADD PUSH2 0x1667 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16BF JUMPI PUSH2 0x16BE PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16CD DUP5 DUP3 DUP6 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16ED JUMPI PUSH2 0x16EC PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16FB DUP6 DUP3 DUP7 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x170C DUP6 DUP3 DUP7 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x171F DUP2 PUSH2 0x147E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x173A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1716 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x17A9 DUP3 PUSH2 0x147E JUMP JUMPDEST SWAP2 POP PUSH2 0x17B4 DUP4 PUSH2 0x147E JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x17C4 JUMPI PUSH2 0x17C3 PUSH2 0x1740 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1809 DUP3 PUSH2 0x147E JUMP JUMPDEST SWAP2 POP PUSH2 0x1814 DUP4 PUSH2 0x147E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x182C JUMPI PUSH2 0x182B PUSH2 0x176F JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x183B DUP2 PUSH2 0x1291 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1856 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1832 JUMP JUMPDEST PUSH2 0x1863 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1593 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x187F PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1593 JUMP JUMPDEST PUSH2 0x188C PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1593 JUMP JUMPDEST PUSH2 0x1899 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1716 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x18B0 DUP2 PUSH2 0x1650 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18CC JUMPI PUSH2 0x18CB PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18DA DUP5 DUP3 DUP6 ADD PUSH2 0x18A1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18EE DUP3 PUSH2 0x147E JUMP JUMPDEST SWAP2 POP PUSH2 0x18F9 DUP4 PUSH2 0x147E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1911 JUMPI PUSH2 0x1910 PUSH2 0x176F JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x192C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1593 JUMP JUMPDEST PUSH2 0x1939 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1716 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19AD PUSH1 0x2E DUP4 PUSH2 0x1940 JUMP JUMPDEST SWAP2 POP PUSH2 0x19B8 DUP3 PUSH2 0x1951 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19DC DUP2 PUSH2 0x19A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A1F PUSH2 0x1A1A PUSH2 0x1A15 DUP5 PUSH2 0x19E3 JUMP JUMPDEST PUSH2 0x19FA JUMP JUMPDEST PUSH2 0x19ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A2F DUP2 PUSH2 0x1A04 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A4A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A26 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AAC PUSH1 0x26 DUP4 PUSH2 0x1940 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AB7 DUP3 PUSH2 0x1A50 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ADB DUP2 PUSH2 0x1A9F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B18 PUSH1 0x20 DUP4 PUSH2 0x1940 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B23 DUP3 PUSH2 0x1AE2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B47 DUP2 PUSH2 0x1B0B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B82 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1B67 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B99 DUP3 PUSH2 0x1B4E JUMP JUMPDEST PUSH2 0x1BA3 DUP2 DUP6 PUSH2 0x1B59 JUMP JUMPDEST SWAP4 POP PUSH2 0x1BB3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1B64 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BCB DUP3 DUP5 PUSH2 0x1B8E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0C PUSH1 0x1F DUP4 PUSH2 0x1940 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C17 DUP3 PUSH2 0x1BD6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C3B DUP2 PUSH2 0x1BFF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C9E PUSH1 0x2B DUP4 PUSH2 0x1940 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CA9 DUP3 PUSH2 0x1C42 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CCD DUP2 PUSH2 0x1C91 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0xEB 0xFC 0xE8 PUSH20 0x937E7A13A77BF8C550A2DE8C442DF4C3AE20F8F1 EXP 0xE4 0xAD SWAP16 SHL SWAP4 0xC0 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"395:4183:18:-:0;;;785:53;;;;;;;;;;809:22;:20;;;:22;;:::i;:::-;395:4183;;5939:280:1;6007:13;;;;;;;;;;;6006:14;5998:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;6094:15;6078:31;;:12;;;;;;;;;;:31;;;6074:139;;6140:15;6125:12;;:30;;;;;;;;;;;;;;;;;;6174:28;6186:15;6174:28;;;;;;:::i;:::-;;;;;;;;6074:139;5939:280::o;7:169:23:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:226::-;322:34;318:1;310:6;306:14;299:58;391:9;386:2;378:6;374:15;367:34;182:226;:::o;414:366::-;556:3;577:67;641:2;636:3;577:67;:::i;:::-;570:74;;653:93;742:3;653:93;:::i;:::-;771:2;766:3;762:12;755:19;;414:366;;;:::o;786:419::-;952:4;990:2;979:9;975:18;967:26;;1039:9;1033:4;1029:20;1025:1;1014:9;1010:17;1003:47;1067:131;1193:4;1067:131;:::i;:::-;1059:139;;786:419;;;:::o;1211:86::-;1246:7;1286:4;1279:5;1275:16;1264:27;;1211:86;;;:::o;1303:112::-;1386:22;1402:5;1386:22;:::i;:::-;1381:3;1374:35;1303:112;;:::o;1421:214::-;1510:4;1548:2;1537:9;1533:18;1525:26;;1561:67;1625:1;1614:9;1610:17;1601:6;1561:67;:::i;:::-;1421:214;;;;:::o;395:4183:18:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__Ownable_init_26":{"entryPoint":4361,"id":26,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_37":{"entryPoint":4547,"id":37,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_323":{"entryPoint":4450,"id":323,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_333":{"entryPoint":4644,"id":333,"parameterSlots":0,"returnSlots":0},"@_checkOwner_68":{"entryPoint":3602,"id":68,"parameterSlots":0,"returnSlots":0},"@_isTokenSupported_4874":{"entryPoint":3926,"id":4874,"parameterSlots":1,"returnSlots":1},"@_msgSender_1231":{"entryPoint":4539,"id":1231,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_367":{"entryPoint":4316,"id":367,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_359":{"entryPoint":4237,"id":359,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_125":{"entryPoint":3728,"id":125,"parameterSlots":1,"returnSlots":0},"@getInitializationState_4890":{"entryPoint":2547,"id":4890,"parameterSlots":0,"returnSlots":1},"@getMinimumAmountRequiredFor_4902":{"entryPoint":3250,"id":4902,"parameterSlots":1,"returnSlots":1},"@getPaycrest_4882":{"entryPoint":3073,"id":4882,"parameterSlots":0,"returnSlots":1},"@getValidatorInfo_4918":{"entryPoint":3115,"id":4918,"parameterSlots":2,"returnSlots":1},"@initialize_4565":{"entryPoint":2654,"id":4565,"parameterSlots":1,"returnSlots":0},"@initialized_4656":{"entryPoint":2570,"id":4656,"parameterSlots":1,"returnSlots":0},"@isContract_892":{"entryPoint":4326,"id":892,"parameterSlots":1,"returnSlots":1},"@owner_54":{"entryPoint":1352,"id":54,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":1332,"id":82,"parameterSlots":0,"returnSlots":0},"@rewardValidators_4847":{"entryPoint":624,"id":4847,"parameterSlots":6,"returnSlots":1},"@setMinimumAmountForTokens_4640":{"entryPoint":3323,"id":4640,"parameterSlots":2,"returnSlots":0},"@stake_4715":{"entryPoint":1394,"id":4715,"parameterSlots":2,"returnSlots":0},"@transferOwnership_105":{"entryPoint":3471,"id":105,"parameterSlots":1,"returnSlots":0},"@withdraw_4766":{"entryPoint":1996,"id":4766,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":5095,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":4880,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":5200,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":5735,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":6305,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":4786,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5279,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":5801,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":5846,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5565,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool":{"entryPoint":5756,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":6326,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_addresst_addresst_array$_t_address_$dyn_memory_ptrt_uint256t_uint256":{"entryPoint":5300,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_uint256t_addresst_address":{"entryPoint":5629,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":5523,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":5481,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":6194,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7054,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":6694,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":6815,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":6560,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":6923,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":7313,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack":{"entryPoint":7167,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":5910,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7103,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":5538,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":6250,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":6423,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5496,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":6209,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":6709,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6850,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6595,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6958,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7348,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7202,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":5925,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":5019,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":4733,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":5046,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":6990,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7001,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":6464,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6142,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":6046,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":6371,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":4839,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5469,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":4753,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":6627,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":4807,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5246,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":6637,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":6660,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":7012,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":4970,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":6650,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":5999,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":5952,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":6095,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4923,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":4901,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":5090,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":4748,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":4743,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":4906,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":6736,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":6481,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":6882,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":7234,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619":{"entryPoint":7126,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":4857,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":5712,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":4763,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5256,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:18974:23","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:23","statements":[{"nodeType":"YulAssignment","src":"57:19:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:23"},"nodeType":"YulFunctionCall","src":"67:9:23"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:23"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:23","type":""}],"src":"7:75:23"},{"body":{"nodeType":"YulBlock","src":"177:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:23"},"nodeType":"YulFunctionCall","src":"187:12:23"},"nodeType":"YulExpressionStatement","src":"187:12:23"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:23"},{"body":{"nodeType":"YulBlock","src":"300:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:23"},"nodeType":"YulFunctionCall","src":"310:12:23"},"nodeType":"YulExpressionStatement","src":"310:12:23"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:23"},{"body":{"nodeType":"YulBlock","src":"379:32:23","statements":[{"nodeType":"YulAssignment","src":"389:16:23","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:23"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:23","type":""}],"src":"334:77:23"},{"body":{"nodeType":"YulBlock","src":"460:79:23","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:23"},"nodeType":"YulFunctionCall","src":"519:12:23"},"nodeType":"YulExpressionStatement","src":"519:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:23"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:23"},"nodeType":"YulFunctionCall","src":"490:24:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:23"},"nodeType":"YulFunctionCall","src":"480:35:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:23"},"nodeType":"YulFunctionCall","src":"473:43:23"},"nodeType":"YulIf","src":"470:63:23"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:23","type":""}],"src":"417:122:23"},{"body":{"nodeType":"YulBlock","src":"597:87:23","statements":[{"nodeType":"YulAssignment","src":"607:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:23"},"nodeType":"YulFunctionCall","src":"616:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:23"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:23"},"nodeType":"YulFunctionCall","src":"645:33:23"},"nodeType":"YulExpressionStatement","src":"645:33:23"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:23","type":""}],"src":"545:139:23"},{"body":{"nodeType":"YulBlock","src":"735:81:23","statements":[{"nodeType":"YulAssignment","src":"745:65:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"760:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"767:42:23","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"756:3:23"},"nodeType":"YulFunctionCall","src":"756:54:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"745:7:23"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"717:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"727:7:23","type":""}],"src":"690:126:23"},{"body":{"nodeType":"YulBlock","src":"867:51:23","statements":[{"nodeType":"YulAssignment","src":"877:35:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"906:5:23"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"888:17:23"},"nodeType":"YulFunctionCall","src":"888:24:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"877:7:23"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"849:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"859:7:23","type":""}],"src":"822:96:23"},{"body":{"nodeType":"YulBlock","src":"967:79:23","statements":[{"body":{"nodeType":"YulBlock","src":"1024:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1033:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1036:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1026:6:23"},"nodeType":"YulFunctionCall","src":"1026:12:23"},"nodeType":"YulExpressionStatement","src":"1026:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"990:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1015:5:23"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"997:17:23"},"nodeType":"YulFunctionCall","src":"997:24:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"987:2:23"},"nodeType":"YulFunctionCall","src":"987:35:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"980:6:23"},"nodeType":"YulFunctionCall","src":"980:43:23"},"nodeType":"YulIf","src":"977:63:23"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"960:5:23","type":""}],"src":"924:122:23"},{"body":{"nodeType":"YulBlock","src":"1104:87:23","statements":[{"nodeType":"YulAssignment","src":"1114:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1136:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1123:12:23"},"nodeType":"YulFunctionCall","src":"1123:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1114:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1179:5:23"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1152:26:23"},"nodeType":"YulFunctionCall","src":"1152:33:23"},"nodeType":"YulExpressionStatement","src":"1152:33:23"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1082:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"1090:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1098:5:23","type":""}],"src":"1052:139:23"},{"body":{"nodeType":"YulBlock","src":"1286:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1303:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1306:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1296:6:23"},"nodeType":"YulFunctionCall","src":"1296:12:23"},"nodeType":"YulExpressionStatement","src":"1296:12:23"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"1197:117:23"},{"body":{"nodeType":"YulBlock","src":"1368:54:23","statements":[{"nodeType":"YulAssignment","src":"1378:38:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1396:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"1403:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1392:3:23"},"nodeType":"YulFunctionCall","src":"1392:14:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1412:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1408:3:23"},"nodeType":"YulFunctionCall","src":"1408:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1388:3:23"},"nodeType":"YulFunctionCall","src":"1388:28:23"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1378:6:23"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1351:5:23","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1361:6:23","type":""}],"src":"1320:102:23"},{"body":{"nodeType":"YulBlock","src":"1456:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1473:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1476:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1466:6:23"},"nodeType":"YulFunctionCall","src":"1466:88:23"},"nodeType":"YulExpressionStatement","src":"1466:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1570:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1573:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1563:6:23"},"nodeType":"YulFunctionCall","src":"1563:15:23"},"nodeType":"YulExpressionStatement","src":"1563:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1594:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1597:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1587:6:23"},"nodeType":"YulFunctionCall","src":"1587:15:23"},"nodeType":"YulExpressionStatement","src":"1587:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1428:180:23"},{"body":{"nodeType":"YulBlock","src":"1657:238:23","statements":[{"nodeType":"YulVariableDeclaration","src":"1667:58:23","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1689:6:23"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1719:4:23"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1697:21:23"},"nodeType":"YulFunctionCall","src":"1697:27:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1685:3:23"},"nodeType":"YulFunctionCall","src":"1685:40:23"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1671:10:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1836:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1838:16:23"},"nodeType":"YulFunctionCall","src":"1838:18:23"},"nodeType":"YulExpressionStatement","src":"1838:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1779:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"1791:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1776:2:23"},"nodeType":"YulFunctionCall","src":"1776:34:23"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1815:10:23"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1827:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1812:2:23"},"nodeType":"YulFunctionCall","src":"1812:22:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1773:2:23"},"nodeType":"YulFunctionCall","src":"1773:62:23"},"nodeType":"YulIf","src":"1770:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1874:2:23","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1878:10:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1867:6:23"},"nodeType":"YulFunctionCall","src":"1867:22:23"},"nodeType":"YulExpressionStatement","src":"1867:22:23"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1643:6:23","type":""},{"name":"size","nodeType":"YulTypedName","src":"1651:4:23","type":""}],"src":"1614:281:23"},{"body":{"nodeType":"YulBlock","src":"1942:88:23","statements":[{"nodeType":"YulAssignment","src":"1952:30:23","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1962:18:23"},"nodeType":"YulFunctionCall","src":"1962:20:23"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1952:6:23"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2011:6:23"},{"name":"size","nodeType":"YulIdentifier","src":"2019:4:23"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1991:19:23"},"nodeType":"YulFunctionCall","src":"1991:33:23"},"nodeType":"YulExpressionStatement","src":"1991:33:23"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1926:4:23","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1935:6:23","type":""}],"src":"1901:129:23"},{"body":{"nodeType":"YulBlock","src":"2118:229:23","statements":[{"body":{"nodeType":"YulBlock","src":"2223:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2225:16:23"},"nodeType":"YulFunctionCall","src":"2225:18:23"},"nodeType":"YulExpressionStatement","src":"2225:18:23"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2195:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2203:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2192:2:23"},"nodeType":"YulFunctionCall","src":"2192:30:23"},"nodeType":"YulIf","src":"2189:56:23"},{"nodeType":"YulAssignment","src":"2255:25:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2267:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2275:4:23","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2263:3:23"},"nodeType":"YulFunctionCall","src":"2263:17:23"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2255:4:23"}]},{"nodeType":"YulAssignment","src":"2317:23:23","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2329:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"2335:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2325:3:23"},"nodeType":"YulFunctionCall","src":"2325:15:23"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2317:4:23"}]}]},"name":"array_allocation_size_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2102:6:23","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2113:4:23","type":""}],"src":"2036:311:23"},{"body":{"nodeType":"YulBlock","src":"2442:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2459:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2462:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2452:6:23"},"nodeType":"YulFunctionCall","src":"2452:12:23"},"nodeType":"YulExpressionStatement","src":"2452:12:23"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"2353:117:23"},{"body":{"nodeType":"YulBlock","src":"2595:608:23","statements":[{"nodeType":"YulAssignment","src":"2605:90:23","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2687:6:23"}],"functionName":{"name":"array_allocation_size_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2630:56:23"},"nodeType":"YulFunctionCall","src":"2630:64:23"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2614:15:23"},"nodeType":"YulFunctionCall","src":"2614:81:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2605:5:23"}]},{"nodeType":"YulVariableDeclaration","src":"2704:16:23","value":{"name":"array","nodeType":"YulIdentifier","src":"2715:5:23"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2708:3:23","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2737:5:23"},{"name":"length","nodeType":"YulIdentifier","src":"2744:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2730:6:23"},"nodeType":"YulFunctionCall","src":"2730:21:23"},"nodeType":"YulExpressionStatement","src":"2730:21:23"},{"nodeType":"YulAssignment","src":"2760:23:23","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2771:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"2778:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2767:3:23"},"nodeType":"YulFunctionCall","src":"2767:16:23"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2760:3:23"}]},{"nodeType":"YulVariableDeclaration","src":"2793:44:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2811:6:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2823:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2831:4:23","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2819:3:23"},"nodeType":"YulFunctionCall","src":"2819:17:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2807:3:23"},"nodeType":"YulFunctionCall","src":"2807:30:23"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2797:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"2865:103:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"2879:77:23"},"nodeType":"YulFunctionCall","src":"2879:79:23"},"nodeType":"YulExpressionStatement","src":"2879:79:23"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2852:6:23"},{"name":"end","nodeType":"YulIdentifier","src":"2860:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2849:2:23"},"nodeType":"YulFunctionCall","src":"2849:15:23"},"nodeType":"YulIf","src":"2846:122:23"},{"body":{"nodeType":"YulBlock","src":"3053:144:23","statements":[{"nodeType":"YulVariableDeclaration","src":"3068:21:23","value":{"name":"src","nodeType":"YulIdentifier","src":"3086:3:23"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"3072:10:23","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3110:3:23"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"3136:10:23"},{"name":"end","nodeType":"YulIdentifier","src":"3148:3:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3115:20:23"},"nodeType":"YulFunctionCall","src":"3115:37:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3103:6:23"},"nodeType":"YulFunctionCall","src":"3103:50:23"},"nodeType":"YulExpressionStatement","src":"3103:50:23"},{"nodeType":"YulAssignment","src":"3166:21:23","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3177:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"3182:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3173:3:23"},"nodeType":"YulFunctionCall","src":"3173:14:23"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3166:3:23"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3006:3:23"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3011:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3003:2:23"},"nodeType":"YulFunctionCall","src":"3003:15:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3019:25:23","statements":[{"nodeType":"YulAssignment","src":"3021:21:23","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3032:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"3037:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3028:3:23"},"nodeType":"YulFunctionCall","src":"3028:14:23"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3021:3:23"}]}]},"pre":{"nodeType":"YulBlock","src":"2981:21:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2983:17:23","value":{"name":"offset","nodeType":"YulIdentifier","src":"2994:6:23"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2987:3:23","type":""}]}]},"src":"2977:220:23"}]},"name":"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2565:6:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"2573:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"2581:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2589:5:23","type":""}],"src":"2493:710:23"},{"body":{"nodeType":"YulBlock","src":"3303:293:23","statements":[{"body":{"nodeType":"YulBlock","src":"3352:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3354:77:23"},"nodeType":"YulFunctionCall","src":"3354:79:23"},"nodeType":"YulExpressionStatement","src":"3354:79:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3331:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3339:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3327:3:23"},"nodeType":"YulFunctionCall","src":"3327:17:23"},{"name":"end","nodeType":"YulIdentifier","src":"3346:3:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3323:3:23"},"nodeType":"YulFunctionCall","src":"3323:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3316:6:23"},"nodeType":"YulFunctionCall","src":"3316:35:23"},"nodeType":"YulIf","src":"3313:122:23"},{"nodeType":"YulVariableDeclaration","src":"3444:34:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3471:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3458:12:23"},"nodeType":"YulFunctionCall","src":"3458:20:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3448:6:23","type":""}]},{"nodeType":"YulAssignment","src":"3487:103:23","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3563:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3571:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3559:3:23"},"nodeType":"YulFunctionCall","src":"3559:17:23"},{"name":"length","nodeType":"YulIdentifier","src":"3578:6:23"},{"name":"end","nodeType":"YulIdentifier","src":"3586:3:23"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3496:62:23"},"nodeType":"YulFunctionCall","src":"3496:94:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3487:5:23"}]}]},"name":"abi_decode_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3281:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"3289:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3297:5:23","type":""}],"src":"3226:370:23"},{"body":{"nodeType":"YulBlock","src":"3647:32:23","statements":[{"nodeType":"YulAssignment","src":"3657:16:23","value":{"name":"value","nodeType":"YulIdentifier","src":"3668:5:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3657:7:23"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3629:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3639:7:23","type":""}],"src":"3602:77:23"},{"body":{"nodeType":"YulBlock","src":"3728:79:23","statements":[{"body":{"nodeType":"YulBlock","src":"3785:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3794:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3797:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3787:6:23"},"nodeType":"YulFunctionCall","src":"3787:12:23"},"nodeType":"YulExpressionStatement","src":"3787:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3751:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3776:5:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3758:17:23"},"nodeType":"YulFunctionCall","src":"3758:24:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3748:2:23"},"nodeType":"YulFunctionCall","src":"3748:35:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3741:6:23"},"nodeType":"YulFunctionCall","src":"3741:43:23"},"nodeType":"YulIf","src":"3738:63:23"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3721:5:23","type":""}],"src":"3685:122:23"},{"body":{"nodeType":"YulBlock","src":"3865:87:23","statements":[{"nodeType":"YulAssignment","src":"3875:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3897:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3884:12:23"},"nodeType":"YulFunctionCall","src":"3884:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3875:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3940:5:23"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3913:26:23"},"nodeType":"YulFunctionCall","src":"3913:33:23"},"nodeType":"YulExpressionStatement","src":"3913:33:23"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3843:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"3851:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3859:5:23","type":""}],"src":"3813:139:23"},{"body":{"nodeType":"YulBlock","src":"4134:1091:23","statements":[{"body":{"nodeType":"YulBlock","src":"4181:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4183:77:23"},"nodeType":"YulFunctionCall","src":"4183:79:23"},"nodeType":"YulExpressionStatement","src":"4183:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4155:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"4164:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4151:3:23"},"nodeType":"YulFunctionCall","src":"4151:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4176:3:23","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4147:3:23"},"nodeType":"YulFunctionCall","src":"4147:33:23"},"nodeType":"YulIf","src":"4144:120:23"},{"nodeType":"YulBlock","src":"4274:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4289:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4303:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4293:6:23","type":""}]},{"nodeType":"YulAssignment","src":"4318:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4353:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4364:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4349:3:23"},"nodeType":"YulFunctionCall","src":"4349:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4373:7:23"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4328:20:23"},"nodeType":"YulFunctionCall","src":"4328:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4318:6:23"}]}]},{"nodeType":"YulBlock","src":"4401:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4416:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4430:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4420:6:23","type":""}]},{"nodeType":"YulAssignment","src":"4446:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4481:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4492:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4477:3:23"},"nodeType":"YulFunctionCall","src":"4477:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4501:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4456:20:23"},"nodeType":"YulFunctionCall","src":"4456:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4446:6:23"}]}]},{"nodeType":"YulBlock","src":"4529:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4544:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4558:2:23","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4548:6:23","type":""}]},{"nodeType":"YulAssignment","src":"4574:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4609:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4620:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4605:3:23"},"nodeType":"YulFunctionCall","src":"4605:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4629:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4584:20:23"},"nodeType":"YulFunctionCall","src":"4584:53:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4574:6:23"}]}]},{"nodeType":"YulBlock","src":"4657:303:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4672:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4703:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4714:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4699:3:23"},"nodeType":"YulFunctionCall","src":"4699:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4686:12:23"},"nodeType":"YulFunctionCall","src":"4686:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4676:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4765:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4767:77:23"},"nodeType":"YulFunctionCall","src":"4767:79:23"},"nodeType":"YulExpressionStatement","src":"4767:79:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4737:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4745:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4734:2:23"},"nodeType":"YulFunctionCall","src":"4734:30:23"},"nodeType":"YulIf","src":"4731:117:23"},{"nodeType":"YulAssignment","src":"4862:88:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4922:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4933:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4918:3:23"},"nodeType":"YulFunctionCall","src":"4918:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4942:7:23"}],"functionName":{"name":"abi_decode_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4872:45:23"},"nodeType":"YulFunctionCall","src":"4872:78:23"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4862:6:23"}]}]},{"nodeType":"YulBlock","src":"4970:119:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4985:17:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4999:3:23","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4989:6:23","type":""}]},{"nodeType":"YulAssignment","src":"5016:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5051:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5062:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5047:3:23"},"nodeType":"YulFunctionCall","src":"5047:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5071:7:23"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5026:20:23"},"nodeType":"YulFunctionCall","src":"5026:53:23"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5016:6:23"}]}]},{"nodeType":"YulBlock","src":"5099:119:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5114:17:23","value":{"kind":"number","nodeType":"YulLiteral","src":"5128:3:23","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5118:6:23","type":""}]},{"nodeType":"YulAssignment","src":"5145:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5180:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5191:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5176:3:23"},"nodeType":"YulFunctionCall","src":"5176:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5200:7:23"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5155:20:23"},"nodeType":"YulFunctionCall","src":"5155:53:23"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"5145:6:23"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_addresst_array$_t_address_$dyn_memory_ptrt_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4064:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4075:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4087:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4095:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4103:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4111:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4119:6:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4127:6:23","type":""}],"src":"3958:1267:23"},{"body":{"nodeType":"YulBlock","src":"5273:48:23","statements":[{"nodeType":"YulAssignment","src":"5283:32:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5308:5:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5301:6:23"},"nodeType":"YulFunctionCall","src":"5301:13:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5294:6:23"},"nodeType":"YulFunctionCall","src":"5294:21:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5283:7:23"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5255:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5265:7:23","type":""}],"src":"5231:90:23"},{"body":{"nodeType":"YulBlock","src":"5386:50:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5403:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5423:5:23"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"5408:14:23"},"nodeType":"YulFunctionCall","src":"5408:21:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5396:6:23"},"nodeType":"YulFunctionCall","src":"5396:34:23"},"nodeType":"YulExpressionStatement","src":"5396:34:23"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5374:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5381:3:23","type":""}],"src":"5327:109:23"},{"body":{"nodeType":"YulBlock","src":"5534:118:23","statements":[{"nodeType":"YulAssignment","src":"5544:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5556:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5567:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5552:3:23"},"nodeType":"YulFunctionCall","src":"5552:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5544:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5618:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5631:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5642:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5627:3:23"},"nodeType":"YulFunctionCall","src":"5627:17:23"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"5580:37:23"},"nodeType":"YulFunctionCall","src":"5580:65:23"},"nodeType":"YulExpressionStatement","src":"5580:65:23"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5506:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5518:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5529:4:23","type":""}],"src":"5442:210:23"},{"body":{"nodeType":"YulBlock","src":"5723:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5740:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5763:5:23"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5745:17:23"},"nodeType":"YulFunctionCall","src":"5745:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5733:6:23"},"nodeType":"YulFunctionCall","src":"5733:37:23"},"nodeType":"YulExpressionStatement","src":"5733:37:23"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5711:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5718:3:23","type":""}],"src":"5658:118:23"},{"body":{"nodeType":"YulBlock","src":"5880:124:23","statements":[{"nodeType":"YulAssignment","src":"5890:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5902:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5913:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5898:3:23"},"nodeType":"YulFunctionCall","src":"5898:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5890:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5970:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5983:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5994:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5979:3:23"},"nodeType":"YulFunctionCall","src":"5979:17:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5926:43:23"},"nodeType":"YulFunctionCall","src":"5926:71:23"},"nodeType":"YulExpressionStatement","src":"5926:71:23"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5852:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5864:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5875:4:23","type":""}],"src":"5782:222:23"},{"body":{"nodeType":"YulBlock","src":"6093:391:23","statements":[{"body":{"nodeType":"YulBlock","src":"6139:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6141:77:23"},"nodeType":"YulFunctionCall","src":"6141:79:23"},"nodeType":"YulExpressionStatement","src":"6141:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6114:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"6123:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6110:3:23"},"nodeType":"YulFunctionCall","src":"6110:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"6135:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6106:3:23"},"nodeType":"YulFunctionCall","src":"6106:32:23"},"nodeType":"YulIf","src":"6103:119:23"},{"nodeType":"YulBlock","src":"6232:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"6247:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"6261:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6251:6:23","type":""}]},{"nodeType":"YulAssignment","src":"6276:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6311:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"6322:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6307:3:23"},"nodeType":"YulFunctionCall","src":"6307:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6331:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6286:20:23"},"nodeType":"YulFunctionCall","src":"6286:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6276:6:23"}]}]},{"nodeType":"YulBlock","src":"6359:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"6374:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"6388:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6378:6:23","type":""}]},{"nodeType":"YulAssignment","src":"6404:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6439:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"6450:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6435:3:23"},"nodeType":"YulFunctionCall","src":"6435:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6459:7:23"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6414:20:23"},"nodeType":"YulFunctionCall","src":"6414:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6404:6:23"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6055:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6066:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6078:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6086:6:23","type":""}],"src":"6010:474:23"},{"body":{"nodeType":"YulBlock","src":"6590:519:23","statements":[{"body":{"nodeType":"YulBlock","src":"6636:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6638:77:23"},"nodeType":"YulFunctionCall","src":"6638:79:23"},"nodeType":"YulExpressionStatement","src":"6638:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6611:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"6620:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6607:3:23"},"nodeType":"YulFunctionCall","src":"6607:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"6632:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6603:3:23"},"nodeType":"YulFunctionCall","src":"6603:32:23"},"nodeType":"YulIf","src":"6600:119:23"},{"nodeType":"YulBlock","src":"6729:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"6744:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"6758:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6748:6:23","type":""}]},{"nodeType":"YulAssignment","src":"6773:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6808:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"6819:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6804:3:23"},"nodeType":"YulFunctionCall","src":"6804:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6828:7:23"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6783:20:23"},"nodeType":"YulFunctionCall","src":"6783:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6773:6:23"}]}]},{"nodeType":"YulBlock","src":"6856:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"6871:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"6885:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6875:6:23","type":""}]},{"nodeType":"YulAssignment","src":"6901:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6936:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"6947:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6932:3:23"},"nodeType":"YulFunctionCall","src":"6932:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6956:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6911:20:23"},"nodeType":"YulFunctionCall","src":"6911:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6901:6:23"}]}]},{"nodeType":"YulBlock","src":"6984:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"6999:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"7013:2:23","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7003:6:23","type":""}]},{"nodeType":"YulAssignment","src":"7029:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7064:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"7075:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7060:3:23"},"nodeType":"YulFunctionCall","src":"7060:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7084:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7039:20:23"},"nodeType":"YulFunctionCall","src":"7039:53:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7029:6:23"}]}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6544:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6555:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6567:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6575:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6583:6:23","type":""}],"src":"6490:619:23"},{"body":{"nodeType":"YulBlock","src":"7155:76:23","statements":[{"body":{"nodeType":"YulBlock","src":"7209:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7218:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7221:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7211:6:23"},"nodeType":"YulFunctionCall","src":"7211:12:23"},"nodeType":"YulExpressionStatement","src":"7211:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7178:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7200:5:23"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"7185:14:23"},"nodeType":"YulFunctionCall","src":"7185:21:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7175:2:23"},"nodeType":"YulFunctionCall","src":"7175:32:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7168:6:23"},"nodeType":"YulFunctionCall","src":"7168:40:23"},"nodeType":"YulIf","src":"7165:60:23"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7148:5:23","type":""}],"src":"7115:116:23"},{"body":{"nodeType":"YulBlock","src":"7286:84:23","statements":[{"nodeType":"YulAssignment","src":"7296:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7318:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7305:12:23"},"nodeType":"YulFunctionCall","src":"7305:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7296:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7358:5:23"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"7334:23:23"},"nodeType":"YulFunctionCall","src":"7334:30:23"},"nodeType":"YulExpressionStatement","src":"7334:30:23"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7264:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"7272:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7280:5:23","type":""}],"src":"7237:133:23"},{"body":{"nodeType":"YulBlock","src":"7439:260:23","statements":[{"body":{"nodeType":"YulBlock","src":"7485:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7487:77:23"},"nodeType":"YulFunctionCall","src":"7487:79:23"},"nodeType":"YulExpressionStatement","src":"7487:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7460:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"7469:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7456:3:23"},"nodeType":"YulFunctionCall","src":"7456:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"7481:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7452:3:23"},"nodeType":"YulFunctionCall","src":"7452:32:23"},"nodeType":"YulIf","src":"7449:119:23"},{"nodeType":"YulBlock","src":"7578:114:23","statements":[{"nodeType":"YulVariableDeclaration","src":"7593:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"7607:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7597:6:23","type":""}]},{"nodeType":"YulAssignment","src":"7622:60:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7654:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"7665:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7650:3:23"},"nodeType":"YulFunctionCall","src":"7650:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7674:7:23"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"7632:17:23"},"nodeType":"YulFunctionCall","src":"7632:50:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7622:6:23"}]}]}]},"name":"abi_decode_tuple_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7409:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7420:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7432:6:23","type":""}],"src":"7376:323:23"},{"body":{"nodeType":"YulBlock","src":"7771:263:23","statements":[{"body":{"nodeType":"YulBlock","src":"7817:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7819:77:23"},"nodeType":"YulFunctionCall","src":"7819:79:23"},"nodeType":"YulExpressionStatement","src":"7819:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7792:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"7801:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7788:3:23"},"nodeType":"YulFunctionCall","src":"7788:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"7813:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7784:3:23"},"nodeType":"YulFunctionCall","src":"7784:32:23"},"nodeType":"YulIf","src":"7781:119:23"},{"nodeType":"YulBlock","src":"7910:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"7925:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"7939:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7929:6:23","type":""}]},{"nodeType":"YulAssignment","src":"7954:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7989:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"8000:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7985:3:23"},"nodeType":"YulFunctionCall","src":"7985:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8009:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7964:20:23"},"nodeType":"YulFunctionCall","src":"7964:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7954:6:23"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7741:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7752:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7764:6:23","type":""}],"src":"7705:329:23"},{"body":{"nodeType":"YulBlock","src":"8123:391:23","statements":[{"body":{"nodeType":"YulBlock","src":"8169:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8171:77:23"},"nodeType":"YulFunctionCall","src":"8171:79:23"},"nodeType":"YulExpressionStatement","src":"8171:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8144:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"8153:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8140:3:23"},"nodeType":"YulFunctionCall","src":"8140:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"8165:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8136:3:23"},"nodeType":"YulFunctionCall","src":"8136:32:23"},"nodeType":"YulIf","src":"8133:119:23"},{"nodeType":"YulBlock","src":"8262:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"8277:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"8291:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8281:6:23","type":""}]},{"nodeType":"YulAssignment","src":"8306:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8341:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"8352:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8337:3:23"},"nodeType":"YulFunctionCall","src":"8337:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8361:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8316:20:23"},"nodeType":"YulFunctionCall","src":"8316:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8306:6:23"}]}]},{"nodeType":"YulBlock","src":"8389:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"8404:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"8418:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8408:6:23","type":""}]},{"nodeType":"YulAssignment","src":"8434:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8469:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"8480:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8465:3:23"},"nodeType":"YulFunctionCall","src":"8465:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8489:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8444:20:23"},"nodeType":"YulFunctionCall","src":"8444:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8434:6:23"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8085:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8096:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8108:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8116:6:23","type":""}],"src":"8040:474:23"},{"body":{"nodeType":"YulBlock","src":"8585:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8602:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8625:5:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8607:17:23"},"nodeType":"YulFunctionCall","src":"8607:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8595:6:23"},"nodeType":"YulFunctionCall","src":"8595:37:23"},"nodeType":"YulExpressionStatement","src":"8595:37:23"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8573:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8580:3:23","type":""}],"src":"8520:118:23"},{"body":{"nodeType":"YulBlock","src":"8742:124:23","statements":[{"nodeType":"YulAssignment","src":"8752:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8764:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8775:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8760:3:23"},"nodeType":"YulFunctionCall","src":"8760:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8752:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8832:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8845:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8856:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8841:3:23"},"nodeType":"YulFunctionCall","src":"8841:17:23"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8788:43:23"},"nodeType":"YulFunctionCall","src":"8788:71:23"},"nodeType":"YulExpressionStatement","src":"8788:71:23"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8714:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8726:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8737:4:23","type":""}],"src":"8644:222:23"},{"body":{"nodeType":"YulBlock","src":"8900:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8917:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8920:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8910:6:23"},"nodeType":"YulFunctionCall","src":"8910:88:23"},"nodeType":"YulExpressionStatement","src":"8910:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9014:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9017:4:23","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9007:6:23"},"nodeType":"YulFunctionCall","src":"9007:15:23"},"nodeType":"YulExpressionStatement","src":"9007:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9038:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9041:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:23"},"nodeType":"YulFunctionCall","src":"9031:15:23"},"nodeType":"YulExpressionStatement","src":"9031:15:23"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"8872:180:23"},{"body":{"nodeType":"YulBlock","src":"9086:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9103:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9106:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9096:6:23"},"nodeType":"YulFunctionCall","src":"9096:88:23"},"nodeType":"YulExpressionStatement","src":"9096:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9200:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9203:4:23","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9193:6:23"},"nodeType":"YulFunctionCall","src":"9193:15:23"},"nodeType":"YulExpressionStatement","src":"9193:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9224:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9227:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9217:6:23"},"nodeType":"YulFunctionCall","src":"9217:15:23"},"nodeType":"YulExpressionStatement","src":"9217:15:23"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9058:180:23"},{"body":{"nodeType":"YulBlock","src":"9286:143:23","statements":[{"nodeType":"YulAssignment","src":"9296:25:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9319:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9301:17:23"},"nodeType":"YulFunctionCall","src":"9301:20:23"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"9296:1:23"}]},{"nodeType":"YulAssignment","src":"9330:25:23","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9353:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9335:17:23"},"nodeType":"YulFunctionCall","src":"9335:20:23"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9330:1:23"}]},{"body":{"nodeType":"YulBlock","src":"9377:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"9379:16:23"},"nodeType":"YulFunctionCall","src":"9379:18:23"},"nodeType":"YulExpressionStatement","src":"9379:18:23"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9374:1:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9367:6:23"},"nodeType":"YulFunctionCall","src":"9367:9:23"},"nodeType":"YulIf","src":"9364:35:23"},{"nodeType":"YulAssignment","src":"9409:14:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9418:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"9421:1:23"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9414:3:23"},"nodeType":"YulFunctionCall","src":"9414:9:23"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"9409:1:23"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9275:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"9278:1:23","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"9284:1:23","type":""}],"src":"9244:185:23"},{"body":{"nodeType":"YulBlock","src":"9463:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9480:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9483:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9473:6:23"},"nodeType":"YulFunctionCall","src":"9473:88:23"},"nodeType":"YulExpressionStatement","src":"9473:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9577:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9580:4:23","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9570:6:23"},"nodeType":"YulFunctionCall","src":"9570:15:23"},"nodeType":"YulExpressionStatement","src":"9570:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9601:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9604:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9594:6:23"},"nodeType":"YulFunctionCall","src":"9594:15:23"},"nodeType":"YulExpressionStatement","src":"9594:15:23"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9435:180:23"},{"body":{"nodeType":"YulBlock","src":"9665:147:23","statements":[{"nodeType":"YulAssignment","src":"9675:25:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9698:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9680:17:23"},"nodeType":"YulFunctionCall","src":"9680:20:23"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"9675:1:23"}]},{"nodeType":"YulAssignment","src":"9709:25:23","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9732:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9714:17:23"},"nodeType":"YulFunctionCall","src":"9714:20:23"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9709:1:23"}]},{"nodeType":"YulAssignment","src":"9743:16:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9754:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"9757:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9750:3:23"},"nodeType":"YulFunctionCall","src":"9750:9:23"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"9743:3:23"}]},{"body":{"nodeType":"YulBlock","src":"9783:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9785:16:23"},"nodeType":"YulFunctionCall","src":"9785:18:23"},"nodeType":"YulExpressionStatement","src":"9785:18:23"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9775:1:23"},{"name":"sum","nodeType":"YulIdentifier","src":"9778:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9772:2:23"},"nodeType":"YulFunctionCall","src":"9772:10:23"},"nodeType":"YulIf","src":"9769:36:23"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9652:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"9655:1:23","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"9661:3:23","type":""}],"src":"9621:191:23"},{"body":{"nodeType":"YulBlock","src":"9883:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9900:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9923:5:23"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"9905:17:23"},"nodeType":"YulFunctionCall","src":"9905:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9893:6:23"},"nodeType":"YulFunctionCall","src":"9893:37:23"},"nodeType":"YulExpressionStatement","src":"9893:37:23"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9871:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9878:3:23","type":""}],"src":"9818:118:23"},{"body":{"nodeType":"YulBlock","src":"10068:206:23","statements":[{"nodeType":"YulAssignment","src":"10078:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10090:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10101:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10086:3:23"},"nodeType":"YulFunctionCall","src":"10086:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10078:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10158:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10171:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10182:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10167:3:23"},"nodeType":"YulFunctionCall","src":"10167:17:23"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"10114:43:23"},"nodeType":"YulFunctionCall","src":"10114:71:23"},"nodeType":"YulExpressionStatement","src":"10114:71:23"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10239:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10252:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10263:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10248:3:23"},"nodeType":"YulFunctionCall","src":"10248:18:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10195:43:23"},"nodeType":"YulFunctionCall","src":"10195:72:23"},"nodeType":"YulExpressionStatement","src":"10195:72:23"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10032:9:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10044:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10052:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10063:4:23","type":""}],"src":"9942:332:23"},{"body":{"nodeType":"YulBlock","src":"10434:288:23","statements":[{"nodeType":"YulAssignment","src":"10444:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10456:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10467:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10452:3:23"},"nodeType":"YulFunctionCall","src":"10452:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10444:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10524:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10537:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10548:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10533:3:23"},"nodeType":"YulFunctionCall","src":"10533:17:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10480:43:23"},"nodeType":"YulFunctionCall","src":"10480:71:23"},"nodeType":"YulExpressionStatement","src":"10480:71:23"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10605:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10618:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10629:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10614:3:23"},"nodeType":"YulFunctionCall","src":"10614:18:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10561:43:23"},"nodeType":"YulFunctionCall","src":"10561:72:23"},"nodeType":"YulExpressionStatement","src":"10561:72:23"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"10687:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10700:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10711:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10696:3:23"},"nodeType":"YulFunctionCall","src":"10696:18:23"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"10643:43:23"},"nodeType":"YulFunctionCall","src":"10643:72:23"},"nodeType":"YulExpressionStatement","src":"10643:72:23"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10390:9:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10402:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10410:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10418:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10429:4:23","type":""}],"src":"10280:442:23"},{"body":{"nodeType":"YulBlock","src":"10788:77:23","statements":[{"nodeType":"YulAssignment","src":"10798:22:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10813:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10807:5:23"},"nodeType":"YulFunctionCall","src":"10807:13:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10798:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10853:5:23"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"10829:23:23"},"nodeType":"YulFunctionCall","src":"10829:30:23"},"nodeType":"YulExpressionStatement","src":"10829:30:23"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10766:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"10774:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10782:5:23","type":""}],"src":"10728:137:23"},{"body":{"nodeType":"YulBlock","src":"10945:271:23","statements":[{"body":{"nodeType":"YulBlock","src":"10991:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10993:77:23"},"nodeType":"YulFunctionCall","src":"10993:79:23"},"nodeType":"YulExpressionStatement","src":"10993:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10966:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"10975:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10962:3:23"},"nodeType":"YulFunctionCall","src":"10962:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"10987:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10958:3:23"},"nodeType":"YulFunctionCall","src":"10958:32:23"},"nodeType":"YulIf","src":"10955:119:23"},{"nodeType":"YulBlock","src":"11084:125:23","statements":[{"nodeType":"YulVariableDeclaration","src":"11099:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"11113:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11103:6:23","type":""}]},{"nodeType":"YulAssignment","src":"11128:71:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11171:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"11182:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11167:3:23"},"nodeType":"YulFunctionCall","src":"11167:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11191:7:23"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"11138:28:23"},"nodeType":"YulFunctionCall","src":"11138:61:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11128:6:23"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10915:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10926:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10938:6:23","type":""}],"src":"10871:345:23"},{"body":{"nodeType":"YulBlock","src":"11267:149:23","statements":[{"nodeType":"YulAssignment","src":"11277:25:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11300:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11282:17:23"},"nodeType":"YulFunctionCall","src":"11282:20:23"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"11277:1:23"}]},{"nodeType":"YulAssignment","src":"11311:25:23","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11334:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11316:17:23"},"nodeType":"YulFunctionCall","src":"11316:20:23"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"11311:1:23"}]},{"nodeType":"YulAssignment","src":"11345:17:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11357:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"11360:1:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11353:3:23"},"nodeType":"YulFunctionCall","src":"11353:9:23"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"11345:4:23"}]},{"body":{"nodeType":"YulBlock","src":"11387:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11389:16:23"},"nodeType":"YulFunctionCall","src":"11389:18:23"},"nodeType":"YulExpressionStatement","src":"11389:18:23"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"11378:4:23"},{"name":"x","nodeType":"YulIdentifier","src":"11384:1:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11375:2:23"},"nodeType":"YulFunctionCall","src":"11375:11:23"},"nodeType":"YulIf","src":"11372:37:23"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11253:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"11256:1:23","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"11262:4:23","type":""}],"src":"11222:194:23"},{"body":{"nodeType":"YulBlock","src":"11548:206:23","statements":[{"nodeType":"YulAssignment","src":"11558:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11570:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11581:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11566:3:23"},"nodeType":"YulFunctionCall","src":"11566:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11558:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11638:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11651:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11662:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11647:3:23"},"nodeType":"YulFunctionCall","src":"11647:17:23"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11594:43:23"},"nodeType":"YulFunctionCall","src":"11594:71:23"},"nodeType":"YulExpressionStatement","src":"11594:71:23"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11719:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11732:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11743:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11728:3:23"},"nodeType":"YulFunctionCall","src":"11728:18:23"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11675:43:23"},"nodeType":"YulFunctionCall","src":"11675:72:23"},"nodeType":"YulExpressionStatement","src":"11675:72:23"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11512:9:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11524:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11532:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11543:4:23","type":""}],"src":"11422:332:23"},{"body":{"nodeType":"YulBlock","src":"11856:73:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11873:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"11878:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11866:6:23"},"nodeType":"YulFunctionCall","src":"11866:19:23"},"nodeType":"YulExpressionStatement","src":"11866:19:23"},{"nodeType":"YulAssignment","src":"11894:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11913:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"11918:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11909:3:23"},"nodeType":"YulFunctionCall","src":"11909:14:23"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"11894:11:23"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11828:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"11833:6:23","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"11844:11:23","type":""}],"src":"11760:169:23"},{"body":{"nodeType":"YulBlock","src":"12041:127:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12063:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"12071:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12059:3:23"},"nodeType":"YulFunctionCall","src":"12059:14:23"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"12075:34:23","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12052:6:23"},"nodeType":"YulFunctionCall","src":"12052:58:23"},"nodeType":"YulExpressionStatement","src":"12052:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12131:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"12139:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12127:3:23"},"nodeType":"YulFunctionCall","src":"12127:15:23"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"12144:16:23","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12120:6:23"},"nodeType":"YulFunctionCall","src":"12120:41:23"},"nodeType":"YulExpressionStatement","src":"12120:41:23"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12033:6:23","type":""}],"src":"11935:233:23"},{"body":{"nodeType":"YulBlock","src":"12320:220:23","statements":[{"nodeType":"YulAssignment","src":"12330:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12396:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"12401:2:23","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12337:58:23"},"nodeType":"YulFunctionCall","src":"12337:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12330:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12502:3:23"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"12413:88:23"},"nodeType":"YulFunctionCall","src":"12413:93:23"},"nodeType":"YulExpressionStatement","src":"12413:93:23"},{"nodeType":"YulAssignment","src":"12515:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12526:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"12531:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12522:3:23"},"nodeType":"YulFunctionCall","src":"12522:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12515:3:23"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12308:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12316:3:23","type":""}],"src":"12174:366:23"},{"body":{"nodeType":"YulBlock","src":"12717:248:23","statements":[{"nodeType":"YulAssignment","src":"12727:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12739:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12750:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12735:3:23"},"nodeType":"YulFunctionCall","src":"12735:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12727:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12774:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12785:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12770:3:23"},"nodeType":"YulFunctionCall","src":"12770:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12793:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"12799:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12789:3:23"},"nodeType":"YulFunctionCall","src":"12789:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12763:6:23"},"nodeType":"YulFunctionCall","src":"12763:47:23"},"nodeType":"YulExpressionStatement","src":"12763:47:23"},{"nodeType":"YulAssignment","src":"12819:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12953:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12827:124:23"},"nodeType":"YulFunctionCall","src":"12827:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12819:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12697:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12712:4:23","type":""}],"src":"12546:419:23"},{"body":{"nodeType":"YulBlock","src":"13024:32:23","statements":[{"nodeType":"YulAssignment","src":"13034:16:23","value":{"name":"value","nodeType":"YulIdentifier","src":"13045:5:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"13034:7:23"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13006:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"13016:7:23","type":""}],"src":"12971:85:23"},{"body":{"nodeType":"YulBlock","src":"13105:43:23","statements":[{"nodeType":"YulAssignment","src":"13115:27:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13130:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"13137:4:23","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13126:3:23"},"nodeType":"YulFunctionCall","src":"13126:16:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"13115:7:23"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13087:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"13097:7:23","type":""}],"src":"13062:86:23"},{"body":{"nodeType":"YulBlock","src":"13186:28:23","statements":[{"nodeType":"YulAssignment","src":"13196:12:23","value":{"name":"value","nodeType":"YulIdentifier","src":"13203:5:23"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13196:3:23"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13172:5:23","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13182:3:23","type":""}],"src":"13154:60:23"},{"body":{"nodeType":"YulBlock","src":"13286:88:23","statements":[{"nodeType":"YulAssignment","src":"13296:72:23","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13360:5:23"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"13334:25:23"},"nodeType":"YulFunctionCall","src":"13334:32:23"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"13325:8:23"},"nodeType":"YulFunctionCall","src":"13325:42:23"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"13309:15:23"},"nodeType":"YulFunctionCall","src":"13309:59:23"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"13296:9:23"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13266:5:23","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"13276:9:23","type":""}],"src":"13220:154:23"},{"body":{"nodeType":"YulBlock","src":"13451:72:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13468:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13510:5:23"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"13473:36:23"},"nodeType":"YulFunctionCall","src":"13473:43:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13461:6:23"},"nodeType":"YulFunctionCall","src":"13461:56:23"},"nodeType":"YulExpressionStatement","src":"13461:56:23"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13439:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13446:3:23","type":""}],"src":"13380:143:23"},{"body":{"nodeType":"YulBlock","src":"13633:130:23","statements":[{"nodeType":"YulAssignment","src":"13643:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13655:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13666:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13651:3:23"},"nodeType":"YulFunctionCall","src":"13651:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13643:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13729:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13742:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13753:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13738:3:23"},"nodeType":"YulFunctionCall","src":"13738:17:23"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"13679:49:23"},"nodeType":"YulFunctionCall","src":"13679:77:23"},"nodeType":"YulExpressionStatement","src":"13679:77:23"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13605:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13617:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13628:4:23","type":""}],"src":"13529:234:23"},{"body":{"nodeType":"YulBlock","src":"13875:119:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13897:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"13905:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13893:3:23"},"nodeType":"YulFunctionCall","src":"13893:14:23"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"13909:34:23","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13886:6:23"},"nodeType":"YulFunctionCall","src":"13886:58:23"},"nodeType":"YulExpressionStatement","src":"13886:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13965:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"13973:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13961:3:23"},"nodeType":"YulFunctionCall","src":"13961:15:23"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"13978:8:23","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13954:6:23"},"nodeType":"YulFunctionCall","src":"13954:33:23"},"nodeType":"YulExpressionStatement","src":"13954:33:23"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13867:6:23","type":""}],"src":"13769:225:23"},{"body":{"nodeType":"YulBlock","src":"14146:220:23","statements":[{"nodeType":"YulAssignment","src":"14156:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14222:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"14227:2:23","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14163:58:23"},"nodeType":"YulFunctionCall","src":"14163:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14156:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14328:3:23"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"14239:88:23"},"nodeType":"YulFunctionCall","src":"14239:93:23"},"nodeType":"YulExpressionStatement","src":"14239:93:23"},{"nodeType":"YulAssignment","src":"14341:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14352:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"14357:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14348:3:23"},"nodeType":"YulFunctionCall","src":"14348:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14341:3:23"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14134:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14142:3:23","type":""}],"src":"14000:366:23"},{"body":{"nodeType":"YulBlock","src":"14543:248:23","statements":[{"nodeType":"YulAssignment","src":"14553:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14565:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14576:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14561:3:23"},"nodeType":"YulFunctionCall","src":"14561:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14553:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14600:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14611:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14596:3:23"},"nodeType":"YulFunctionCall","src":"14596:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14619:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"14625:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14615:3:23"},"nodeType":"YulFunctionCall","src":"14615:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14589:6:23"},"nodeType":"YulFunctionCall","src":"14589:47:23"},"nodeType":"YulExpressionStatement","src":"14589:47:23"},{"nodeType":"YulAssignment","src":"14645:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14779:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14653:124:23"},"nodeType":"YulFunctionCall","src":"14653:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14645:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14523:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14538:4:23","type":""}],"src":"14372:419:23"},{"body":{"nodeType":"YulBlock","src":"14903:76:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14925:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"14933:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14921:3:23"},"nodeType":"YulFunctionCall","src":"14921:14:23"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"14937:34:23","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14914:6:23"},"nodeType":"YulFunctionCall","src":"14914:58:23"},"nodeType":"YulExpressionStatement","src":"14914:58:23"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14895:6:23","type":""}],"src":"14797:182:23"},{"body":{"nodeType":"YulBlock","src":"15131:220:23","statements":[{"nodeType":"YulAssignment","src":"15141:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15207:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"15212:2:23","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15148:58:23"},"nodeType":"YulFunctionCall","src":"15148:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15141:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15313:3:23"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"15224:88:23"},"nodeType":"YulFunctionCall","src":"15224:93:23"},"nodeType":"YulExpressionStatement","src":"15224:93:23"},{"nodeType":"YulAssignment","src":"15326:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15337:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"15342:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15333:3:23"},"nodeType":"YulFunctionCall","src":"15333:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15326:3:23"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15119:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15127:3:23","type":""}],"src":"14985:366:23"},{"body":{"nodeType":"YulBlock","src":"15528:248:23","statements":[{"nodeType":"YulAssignment","src":"15538:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15550:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15561:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15546:3:23"},"nodeType":"YulFunctionCall","src":"15546:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15538:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15585:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15596:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15581:3:23"},"nodeType":"YulFunctionCall","src":"15581:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15604:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"15610:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15600:3:23"},"nodeType":"YulFunctionCall","src":"15600:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15574:6:23"},"nodeType":"YulFunctionCall","src":"15574:47:23"},"nodeType":"YulExpressionStatement","src":"15574:47:23"},{"nodeType":"YulAssignment","src":"15630:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15764:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15638:124:23"},"nodeType":"YulFunctionCall","src":"15638:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15630:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15508:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15523:4:23","type":""}],"src":"15357:419:23"},{"body":{"nodeType":"YulBlock","src":"15840:40:23","statements":[{"nodeType":"YulAssignment","src":"15851:22:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15867:5:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15861:5:23"},"nodeType":"YulFunctionCall","src":"15861:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15851:6:23"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15823:5:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"15833:6:23","type":""}],"src":"15782:98:23"},{"body":{"nodeType":"YulBlock","src":"15999:34:23","statements":[{"nodeType":"YulAssignment","src":"16009:18:23","value":{"name":"pos","nodeType":"YulIdentifier","src":"16024:3:23"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16009:11:23"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15971:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"15976:6:23","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"15987:11:23","type":""}],"src":"15886:147:23"},{"body":{"nodeType":"YulBlock","src":"16101:184:23","statements":[{"nodeType":"YulVariableDeclaration","src":"16111:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"16120:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16115:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"16180:63:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"16205:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"16210:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16201:3:23"},"nodeType":"YulFunctionCall","src":"16201:11:23"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16224:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"16229:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16220:3:23"},"nodeType":"YulFunctionCall","src":"16220:11:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16214:5:23"},"nodeType":"YulFunctionCall","src":"16214:18:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16194:6:23"},"nodeType":"YulFunctionCall","src":"16194:39:23"},"nodeType":"YulExpressionStatement","src":"16194:39:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16141:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"16144:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16138:2:23"},"nodeType":"YulFunctionCall","src":"16138:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16152:19:23","statements":[{"nodeType":"YulAssignment","src":"16154:15:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16163:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"16166:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16159:3:23"},"nodeType":"YulFunctionCall","src":"16159:10:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16154:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"16134:3:23","statements":[]},"src":"16130:113:23"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"16263:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"16268:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16259:3:23"},"nodeType":"YulFunctionCall","src":"16259:16:23"},{"kind":"number","nodeType":"YulLiteral","src":"16277:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16252:6:23"},"nodeType":"YulFunctionCall","src":"16252:27:23"},"nodeType":"YulExpressionStatement","src":"16252:27:23"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"16083:3:23","type":""},{"name":"dst","nodeType":"YulTypedName","src":"16088:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"16093:6:23","type":""}],"src":"16039:246:23"},{"body":{"nodeType":"YulBlock","src":"16399:278:23","statements":[{"nodeType":"YulVariableDeclaration","src":"16409:52:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16455:5:23"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"16423:31:23"},"nodeType":"YulFunctionCall","src":"16423:38:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16413:6:23","type":""}]},{"nodeType":"YulAssignment","src":"16470:95:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16553:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"16558:6:23"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16477:75:23"},"nodeType":"YulFunctionCall","src":"16477:88:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16470:3:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16613:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"16620:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16609:3:23"},"nodeType":"YulFunctionCall","src":"16609:16:23"},{"name":"pos","nodeType":"YulIdentifier","src":"16627:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"16632:6:23"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"16574:34:23"},"nodeType":"YulFunctionCall","src":"16574:65:23"},"nodeType":"YulExpressionStatement","src":"16574:65:23"},{"nodeType":"YulAssignment","src":"16648:23:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16659:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"16664:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16655:3:23"},"nodeType":"YulFunctionCall","src":"16655:16:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16648:3:23"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16380:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16387:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16395:3:23","type":""}],"src":"16291:386:23"},{"body":{"nodeType":"YulBlock","src":"16817:137:23","statements":[{"nodeType":"YulAssignment","src":"16828:100:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16915:6:23"},{"name":"pos","nodeType":"YulIdentifier","src":"16924:3:23"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16835:79:23"},"nodeType":"YulFunctionCall","src":"16835:93:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16828:3:23"}]},{"nodeType":"YulAssignment","src":"16938:10:23","value":{"name":"pos","nodeType":"YulIdentifier","src":"16945:3:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16938:3:23"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16796:3:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16802:6:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16813:3:23","type":""}],"src":"16683:271:23"},{"body":{"nodeType":"YulBlock","src":"17066:75:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17088:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"17096:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17084:3:23"},"nodeType":"YulFunctionCall","src":"17084:14:23"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"17100:33:23","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17077:6:23"},"nodeType":"YulFunctionCall","src":"17077:57:23"},"nodeType":"YulExpressionStatement","src":"17077:57:23"}]},"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17058:6:23","type":""}],"src":"16960:181:23"},{"body":{"nodeType":"YulBlock","src":"17293:220:23","statements":[{"nodeType":"YulAssignment","src":"17303:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17369:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"17374:2:23","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17310:58:23"},"nodeType":"YulFunctionCall","src":"17310:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17303:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17475:3:23"}],"functionName":{"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulIdentifier","src":"17386:88:23"},"nodeType":"YulFunctionCall","src":"17386:93:23"},"nodeType":"YulExpressionStatement","src":"17386:93:23"},{"nodeType":"YulAssignment","src":"17488:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17499:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"17504:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17495:3:23"},"nodeType":"YulFunctionCall","src":"17495:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17488:3:23"}]}]},"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17281:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17289:3:23","type":""}],"src":"17147:366:23"},{"body":{"nodeType":"YulBlock","src":"17690:248:23","statements":[{"nodeType":"YulAssignment","src":"17700:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17712:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17723:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17708:3:23"},"nodeType":"YulFunctionCall","src":"17708:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17700:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17747:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17758:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17743:3:23"},"nodeType":"YulFunctionCall","src":"17743:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17766:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"17772:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17762:3:23"},"nodeType":"YulFunctionCall","src":"17762:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17736:6:23"},"nodeType":"YulFunctionCall","src":"17736:47:23"},"nodeType":"YulExpressionStatement","src":"17736:47:23"},{"nodeType":"YulAssignment","src":"17792:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17926:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17800:124:23"},"nodeType":"YulFunctionCall","src":"17800:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17792:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17670:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17685:4:23","type":""}],"src":"17519:419:23"},{"body":{"nodeType":"YulBlock","src":"18050:124:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18072:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"18080:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18068:3:23"},"nodeType":"YulFunctionCall","src":"18068:14:23"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"18084:34:23","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18061:6:23"},"nodeType":"YulFunctionCall","src":"18061:58:23"},"nodeType":"YulExpressionStatement","src":"18061:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18140:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"18148:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18136:3:23"},"nodeType":"YulFunctionCall","src":"18136:15:23"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"18153:13:23","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18129:6:23"},"nodeType":"YulFunctionCall","src":"18129:38:23"},"nodeType":"YulExpressionStatement","src":"18129:38:23"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18042:6:23","type":""}],"src":"17944:230:23"},{"body":{"nodeType":"YulBlock","src":"18326:220:23","statements":[{"nodeType":"YulAssignment","src":"18336:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18402:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"18407:2:23","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18343:58:23"},"nodeType":"YulFunctionCall","src":"18343:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18336:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18508:3:23"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"18419:88:23"},"nodeType":"YulFunctionCall","src":"18419:93:23"},"nodeType":"YulExpressionStatement","src":"18419:93:23"},{"nodeType":"YulAssignment","src":"18521:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18532:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"18537:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18528:3:23"},"nodeType":"YulFunctionCall","src":"18528:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18521:3:23"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18314:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18322:3:23","type":""}],"src":"18180:366:23"},{"body":{"nodeType":"YulBlock","src":"18723:248:23","statements":[{"nodeType":"YulAssignment","src":"18733:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18745:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"18756:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18741:3:23"},"nodeType":"YulFunctionCall","src":"18741:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18733:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18780:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"18791:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18776:3:23"},"nodeType":"YulFunctionCall","src":"18776:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18799:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"18805:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18795:3:23"},"nodeType":"YulFunctionCall","src":"18795:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18769:6:23"},"nodeType":"YulFunctionCall","src":"18769:47:23"},"nodeType":"YulExpressionStatement","src":"18769:47:23"},{"nodeType":"YulAssignment","src":"18825:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18959:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18833:124:23"},"nodeType":"YulFunctionCall","src":"18833:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18825:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18703:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18718:4:23","type":""}],"src":"18552:419:23"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // address[]\n    function abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_address(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // address[]\n    function abi_decode_t_array$_t_address_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_addresst_array$_t_address_$dyn_memory_ptrt_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_array$_t_address_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_addresst_address(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":23,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063c4a0bb071161008c578063c5923aaf11610066578063c5923aaf146101d8578063e74599f314610208578063f239c62614610238578063f2fde38b14610254576100cf565b8063c4a0bb0714610182578063c4d66de81461019e578063c56f80c1146101ba576100cf565b80634a223c36146100d4578063715018a6146101045780638da5cb5b1461010e578063adc9772e1461012c578063b460af9414610148578063c2b4610b14610164575b600080fd5b6100ee60048036038101906100e991906114b4565b610270565b6040516100fb9190611578565b60405180910390f35b61010c610534565b005b610116610548565b60405161012391906115a2565b60405180910390f35b610146600480360381019061014191906115bd565b610572565b005b610162600480360381019061015d91906115fd565b6107cc565b005b61016c6109f3565b6040516101799190611578565b60405180910390f35b61019c6004803603810190610197919061167c565b610a0a565b005b6101b860048036038101906101b391906116a9565b610a5e565b005b6101c2610c01565b6040516101cf91906115a2565b60405180910390f35b6101f260048036038101906101ed91906116d6565b610c2b565b6040516101ff9190611725565b60405180910390f35b610222600480360381019061021d91906116a9565b610cb2565b60405161022f9190611725565b60405180910390f35b610252600480360381019061024d91906115bd565b610cfb565b005b61026e600480360381019061026991906116a9565b610d8f565b005b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102f9576040517f1db1ec8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000845190506000818461030d919061179e565b905060005b8281101561043f578160996000898481518110610332576103316117cf565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103c091906117fe565b92505081905550818782815181106103db576103da6117cf565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f11ff273d7118e74553c17c252f7ca4a9c4bc57aa9939391776a348e5b388f6f78c8c60405161042a929190611841565b60405180910390a38080600101915050610312565b5084609960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104cc91906117fe565b92505081905550848773ffffffffffffffffffffffffffffffffffffffff167f11ff273d7118e74553c17c252f7ca4a9c4bc57aa9939391776a348e5b388f6f78b8b60405161051c929190611841565b60405180910390a36001925050509695505050505050565b61053c610e12565b6105466000610e90565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b609760149054906101000a900460ff166105b8576040517f5179f46700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105c182610f56565b6105f7576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811015610670576040517f0eed1a4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016106ad9392919061186a565b6020604051808303816000875af11580156106cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f091906118b6565b5080609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461077d91906117fe565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a35050565b6107d461108d565b6000609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508084111561088f576040517f1dc930eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461091b91906118e3565b925050819055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83866040518363ffffffff1660e01b815260040161095d929190611917565b6020604051808303816000875af115801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a091906118b6565b50833373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d560405160405180910390a3506109ee6110dc565b505050565b6000609760149054906101000a900460ff16905090565b610a12610e12565b80609760146101000a81548160ff0219169083151502179055508015157fdebf9dd297d3980055770d6c047a67eed8f6b1e91397831703b5f2a73bec132060405160405180910390a250565b60008060019054906101000a900460ff16159050808015610a8f5750600160008054906101000a900460ff1660ff16105b80610abc5750610a9e306110e6565b158015610abb5750600160008054906101000a900460ff1660ff16145b5b610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af2906119c3565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b38576001600060016101000a81548160ff0219169083151502179055505b81609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001609760146101000a81548160ff021916908315150217905550610b9c611109565b610ba4611162565b8015610bfd5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610bf49190611a35565b60405180910390a15b5050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d03610e12565b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808273ffffffffffffffffffffffffffffffffffffffff167fd0380f7d3d322fabf37539b9c6b985c069348a14121a426f3cceb8b5a93cd9ab60405160405180910390a35050565b610d97610e12565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfd90611ac2565b60405180910390fd5b610e0f81610e90565b50565b610e1a6111bb565b73ffffffffffffffffffffffffffffffffffffffff16610e38610548565b73ffffffffffffffffffffffffffffffffffffffff1614610e8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8590611b2e565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051602401610fa391906115a2565b6040516020818303038152906040527f75151b63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161102d9190611bbf565b600060405180830381855afa9150503d8060008114611068576040519150601f19603f3d011682016040523d82523d6000602084013e61106d565b606091505b509150508080602001905181019061108591906118b6565b915050919050565b6002606554036110d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c990611c22565b60405180910390fd5b6002606581905550565b6001606581905550565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114f90611cb4565b60405180910390fd5b6111606111c3565b565b600060019054906101000a900460ff166111b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a890611cb4565b60405180910390fd5b6111b9611224565b565b600033905090565b600060019054906101000a900460ff16611212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120990611cb4565b60405180910390fd5b61122261121d6111bb565b610e90565b565b600060019054906101000a900460ff16611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126a90611cb4565b60405180910390fd5b6001606581905550565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6112a481611291565b81146112af57600080fd5b50565b6000813590506112c18161129b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112f2826112c7565b9050919050565b611302816112e7565b811461130d57600080fd5b50565b60008135905061131f816112f9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113738261132a565b810181811067ffffffffffffffff821117156113925761139161133b565b5b80604052505050565b60006113a561127d565b90506113b1828261136a565b919050565b600067ffffffffffffffff8211156113d1576113d061133b565b5b602082029050602081019050919050565b600080fd5b60006113fa6113f5846113b6565b61139b565b9050808382526020820190506020840283018581111561141d5761141c6113e2565b5b835b8181101561144657806114328882611310565b84526020840193505060208101905061141f565b5050509392505050565b600082601f83011261146557611464611325565b5b81356114758482602086016113e7565b91505092915050565b6000819050919050565b6114918161147e565b811461149c57600080fd5b50565b6000813590506114ae81611488565b92915050565b60008060008060008060c087890312156114d1576114d0611287565b5b60006114df89828a016112b2565b96505060206114f089828a01611310565b955050604061150189828a01611310565b945050606087013567ffffffffffffffff8111156115225761152161128c565b5b61152e89828a01611450565b935050608061153f89828a0161149f565b92505060a061155089828a0161149f565b9150509295509295509295565b60008115159050919050565b6115728161155d565b82525050565b600060208201905061158d6000830184611569565b92915050565b61159c816112e7565b82525050565b60006020820190506115b76000830184611593565b92915050565b600080604083850312156115d4576115d3611287565b5b60006115e285828601611310565b92505060206115f38582860161149f565b9150509250929050565b60008060006060848603121561161657611615611287565b5b60006116248682870161149f565b935050602061163586828701611310565b925050604061164686828701611310565b9150509250925092565b6116598161155d565b811461166457600080fd5b50565b60008135905061167681611650565b92915050565b60006020828403121561169257611691611287565b5b60006116a084828501611667565b91505092915050565b6000602082840312156116bf576116be611287565b5b60006116cd84828501611310565b91505092915050565b600080604083850312156116ed576116ec611287565b5b60006116fb85828601611310565b925050602061170c85828601611310565b9150509250929050565b61171f8161147e565b82525050565b600060208201905061173a6000830184611716565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006117a98261147e565b91506117b48361147e565b9250826117c4576117c3611740565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006118098261147e565b91506118148361147e565b925082820190508082111561182c5761182b61176f565b5b92915050565b61183b81611291565b82525050565b60006040820190506118566000830185611832565b6118636020830184611593565b9392505050565b600060608201905061187f6000830186611593565b61188c6020830185611593565b6118996040830184611716565b949350505050565b6000815190506118b081611650565b92915050565b6000602082840312156118cc576118cb611287565b5b60006118da848285016118a1565b91505092915050565b60006118ee8261147e565b91506118f98361147e565b92508282039050818111156119115761191061176f565b5b92915050565b600060408201905061192c6000830185611593565b6119396020830184611716565b9392505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006119ad602e83611940565b91506119b882611951565b604082019050919050565b600060208201905081810360008301526119dc816119a0565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611a1f611a1a611a15846119e3565b6119fa565b6119ed565b9050919050565b611a2f81611a04565b82525050565b6000602082019050611a4a6000830184611a26565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611aac602683611940565b9150611ab782611a50565b604082019050919050565b60006020820190508181036000830152611adb81611a9f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611b18602083611940565b9150611b2382611ae2565b602082019050919050565b60006020820190508181036000830152611b4781611b0b565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611b82578082015181840152602081019050611b67565b60008484015250505050565b6000611b9982611b4e565b611ba38185611b59565b9350611bb3818560208601611b64565b80840191505092915050565b6000611bcb8284611b8e565b915081905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611c0c601f83611940565b9150611c1782611bd6565b602082019050919050565b60006020820190508181036000830152611c3b81611bff565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611c9e602b83611940565b9150611ca982611c42565b604082019050919050565b60006020820190508181036000830152611ccd81611c91565b905091905056fea264697066735822122093ebfce873937e7a13a77bf8c550a2de8c442df4c3ae20f8f10ae4ad9f1b93c064736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC4A0BB07 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC5923AAF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC5923AAF EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xE74599F3 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0xF239C626 EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x254 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0xC4A0BB07 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0xC56F80C1 EQ PUSH2 0x1BA JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x4A223C36 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0xADC9772E EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0xC2B4610B EQ PUSH2 0x164 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x14B4 JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1578 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x534 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x116 PUSH2 0x548 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x123 SWAP2 SWAP1 PUSH2 0x15A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x146 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x141 SWAP2 SWAP1 PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x572 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15D SWAP2 SWAP1 PUSH2 0x15FD JUMP JUMPDEST PUSH2 0x7CC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16C PUSH2 0x9F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP2 SWAP1 PUSH2 0x1578 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x197 SWAP2 SWAP1 PUSH2 0x167C JUMP JUMPDEST PUSH2 0xA0A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B3 SWAP2 SWAP1 PUSH2 0x16A9 JUMP JUMPDEST PUSH2 0xA5E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C2 PUSH2 0xC01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CF SWAP2 SWAP1 PUSH2 0x15A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1ED SWAP2 SWAP1 PUSH2 0x16D6 JUMP JUMPDEST PUSH2 0xC2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x1725 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x222 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21D SWAP2 SWAP1 PUSH2 0x16A9 JUMP JUMPDEST PUSH2 0xCB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x1725 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x252 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24D SWAP2 SWAP1 PUSH2 0x15BD JUMP JUMPDEST PUSH2 0xCFB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x26E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x269 SWAP2 SWAP1 PUSH2 0x16A9 JUMP JUMPDEST PUSH2 0xD8F JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1DB1EC8500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 MLOAD SWAP1 POP PUSH1 0x0 DUP2 DUP5 PUSH2 0x30D SWAP2 SWAP1 PUSH2 0x179E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x43F JUMPI DUP2 PUSH1 0x99 PUSH1 0x0 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x332 JUMPI PUSH2 0x331 PUSH2 0x17CF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3C0 SWAP2 SWAP1 PUSH2 0x17FE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3DB JUMPI PUSH2 0x3DA PUSH2 0x17CF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x11FF273D7118E74553C17C252F7CA4A9C4BC57AA9939391776A348E5B388F6F7 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH2 0x42A SWAP3 SWAP2 SWAP1 PUSH2 0x1841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x312 JUMP JUMPDEST POP DUP5 PUSH1 0x99 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4CC SWAP2 SWAP1 PUSH2 0x17FE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x11FF273D7118E74553C17C252F7CA4A9C4BC57AA9939391776A348E5B388F6F7 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH2 0x51C SWAP3 SWAP2 SWAP1 PUSH2 0x1841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP3 POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x53C PUSH2 0xE12 JUMP JUMPDEST PUSH2 0x546 PUSH1 0x0 PUSH2 0xE90 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x97 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x5B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5179F46700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5C1 DUP3 PUSH2 0xF56 JUMP JUMPDEST PUSH2 0x5F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3DD1B30500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x98 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x670 JUMPI PUSH1 0x40 MLOAD PUSH32 0xEED1A4700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6F0 SWAP2 SWAP1 PUSH2 0x18B6 JUMP JUMPDEST POP DUP1 PUSH1 0x99 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x77D SWAP2 SWAP1 PUSH2 0x17FE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x7D4 PUSH2 0x108D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x99 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x88F JUMPI PUSH1 0x40 MLOAD PUSH32 0x1DC930EB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x99 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x91B SWAP2 SWAP1 PUSH2 0x18E3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x95D SWAP3 SWAP2 SWAP1 PUSH2 0x1917 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x97C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9A0 SWAP2 SWAP1 PUSH2 0x18B6 JUMP JUMPDEST POP DUP4 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH2 0x9EE PUSH2 0x10DC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA12 PUSH2 0xE12 JUMP JUMPDEST DUP1 PUSH1 0x97 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 ISZERO ISZERO PUSH32 0xDEBF9DD297D3980055770D6C047A67EED8F6B1E91397831703B5F2A73BEC1320 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xA8F JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xABC JUMPI POP PUSH2 0xA9E ADDRESS PUSH2 0x10E6 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xABB JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xAFB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAF2 SWAP1 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xB38 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST DUP2 PUSH1 0x97 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x97 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xB9C PUSH2 0x1109 JUMP JUMPDEST PUSH2 0xBA4 PUSH2 0x1162 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBFD JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xBF4 SWAP2 SWAP1 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x99 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x98 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD03 PUSH2 0xE12 JUMP JUMPDEST DUP1 PUSH1 0x98 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD0380F7D3D322FABF37539B9C6B985C069348A14121A426F3CCEB8B5A93CD9AB PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xD97 PUSH2 0xE12 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDFD SWAP1 PUSH2 0x1AC2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE0F DUP2 PUSH2 0xE90 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xE1A PUSH2 0x11BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE38 PUSH2 0x548 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE85 SWAP1 PUSH2 0x1B2E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x97 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFA3 SWAP2 SWAP1 PUSH2 0x15A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0x75151B6300000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x102D SWAP2 SWAP1 PUSH2 0x1BBF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1068 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x106D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1085 SWAP2 SWAP1 PUSH2 0x18B6 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x65 SLOAD SUB PUSH2 0x10D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10C9 SWAP1 PUSH2 0x1C22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x65 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x65 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1158 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x114F SWAP1 PUSH2 0x1CB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1160 PUSH2 0x11C3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x11B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11A8 SWAP1 PUSH2 0x1CB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11B9 PUSH2 0x1224 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1212 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1209 SWAP1 PUSH2 0x1CB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1222 PUSH2 0x121D PUSH2 0x11BB JUMP JUMPDEST PUSH2 0xE90 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1273 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x126A SWAP1 PUSH2 0x1CB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x65 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12A4 DUP2 PUSH2 0x1291 JUMP JUMPDEST DUP2 EQ PUSH2 0x12AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x12C1 DUP2 PUSH2 0x129B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12F2 DUP3 PUSH2 0x12C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1302 DUP2 PUSH2 0x12E7 JUMP JUMPDEST DUP2 EQ PUSH2 0x130D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x131F DUP2 PUSH2 0x12F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1373 DUP3 PUSH2 0x132A JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1392 JUMPI PUSH2 0x1391 PUSH2 0x133B JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13A5 PUSH2 0x127D JUMP JUMPDEST SWAP1 POP PUSH2 0x13B1 DUP3 DUP3 PUSH2 0x136A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x13D1 JUMPI PUSH2 0x13D0 PUSH2 0x133B JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13FA PUSH2 0x13F5 DUP5 PUSH2 0x13B6 JUMP JUMPDEST PUSH2 0x139B JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x141D JUMPI PUSH2 0x141C PUSH2 0x13E2 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1446 JUMPI DUP1 PUSH2 0x1432 DUP9 DUP3 PUSH2 0x1310 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x141F JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1465 JUMPI PUSH2 0x1464 PUSH2 0x1325 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1475 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x13E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1491 DUP2 PUSH2 0x147E JUMP JUMPDEST DUP2 EQ PUSH2 0x149C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x14AE DUP2 PUSH2 0x1488 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x14D1 JUMPI PUSH2 0x14D0 PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x14DF DUP10 DUP3 DUP11 ADD PUSH2 0x12B2 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x14F0 DUP10 DUP3 DUP11 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x1501 DUP10 DUP3 DUP11 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1522 JUMPI PUSH2 0x1521 PUSH2 0x128C JUMP JUMPDEST JUMPDEST PUSH2 0x152E DUP10 DUP3 DUP11 ADD PUSH2 0x1450 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x153F DUP10 DUP3 DUP11 ADD PUSH2 0x149F JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x1550 DUP10 DUP3 DUP11 ADD PUSH2 0x149F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1572 DUP2 PUSH2 0x155D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x158D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1569 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x159C DUP2 PUSH2 0x12E7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x15B7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1593 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15D4 JUMPI PUSH2 0x15D3 PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x15E2 DUP6 DUP3 DUP7 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x15F3 DUP6 DUP3 DUP7 ADD PUSH2 0x149F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1616 JUMPI PUSH2 0x1615 PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1624 DUP7 DUP3 DUP8 ADD PUSH2 0x149F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1635 DUP7 DUP3 DUP8 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1646 DUP7 DUP3 DUP8 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x1659 DUP2 PUSH2 0x155D JUMP JUMPDEST DUP2 EQ PUSH2 0x1664 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1676 DUP2 PUSH2 0x1650 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1692 JUMPI PUSH2 0x1691 PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16A0 DUP5 DUP3 DUP6 ADD PUSH2 0x1667 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16BF JUMPI PUSH2 0x16BE PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16CD DUP5 DUP3 DUP6 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16ED JUMPI PUSH2 0x16EC PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16FB DUP6 DUP3 DUP7 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x170C DUP6 DUP3 DUP7 ADD PUSH2 0x1310 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x171F DUP2 PUSH2 0x147E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x173A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1716 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x17A9 DUP3 PUSH2 0x147E JUMP JUMPDEST SWAP2 POP PUSH2 0x17B4 DUP4 PUSH2 0x147E JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x17C4 JUMPI PUSH2 0x17C3 PUSH2 0x1740 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1809 DUP3 PUSH2 0x147E JUMP JUMPDEST SWAP2 POP PUSH2 0x1814 DUP4 PUSH2 0x147E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x182C JUMPI PUSH2 0x182B PUSH2 0x176F JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x183B DUP2 PUSH2 0x1291 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1856 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1832 JUMP JUMPDEST PUSH2 0x1863 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1593 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x187F PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1593 JUMP JUMPDEST PUSH2 0x188C PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1593 JUMP JUMPDEST PUSH2 0x1899 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1716 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x18B0 DUP2 PUSH2 0x1650 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18CC JUMPI PUSH2 0x18CB PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18DA DUP5 DUP3 DUP6 ADD PUSH2 0x18A1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18EE DUP3 PUSH2 0x147E JUMP JUMPDEST SWAP2 POP PUSH2 0x18F9 DUP4 PUSH2 0x147E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1911 JUMPI PUSH2 0x1910 PUSH2 0x176F JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x192C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1593 JUMP JUMPDEST PUSH2 0x1939 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1716 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19AD PUSH1 0x2E DUP4 PUSH2 0x1940 JUMP JUMPDEST SWAP2 POP PUSH2 0x19B8 DUP3 PUSH2 0x1951 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19DC DUP2 PUSH2 0x19A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A1F PUSH2 0x1A1A PUSH2 0x1A15 DUP5 PUSH2 0x19E3 JUMP JUMPDEST PUSH2 0x19FA JUMP JUMPDEST PUSH2 0x19ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A2F DUP2 PUSH2 0x1A04 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A4A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A26 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AAC PUSH1 0x26 DUP4 PUSH2 0x1940 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AB7 DUP3 PUSH2 0x1A50 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ADB DUP2 PUSH2 0x1A9F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B18 PUSH1 0x20 DUP4 PUSH2 0x1940 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B23 DUP3 PUSH2 0x1AE2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B47 DUP2 PUSH2 0x1B0B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B82 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1B67 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B99 DUP3 PUSH2 0x1B4E JUMP JUMPDEST PUSH2 0x1BA3 DUP2 DUP6 PUSH2 0x1B59 JUMP JUMPDEST SWAP4 POP PUSH2 0x1BB3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1B64 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BCB DUP3 DUP5 PUSH2 0x1B8E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0C PUSH1 0x1F DUP4 PUSH2 0x1940 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C17 DUP3 PUSH2 0x1BD6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C3B DUP2 PUSH2 0x1BFF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C9E PUSH1 0x2B DUP4 PUSH2 0x1940 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CA9 DUP3 PUSH2 0x1C42 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CCD DUP2 PUSH2 0x1C91 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0xEB 0xFC 0xE8 PUSH20 0x937E7A13A77BF8C550A2DE8C442DF4C3AE20F8F1 EXP 0xE4 0xAD SWAP16 SHL SWAP4 0xC0 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"395:4183:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2899:966;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2064:101:0;;;:::i;:::-;;1441:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2077:421:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2504:389;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4205:100;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1944:127;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;844:195;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4113:86;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4444:131;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4311:127;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1721:217;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2314:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2899:966:18;3179:4;1665:8;;;;;;;;;;;1651:22;;:10;:22;;;1648:49;;1682:15;;;;;;;;;;;;;;1648:49;3195:35:::1;3233:19;:26;3195:64;;3269:33;3333:27;3305:25;:55;;;;:::i;:::-;3269:91;;3374:9;3370:308;3393:27;3389:1;:31;3370:308;;;3481:25;3438:8;:32;3447:19;3467:1;3447:22;;;;;;;;:::i;:::-;;;;;;;;3438:32;;;;;;;;;;;;;;;:39;3471:5;3438:39;;;;;;;;;;;;;;;;:68;;;;;;;:::i;:::-;;;;;;;;3582:25;3558:19;3578:1;3558:22;;;;;;;;:::i;:::-;;;;;;;;3525:83;;;3542:7;3551:5;3525:83;;;;;;;:::i;:::-;;;;;;;;3650:3;;;;;;;3370:308;;;;3724:23;3687:8;:26;3696:16;3687:26;;;;;;;;;;;;;;;:33;3714:5;3687:33;;;;;;;;;;;;;;;;:60;;;;;;;:::i;:::-;;;;;;;;3813:23;3795:16;3762:75;;;3779:7;3788:5;3762:75;;;;;;;:::i;:::-;;;;;;;;3854:4;3847:11;;;;2899:966:::0;;;;;;;;:::o;2064:101:0:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;1441:85::-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;2077:421:18:-;2147:14;;;;;;;;;;;2143:44;;2170:17;;;;;;;;;;;;;;2143:44;2201:24;2219:5;2201:17;:24::i;:::-;2197:56;;2234:19;;;;;;;;;;;;;;2197:56;2275:13;:20;2289:5;2275:20;;;;;;;;;;;;;;;;2266:6;:29;2263:58;;;2304:17;;;;;;;;;;;;;;2263:58;2349:5;2331:37;;;2369:10;2389:4;2396:6;2331:72;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2444:6;2413:8;:20;2422:10;2413:20;;;;;;;;;;;;;;;:27;2434:5;2413:27;;;;;;;;;;;;;;;;:37;;;;;;;:::i;:::-;;;;;;;;2484:6;2472:10;2465:26;;;;;;;;;;;;2077:421;;:::o;2504:389::-;2505:21:2;:19;:21::i;:::-;2606:30:18::1;2639:8;:20;2648:10;2639:20;;;;;;;;;;;;;;;:27;2660:5;2639:27;;;;;;;;;;;;;;;;2606:60;;2688:22;2679:6;:31;2676:57;;;2719:14;;;;;;;;;;;;;;2676:57;2774:6;2743:8;:20;2752:10;2743:20;;;;;;;;;;;;;;;:27;2764:5;2743:27;;;;;;;;;;;;;;;;:37;;;;;;;:::i;:::-;;;;;;;;2808:5;2790:33;;;2824:9;2835:6;2790:52;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2879:6;2867:10;2857:29;;;;;;;;;;;;2596:297;2547:20:2::0;:18;:20::i;:::-;2504:389:18;;;:::o;4205:100::-;4261:4;4284:14;;;;;;;;;;;4277:21;;4205:100;:::o;1944:127::-;1334:13:0;:11;:13::i;:::-;2024:6:18::1;2007:14;;:23;;;;;;;;;;;;;;;;;;2057:6;2045:19;;;;;;;;;;;;1944:127:::0;:::o;844:195::-;3279:19:1;3302:13;;;;;;;;;;;3301:14;3279:36;;3347:14;:34;;;;;3380:1;3365:12;;;;;;;;;;:16;;;3347:34;3346:108;;;;3388:44;3426:4;3388:29;:44::i;:::-;3387:45;:66;;;;;3452:1;3436:12;;;;;;;;;;:17;;;3387:66;3346:108;3325:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3551:1;3536:12;;:16;;;;;;;;;;;;;;;;;;3566:14;3562:65;;;3612:4;3596:13;;:20;;;;;;;;;;;;;;;;;;3562:65;929:9:18::1;918:8;;:20;;;;;;;;;;;;;;;;;;968:4;951:14;;:21;;;;;;;;;;;;;;;;;;982:16;:14;:16::i;:::-;1008:24;:22;:24::i;:::-;3651:14:1::0;3647:99;;;3697:5;3681:13;;:21;;;;;;;;;;;;;;;;;;3721:14;3733:1;3721:14;;;;;;:::i;:::-;;;;;;;;3647:99;3269:483;844:195:18;:::o;4113:86::-;4158:7;4184:8;;;;;;;;;;;4177:15;;4113:86;:::o;4444:131::-;4521:7;4547:8;:14;4556:4;4547:14;;;;;;;;;;;;;;;:21;4562:5;4547:21;;;;;;;;;;;;;;;;4540:28;;4444:131;;;;:::o;4311:127::-;4385:7;4411:13;:20;4425:5;4411:20;;;;;;;;;;;;;;;;4404:27;;4311:127;;;:::o;1721:217::-;1334:13:0;:11;:13::i;:::-;1853:18:18::1;1829:13;:21;1843:6;1829:21;;;;;;;;;;;;;;;:42;;;;1912:18;1904:6;1886:45;;;;;;;;;;;;1721:217:::0;;:::o;2314:198:0:-;1334:13;:11;:13::i;:::-;2422:1:::1;2402:22;;:8;:22;;::::0;2394:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;1599:130::-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;2666:187::-;2739:16;2758:6;;;;;;;;;;;2739:25;;2783:8;2774:6;;:17;;;;;;;;;;;;;;;;;;2837:8;2806:40;;2827:8;2806:40;;;;;;;;;;;;2729:124;2666:187;:::o;3872:235:18:-;3935:4;3954:19;3977:8;;;;;;;;;;;:19;;4050:5;3997:59;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3977:80;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3951:106;;;4085:6;4074:26;;;;;;;;;;;;:::i;:::-;4067:33;;;3872:235;;;:::o;2580:287:2:-;1830:1;2712:7;;:19;2704:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1830:1;2842:7;:18;;;;2580:287::o;2873:209::-;1787:1;3053:7;:22;;;;2873:209::o;1423:320:6:-;1483:4;1735:1;1713:7;:19;;;:23;1706:30;;1423:320;;;:::o;1003:95:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1065:26:0::1;:24;:26::i;:::-;1003:95::o:0;1868:111:2:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:2::1;:32;:34::i;:::-;1868:111::o:0;850:96:7:-;903:7;929:10;922:17;;850:96;:::o;1104:111:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1176:32:0::1;1195:12;:10;:12::i;:::-;1176:18;:32::i;:::-;1104:111::o:0;1985:109:2:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:2::1;2065:7;:22;;;;1985:109::o:0;7:75:23:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:126::-;727:7;767:42;760:5;756:54;745:65;;690:126;;;:::o;822:96::-;859:7;888:24;906:5;888:24;:::i;:::-;877:35;;822:96;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:117::-;1306:1;1303;1296:12;1320:102;1361:6;1412:2;1408:7;1403:2;1396:5;1392:14;1388:28;1378:38;;1320:102;;;:::o;1428:180::-;1476:77;1473:1;1466:88;1573:4;1570:1;1563:15;1597:4;1594:1;1587:15;1614:281;1697:27;1719:4;1697:27;:::i;:::-;1689:6;1685:40;1827:6;1815:10;1812:22;1791:18;1779:10;1776:34;1773:62;1770:88;;;1838:18;;:::i;:::-;1770:88;1878:10;1874:2;1867:22;1657:238;1614:281;;:::o;1901:129::-;1935:6;1962:20;;:::i;:::-;1952:30;;1991:33;2019:4;2011:6;1991:33;:::i;:::-;1901:129;;;:::o;2036:311::-;2113:4;2203:18;2195:6;2192:30;2189:56;;;2225:18;;:::i;:::-;2189:56;2275:4;2267:6;2263:17;2255:25;;2335:4;2329;2325:15;2317:23;;2036:311;;;:::o;2353:117::-;2462:1;2459;2452:12;2493:710;2589:5;2614:81;2630:64;2687:6;2630:64;:::i;:::-;2614:81;:::i;:::-;2605:90;;2715:5;2744:6;2737:5;2730:21;2778:4;2771:5;2767:16;2760:23;;2831:4;2823:6;2819:17;2811:6;2807:30;2860:3;2852:6;2849:15;2846:122;;;2879:79;;:::i;:::-;2846:122;2994:6;2977:220;3011:6;3006:3;3003:15;2977:220;;;3086:3;3115:37;3148:3;3136:10;3115:37;:::i;:::-;3110:3;3103:50;3182:4;3177:3;3173:14;3166:21;;3053:144;3037:4;3032:3;3028:14;3021:21;;2977:220;;;2981:21;2595:608;;2493:710;;;;;:::o;3226:370::-;3297:5;3346:3;3339:4;3331:6;3327:17;3323:27;3313:122;;3354:79;;:::i;:::-;3313:122;3471:6;3458:20;3496:94;3586:3;3578:6;3571:4;3563:6;3559:17;3496:94;:::i;:::-;3487:103;;3303:293;3226:370;;;;:::o;3602:77::-;3639:7;3668:5;3657:16;;3602:77;;;:::o;3685:122::-;3758:24;3776:5;3758:24;:::i;:::-;3751:5;3748:35;3738:63;;3797:1;3794;3787:12;3738:63;3685:122;:::o;3813:139::-;3859:5;3897:6;3884:20;3875:29;;3913:33;3940:5;3913:33;:::i;:::-;3813:139;;;;:::o;3958:1267::-;4087:6;4095;4103;4111;4119;4127;4176:3;4164:9;4155:7;4151:23;4147:33;4144:120;;;4183:79;;:::i;:::-;4144:120;4303:1;4328:53;4373:7;4364:6;4353:9;4349:22;4328:53;:::i;:::-;4318:63;;4274:117;4430:2;4456:53;4501:7;4492:6;4481:9;4477:22;4456:53;:::i;:::-;4446:63;;4401:118;4558:2;4584:53;4629:7;4620:6;4609:9;4605:22;4584:53;:::i;:::-;4574:63;;4529:118;4714:2;4703:9;4699:18;4686:32;4745:18;4737:6;4734:30;4731:117;;;4767:79;;:::i;:::-;4731:117;4872:78;4942:7;4933:6;4922:9;4918:22;4872:78;:::i;:::-;4862:88;;4657:303;4999:3;5026:53;5071:7;5062:6;5051:9;5047:22;5026:53;:::i;:::-;5016:63;;4970:119;5128:3;5155:53;5200:7;5191:6;5180:9;5176:22;5155:53;:::i;:::-;5145:63;;5099:119;3958:1267;;;;;;;;:::o;5231:90::-;5265:7;5308:5;5301:13;5294:21;5283:32;;5231:90;;;:::o;5327:109::-;5408:21;5423:5;5408:21;:::i;:::-;5403:3;5396:34;5327:109;;:::o;5442:210::-;5529:4;5567:2;5556:9;5552:18;5544:26;;5580:65;5642:1;5631:9;5627:17;5618:6;5580:65;:::i;:::-;5442:210;;;;:::o;5658:118::-;5745:24;5763:5;5745:24;:::i;:::-;5740:3;5733:37;5658:118;;:::o;5782:222::-;5875:4;5913:2;5902:9;5898:18;5890:26;;5926:71;5994:1;5983:9;5979:17;5970:6;5926:71;:::i;:::-;5782:222;;;;:::o;6010:474::-;6078:6;6086;6135:2;6123:9;6114:7;6110:23;6106:32;6103:119;;;6141:79;;:::i;:::-;6103:119;6261:1;6286:53;6331:7;6322:6;6311:9;6307:22;6286:53;:::i;:::-;6276:63;;6232:117;6388:2;6414:53;6459:7;6450:6;6439:9;6435:22;6414:53;:::i;:::-;6404:63;;6359:118;6010:474;;;;;:::o;6490:619::-;6567:6;6575;6583;6632:2;6620:9;6611:7;6607:23;6603:32;6600:119;;;6638:79;;:::i;:::-;6600:119;6758:1;6783:53;6828:7;6819:6;6808:9;6804:22;6783:53;:::i;:::-;6773:63;;6729:117;6885:2;6911:53;6956:7;6947:6;6936:9;6932:22;6911:53;:::i;:::-;6901:63;;6856:118;7013:2;7039:53;7084:7;7075:6;7064:9;7060:22;7039:53;:::i;:::-;7029:63;;6984:118;6490:619;;;;;:::o;7115:116::-;7185:21;7200:5;7185:21;:::i;:::-;7178:5;7175:32;7165:60;;7221:1;7218;7211:12;7165:60;7115:116;:::o;7237:133::-;7280:5;7318:6;7305:20;7296:29;;7334:30;7358:5;7334:30;:::i;:::-;7237:133;;;;:::o;7376:323::-;7432:6;7481:2;7469:9;7460:7;7456:23;7452:32;7449:119;;;7487:79;;:::i;:::-;7449:119;7607:1;7632:50;7674:7;7665:6;7654:9;7650:22;7632:50;:::i;:::-;7622:60;;7578:114;7376:323;;;;:::o;7705:329::-;7764:6;7813:2;7801:9;7792:7;7788:23;7784:32;7781:119;;;7819:79;;:::i;:::-;7781:119;7939:1;7964:53;8009:7;8000:6;7989:9;7985:22;7964:53;:::i;:::-;7954:63;;7910:117;7705:329;;;;:::o;8040:474::-;8108:6;8116;8165:2;8153:9;8144:7;8140:23;8136:32;8133:119;;;8171:79;;:::i;:::-;8133:119;8291:1;8316:53;8361:7;8352:6;8341:9;8337:22;8316:53;:::i;:::-;8306:63;;8262:117;8418:2;8444:53;8489:7;8480:6;8469:9;8465:22;8444:53;:::i;:::-;8434:63;;8389:118;8040:474;;;;;:::o;8520:118::-;8607:24;8625:5;8607:24;:::i;:::-;8602:3;8595:37;8520:118;;:::o;8644:222::-;8737:4;8775:2;8764:9;8760:18;8752:26;;8788:71;8856:1;8845:9;8841:17;8832:6;8788:71;:::i;:::-;8644:222;;;;:::o;8872:180::-;8920:77;8917:1;8910:88;9017:4;9014:1;9007:15;9041:4;9038:1;9031:15;9058:180;9106:77;9103:1;9096:88;9203:4;9200:1;9193:15;9227:4;9224:1;9217:15;9244:185;9284:1;9301:20;9319:1;9301:20;:::i;:::-;9296:25;;9335:20;9353:1;9335:20;:::i;:::-;9330:25;;9374:1;9364:35;;9379:18;;:::i;:::-;9364:35;9421:1;9418;9414:9;9409:14;;9244:185;;;;:::o;9435:180::-;9483:77;9480:1;9473:88;9580:4;9577:1;9570:15;9604:4;9601:1;9594:15;9621:191;9661:3;9680:20;9698:1;9680:20;:::i;:::-;9675:25;;9714:20;9732:1;9714:20;:::i;:::-;9709:25;;9757:1;9754;9750:9;9743:16;;9778:3;9775:1;9772:10;9769:36;;;9785:18;;:::i;:::-;9769:36;9621:191;;;;:::o;9818:118::-;9905:24;9923:5;9905:24;:::i;:::-;9900:3;9893:37;9818:118;;:::o;9942:332::-;10063:4;10101:2;10090:9;10086:18;10078:26;;10114:71;10182:1;10171:9;10167:17;10158:6;10114:71;:::i;:::-;10195:72;10263:2;10252:9;10248:18;10239:6;10195:72;:::i;:::-;9942:332;;;;;:::o;10280:442::-;10429:4;10467:2;10456:9;10452:18;10444:26;;10480:71;10548:1;10537:9;10533:17;10524:6;10480:71;:::i;:::-;10561:72;10629:2;10618:9;10614:18;10605:6;10561:72;:::i;:::-;10643;10711:2;10700:9;10696:18;10687:6;10643:72;:::i;:::-;10280:442;;;;;;:::o;10728:137::-;10782:5;10813:6;10807:13;10798:22;;10829:30;10853:5;10829:30;:::i;:::-;10728:137;;;;:::o;10871:345::-;10938:6;10987:2;10975:9;10966:7;10962:23;10958:32;10955:119;;;10993:79;;:::i;:::-;10955:119;11113:1;11138:61;11191:7;11182:6;11171:9;11167:22;11138:61;:::i;:::-;11128:71;;11084:125;10871:345;;;;:::o;11222:194::-;11262:4;11282:20;11300:1;11282:20;:::i;:::-;11277:25;;11316:20;11334:1;11316:20;:::i;:::-;11311:25;;11360:1;11357;11353:9;11345:17;;11384:1;11378:4;11375:11;11372:37;;;11389:18;;:::i;:::-;11372:37;11222:194;;;;:::o;11422:332::-;11543:4;11581:2;11570:9;11566:18;11558:26;;11594:71;11662:1;11651:9;11647:17;11638:6;11594:71;:::i;:::-;11675:72;11743:2;11732:9;11728:18;11719:6;11675:72;:::i;:::-;11422:332;;;;;:::o;11760:169::-;11844:11;11878:6;11873:3;11866:19;11918:4;11913:3;11909:14;11894:29;;11760:169;;;;:::o;11935:233::-;12075:34;12071:1;12063:6;12059:14;12052:58;12144:16;12139:2;12131:6;12127:15;12120:41;11935:233;:::o;12174:366::-;12316:3;12337:67;12401:2;12396:3;12337:67;:::i;:::-;12330:74;;12413:93;12502:3;12413:93;:::i;:::-;12531:2;12526:3;12522:12;12515:19;;12174:366;;;:::o;12546:419::-;12712:4;12750:2;12739:9;12735:18;12727:26;;12799:9;12793:4;12789:20;12785:1;12774:9;12770:17;12763:47;12827:131;12953:4;12827:131;:::i;:::-;12819:139;;12546:419;;;:::o;12971:85::-;13016:7;13045:5;13034:16;;12971:85;;;:::o;13062:86::-;13097:7;13137:4;13130:5;13126:16;13115:27;;13062:86;;;:::o;13154:60::-;13182:3;13203:5;13196:12;;13154:60;;;:::o;13220:154::-;13276:9;13309:59;13325:42;13334:32;13360:5;13334:32;:::i;:::-;13325:42;:::i;:::-;13309:59;:::i;:::-;13296:72;;13220:154;;;:::o;13380:143::-;13473:43;13510:5;13473:43;:::i;:::-;13468:3;13461:56;13380:143;;:::o;13529:234::-;13628:4;13666:2;13655:9;13651:18;13643:26;;13679:77;13753:1;13742:9;13738:17;13729:6;13679:77;:::i;:::-;13529:234;;;;:::o;13769:225::-;13909:34;13905:1;13897:6;13893:14;13886:58;13978:8;13973:2;13965:6;13961:15;13954:33;13769:225;:::o;14000:366::-;14142:3;14163:67;14227:2;14222:3;14163:67;:::i;:::-;14156:74;;14239:93;14328:3;14239:93;:::i;:::-;14357:2;14352:3;14348:12;14341:19;;14000:366;;;:::o;14372:419::-;14538:4;14576:2;14565:9;14561:18;14553:26;;14625:9;14619:4;14615:20;14611:1;14600:9;14596:17;14589:47;14653:131;14779:4;14653:131;:::i;:::-;14645:139;;14372:419;;;:::o;14797:182::-;14937:34;14933:1;14925:6;14921:14;14914:58;14797:182;:::o;14985:366::-;15127:3;15148:67;15212:2;15207:3;15148:67;:::i;:::-;15141:74;;15224:93;15313:3;15224:93;:::i;:::-;15342:2;15337:3;15333:12;15326:19;;14985:366;;;:::o;15357:419::-;15523:4;15561:2;15550:9;15546:18;15538:26;;15610:9;15604:4;15600:20;15596:1;15585:9;15581:17;15574:47;15638:131;15764:4;15638:131;:::i;:::-;15630:139;;15357:419;;;:::o;15782:98::-;15833:6;15867:5;15861:12;15851:22;;15782:98;;;:::o;15886:147::-;15987:11;16024:3;16009:18;;15886:147;;;;:::o;16039:246::-;16120:1;16130:113;16144:6;16141:1;16138:13;16130:113;;;16229:1;16224:3;16220:11;16214:18;16210:1;16205:3;16201:11;16194:39;16166:2;16163:1;16159:10;16154:15;;16130:113;;;16277:1;16268:6;16263:3;16259:16;16252:27;16101:184;16039:246;;;:::o;16291:386::-;16395:3;16423:38;16455:5;16423:38;:::i;:::-;16477:88;16558:6;16553:3;16477:88;:::i;:::-;16470:95;;16574:65;16632:6;16627:3;16620:4;16613:5;16609:16;16574:65;:::i;:::-;16664:6;16659:3;16655:16;16648:23;;16399:278;16291:386;;;;:::o;16683:271::-;16813:3;16835:93;16924:3;16915:6;16835:93;:::i;:::-;16828:100;;16945:3;16938:10;;16683:271;;;;:::o;16960:181::-;17100:33;17096:1;17088:6;17084:14;17077:57;16960:181;:::o;17147:366::-;17289:3;17310:67;17374:2;17369:3;17310:67;:::i;:::-;17303:74;;17386:93;17475:3;17386:93;:::i;:::-;17504:2;17499:3;17495:12;17488:19;;17147:366;;;:::o;17519:419::-;17685:4;17723:2;17712:9;17708:18;17700:26;;17772:9;17766:4;17762:20;17758:1;17747:9;17743:17;17736:47;17800:131;17926:4;17800:131;:::i;:::-;17792:139;;17519:419;;;:::o;17944:230::-;18084:34;18080:1;18072:6;18068:14;18061:58;18153:13;18148:2;18140:6;18136:15;18129:38;17944:230;:::o;18180:366::-;18322:3;18343:67;18407:2;18402:3;18343:67;:::i;:::-;18336:74;;18419:93;18508:3;18419:93;:::i;:::-;18537:2;18532:3;18528:12;18521:19;;18180:366;;;:::o;18552:419::-;18718:4;18756:2;18745:9;18741:18;18733:26;;18805:9;18799:4;18795:20;18791:1;18780:9;18776:17;18769:47;18833:131;18959:4;18833:131;:::i;:::-;18825:139;;18552:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1486800","executionCost":"infinite","totalCost":"infinite"},"external":{"getInitializationState()":"2640","getMinimumAmountRequiredFor(address)":"2885","getPaycrest()":"2589","getValidatorInfo(address,address)":"infinite","initialize(address)":"191635","initialized(bool)":"28177","owner()":"2567","renounceOwnership()":"30421","rewardValidators(bytes32,address,address,address[],uint256,uint256)":"infinite","setMinimumAmountForTokens(address,uint256)":"26701","stake(address,uint256)":"infinite","transferOwnership(address)":"30832","withdraw(uint256,address,address)":"infinite"},"internal":{"_isTokenSupported(address)":"infinite"}},"methodIdentifiers":{"getInitializationState()":"c2b4610b","getMinimumAmountRequiredFor(address)":"e74599f3","getPaycrest()":"c56f80c1","getValidatorInfo(address,address)":"c5923aaf","initialize(address)":"c4d66de8","initialized(bool)":"c4a0bb07","owner()":"8da5cb5b","renounceOwnership()":"715018a6","rewardValidators(bytes32,address,address,address[],uint256,uint256)":"4a223c36","setMinimumAmountForTokens(address,uint256)":"f239c626","stake(address,uint256)":"adc9772e","transferOwnership(address)":"f2fde38b","withdraw(uint256,address,address)":"b460af94"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Insufficient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowInitPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowPaycrest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minimumStakeAmount\",\"type\":\"uint256\"}],\"name\":\"NewTokenSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorsReward\",\"type\":\"uint256\"}],\"name\":\"RewardValidators\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getInitializationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMinimumAmountRequiredFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaycrest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getValidatorInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paycrest\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primaryValidator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"secondaryValidators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"primaryValidatorsReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryValidatorsReward\",\"type\":\"uint256\"}],\"name\":\"rewardValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumAmountForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaycrestValidator.sol\":\"PaycrestValidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/PaycrestValidator.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport  \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract PaycrestValidator is OwnableUpgradeable, ReentrancyGuardUpgradeable { \\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    \\n    address private Paycrest;    \\n    bool private initialization;\\n    mapping(address => uint256) private minimumAmount;\\n    mapping(address => mapping (address => uint256)) private _balance;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _paycrest) external initializer {    \\n        Paycrest = _paycrest;   \\n        initialization = true;\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    event NewTokenSupported(address indexed token, uint256 indexed minimumStakeAmount);\\n    event Initialized(bool indexed status);\\n    event Staked(address indexed user, uint256 indexed amount);\\n    event Withdrawn(address indexed user, uint256 indexed amount);\\n    event RewardValidators(\\n        bytes32 orderId, \\n        address token, \\n        address indexed validator, \\n        uint256 indexed validatorsReward\\n    );\\n\\n    error ThrowInitPaused();\\n    error TokenNotSupported();\\n    error MinimumRequired();\\n    error Insufficient();\\n    error ThrowPaycrest();\\n\\n    modifier OnlyPaycrest() {\\n        if(msg.sender != Paycrest) revert ThrowPaycrest();\\n        _;\\n    }\\n\\n    function setMinimumAmountForTokens(address _token, uint256 minimumStakeAmount) external onlyOwner {\\n        minimumAmount[_token] = minimumStakeAmount;\\n        emit NewTokenSupported(_token, minimumStakeAmount);\\n    }\\n\\n    function initialized(bool status) external onlyOwner {\\n        initialization = status;\\n        emit Initialized(status);\\n    }\\n\\n    function stake(address token, uint256 amount)  external {\\n        if(!initialization) revert ThrowInitPaused();\\n        if(!_isTokenSupported(token)) revert TokenNotSupported();\\n        if(amount < minimumAmount[token]) revert MinimumRequired();\\n        IERC20Upgradeable(token).transferFrom(msg.sender, address(this), amount);\\n        _balance[msg.sender][token] += amount;\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount, address token, address recipient) external nonReentrant() {\\n        uint256 previouslyStakedAmount = _balance[msg.sender][token];\\n        if(amount > previouslyStakedAmount) revert Insufficient();\\n        _balance[msg.sender][token] -= amount;\\n        IERC20Upgradeable(token).transfer(recipient, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function rewardValidators(\\n        bytes32 orderId, \\n        address token, \\n        address primaryValidator, \\n        address[] memory secondaryValidators,\\n        uint256 primaryValidatorsReward, \\n        uint256 secondaryValidatorsReward\\n    ) external OnlyPaycrest() returns(bool) {\\n        uint256 lengthOfSecondaryValidators = secondaryValidators.length;\\n        uint256 secondaryValidatorsShares = secondaryValidatorsReward / lengthOfSecondaryValidators;\\n        for(uint256 i = 0; i < lengthOfSecondaryValidators; ) {\\n            _balance[secondaryValidators[i]][token] += secondaryValidatorsShares;\\n            emit RewardValidators(orderId, token, secondaryValidators[i], secondaryValidatorsShares);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        _balance[primaryValidator][token] += primaryValidatorsReward;\\n        emit RewardValidators(orderId, token, primaryValidator, primaryValidatorsReward);\\n        return true;\\n    }\\n\\n\\n    function _isTokenSupported(address token) private view returns(bool) {\\n        (, bytes memory result) = Paycrest.staticcall(abi.encodeWithSignature(\\\"isTokenSupported(address)\\\", token));\\n        return abi.decode(result, (bool));\\n    }\\n\\n    function getPaycrest() external view returns(address) {\\n        return Paycrest;\\n    }\\n\\n    function getInitializationState() external view returns(bool) {\\n        return initialization;\\n    }\\n\\n    function getMinimumAmountRequiredFor(address token) external view returns(uint256) {\\n        return minimumAmount[token];\\n    }\\n\\n    function getValidatorInfo(address user, address token) external view returns(uint256) {\\n        return _balance[user][token];\\n    }\\n\\n}\\n\",\"keccak256\":\"0xca0a5f1d00825edc7406658d1ab9a54642b8af31738819c15537d1c165d2b397\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1245,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":314,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"_status","offset":0,"slot":"101","type":"t_uint256"},{"astId":383,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":4523,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"Paycrest","offset":0,"slot":"151","type":"t_address"},{"astId":4525,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"initialization","offset":20,"slot":"151","type":"t_bool"},{"astId":4529,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"minimumAmount","offset":0,"slot":"152","type":"t_mapping(t_address,t_uint256)"},{"astId":4535,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"_balance","offset":0,"slot":"153","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interface/IPaycrest.sol":{"IPaycrest":{"abi":[{"inputs":[],"name":"InvalidInstitutionCode","type":"error"},{"inputs":[],"name":"InvalidSigner","type":"error"},{"inputs":[],"name":"NotWhitelisted","type":"error"},{"inputs":[],"name":"OnlyAggregator","type":"error"},{"inputs":[],"name":"OrderFulfilled","type":"error"},{"inputs":[],"name":"UnableToProcessRewards","type":"error"},{"inputs":[],"name":"Unsuported","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"institutionCode","type":"bytes32"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"}],"name":"Refunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"Settled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferSenderFee","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_institutionCode","type":"bytes32"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint64","name":"protocolReward","type":"uint64"},{"internalType":"uint64","name":"primaryValidatorReward","type":"uint64"},{"internalType":"uint64","name":"secondaryValidatorReward","type":"uint64"},{"internalType":"uint256","name":"max_bps","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLiquidityAggregator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPaycrest.Order","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"getWhitelistedStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"refund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"address","name":"_primaryValidator","type":"address"},{"internalType":"address[]","name":"_secondaryValidators","type":"address[]"},{"internalType":"address","name":"_liquidityProvider","type":"address"},{"internalType":"uint96","name":"_settlePercent","type":"uint96"}],"name":"settle","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Chef Photons, Paycrest Team serving high quality drinks; drink responsibly. Factory and global config params","events":{"Deposit(bytes32,uint256,uint256,bytes32,string)":{"details":"Emitted when deposit is made."},"Refunded(bytes32)":{"details":"Emitted when aggregator refund transaction."},"Settled(bytes32,address,uint96)":{"details":"Emitted when aggregator settle transaction."},"TransferSenderFee(address,uint256)":{"details":"Emitted when sender get therir rewards."}},"kind":"dev","methods":{"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)":{"details":"See {isTokenSupported}. `amount` must be greater than minimum `_refundable` refundable address must not be zero address","params":{"_amount":"amount in the decimal of `_token` above.","_rate":"rate at which sender intended to sell `_amount` of `_token`.","_refundAddress":"address that is going to recieve `_amount` in `_token` when there is a need to refund.","_token":"address of the token.","messageHash":"hash must be the result of a hash operation for the verification to be secure. message"},"returns":{"_orderId":"the bytes20 which is the orderId"}},"getFeeDetails()":{"returns":{"max_bps":"maximum amount in bps \"100% == 100_000\".","primaryValidatorReward":"amount that will be given to primary validator in percentage from `protocolReward`","protocolReward":"amount that will be taken in percentage on all trade.","secondaryValidatorReward":"amount that will be shared between secondary validator in percentage from `protocolReward`"}},"getLiquidityAggregator()":{"returns":{"_0":"address of `liquidityAggregator`."}},"getOrderInfo(bytes32)":{"params":{"_orderId":"transaction Id."}},"getWhitelistedStatus(address)":{"params":{"sender":"address of the sender."},"returns":{"_0":"address of `status`."}},"isTokenSupported(address)":{"params":{"_token":"address of the token to check."},"returns":{"_0":"return the status of `_token` {bool}"}},"refund(bytes32)":{"params":{"_orderId":"transaction Id."},"returns":{"_0":"return the status of transaction {bool}"}},"settle(bytes32,address,address[],address,uint96)":{"params":{"_liquidityProvider":"address of the liquidity provider.","_orderId":"transaction Id.","_primaryValidator":"address primary validator.","_secondaryValidators":"arrays of secondary validators.","_settlePercent":"rate at which the transaction is settled."},"returns":{"_0":"return the status of transaction {bool}"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)":"d12ff20a","getFeeDetails()":"b810c636","getLiquidityAggregator()":"2ebc5356","getOrderInfo(bytes32)":"768c6ec0","getWhitelistedStatus(address)":"d8e8de34","isTokenSupported(address)":"75151b63","refund(bytes32)":"7249fbb6","settle(bytes32,address,address[],address,uint96)":"e5b32cdf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInstitutionCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAggregator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderFulfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableToProcessRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unsuported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolReward\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"primaryValidatorReward\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondaryValidatorReward\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"max_bps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_primaryValidator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_secondaryValidators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_settlePercent\",\"type\":\"uint96\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Chef Photons, Paycrest Team serving high quality drinks; drink responsibly. Factory and global config params\",\"events\":{\"Deposit(bytes32,uint256,uint256,bytes32,string)\":{\"details\":\"Emitted when deposit is made.\"},\"Refunded(bytes32)\":{\"details\":\"Emitted when aggregator refund transaction.\"},\"Settled(bytes32,address,uint96)\":{\"details\":\"Emitted when aggregator settle transaction.\"},\"TransferSenderFee(address,uint256)\":{\"details\":\"Emitted when sender get therir rewards.\"}},\"kind\":\"dev\",\"methods\":{\"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"See {isTokenSupported}. `amount` must be greater than minimum `_refundable` refundable address must not be zero address\",\"params\":{\"_amount\":\"amount in the decimal of `_token` above.\",\"_rate\":\"rate at which sender intended to sell `_amount` of `_token`.\",\"_refundAddress\":\"address that is going to recieve `_amount` in `_token` when there is a need to refund.\",\"_token\":\"address of the token.\",\"messageHash\":\"hash must be the result of a hash operation for the verification to be secure. message\"},\"returns\":{\"_orderId\":\"the bytes20 which is the orderId\"}},\"getFeeDetails()\":{\"returns\":{\"max_bps\":\"maximum amount in bps \\\"100% == 100_000\\\".\",\"primaryValidatorReward\":\"amount that will be given to primary validator in percentage from `protocolReward`\",\"protocolReward\":\"amount that will be taken in percentage on all trade.\",\"secondaryValidatorReward\":\"amount that will be shared between secondary validator in percentage from `protocolReward`\"}},\"getLiquidityAggregator()\":{\"returns\":{\"_0\":\"address of `liquidityAggregator`.\"}},\"getOrderInfo(bytes32)\":{\"params\":{\"_orderId\":\"transaction Id.\"}},\"getWhitelistedStatus(address)\":{\"params\":{\"sender\":\"address of the sender.\"},\"returns\":{\"_0\":\"address of `status`.\"}},\"isTokenSupported(address)\":{\"params\":{\"_token\":\"address of the token to check.\"},\"returns\":{\"_0\":\"return the status of `_token` {bool}\"}},\"refund(bytes32)\":{\"params\":{\"_orderId\":\"transaction Id.\"},\"returns\":{\"_0\":\"return the status of transaction {bool}\"}},\"settle(bytes32,address,address[],address,uint96)\":{\"params\":{\"_liquidityProvider\":\"address of the liquidity provider.\",\"_orderId\":\"transaction Id.\",\"_primaryValidator\":\"address primary validator.\",\"_secondaryValidators\":\"arrays of secondary validators.\",\"_settlePercent\":\"rate at which the transaction is settled.\"},\"returns\":{\"_0\":\"return the status of transaction {bool}\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidSigner()\":[{\"notice\":\"Revert with invalid signer\"}],\"OnlyAggregator()\":[{\"notice\":\"Revert when caller is not an aggregator\"}],\"OrderFulfilled()\":[{\"notice\":\"Revert when trx has been fulfilled\"}],\"UnableToProcessRewards()\":[{\"notice\":\"Revert when rewards are not been distributed.\"}],\"Unsuported()\":[{\"notice\":\"Revert when input amount is zero\"}]},\"kind\":\"user\",\"methods\":{\"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)\":{\"notice\":\"lock sender `_amount` of `token` into Paycrest. Requirements: `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\"},\"getFeeDetails()\":{\"notice\":\"get every rewards and address on Paycrest.\"},\"getLiquidityAggregator()\":{\"notice\":\"get address of liquidity aggregator.\"},\"getOrderInfo(bytes32)\":{\"notice\":\"get order details.\"},\"getWhitelistedStatus(address)\":{\"notice\":\"get address of sender whitelisting status.\"},\"isTokenSupported(address)\":{\"notice\":\"get supported token from Paycrest.\"},\"refund(bytes32)\":{\"notice\":\"refund to the specified refundable address. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `isFulfilled` must be false.\"},\"settle(bytes32,address,address[],address,uint96)\":{\"notice\":\"settle transaction and distribute rewards accordingly. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `_primaryValidator` must have stake on the Paycrest staking platform. `_secondaryValidators` must have stake on the Paycrest staking platform. `amount` must be greater than minimum `_refundable` refundable address must not be zero address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interface/IPaycrest.sol\":\"IPaycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interface/IPaycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/**\\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /// @dev Emitted when deposit is made.\\n    event Deposit(bytes32 indexed orderId, uint256 indexed amount, uint256 indexed rate, bytes32 institutionCode, string messageHash);\\n    /// @dev Emitted when aggregator settle transaction.\\n    event Settled(bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent);\\n    /// @dev Emitted when aggregator refund transaction.\\n    event Refunded(bytes32 indexed orderId);\\n    /// @dev Emitted when sender get therir rewards.\\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\\n\\n    /* ##################################################################\\n                                CUSTOM ERRORS\\n    ################################################################## */\\n    /// @notice Revert when caller is not an aggregator\\n    error OnlyAggregator();\\n    /// @notice Revert with invalid signer\\n    error InvalidSigner();\\n    /// @notice Revert when input amount is zero\\n    error Unsuported();\\n    /// @notice Revert when trx has been fulfilled\\n    error OrderFulfilled();\\n    /// @notice Revert when rewards are not been distributed.\\n    error UnableToProcessRewards();\\n    error InvalidInstitutionCode();\\n    error NotWhitelisted();\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    struct TransactionMetadata {\\n        bytes8 identifier;                 //                                                                   slot 0\\n        bytes8 institution;                //                                                                   slot 0\\n        bytes8 name;                       //                                                                   slot 0\\n        bytes8 currency;                   //                                                                   slot 0\\n        uint256 liquidityProviderID;       //                                                                   slot 1\\n    }\\n\\n    struct Order {\\n        address seller;                     //                                                                   slot 0\\n        address token;                      //                                                                   slot 1\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint96 rate;                        //                                                                   slot 1\\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\\n        uint96 currentBPS;                  //                                                                   slot 2 {}\\n        uint256 amount;                     //                                                                   slot 3\\n    }\\n\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /// @notice lock sender `_amount` of `token` into Paycrest.\\n    /// Requirements:\\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _token address of the token.\\n    /// @param _amount amount in the decimal of `_token` above.\\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\\n    /// @return _orderId the bytes20 which is the orderId\\n    function createOrder(address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash)  external returns(bytes32 _orderId);\\n\\n    /// @notice settle transaction and distribute rewards accordingly.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _orderId transaction Id.\\n    /// @param _primaryValidator address primary validator.\\n    /// @param _secondaryValidators arrays of secondary validators.\\n    /// @param _liquidityProvider address of the liquidity provider.\\n    /// @param _settlePercent rate at which the transaction is settled.\\n    /// @return return the status of transaction {bool}\\n    function settle(bytes32 _orderId, address _primaryValidator, address[] calldata _secondaryValidators, address _liquidityProvider, uint96 _settlePercent)  external returns(bool);\\n\\n    /// @notice refund to the specified refundable address.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `isFulfilled` must be false.\\n    /// @param _orderId transaction Id.\\n    /// @return return the status of transaction {bool}\\n    function refund(bytes32 _orderId)  external returns(bool);\\n\\n    /// @notice get supported token from Paycrest.\\n    /// @param _token address of the token to check.\\n    /// @return return the status of `_token` {bool}\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /// @notice get order details.\\n    /// @param _orderId transaction Id.\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /// @notice get every rewards and address on Paycrest.\\n    /// @return protocolReward amount that will be taken in percentage on all trade.\\n    /// @return primaryValidatorReward amount that will be given to primary validator in percentage from `protocolReward`\\n    /// @return secondaryValidatorReward amount that will be shared between secondary validator in percentage from `protocolReward`\\n    /// @return max_bps maximum amount in bps \\\"100% == 100_000\\\".\\n    function getFeeDetails() external view returns(\\n        uint64 protocolReward, \\n        uint64 primaryValidatorReward, \\n        uint64 secondaryValidatorReward,\\n        uint256 max_bps\\n    );\\n\\n    /// @notice get address of liquidity aggregator.\\n    /// @return address of `liquidityAggregator`.\\n    function getLiquidityAggregator() external view returns(address);\\n\\n    \\n    /// @notice get address of sender whitelisting status.\\n    /// @param sender address of the sender.\\n    /// @return address of `status`.\\n    function getWhitelistedStatus(address sender) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x6ff831e0fbc139276a793dcf7bfa3c6dc664a661dfacd555a7b22fa4b58fc7e0\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"InvalidSigner()":[{"notice":"Revert with invalid signer"}],"OnlyAggregator()":[{"notice":"Revert when caller is not an aggregator"}],"OrderFulfilled()":[{"notice":"Revert when trx has been fulfilled"}],"UnableToProcessRewards()":[{"notice":"Revert when rewards are not been distributed."}],"Unsuported()":[{"notice":"Revert when input amount is zero"}]},"kind":"user","methods":{"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)":{"notice":"lock sender `_amount` of `token` into Paycrest. Requirements: `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call."},"getFeeDetails()":{"notice":"get every rewards and address on Paycrest."},"getLiquidityAggregator()":{"notice":"get address of liquidity aggregator."},"getOrderInfo(bytes32)":{"notice":"get order details."},"getWhitelistedStatus(address)":{"notice":"get address of sender whitelisting status."},"isTokenSupported(address)":{"notice":"get supported token from Paycrest."},"refund(bytes32)":{"notice":"refund to the specified refundable address. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `isFulfilled` must be false."},"settle(bytes32,address,address[],address,uint96)":{"notice":"settle transaction and distribute rewards accordingly. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `_primaryValidator` must have stake on the Paycrest staking platform. `_secondaryValidators` must have stake on the Paycrest staking platform. `amount` must be greater than minimum `_refundable` refundable address must not be zero address"}},"version":1}}},"contracts/interface/IPaycrestStake.sol":{"IPaycrestStake":{"abi":[{"inputs":[{"internalType":"bytes32","name":"orderId","type":"bytes32"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"primaryValidator","type":"address"},{"internalType":"address[]","name":"secondaryValidators","type":"address[]"},{"internalType":"uint256","name":"primaryValidatorsReward","type":"uint256"},{"internalType":"uint256","name":"secondaryValidatorsReward","type":"uint256"}],"name":"rewardValidators","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Chef Photons, Vaultka Team serving high quality drinks; drink responsibly. Factory and global config params","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rewardValidators(bytes32,address,address,address[],uint256,uint256)":"4a223c36"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primaryValidator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"secondaryValidators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"primaryValidatorsReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryValidatorsReward\",\"type\":\"uint256\"}],\"name\":\"rewardValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Chef Photons, Vaultka Team serving high quality drinks; drink responsibly. Factory and global config params\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interface/IPaycrestStake.sol\":\"IPaycrestStake\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IPaycrestStake.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\n/**\\n * @author Chef Photons, Vaultka Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrestStake {\\n    \\n    function rewardValidators(bytes32 orderId, address token, address primaryValidator, address[] memory secondaryValidators, uint256 primaryValidatorsReward, uint256 secondaryValidatorsReward) external returns(bool);\\n    \\n}\\n\",\"keccak256\":\"0x7f2fb3af09d1a6236c7ada47fcac021358876c675dc4b27e3f99a2c17542db0e\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interface/IPaycrestValidator.sol":{"IPaycrestValidator":{"abi":[{"inputs":[{"internalType":"bytes32","name":"orderId","type":"bytes32"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"primaryValidator","type":"address"},{"internalType":"address[]","name":"secondaryValidators","type":"address[]"},{"internalType":"uint256","name":"primaryValidatorsReward","type":"uint256"},{"internalType":"uint256","name":"secondaryValidatorsReward","type":"uint256"}],"name":"rewardValidators","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Chef Photons, Vaultka Team serving high quality drinks; drink responsibly. Factory and global config params","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rewardValidators(bytes32,address,address,address[],uint256,uint256)":"4a223c36"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primaryValidator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"secondaryValidators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"primaryValidatorsReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryValidatorsReward\",\"type\":\"uint256\"}],\"name\":\"rewardValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Chef Photons, Vaultka Team serving high quality drinks; drink responsibly. Factory and global config params\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interface/IPaycrestValidator.sol\":\"IPaycrestValidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IPaycrestValidator.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\n/**\\n * @author Chef Photons, Vaultka Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrestValidator {\\n    function rewardValidators(bytes32 orderId, address token, address primaryValidator, address[] memory secondaryValidators, uint256 primaryValidatorsReward, uint256 secondaryValidatorsReward) external returns(bool);\\n}\\n\",\"keccak256\":\"0xcdd6b768dcb003e40e2eedfe327a6b612809fe96c75246c31f4862afcf100533\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/mocks/MockUSDC.sol":{"MockUSDC":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"burnAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Mock mintable USDC","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2857":{"entryPoint":null,"id":2857,"parameterSlots":2,"returnSlots":0},"@_5157":{"entryPoint":null,"id":5157,"parameterSlots":0,"returnSlots":0},"array_dataslot_t_string_storage":{"entryPoint":328,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":170,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":649,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":464,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":610,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":484,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":804,"id":null,"parameterSlots":2,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":349,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":275,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":774,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":474,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":742,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":228,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":181,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":524,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":365,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":729,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":582,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":378,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":534,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":577,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5231:23","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:23","statements":[{"nodeType":"YulAssignment","src":"77:22:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:23"},"nodeType":"YulFunctionCall","src":"87:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:23"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:23","type":""}],"src":"7:99:23"},{"body":{"nodeType":"YulBlock","src":"140:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"157:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"160:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"150:6:23"},"nodeType":"YulFunctionCall","src":"150:88:23"},"nodeType":"YulExpressionStatement","src":"150:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"254:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"257:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"247:6:23"},"nodeType":"YulFunctionCall","src":"247:15:23"},"nodeType":"YulExpressionStatement","src":"247:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"278:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"281:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"271:6:23"},"nodeType":"YulFunctionCall","src":"271:15:23"},"nodeType":"YulExpressionStatement","src":"271:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"112:180:23"},{"body":{"nodeType":"YulBlock","src":"326:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"343:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"346:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"336:6:23"},"nodeType":"YulFunctionCall","src":"336:88:23"},"nodeType":"YulExpressionStatement","src":"336:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"443:4:23","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"433:6:23"},"nodeType":"YulFunctionCall","src":"433:15:23"},"nodeType":"YulExpressionStatement","src":"433:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"464:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"467:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"457:6:23"},"nodeType":"YulFunctionCall","src":"457:15:23"},"nodeType":"YulExpressionStatement","src":"457:15:23"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"298:180:23"},{"body":{"nodeType":"YulBlock","src":"535:269:23","statements":[{"nodeType":"YulAssignment","src":"545:22:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"559:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"565:1:23","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"555:3:23"},"nodeType":"YulFunctionCall","src":"555:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"545:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"576:38:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"606:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"612:1:23","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"602:3:23"},"nodeType":"YulFunctionCall","src":"602:12:23"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"580:18:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"653:51:23","statements":[{"nodeType":"YulAssignment","src":"667:27:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"681:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"689:4:23","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"677:3:23"},"nodeType":"YulFunctionCall","src":"677:17:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"667:6:23"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"633:18:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"626:6:23"},"nodeType":"YulFunctionCall","src":"626:26:23"},"nodeType":"YulIf","src":"623:81:23"},{"body":{"nodeType":"YulBlock","src":"756:42:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"770:16:23"},"nodeType":"YulFunctionCall","src":"770:18:23"},"nodeType":"YulExpressionStatement","src":"770:18:23"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"720:18:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"743:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"751:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"740:2:23"},"nodeType":"YulFunctionCall","src":"740:14:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"717:2:23"},"nodeType":"YulFunctionCall","src":"717:38:23"},"nodeType":"YulIf","src":"714:84:23"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"519:4:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"528:6:23","type":""}],"src":"484:320:23"},{"body":{"nodeType":"YulBlock","src":"864:87:23","statements":[{"nodeType":"YulAssignment","src":"874:11:23","value":{"name":"ptr","nodeType":"YulIdentifier","src":"882:3:23"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"874:4:23"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"902:1:23","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"905:3:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"895:6:23"},"nodeType":"YulFunctionCall","src":"895:14:23"},"nodeType":"YulExpressionStatement","src":"895:14:23"},{"nodeType":"YulAssignment","src":"918:26:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"936:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"939:4:23","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"926:9:23"},"nodeType":"YulFunctionCall","src":"926:18:23"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"918:4:23"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"851:3:23","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"859:4:23","type":""}],"src":"810:141:23"},{"body":{"nodeType":"YulBlock","src":"1001:49:23","statements":[{"nodeType":"YulAssignment","src":"1011:33:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1029:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"1036:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1025:3:23"},"nodeType":"YulFunctionCall","src":"1025:14:23"},{"kind":"number","nodeType":"YulLiteral","src":"1041:2:23","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"1021:3:23"},"nodeType":"YulFunctionCall","src":"1021:23:23"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1011:6:23"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"984:5:23","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"994:6:23","type":""}],"src":"957:93:23"},{"body":{"nodeType":"YulBlock","src":"1109:54:23","statements":[{"nodeType":"YulAssignment","src":"1119:37:23","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"1144:4:23"},{"name":"value","nodeType":"YulIdentifier","src":"1150:5:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1140:3:23"},"nodeType":"YulFunctionCall","src":"1140:16:23"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"1119:8:23"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"1084:4:23","type":""},{"name":"value","nodeType":"YulTypedName","src":"1090:5:23","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"1100:8:23","type":""}],"src":"1056:107:23"},{"body":{"nodeType":"YulBlock","src":"1245:317:23","statements":[{"nodeType":"YulVariableDeclaration","src":"1255:35:23","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"1276:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"1288:1:23","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1272:3:23"},"nodeType":"YulFunctionCall","src":"1272:18:23"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"1259:9:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1299:109:23","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"1330:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1341:66:23","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"1311:18:23"},"nodeType":"YulFunctionCall","src":"1311:97:23"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"1303:4:23","type":""}]},{"nodeType":"YulAssignment","src":"1417:51:23","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"1448:9:23"},{"name":"toInsert","nodeType":"YulIdentifier","src":"1459:8:23"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"1429:18:23"},"nodeType":"YulFunctionCall","src":"1429:39:23"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"1417:8:23"}]},{"nodeType":"YulAssignment","src":"1477:30:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1490:5:23"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"1501:4:23"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1497:3:23"},"nodeType":"YulFunctionCall","src":"1497:9:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1486:3:23"},"nodeType":"YulFunctionCall","src":"1486:21:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1477:5:23"}]},{"nodeType":"YulAssignment","src":"1516:40:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1529:5:23"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"1540:8:23"},{"name":"mask","nodeType":"YulIdentifier","src":"1550:4:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1536:3:23"},"nodeType":"YulFunctionCall","src":"1536:19:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1526:2:23"},"nodeType":"YulFunctionCall","src":"1526:30:23"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1516:6:23"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1206:5:23","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"1213:10:23","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"1225:8:23","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1238:6:23","type":""}],"src":"1169:393:23"},{"body":{"nodeType":"YulBlock","src":"1613:32:23","statements":[{"nodeType":"YulAssignment","src":"1623:16:23","value":{"name":"value","nodeType":"YulIdentifier","src":"1634:5:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1623:7:23"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1595:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1605:7:23","type":""}],"src":"1568:77:23"},{"body":{"nodeType":"YulBlock","src":"1683:28:23","statements":[{"nodeType":"YulAssignment","src":"1693:12:23","value":{"name":"value","nodeType":"YulIdentifier","src":"1700:5:23"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1693:3:23"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1669:5:23","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1679:3:23","type":""}],"src":"1651:60:23"},{"body":{"nodeType":"YulBlock","src":"1777:82:23","statements":[{"nodeType":"YulAssignment","src":"1787:66:23","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1845:5:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1827:17:23"},"nodeType":"YulFunctionCall","src":"1827:24:23"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"1818:8:23"},"nodeType":"YulFunctionCall","src":"1818:34:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1800:17:23"},"nodeType":"YulFunctionCall","src":"1800:53:23"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"1787:9:23"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1757:5:23","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"1767:9:23","type":""}],"src":"1717:142:23"},{"body":{"nodeType":"YulBlock","src":"1912:28:23","statements":[{"nodeType":"YulAssignment","src":"1922:12:23","value":{"name":"value","nodeType":"YulIdentifier","src":"1929:5:23"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1922:3:23"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1898:5:23","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1908:3:23","type":""}],"src":"1865:75:23"},{"body":{"nodeType":"YulBlock","src":"2022:193:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2032:63:23","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"2087:7:23"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2056:30:23"},"nodeType":"YulFunctionCall","src":"2056:39:23"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"2036:16:23","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2111:4:23"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2151:4:23"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2145:5:23"},"nodeType":"YulFunctionCall","src":"2145:11:23"},{"name":"offset","nodeType":"YulIdentifier","src":"2158:6:23"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"2190:16:23"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"2166:23:23"},"nodeType":"YulFunctionCall","src":"2166:41:23"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"2117:27:23"},"nodeType":"YulFunctionCall","src":"2117:91:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2104:6:23"},"nodeType":"YulFunctionCall","src":"2104:105:23"},"nodeType":"YulExpressionStatement","src":"2104:105:23"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1999:4:23","type":""},{"name":"offset","nodeType":"YulTypedName","src":"2005:6:23","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"2013:7:23","type":""}],"src":"1946:269:23"},{"body":{"nodeType":"YulBlock","src":"2270:24:23","statements":[{"nodeType":"YulAssignment","src":"2280:8:23","value":{"kind":"number","nodeType":"YulLiteral","src":"2287:1:23","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2280:3:23"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2266:3:23","type":""}],"src":"2221:73:23"},{"body":{"nodeType":"YulBlock","src":"2353:136:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2363:46:23","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"2377:30:23"},"nodeType":"YulFunctionCall","src":"2377:32:23"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"2367:6:23","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2462:4:23"},{"name":"offset","nodeType":"YulIdentifier","src":"2468:6:23"},{"name":"zero_0","nodeType":"YulIdentifier","src":"2476:6:23"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2418:43:23"},"nodeType":"YulFunctionCall","src":"2418:65:23"},"nodeType":"YulExpressionStatement","src":"2418:65:23"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2339:4:23","type":""},{"name":"offset","nodeType":"YulTypedName","src":"2345:6:23","type":""}],"src":"2300:189:23"},{"body":{"nodeType":"YulBlock","src":"2545:136:23","statements":[{"body":{"nodeType":"YulBlock","src":"2612:63:23","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2656:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"2663:1:23","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"2626:29:23"},"nodeType":"YulFunctionCall","src":"2626:39:23"},"nodeType":"YulExpressionStatement","src":"2626:39:23"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2565:5:23"},{"name":"end","nodeType":"YulIdentifier","src":"2572:3:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2562:2:23"},"nodeType":"YulFunctionCall","src":"2562:14:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2577:26:23","statements":[{"nodeType":"YulAssignment","src":"2579:22:23","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2592:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"2599:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2588:3:23"},"nodeType":"YulFunctionCall","src":"2588:13:23"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2579:5:23"}]}]},"pre":{"nodeType":"YulBlock","src":"2559:2:23","statements":[]},"src":"2555:120:23"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"2533:5:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"2540:3:23","type":""}],"src":"2495:186:23"},{"body":{"nodeType":"YulBlock","src":"2766:464:23","statements":[{"body":{"nodeType":"YulBlock","src":"2792:431:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2806:54:23","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2854:5:23"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"2822:31:23"},"nodeType":"YulFunctionCall","src":"2822:38:23"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"2810:8:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2873:63:23","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"2896:8:23"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2924:10:23"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"2906:17:23"},"nodeType":"YulFunctionCall","src":"2906:29:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2892:3:23"},"nodeType":"YulFunctionCall","src":"2892:44:23"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2877:11:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3093:27:23","statements":[{"nodeType":"YulAssignment","src":"3095:23:23","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"3110:8:23"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3095:11:23"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3077:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"3089:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3074:2:23"},"nodeType":"YulFunctionCall","src":"3074:18:23"},"nodeType":"YulIf","src":"3071:49:23"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3162:11:23"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"3179:8:23"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3207:3:23"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"3189:17:23"},"nodeType":"YulFunctionCall","src":"3189:22:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3175:3:23"},"nodeType":"YulFunctionCall","src":"3175:37:23"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"3133:28:23"},"nodeType":"YulFunctionCall","src":"3133:80:23"},"nodeType":"YulExpressionStatement","src":"3133:80:23"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2783:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"2788:2:23","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2780:2:23"},"nodeType":"YulFunctionCall","src":"2780:11:23"},"nodeType":"YulIf","src":"2777:446:23"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2742:5:23","type":""},{"name":"len","nodeType":"YulTypedName","src":"2749:3:23","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2754:10:23","type":""}],"src":"2687:543:23"},{"body":{"nodeType":"YulBlock","src":"3299:54:23","statements":[{"nodeType":"YulAssignment","src":"3309:37:23","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"3334:4:23"},{"name":"value","nodeType":"YulIdentifier","src":"3340:5:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3330:3:23"},"nodeType":"YulFunctionCall","src":"3330:16:23"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"3309:8:23"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"3274:4:23","type":""},{"name":"value","nodeType":"YulTypedName","src":"3280:5:23","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"3290:8:23","type":""}],"src":"3236:117:23"},{"body":{"nodeType":"YulBlock","src":"3410:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"3420:68:23","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3469:1:23","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"3472:5:23"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3465:3:23"},"nodeType":"YulFunctionCall","src":"3465:13:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3484:1:23","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3480:3:23"},"nodeType":"YulFunctionCall","src":"3480:6:23"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"3436:28:23"},"nodeType":"YulFunctionCall","src":"3436:51:23"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3432:3:23"},"nodeType":"YulFunctionCall","src":"3432:56:23"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"3424:4:23","type":""}]},{"nodeType":"YulAssignment","src":"3497:25:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3511:4:23"},{"name":"mask","nodeType":"YulIdentifier","src":"3517:4:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3507:3:23"},"nodeType":"YulFunctionCall","src":"3507:15:23"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3497:6:23"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3387:4:23","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"3393:5:23","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"3403:6:23","type":""}],"src":"3359:169:23"},{"body":{"nodeType":"YulBlock","src":"3614:214:23","statements":[{"nodeType":"YulAssignment","src":"3747:37:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3774:4:23"},{"name":"len","nodeType":"YulIdentifier","src":"3780:3:23"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"3755:18:23"},"nodeType":"YulFunctionCall","src":"3755:29:23"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3747:4:23"}]},{"nodeType":"YulAssignment","src":"3793:29:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3804:4:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3814:1:23","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"3817:3:23"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3810:3:23"},"nodeType":"YulFunctionCall","src":"3810:11:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3801:2:23"},"nodeType":"YulFunctionCall","src":"3801:21:23"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"3793:4:23"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3595:4:23","type":""},{"name":"len","nodeType":"YulTypedName","src":"3601:3:23","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"3609:4:23","type":""}],"src":"3533:295:23"},{"body":{"nodeType":"YulBlock","src":"3925:1303:23","statements":[{"nodeType":"YulVariableDeclaration","src":"3936:51:23","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3983:3:23"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3950:32:23"},"nodeType":"YulFunctionCall","src":"3950:37:23"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3940:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4072:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4074:16:23"},"nodeType":"YulFunctionCall","src":"4074:18:23"},"nodeType":"YulExpressionStatement","src":"4074:18:23"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4044:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4052:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4041:2:23"},"nodeType":"YulFunctionCall","src":"4041:30:23"},"nodeType":"YulIf","src":"4038:56:23"},{"nodeType":"YulVariableDeclaration","src":"4104:52:23","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4150:4:23"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4144:5:23"},"nodeType":"YulFunctionCall","src":"4144:11:23"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"4118:25:23"},"nodeType":"YulFunctionCall","src":"4118:38:23"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"4108:6:23","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4249:4:23"},{"name":"oldLen","nodeType":"YulIdentifier","src":"4255:6:23"},{"name":"newLen","nodeType":"YulIdentifier","src":"4263:6:23"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"4203:45:23"},"nodeType":"YulFunctionCall","src":"4203:67:23"},"nodeType":"YulExpressionStatement","src":"4203:67:23"},{"nodeType":"YulVariableDeclaration","src":"4280:18:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4297:1:23","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"4284:9:23","type":""}]},{"nodeType":"YulAssignment","src":"4308:17:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4321:4:23","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4308:9:23"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"4372:611:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4386:37:23","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4405:6:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4417:4:23","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4413:3:23"},"nodeType":"YulFunctionCall","src":"4413:9:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4401:3:23"},"nodeType":"YulFunctionCall","src":"4401:22:23"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"4390:7:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4437:51:23","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4483:4:23"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"4451:31:23"},"nodeType":"YulFunctionCall","src":"4451:37:23"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"4441:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4501:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4510:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4505:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4569:163:23","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4594:6:23"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4612:3:23"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4617:9:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4608:3:23"},"nodeType":"YulFunctionCall","src":"4608:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4602:5:23"},"nodeType":"YulFunctionCall","src":"4602:26:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4587:6:23"},"nodeType":"YulFunctionCall","src":"4587:42:23"},"nodeType":"YulExpressionStatement","src":"4587:42:23"},{"nodeType":"YulAssignment","src":"4646:24:23","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4660:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4668:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4656:3:23"},"nodeType":"YulFunctionCall","src":"4656:14:23"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4646:6:23"}]},{"nodeType":"YulAssignment","src":"4687:31:23","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4704:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4715:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4700:3:23"},"nodeType":"YulFunctionCall","src":"4700:18:23"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4687:9:23"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4535:1:23"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"4538:7:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4532:2:23"},"nodeType":"YulFunctionCall","src":"4532:14:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4547:21:23","statements":[{"nodeType":"YulAssignment","src":"4549:17:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4558:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"4561:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4554:3:23"},"nodeType":"YulFunctionCall","src":"4554:12:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4549:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"4528:3:23","statements":[]},"src":"4524:208:23"},{"body":{"nodeType":"YulBlock","src":"4768:156:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4786:43:23","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4813:3:23"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4818:9:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4809:3:23"},"nodeType":"YulFunctionCall","src":"4809:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4803:5:23"},"nodeType":"YulFunctionCall","src":"4803:26:23"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"4790:9:23","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4853:6:23"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"4880:9:23"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4895:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4903:4:23","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4891:3:23"},"nodeType":"YulFunctionCall","src":"4891:17:23"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"4861:18:23"},"nodeType":"YulFunctionCall","src":"4861:48:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4846:6:23"},"nodeType":"YulFunctionCall","src":"4846:64:23"},"nodeType":"YulExpressionStatement","src":"4846:64:23"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"4751:7:23"},{"name":"newLen","nodeType":"YulIdentifier","src":"4760:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4748:2:23"},"nodeType":"YulFunctionCall","src":"4748:19:23"},"nodeType":"YulIf","src":"4745:179:23"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4944:4:23"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4958:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4966:1:23","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4954:3:23"},"nodeType":"YulFunctionCall","src":"4954:14:23"},{"kind":"number","nodeType":"YulLiteral","src":"4970:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4950:3:23"},"nodeType":"YulFunctionCall","src":"4950:22:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4937:6:23"},"nodeType":"YulFunctionCall","src":"4937:36:23"},"nodeType":"YulExpressionStatement","src":"4937:36:23"}]},"nodeType":"YulCase","src":"4365:618:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4370:1:23","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"5000:222:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5014:14:23","value":{"kind":"number","nodeType":"YulLiteral","src":"5027:1:23","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5018:5:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"5051:67:23","statements":[{"nodeType":"YulAssignment","src":"5069:35:23","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5088:3:23"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"5093:9:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5084:3:23"},"nodeType":"YulFunctionCall","src":"5084:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5078:5:23"},"nodeType":"YulFunctionCall","src":"5078:26:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5069:5:23"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"5044:6:23"},"nodeType":"YulIf","src":"5041:77:23"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5138:4:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5197:5:23"},{"name":"newLen","nodeType":"YulIdentifier","src":"5204:6:23"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"5144:52:23"},"nodeType":"YulFunctionCall","src":"5144:67:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5131:6:23"},"nodeType":"YulFunctionCall","src":"5131:81:23"},"nodeType":"YulExpressionStatement","src":"5131:81:23"}]},"nodeType":"YulCase","src":"4992:230:23","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4345:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4353:2:23","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4342:2:23"},"nodeType":"YulFunctionCall","src":"4342:14:23"},"nodeType":"YulSwitch","src":"4335:887:23"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3914:4:23","type":""},{"name":"src","nodeType":"YulTypedName","src":"3920:3:23","type":""}],"src":"3833:1395:23"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":23,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D6F636B55445343000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D55534443000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0x8F SWAP2 SWAP1 PUSH3 0x324 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH3 0xA1 SWAP2 SWAP1 PUSH3 0x324 JUMP JUMPDEST POP POP POP PUSH3 0x40B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x12C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x142 JUMPI PUSH3 0x141 PUSH3 0xE4 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x1AC PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x16D JUMP JUMPDEST PUSH3 0x1B8 DUP7 DUP4 PUSH3 0x16D JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x205 PUSH3 0x1FF PUSH3 0x1F9 DUP5 PUSH3 0x1D0 JUMP JUMPDEST PUSH3 0x1DA JUMP JUMPDEST PUSH3 0x1D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x221 DUP4 PUSH3 0x1E4 JUMP JUMPDEST PUSH3 0x239 PUSH3 0x230 DUP3 PUSH3 0x20C JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x17A JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x250 PUSH3 0x241 JUMP JUMPDEST PUSH3 0x25D DUP2 DUP5 DUP5 PUSH3 0x216 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x285 JUMPI PUSH3 0x279 PUSH1 0x0 DUP3 PUSH3 0x246 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x263 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2D4 JUMPI PUSH3 0x29E DUP2 PUSH3 0x148 JUMP JUMPDEST PUSH3 0x2A9 DUP5 PUSH3 0x15D JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x2B9 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x2D1 PUSH3 0x2C8 DUP6 PUSH3 0x15D JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x262 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2F9 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x2D9 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x314 DUP4 DUP4 PUSH3 0x2E6 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x32F DUP3 PUSH3 0xAA JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x34B JUMPI PUSH3 0x34A PUSH3 0xB5 JUMP JUMPDEST JUMPDEST PUSH3 0x357 DUP3 SLOAD PUSH3 0x113 JUMP JUMPDEST PUSH3 0x364 DUP3 DUP3 DUP6 PUSH3 0x289 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x39C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x387 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x393 DUP6 DUP3 PUSH3 0x306 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x403 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x3AC DUP7 PUSH3 0x148 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x3D6 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x3AF JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x3F6 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x3F2 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x2E6 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1875 DUP1 PUSH3 0x41B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA0712D68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2C9 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0x9975038C EQ PUSH2 0x243 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1D9 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x13D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x127 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x122 SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x38B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x145 PUSH2 0x3AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x175 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x3B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x193 PUSH2 0x3E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0x10F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x3F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EE SWAP2 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH2 0x427 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x20F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20A SWAP2 SWAP1 PUSH2 0x113B JUMP JUMPDEST PUSH2 0x434 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21C SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22D PUSH2 0x47C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23A SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24B PUSH2 0x50E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x267 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x262 SWAP2 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH2 0x56B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x283 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27E SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x578 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x290 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AE SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C0 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DE SWAP2 SWAP1 PUSH2 0x1168 JUMP JUMPDEST PUSH2 0x612 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F0 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x308 SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x334 SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x381 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x356 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x381 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x364 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x396 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A3 DUP2 DUP6 DUP6 PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C3 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x3D0 DUP6 DUP3 DUP6 PUSH2 0x86A JUMP JUMPDEST PUSH2 0x3DB DUP6 DUP6 DUP6 PUSH2 0x8F6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3FB PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x41C DUP2 DUP6 DUP6 PUSH2 0x40D DUP6 DUP10 PUSH2 0x612 JUMP JUMPDEST PUSH2 0x417 SWAP2 SWAP1 PUSH2 0x1237 JUMP JUMPDEST PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x431 CALLER DUP3 PUSH2 0xB6C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x48B SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4B7 SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x504 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x504 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4E7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 CALLER PUSH2 0x434 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x555 SWAP1 PUSH2 0x12B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x568 CALLER DUP3 PUSH2 0xB6C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x575 CALLER DUP3 PUSH2 0xD39 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x583 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x591 DUP3 DUP7 PUSH2 0x612 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CD SWAP1 PUSH2 0x1349 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E3 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5FA PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x607 DUP2 DUP6 DUP6 PUSH2 0x8F6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x710 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x707 SWAP1 PUSH2 0x13DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x77F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x776 SWAP1 PUSH2 0x146D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x85D SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x876 DUP5 DUP5 PUSH2 0x612 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x8F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x8E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D9 SWAP1 PUSH2 0x14D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8EF DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x6A1 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x965 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x95C SWAP1 PUSH2 0x156B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9CB SWAP1 PUSH2 0x15FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9DF DUP4 DUP4 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xA65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA5C SWAP1 PUSH2 0x168F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xB53 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xB66 DUP5 DUP5 DUP5 PUSH2 0xE94 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBDB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD2 SWAP1 PUSH2 0x1721 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBE7 DUP3 PUSH1 0x0 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xC6D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC64 SWAP1 PUSH2 0x17B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xD20 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xD34 DUP4 PUSH1 0x0 DUP5 PUSH2 0xE94 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD9F SWAP1 PUSH2 0x181F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDB4 PUSH1 0x0 DUP4 DUP4 PUSH2 0xE8F JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xDC6 SWAP2 SWAP1 PUSH2 0x1237 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xE77 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xE8B PUSH1 0x0 DUP4 DUP4 PUSH2 0xE94 JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xED3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFB DUP3 PUSH2 0xE99 JUMP JUMPDEST PUSH2 0xF05 DUP2 DUP6 PUSH2 0xEA4 JUMP JUMPDEST SWAP4 POP PUSH2 0xF15 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xEB5 JUMP JUMPDEST PUSH2 0xF1E DUP2 PUSH2 0xEDF JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF43 DUP2 DUP5 PUSH2 0xEF0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF7B DUP3 PUSH2 0xF50 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF8B DUP2 PUSH2 0xF70 JUMP JUMPDEST DUP2 EQ PUSH2 0xF96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFA8 DUP2 PUSH2 0xF82 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFC1 DUP2 PUSH2 0xFAE JUMP JUMPDEST DUP2 EQ PUSH2 0xFCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFDE DUP2 PUSH2 0xFB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFFB JUMPI PUSH2 0xFFA PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1009 DUP6 DUP3 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x101A DUP6 DUP3 DUP7 ADD PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1039 DUP2 PUSH2 0x1024 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1054 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1030 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1063 DUP2 PUSH2 0xFAE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x107E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x105A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x109D JUMPI PUSH2 0x109C PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10AB DUP7 DUP3 DUP8 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x10BC DUP7 DUP3 DUP8 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x10CD DUP7 DUP3 DUP8 ADD PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10ED DUP2 PUSH2 0x10D7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1108 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x10E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1124 JUMPI PUSH2 0x1123 PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP5 DUP3 DUP6 ADD PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1151 JUMPI PUSH2 0x1150 PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x115F DUP5 DUP3 DUP6 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x117F JUMPI PUSH2 0x117E PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x118D DUP6 DUP3 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x119E DUP6 DUP3 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x11EF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1202 JUMPI PUSH2 0x1201 PUSH2 0x11A8 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1242 DUP3 PUSH2 0xFAE JUMP JUMPDEST SWAP2 POP PUSH2 0x124D DUP4 PUSH2 0xFAE JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1265 JUMPI PUSH2 0x1264 PUSH2 0x1208 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D6F636B555344433A204E6F7468696E6720746F206275726E00000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12A1 PUSH1 0x19 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x12AC DUP3 PUSH2 0x126B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12D0 DUP2 PUSH2 0x1294 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1333 PUSH1 0x25 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x133E DUP3 PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1362 DUP2 PUSH2 0x1326 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13C5 PUSH1 0x24 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x13D0 DUP3 PUSH2 0x1369 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x13F4 DUP2 PUSH2 0x13B8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1457 PUSH1 0x22 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1462 DUP3 PUSH2 0x13FB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1486 DUP2 PUSH2 0x144A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14C3 PUSH1 0x1D DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x14CE DUP3 PUSH2 0x148D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14F2 DUP2 PUSH2 0x14B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1555 PUSH1 0x25 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1560 DUP3 PUSH2 0x14F9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1584 DUP2 PUSH2 0x1548 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E7 PUSH1 0x23 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x15F2 DUP3 PUSH2 0x158B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1616 DUP2 PUSH2 0x15DA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1679 PUSH1 0x26 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1684 DUP3 PUSH2 0x161D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16A8 DUP2 PUSH2 0x166C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170B PUSH1 0x21 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1716 DUP3 PUSH2 0x16AF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x173A DUP2 PUSH2 0x16FE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x179D PUSH1 0x22 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x17A8 DUP3 PUSH2 0x1741 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17CC DUP2 PUSH2 0x1790 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1809 PUSH1 0x1F DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1814 DUP3 PUSH2 0x17D3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1838 DUP2 PUSH2 0x17FC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 CALLER JUMP 0xE0 0xEB 0xED 0x2B MLOAD 0xBA STOP 0x1F 0xB0 LOG2 LOG2 0xE9 BASEFEE EQ PUSH8 0xCC5985089C6F37D7 CALLVALUE PUSH16 0x346F8ECB64736F6C6343000812003300 ","sourceMap":"161:546:22:-:0;;;194:43;;;;;;;;;;1976:113:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2050:5;2042;:13;;;;;;:::i;:::-;;2075:7;2065;:17;;;;;;:::i;:::-;;1976:113;;161:546:22;;7:99:23;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;161:546:22:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_3398":{"entryPoint":3732,"id":3398,"parameterSlots":3,"returnSlots":0},"@_approve_3333":{"entryPoint":1697,"id":3333,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_3387":{"entryPoint":3727,"id":3387,"parameterSlots":3,"returnSlots":0},"@_burn_3288":{"entryPoint":2924,"id":3288,"parameterSlots":2,"returnSlots":0},"@_mint_3216":{"entryPoint":3385,"id":3216,"parameterSlots":2,"returnSlots":0},"@_msgSender_3514":{"entryPoint":1689,"id":3514,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_3376":{"entryPoint":2154,"id":3376,"parameterSlots":3,"returnSlots":0},"@_transfer_3159":{"entryPoint":2294,"id":3159,"parameterSlots":3,"returnSlots":0},"@allowance_2954":{"entryPoint":1554,"id":2954,"parameterSlots":2,"returnSlots":1},"@approve_2979":{"entryPoint":907,"id":2979,"parameterSlots":2,"returnSlots":1},"@balanceOf_2911":{"entryPoint":1076,"id":2911,"parameterSlots":1,"returnSlots":1},"@burnAll_5214":{"entryPoint":1294,"id":5214,"parameterSlots":0,"returnSlots":0},"@burn_5190":{"entryPoint":1063,"id":5190,"parameterSlots":1,"returnSlots":0},"@decimals_5166":{"entryPoint":999,"id":5166,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_3082":{"entryPoint":1400,"id":3082,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_3041":{"entryPoint":1008,"id":3041,"parameterSlots":2,"returnSlots":1},"@mint_5178":{"entryPoint":1387,"id":5178,"parameterSlots":1,"returnSlots":0},"@name_2867":{"entryPoint":761,"id":2867,"parameterSlots":0,"returnSlots":1},"@symbol_2877":{"entryPoint":1148,"id":2877,"parameterSlots":0,"returnSlots":1},"@totalSupply_2897":{"entryPoint":942,"id":2897,"parameterSlots":0,"returnSlots":1},"@transferFrom_3012":{"entryPoint":952,"id":3012,"parameterSlots":3,"returnSlots":1},"@transfer_2936":{"entryPoint":1519,"id":2936,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address":{"entryPoint":3993,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":4047,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4411,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":4456,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":4228,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4068,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":4366,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":4144,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":3824,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":5594,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack":{"entryPoint":6032,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":5194,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":5302,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":5740,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack":{"entryPoint":5886,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":5448,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":5048,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":4902,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack":{"entryPoint":6140,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98_to_t_string_memory_ptr_fromStack":{"entryPoint":4756,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":4186,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":4324,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":4159,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3881,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5629,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6067,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5229,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5337,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5775,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5921,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5483,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5083,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4937,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6175,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4791,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":4201,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":4339,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":3737,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3748,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4663,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":3952,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":4132,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":3920,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4014,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":4311,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":3765,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":4567,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4616,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":4520,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":3915,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":3807,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":5515,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd":{"entryPoint":5953,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":5115,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":5261,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":5661,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f":{"entryPoint":5807,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":5369,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":4969,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":4823,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e":{"entryPoint":6099,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98":{"entryPoint":4715,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":3970,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":4024,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:18043:23","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:23","statements":[{"nodeType":"YulAssignment","src":"77:22:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:23"},"nodeType":"YulFunctionCall","src":"87:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:23"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:23","type":""}],"src":"7:99:23"},{"body":{"nodeType":"YulBlock","src":"208:73:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"225:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"230:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"218:6:23"},"nodeType":"YulFunctionCall","src":"218:19:23"},"nodeType":"YulExpressionStatement","src":"218:19:23"},{"nodeType":"YulAssignment","src":"246:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"265:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"270:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"261:3:23"},"nodeType":"YulFunctionCall","src":"261:14:23"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"246:11:23"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"180:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"185:6:23","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"196:11:23","type":""}],"src":"112:169:23"},{"body":{"nodeType":"YulBlock","src":"349:184:23","statements":[{"nodeType":"YulVariableDeclaration","src":"359:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"368:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"363:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"428:63:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"453:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"458:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"449:3:23"},"nodeType":"YulFunctionCall","src":"449:11:23"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"472:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"477:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"468:3:23"},"nodeType":"YulFunctionCall","src":"468:11:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"462:5:23"},"nodeType":"YulFunctionCall","src":"462:18:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"442:6:23"},"nodeType":"YulFunctionCall","src":"442:39:23"},"nodeType":"YulExpressionStatement","src":"442:39:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"389:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"392:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"386:2:23"},"nodeType":"YulFunctionCall","src":"386:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"400:19:23","statements":[{"nodeType":"YulAssignment","src":"402:15:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"411:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"414:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"407:3:23"},"nodeType":"YulFunctionCall","src":"407:10:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"402:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"382:3:23","statements":[]},"src":"378:113:23"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"511:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"516:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"507:3:23"},"nodeType":"YulFunctionCall","src":"507:16:23"},{"kind":"number","nodeType":"YulLiteral","src":"525:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"500:6:23"},"nodeType":"YulFunctionCall","src":"500:27:23"},"nodeType":"YulExpressionStatement","src":"500:27:23"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"331:3:23","type":""},{"name":"dst","nodeType":"YulTypedName","src":"336:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"341:6:23","type":""}],"src":"287:246:23"},{"body":{"nodeType":"YulBlock","src":"587:54:23","statements":[{"nodeType":"YulAssignment","src":"597:38:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"615:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"622:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"611:3:23"},"nodeType":"YulFunctionCall","src":"611:14:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"631:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"627:3:23"},"nodeType":"YulFunctionCall","src":"627:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"607:3:23"},"nodeType":"YulFunctionCall","src":"607:28:23"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"597:6:23"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"570:5:23","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"580:6:23","type":""}],"src":"539:102:23"},{"body":{"nodeType":"YulBlock","src":"739:285:23","statements":[{"nodeType":"YulVariableDeclaration","src":"749:53:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"796:5:23"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"763:32:23"},"nodeType":"YulFunctionCall","src":"763:39:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"753:6:23","type":""}]},{"nodeType":"YulAssignment","src":"811:78:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"877:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"882:6:23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"818:58:23"},"nodeType":"YulFunctionCall","src":"818:71:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"811:3:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"937:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"944:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"933:3:23"},"nodeType":"YulFunctionCall","src":"933:16:23"},{"name":"pos","nodeType":"YulIdentifier","src":"951:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"956:6:23"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"898:34:23"},"nodeType":"YulFunctionCall","src":"898:65:23"},"nodeType":"YulExpressionStatement","src":"898:65:23"},{"nodeType":"YulAssignment","src":"972:46:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"983:3:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1010:6:23"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"988:21:23"},"nodeType":"YulFunctionCall","src":"988:29:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"979:3:23"},"nodeType":"YulFunctionCall","src":"979:39:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"972:3:23"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"720:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"727:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"735:3:23","type":""}],"src":"647:377:23"},{"body":{"nodeType":"YulBlock","src":"1148:195:23","statements":[{"nodeType":"YulAssignment","src":"1158:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1170:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1181:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1166:3:23"},"nodeType":"YulFunctionCall","src":"1166:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1158:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1205:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1216:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1201:3:23"},"nodeType":"YulFunctionCall","src":"1201:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1224:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1230:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1220:3:23"},"nodeType":"YulFunctionCall","src":"1220:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1194:6:23"},"nodeType":"YulFunctionCall","src":"1194:47:23"},"nodeType":"YulExpressionStatement","src":"1194:47:23"},{"nodeType":"YulAssignment","src":"1250:86:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1322:6:23"},{"name":"tail","nodeType":"YulIdentifier","src":"1331:4:23"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1258:63:23"},"nodeType":"YulFunctionCall","src":"1258:78:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1250:4:23"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1120:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1132:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1143:4:23","type":""}],"src":"1030:313:23"},{"body":{"nodeType":"YulBlock","src":"1389:35:23","statements":[{"nodeType":"YulAssignment","src":"1399:19:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1415:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1409:5:23"},"nodeType":"YulFunctionCall","src":"1409:9:23"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1399:6:23"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1382:6:23","type":""}],"src":"1349:75:23"},{"body":{"nodeType":"YulBlock","src":"1519:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1536:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1539:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1529:6:23"},"nodeType":"YulFunctionCall","src":"1529:12:23"},"nodeType":"YulExpressionStatement","src":"1529:12:23"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1430:117:23"},{"body":{"nodeType":"YulBlock","src":"1642:28:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1659:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1662:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1652:6:23"},"nodeType":"YulFunctionCall","src":"1652:12:23"},"nodeType":"YulExpressionStatement","src":"1652:12:23"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"1553:117:23"},{"body":{"nodeType":"YulBlock","src":"1721:81:23","statements":[{"nodeType":"YulAssignment","src":"1731:65:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1746:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"1753:42:23","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1742:3:23"},"nodeType":"YulFunctionCall","src":"1742:54:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1731:7:23"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1703:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1713:7:23","type":""}],"src":"1676:126:23"},{"body":{"nodeType":"YulBlock","src":"1853:51:23","statements":[{"nodeType":"YulAssignment","src":"1863:35:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1892:5:23"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1874:17:23"},"nodeType":"YulFunctionCall","src":"1874:24:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1863:7:23"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1835:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1845:7:23","type":""}],"src":"1808:96:23"},{"body":{"nodeType":"YulBlock","src":"1953:79:23","statements":[{"body":{"nodeType":"YulBlock","src":"2010:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2019:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2022:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2012:6:23"},"nodeType":"YulFunctionCall","src":"2012:12:23"},"nodeType":"YulExpressionStatement","src":"2012:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1976:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2001:5:23"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1983:17:23"},"nodeType":"YulFunctionCall","src":"1983:24:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1973:2:23"},"nodeType":"YulFunctionCall","src":"1973:35:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1966:6:23"},"nodeType":"YulFunctionCall","src":"1966:43:23"},"nodeType":"YulIf","src":"1963:63:23"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1946:5:23","type":""}],"src":"1910:122:23"},{"body":{"nodeType":"YulBlock","src":"2090:87:23","statements":[{"nodeType":"YulAssignment","src":"2100:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2122:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2109:12:23"},"nodeType":"YulFunctionCall","src":"2109:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2100:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2165:5:23"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2138:26:23"},"nodeType":"YulFunctionCall","src":"2138:33:23"},"nodeType":"YulExpressionStatement","src":"2138:33:23"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2068:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"2076:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2084:5:23","type":""}],"src":"2038:139:23"},{"body":{"nodeType":"YulBlock","src":"2228:32:23","statements":[{"nodeType":"YulAssignment","src":"2238:16:23","value":{"name":"value","nodeType":"YulIdentifier","src":"2249:5:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2238:7:23"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2210:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2220:7:23","type":""}],"src":"2183:77:23"},{"body":{"nodeType":"YulBlock","src":"2309:79:23","statements":[{"body":{"nodeType":"YulBlock","src":"2366:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2375:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2378:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2368:6:23"},"nodeType":"YulFunctionCall","src":"2368:12:23"},"nodeType":"YulExpressionStatement","src":"2368:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2332:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2357:5:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2339:17:23"},"nodeType":"YulFunctionCall","src":"2339:24:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2329:2:23"},"nodeType":"YulFunctionCall","src":"2329:35:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2322:6:23"},"nodeType":"YulFunctionCall","src":"2322:43:23"},"nodeType":"YulIf","src":"2319:63:23"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2302:5:23","type":""}],"src":"2266:122:23"},{"body":{"nodeType":"YulBlock","src":"2446:87:23","statements":[{"nodeType":"YulAssignment","src":"2456:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2478:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2465:12:23"},"nodeType":"YulFunctionCall","src":"2465:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2456:5:23"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2521:5:23"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2494:26:23"},"nodeType":"YulFunctionCall","src":"2494:33:23"},"nodeType":"YulExpressionStatement","src":"2494:33:23"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2424:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"2432:3:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2440:5:23","type":""}],"src":"2394:139:23"},{"body":{"nodeType":"YulBlock","src":"2622:391:23","statements":[{"body":{"nodeType":"YulBlock","src":"2668:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2670:77:23"},"nodeType":"YulFunctionCall","src":"2670:79:23"},"nodeType":"YulExpressionStatement","src":"2670:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2643:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2652:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2639:3:23"},"nodeType":"YulFunctionCall","src":"2639:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"2664:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2635:3:23"},"nodeType":"YulFunctionCall","src":"2635:32:23"},"nodeType":"YulIf","src":"2632:119:23"},{"nodeType":"YulBlock","src":"2761:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2776:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"2790:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2780:6:23","type":""}]},{"nodeType":"YulAssignment","src":"2805:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2840:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"2851:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2836:3:23"},"nodeType":"YulFunctionCall","src":"2836:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2860:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2815:20:23"},"nodeType":"YulFunctionCall","src":"2815:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2805:6:23"}]}]},{"nodeType":"YulBlock","src":"2888:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2903:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"2917:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2907:6:23","type":""}]},{"nodeType":"YulAssignment","src":"2933:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2968:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"2979:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2964:3:23"},"nodeType":"YulFunctionCall","src":"2964:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2988:7:23"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2943:20:23"},"nodeType":"YulFunctionCall","src":"2943:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2933:6:23"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2584:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2595:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2607:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2615:6:23","type":""}],"src":"2539:474:23"},{"body":{"nodeType":"YulBlock","src":"3061:48:23","statements":[{"nodeType":"YulAssignment","src":"3071:32:23","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3096:5:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3089:6:23"},"nodeType":"YulFunctionCall","src":"3089:13:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3082:6:23"},"nodeType":"YulFunctionCall","src":"3082:21:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3071:7:23"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3043:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3053:7:23","type":""}],"src":"3019:90:23"},{"body":{"nodeType":"YulBlock","src":"3174:50:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3191:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3211:5:23"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3196:14:23"},"nodeType":"YulFunctionCall","src":"3196:21:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3184:6:23"},"nodeType":"YulFunctionCall","src":"3184:34:23"},"nodeType":"YulExpressionStatement","src":"3184:34:23"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3162:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3169:3:23","type":""}],"src":"3115:109:23"},{"body":{"nodeType":"YulBlock","src":"3322:118:23","statements":[{"nodeType":"YulAssignment","src":"3332:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3344:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3355:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3340:3:23"},"nodeType":"YulFunctionCall","src":"3340:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3332:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3406:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3419:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3430:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3415:3:23"},"nodeType":"YulFunctionCall","src":"3415:17:23"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3368:37:23"},"nodeType":"YulFunctionCall","src":"3368:65:23"},"nodeType":"YulExpressionStatement","src":"3368:65:23"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3294:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3306:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3317:4:23","type":""}],"src":"3230:210:23"},{"body":{"nodeType":"YulBlock","src":"3511:53:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3528:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3551:5:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3533:17:23"},"nodeType":"YulFunctionCall","src":"3533:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3521:6:23"},"nodeType":"YulFunctionCall","src":"3521:37:23"},"nodeType":"YulExpressionStatement","src":"3521:37:23"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3499:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3506:3:23","type":""}],"src":"3446:118:23"},{"body":{"nodeType":"YulBlock","src":"3668:124:23","statements":[{"nodeType":"YulAssignment","src":"3678:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3690:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3701:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3686:3:23"},"nodeType":"YulFunctionCall","src":"3686:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3678:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3758:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3771:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3782:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3767:3:23"},"nodeType":"YulFunctionCall","src":"3767:17:23"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3714:43:23"},"nodeType":"YulFunctionCall","src":"3714:71:23"},"nodeType":"YulExpressionStatement","src":"3714:71:23"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3640:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3652:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3663:4:23","type":""}],"src":"3570:222:23"},{"body":{"nodeType":"YulBlock","src":"3898:519:23","statements":[{"body":{"nodeType":"YulBlock","src":"3944:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3946:77:23"},"nodeType":"YulFunctionCall","src":"3946:79:23"},"nodeType":"YulExpressionStatement","src":"3946:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3919:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"3928:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3915:3:23"},"nodeType":"YulFunctionCall","src":"3915:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"3940:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3911:3:23"},"nodeType":"YulFunctionCall","src":"3911:32:23"},"nodeType":"YulIf","src":"3908:119:23"},{"nodeType":"YulBlock","src":"4037:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4052:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4066:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4056:6:23","type":""}]},{"nodeType":"YulAssignment","src":"4081:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4116:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4127:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4112:3:23"},"nodeType":"YulFunctionCall","src":"4112:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4136:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4091:20:23"},"nodeType":"YulFunctionCall","src":"4091:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4081:6:23"}]}]},{"nodeType":"YulBlock","src":"4164:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4179:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4193:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4183:6:23","type":""}]},{"nodeType":"YulAssignment","src":"4209:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4244:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4255:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4240:3:23"},"nodeType":"YulFunctionCall","src":"4240:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4264:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4219:20:23"},"nodeType":"YulFunctionCall","src":"4219:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4209:6:23"}]}]},{"nodeType":"YulBlock","src":"4292:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4307:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4321:2:23","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4311:6:23","type":""}]},{"nodeType":"YulAssignment","src":"4337:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4372:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4383:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4368:3:23"},"nodeType":"YulFunctionCall","src":"4368:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4392:7:23"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4347:20:23"},"nodeType":"YulFunctionCall","src":"4347:53:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4337:6:23"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3852:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3863:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3875:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3883:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3891:6:23","type":""}],"src":"3798:619:23"},{"body":{"nodeType":"YulBlock","src":"4466:43:23","statements":[{"nodeType":"YulAssignment","src":"4476:27:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4491:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"4498:4:23","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4487:3:23"},"nodeType":"YulFunctionCall","src":"4487:16:23"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4476:7:23"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4448:5:23","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4458:7:23","type":""}],"src":"4423:86:23"},{"body":{"nodeType":"YulBlock","src":"4576:51:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4593:3:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4614:5:23"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"4598:15:23"},"nodeType":"YulFunctionCall","src":"4598:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4586:6:23"},"nodeType":"YulFunctionCall","src":"4586:35:23"},"nodeType":"YulExpressionStatement","src":"4586:35:23"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4564:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4571:3:23","type":""}],"src":"4515:112:23"},{"body":{"nodeType":"YulBlock","src":"4727:120:23","statements":[{"nodeType":"YulAssignment","src":"4737:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4749:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4760:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4745:3:23"},"nodeType":"YulFunctionCall","src":"4745:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4737:4:23"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4813:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4826:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4837:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4822:3:23"},"nodeType":"YulFunctionCall","src":"4822:17:23"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"4773:39:23"},"nodeType":"YulFunctionCall","src":"4773:67:23"},"nodeType":"YulExpressionStatement","src":"4773:67:23"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4699:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4711:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4722:4:23","type":""}],"src":"4633:214:23"},{"body":{"nodeType":"YulBlock","src":"4919:263:23","statements":[{"body":{"nodeType":"YulBlock","src":"4965:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4967:77:23"},"nodeType":"YulFunctionCall","src":"4967:79:23"},"nodeType":"YulExpressionStatement","src":"4967:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4940:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"4949:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4936:3:23"},"nodeType":"YulFunctionCall","src":"4936:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4961:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4932:3:23"},"nodeType":"YulFunctionCall","src":"4932:32:23"},"nodeType":"YulIf","src":"4929:119:23"},{"nodeType":"YulBlock","src":"5058:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5073:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"5087:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5077:6:23","type":""}]},{"nodeType":"YulAssignment","src":"5102:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5137:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5148:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5133:3:23"},"nodeType":"YulFunctionCall","src":"5133:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5157:7:23"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5112:20:23"},"nodeType":"YulFunctionCall","src":"5112:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5102:6:23"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4889:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4900:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4912:6:23","type":""}],"src":"4853:329:23"},{"body":{"nodeType":"YulBlock","src":"5254:263:23","statements":[{"body":{"nodeType":"YulBlock","src":"5300:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5302:77:23"},"nodeType":"YulFunctionCall","src":"5302:79:23"},"nodeType":"YulExpressionStatement","src":"5302:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5275:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"5284:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5271:3:23"},"nodeType":"YulFunctionCall","src":"5271:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"5296:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5267:3:23"},"nodeType":"YulFunctionCall","src":"5267:32:23"},"nodeType":"YulIf","src":"5264:119:23"},{"nodeType":"YulBlock","src":"5393:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5408:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"5422:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5412:6:23","type":""}]},{"nodeType":"YulAssignment","src":"5437:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5472:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5483:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5468:3:23"},"nodeType":"YulFunctionCall","src":"5468:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5492:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5447:20:23"},"nodeType":"YulFunctionCall","src":"5447:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5437:6:23"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5224:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5235:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5247:6:23","type":""}],"src":"5188:329:23"},{"body":{"nodeType":"YulBlock","src":"5606:391:23","statements":[{"body":{"nodeType":"YulBlock","src":"5652:83:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5654:77:23"},"nodeType":"YulFunctionCall","src":"5654:79:23"},"nodeType":"YulExpressionStatement","src":"5654:79:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5627:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"5636:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5623:3:23"},"nodeType":"YulFunctionCall","src":"5623:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"5648:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5619:3:23"},"nodeType":"YulFunctionCall","src":"5619:32:23"},"nodeType":"YulIf","src":"5616:119:23"},{"nodeType":"YulBlock","src":"5745:117:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5760:15:23","value":{"kind":"number","nodeType":"YulLiteral","src":"5774:1:23","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5764:6:23","type":""}]},{"nodeType":"YulAssignment","src":"5789:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5824:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5835:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5820:3:23"},"nodeType":"YulFunctionCall","src":"5820:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5844:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5799:20:23"},"nodeType":"YulFunctionCall","src":"5799:53:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5789:6:23"}]}]},{"nodeType":"YulBlock","src":"5872:118:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5887:16:23","value":{"kind":"number","nodeType":"YulLiteral","src":"5901:2:23","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5891:6:23","type":""}]},{"nodeType":"YulAssignment","src":"5917:63:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5952:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5963:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5948:3:23"},"nodeType":"YulFunctionCall","src":"5948:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5972:7:23"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5927:20:23"},"nodeType":"YulFunctionCall","src":"5927:53:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5917:6:23"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5568:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5579:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5591:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5599:6:23","type":""}],"src":"5523:474:23"},{"body":{"nodeType":"YulBlock","src":"6031:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6048:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6051:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6041:6:23"},"nodeType":"YulFunctionCall","src":"6041:88:23"},"nodeType":"YulExpressionStatement","src":"6041:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6145:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6148:4:23","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6138:6:23"},"nodeType":"YulFunctionCall","src":"6138:15:23"},"nodeType":"YulExpressionStatement","src":"6138:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6169:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6172:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6162:6:23"},"nodeType":"YulFunctionCall","src":"6162:15:23"},"nodeType":"YulExpressionStatement","src":"6162:15:23"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"6003:180:23"},{"body":{"nodeType":"YulBlock","src":"6240:269:23","statements":[{"nodeType":"YulAssignment","src":"6250:22:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6264:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"6270:1:23","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6260:3:23"},"nodeType":"YulFunctionCall","src":"6260:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6250:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"6281:38:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6311:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"6317:1:23","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6307:3:23"},"nodeType":"YulFunctionCall","src":"6307:12:23"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6285:18:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"6358:51:23","statements":[{"nodeType":"YulAssignment","src":"6372:27:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6386:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6394:4:23","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6382:3:23"},"nodeType":"YulFunctionCall","src":"6382:17:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6372:6:23"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6338:18:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6331:6:23"},"nodeType":"YulFunctionCall","src":"6331:26:23"},"nodeType":"YulIf","src":"6328:81:23"},{"body":{"nodeType":"YulBlock","src":"6461:42:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"6475:16:23"},"nodeType":"YulFunctionCall","src":"6475:18:23"},"nodeType":"YulExpressionStatement","src":"6475:18:23"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6425:18:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6448:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6456:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6445:2:23"},"nodeType":"YulFunctionCall","src":"6445:14:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6422:2:23"},"nodeType":"YulFunctionCall","src":"6422:38:23"},"nodeType":"YulIf","src":"6419:84:23"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6224:4:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6233:6:23","type":""}],"src":"6189:320:23"},{"body":{"nodeType":"YulBlock","src":"6543:152:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6560:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6563:77:23","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6553:6:23"},"nodeType":"YulFunctionCall","src":"6553:88:23"},"nodeType":"YulExpressionStatement","src":"6553:88:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6657:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6660:4:23","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6650:6:23"},"nodeType":"YulFunctionCall","src":"6650:15:23"},"nodeType":"YulExpressionStatement","src":"6650:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6681:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6684:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6674:6:23"},"nodeType":"YulFunctionCall","src":"6674:15:23"},"nodeType":"YulExpressionStatement","src":"6674:15:23"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6515:180:23"},{"body":{"nodeType":"YulBlock","src":"6745:147:23","statements":[{"nodeType":"YulAssignment","src":"6755:25:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6778:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6760:17:23"},"nodeType":"YulFunctionCall","src":"6760:20:23"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6755:1:23"}]},{"nodeType":"YulAssignment","src":"6789:25:23","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6812:1:23"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6794:17:23"},"nodeType":"YulFunctionCall","src":"6794:20:23"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6789:1:23"}]},{"nodeType":"YulAssignment","src":"6823:16:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6834:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"6837:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6830:3:23"},"nodeType":"YulFunctionCall","src":"6830:9:23"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"6823:3:23"}]},{"body":{"nodeType":"YulBlock","src":"6863:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6865:16:23"},"nodeType":"YulFunctionCall","src":"6865:18:23"},"nodeType":"YulExpressionStatement","src":"6865:18:23"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6855:1:23"},{"name":"sum","nodeType":"YulIdentifier","src":"6858:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6852:2:23"},"nodeType":"YulFunctionCall","src":"6852:10:23"},"nodeType":"YulIf","src":"6849:36:23"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6732:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"6735:1:23","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6741:3:23","type":""}],"src":"6701:191:23"},{"body":{"nodeType":"YulBlock","src":"7004:69:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7026:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"7034:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7022:3:23"},"nodeType":"YulFunctionCall","src":"7022:14:23"},{"hexValue":"4d6f636b555344433a204e6f7468696e6720746f206275726e","kind":"string","nodeType":"YulLiteral","src":"7038:27:23","type":"","value":"MockUSDC: Nothing to burn"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7015:6:23"},"nodeType":"YulFunctionCall","src":"7015:51:23"},"nodeType":"YulExpressionStatement","src":"7015:51:23"}]},"name":"store_literal_in_memory_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6996:6:23","type":""}],"src":"6898:175:23"},{"body":{"nodeType":"YulBlock","src":"7225:220:23","statements":[{"nodeType":"YulAssignment","src":"7235:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7301:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"7306:2:23","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7242:58:23"},"nodeType":"YulFunctionCall","src":"7242:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7235:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7407:3:23"}],"functionName":{"name":"store_literal_in_memory_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98","nodeType":"YulIdentifier","src":"7318:88:23"},"nodeType":"YulFunctionCall","src":"7318:93:23"},"nodeType":"YulExpressionStatement","src":"7318:93:23"},{"nodeType":"YulAssignment","src":"7420:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7431:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"7436:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7427:3:23"},"nodeType":"YulFunctionCall","src":"7427:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7420:3:23"}]}]},"name":"abi_encode_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7213:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7221:3:23","type":""}],"src":"7079:366:23"},{"body":{"nodeType":"YulBlock","src":"7622:248:23","statements":[{"nodeType":"YulAssignment","src":"7632:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7644:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7655:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7640:3:23"},"nodeType":"YulFunctionCall","src":"7640:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7632:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7679:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7690:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7675:3:23"},"nodeType":"YulFunctionCall","src":"7675:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7698:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"7704:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7694:3:23"},"nodeType":"YulFunctionCall","src":"7694:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7668:6:23"},"nodeType":"YulFunctionCall","src":"7668:47:23"},"nodeType":"YulExpressionStatement","src":"7668:47:23"},{"nodeType":"YulAssignment","src":"7724:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7858:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7732:124:23"},"nodeType":"YulFunctionCall","src":"7732:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7724:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7602:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7617:4:23","type":""}],"src":"7451:419:23"},{"body":{"nodeType":"YulBlock","src":"7982:118:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8004:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"8012:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8000:3:23"},"nodeType":"YulFunctionCall","src":"8000:14:23"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"8016:34:23","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7993:6:23"},"nodeType":"YulFunctionCall","src":"7993:58:23"},"nodeType":"YulExpressionStatement","src":"7993:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8072:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"8080:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8068:3:23"},"nodeType":"YulFunctionCall","src":"8068:15:23"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"8085:7:23","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8061:6:23"},"nodeType":"YulFunctionCall","src":"8061:32:23"},"nodeType":"YulExpressionStatement","src":"8061:32:23"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7974:6:23","type":""}],"src":"7876:224:23"},{"body":{"nodeType":"YulBlock","src":"8252:220:23","statements":[{"nodeType":"YulAssignment","src":"8262:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8328:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"8333:2:23","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8269:58:23"},"nodeType":"YulFunctionCall","src":"8269:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8262:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8434:3:23"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"8345:88:23"},"nodeType":"YulFunctionCall","src":"8345:93:23"},"nodeType":"YulExpressionStatement","src":"8345:93:23"},{"nodeType":"YulAssignment","src":"8447:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8458:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"8463:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8454:3:23"},"nodeType":"YulFunctionCall","src":"8454:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8447:3:23"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8240:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8248:3:23","type":""}],"src":"8106:366:23"},{"body":{"nodeType":"YulBlock","src":"8649:248:23","statements":[{"nodeType":"YulAssignment","src":"8659:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8671:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8682:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8667:3:23"},"nodeType":"YulFunctionCall","src":"8667:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8659:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8706:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8717:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8702:3:23"},"nodeType":"YulFunctionCall","src":"8702:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8725:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"8731:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8721:3:23"},"nodeType":"YulFunctionCall","src":"8721:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8695:6:23"},"nodeType":"YulFunctionCall","src":"8695:47:23"},"nodeType":"YulExpressionStatement","src":"8695:47:23"},{"nodeType":"YulAssignment","src":"8751:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8885:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8759:124:23"},"nodeType":"YulFunctionCall","src":"8759:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8751:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8629:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8644:4:23","type":""}],"src":"8478:419:23"},{"body":{"nodeType":"YulBlock","src":"9009:117:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9031:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"9039:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9027:3:23"},"nodeType":"YulFunctionCall","src":"9027:14:23"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"9043:34:23","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9020:6:23"},"nodeType":"YulFunctionCall","src":"9020:58:23"},"nodeType":"YulExpressionStatement","src":"9020:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9099:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"9107:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9095:3:23"},"nodeType":"YulFunctionCall","src":"9095:15:23"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"9112:6:23","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9088:6:23"},"nodeType":"YulFunctionCall","src":"9088:31:23"},"nodeType":"YulExpressionStatement","src":"9088:31:23"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9001:6:23","type":""}],"src":"8903:223:23"},{"body":{"nodeType":"YulBlock","src":"9278:220:23","statements":[{"nodeType":"YulAssignment","src":"9288:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9354:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"9359:2:23","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9295:58:23"},"nodeType":"YulFunctionCall","src":"9295:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9288:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9460:3:23"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"9371:88:23"},"nodeType":"YulFunctionCall","src":"9371:93:23"},"nodeType":"YulExpressionStatement","src":"9371:93:23"},{"nodeType":"YulAssignment","src":"9473:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9484:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"9489:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9480:3:23"},"nodeType":"YulFunctionCall","src":"9480:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9473:3:23"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9266:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9274:3:23","type":""}],"src":"9132:366:23"},{"body":{"nodeType":"YulBlock","src":"9675:248:23","statements":[{"nodeType":"YulAssignment","src":"9685:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9697:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9708:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9693:3:23"},"nodeType":"YulFunctionCall","src":"9693:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9685:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9732:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9743:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9728:3:23"},"nodeType":"YulFunctionCall","src":"9728:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9751:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"9757:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9747:3:23"},"nodeType":"YulFunctionCall","src":"9747:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9721:6:23"},"nodeType":"YulFunctionCall","src":"9721:47:23"},"nodeType":"YulExpressionStatement","src":"9721:47:23"},{"nodeType":"YulAssignment","src":"9777:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9911:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9785:124:23"},"nodeType":"YulFunctionCall","src":"9785:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9777:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9655:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9670:4:23","type":""}],"src":"9504:419:23"},{"body":{"nodeType":"YulBlock","src":"10035:115:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10057:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"10065:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10053:3:23"},"nodeType":"YulFunctionCall","src":"10053:14:23"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"10069:34:23","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10046:6:23"},"nodeType":"YulFunctionCall","src":"10046:58:23"},"nodeType":"YulExpressionStatement","src":"10046:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10125:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"10133:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10121:3:23"},"nodeType":"YulFunctionCall","src":"10121:15:23"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"10138:4:23","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10114:6:23"},"nodeType":"YulFunctionCall","src":"10114:29:23"},"nodeType":"YulExpressionStatement","src":"10114:29:23"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10027:6:23","type":""}],"src":"9929:221:23"},{"body":{"nodeType":"YulBlock","src":"10302:220:23","statements":[{"nodeType":"YulAssignment","src":"10312:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10378:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"10383:2:23","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10319:58:23"},"nodeType":"YulFunctionCall","src":"10319:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10312:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10484:3:23"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"10395:88:23"},"nodeType":"YulFunctionCall","src":"10395:93:23"},"nodeType":"YulExpressionStatement","src":"10395:93:23"},{"nodeType":"YulAssignment","src":"10497:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10508:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"10513:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10504:3:23"},"nodeType":"YulFunctionCall","src":"10504:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10497:3:23"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10290:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10298:3:23","type":""}],"src":"10156:366:23"},{"body":{"nodeType":"YulBlock","src":"10699:248:23","statements":[{"nodeType":"YulAssignment","src":"10709:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10721:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10732:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10717:3:23"},"nodeType":"YulFunctionCall","src":"10717:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10709:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10756:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10767:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10752:3:23"},"nodeType":"YulFunctionCall","src":"10752:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10775:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"10781:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10771:3:23"},"nodeType":"YulFunctionCall","src":"10771:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10745:6:23"},"nodeType":"YulFunctionCall","src":"10745:47:23"},"nodeType":"YulExpressionStatement","src":"10745:47:23"},{"nodeType":"YulAssignment","src":"10801:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10935:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10809:124:23"},"nodeType":"YulFunctionCall","src":"10809:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10801:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10679:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10694:4:23","type":""}],"src":"10528:419:23"},{"body":{"nodeType":"YulBlock","src":"11059:73:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11081:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"11089:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11077:3:23"},"nodeType":"YulFunctionCall","src":"11077:14:23"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"11093:31:23","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11070:6:23"},"nodeType":"YulFunctionCall","src":"11070:55:23"},"nodeType":"YulExpressionStatement","src":"11070:55:23"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11051:6:23","type":""}],"src":"10953:179:23"},{"body":{"nodeType":"YulBlock","src":"11284:220:23","statements":[{"nodeType":"YulAssignment","src":"11294:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11360:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"11365:2:23","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11301:58:23"},"nodeType":"YulFunctionCall","src":"11301:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11294:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11466:3:23"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"11377:88:23"},"nodeType":"YulFunctionCall","src":"11377:93:23"},"nodeType":"YulExpressionStatement","src":"11377:93:23"},{"nodeType":"YulAssignment","src":"11479:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11490:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"11495:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11486:3:23"},"nodeType":"YulFunctionCall","src":"11486:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11479:3:23"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11272:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11280:3:23","type":""}],"src":"11138:366:23"},{"body":{"nodeType":"YulBlock","src":"11681:248:23","statements":[{"nodeType":"YulAssignment","src":"11691:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11703:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11714:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11699:3:23"},"nodeType":"YulFunctionCall","src":"11699:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11691:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11738:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11749:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11734:3:23"},"nodeType":"YulFunctionCall","src":"11734:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11757:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"11763:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11753:3:23"},"nodeType":"YulFunctionCall","src":"11753:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11727:6:23"},"nodeType":"YulFunctionCall","src":"11727:47:23"},"nodeType":"YulExpressionStatement","src":"11727:47:23"},{"nodeType":"YulAssignment","src":"11783:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11917:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11791:124:23"},"nodeType":"YulFunctionCall","src":"11791:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11783:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11661:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11676:4:23","type":""}],"src":"11510:419:23"},{"body":{"nodeType":"YulBlock","src":"12041:118:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12063:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"12071:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12059:3:23"},"nodeType":"YulFunctionCall","src":"12059:14:23"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"12075:34:23","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12052:6:23"},"nodeType":"YulFunctionCall","src":"12052:58:23"},"nodeType":"YulExpressionStatement","src":"12052:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12131:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"12139:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12127:3:23"},"nodeType":"YulFunctionCall","src":"12127:15:23"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"12144:7:23","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12120:6:23"},"nodeType":"YulFunctionCall","src":"12120:32:23"},"nodeType":"YulExpressionStatement","src":"12120:32:23"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12033:6:23","type":""}],"src":"11935:224:23"},{"body":{"nodeType":"YulBlock","src":"12311:220:23","statements":[{"nodeType":"YulAssignment","src":"12321:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12387:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"12392:2:23","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12328:58:23"},"nodeType":"YulFunctionCall","src":"12328:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12321:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12493:3:23"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"12404:88:23"},"nodeType":"YulFunctionCall","src":"12404:93:23"},"nodeType":"YulExpressionStatement","src":"12404:93:23"},{"nodeType":"YulAssignment","src":"12506:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12517:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"12522:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12513:3:23"},"nodeType":"YulFunctionCall","src":"12513:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12506:3:23"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12299:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12307:3:23","type":""}],"src":"12165:366:23"},{"body":{"nodeType":"YulBlock","src":"12708:248:23","statements":[{"nodeType":"YulAssignment","src":"12718:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12730:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12741:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12726:3:23"},"nodeType":"YulFunctionCall","src":"12726:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12718:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12765:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12776:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12761:3:23"},"nodeType":"YulFunctionCall","src":"12761:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12784:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"12790:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12780:3:23"},"nodeType":"YulFunctionCall","src":"12780:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12754:6:23"},"nodeType":"YulFunctionCall","src":"12754:47:23"},"nodeType":"YulExpressionStatement","src":"12754:47:23"},{"nodeType":"YulAssignment","src":"12810:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12944:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12818:124:23"},"nodeType":"YulFunctionCall","src":"12818:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12810:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12688:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12703:4:23","type":""}],"src":"12537:419:23"},{"body":{"nodeType":"YulBlock","src":"13068:116:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13090:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"13098:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13086:3:23"},"nodeType":"YulFunctionCall","src":"13086:14:23"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"13102:34:23","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13079:6:23"},"nodeType":"YulFunctionCall","src":"13079:58:23"},"nodeType":"YulExpressionStatement","src":"13079:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13158:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"13166:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13154:3:23"},"nodeType":"YulFunctionCall","src":"13154:15:23"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"13171:5:23","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13147:6:23"},"nodeType":"YulFunctionCall","src":"13147:30:23"},"nodeType":"YulExpressionStatement","src":"13147:30:23"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13060:6:23","type":""}],"src":"12962:222:23"},{"body":{"nodeType":"YulBlock","src":"13336:220:23","statements":[{"nodeType":"YulAssignment","src":"13346:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13412:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"13417:2:23","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13353:58:23"},"nodeType":"YulFunctionCall","src":"13353:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13346:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13518:3:23"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"13429:88:23"},"nodeType":"YulFunctionCall","src":"13429:93:23"},"nodeType":"YulExpressionStatement","src":"13429:93:23"},{"nodeType":"YulAssignment","src":"13531:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13542:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"13547:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13538:3:23"},"nodeType":"YulFunctionCall","src":"13538:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13531:3:23"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13324:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13332:3:23","type":""}],"src":"13190:366:23"},{"body":{"nodeType":"YulBlock","src":"13733:248:23","statements":[{"nodeType":"YulAssignment","src":"13743:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13755:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13766:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13751:3:23"},"nodeType":"YulFunctionCall","src":"13751:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13743:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13790:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13801:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13786:3:23"},"nodeType":"YulFunctionCall","src":"13786:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13809:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"13815:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13805:3:23"},"nodeType":"YulFunctionCall","src":"13805:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13779:6:23"},"nodeType":"YulFunctionCall","src":"13779:47:23"},"nodeType":"YulExpressionStatement","src":"13779:47:23"},{"nodeType":"YulAssignment","src":"13835:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13969:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13843:124:23"},"nodeType":"YulFunctionCall","src":"13843:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13835:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13713:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13728:4:23","type":""}],"src":"13562:419:23"},{"body":{"nodeType":"YulBlock","src":"14093:119:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14115:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"14123:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14111:3:23"},"nodeType":"YulFunctionCall","src":"14111:14:23"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"14127:34:23","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14104:6:23"},"nodeType":"YulFunctionCall","src":"14104:58:23"},"nodeType":"YulExpressionStatement","src":"14104:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14183:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"14191:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14179:3:23"},"nodeType":"YulFunctionCall","src":"14179:15:23"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"14196:8:23","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14172:6:23"},"nodeType":"YulFunctionCall","src":"14172:33:23"},"nodeType":"YulExpressionStatement","src":"14172:33:23"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14085:6:23","type":""}],"src":"13987:225:23"},{"body":{"nodeType":"YulBlock","src":"14364:220:23","statements":[{"nodeType":"YulAssignment","src":"14374:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14440:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"14445:2:23","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14381:58:23"},"nodeType":"YulFunctionCall","src":"14381:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14374:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14546:3:23"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"14457:88:23"},"nodeType":"YulFunctionCall","src":"14457:93:23"},"nodeType":"YulExpressionStatement","src":"14457:93:23"},{"nodeType":"YulAssignment","src":"14559:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14570:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"14575:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14566:3:23"},"nodeType":"YulFunctionCall","src":"14566:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14559:3:23"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14352:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14360:3:23","type":""}],"src":"14218:366:23"},{"body":{"nodeType":"YulBlock","src":"14761:248:23","statements":[{"nodeType":"YulAssignment","src":"14771:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14783:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14794:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14779:3:23"},"nodeType":"YulFunctionCall","src":"14779:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14771:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14818:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14829:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14814:3:23"},"nodeType":"YulFunctionCall","src":"14814:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14837:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"14843:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14833:3:23"},"nodeType":"YulFunctionCall","src":"14833:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14807:6:23"},"nodeType":"YulFunctionCall","src":"14807:47:23"},"nodeType":"YulExpressionStatement","src":"14807:47:23"},{"nodeType":"YulAssignment","src":"14863:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14997:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14871:124:23"},"nodeType":"YulFunctionCall","src":"14871:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14863:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14741:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14756:4:23","type":""}],"src":"14590:419:23"},{"body":{"nodeType":"YulBlock","src":"15121:114:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15143:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"15151:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15139:3:23"},"nodeType":"YulFunctionCall","src":"15139:14:23"},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"15155:34:23","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15132:6:23"},"nodeType":"YulFunctionCall","src":"15132:58:23"},"nodeType":"YulExpressionStatement","src":"15132:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15211:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"15219:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15207:3:23"},"nodeType":"YulFunctionCall","src":"15207:15:23"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"15224:3:23","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15200:6:23"},"nodeType":"YulFunctionCall","src":"15200:28:23"},"nodeType":"YulExpressionStatement","src":"15200:28:23"}]},"name":"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15113:6:23","type":""}],"src":"15015:220:23"},{"body":{"nodeType":"YulBlock","src":"15387:220:23","statements":[{"nodeType":"YulAssignment","src":"15397:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15463:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"15468:2:23","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15404:58:23"},"nodeType":"YulFunctionCall","src":"15404:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15397:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15569:3:23"}],"functionName":{"name":"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","nodeType":"YulIdentifier","src":"15480:88:23"},"nodeType":"YulFunctionCall","src":"15480:93:23"},"nodeType":"YulExpressionStatement","src":"15480:93:23"},{"nodeType":"YulAssignment","src":"15582:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15593:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"15598:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15589:3:23"},"nodeType":"YulFunctionCall","src":"15589:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15582:3:23"}]}]},"name":"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15375:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15383:3:23","type":""}],"src":"15241:366:23"},{"body":{"nodeType":"YulBlock","src":"15784:248:23","statements":[{"nodeType":"YulAssignment","src":"15794:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15806:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15817:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15802:3:23"},"nodeType":"YulFunctionCall","src":"15802:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15794:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15841:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15852:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15837:3:23"},"nodeType":"YulFunctionCall","src":"15837:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15860:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"15866:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15856:3:23"},"nodeType":"YulFunctionCall","src":"15856:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15830:6:23"},"nodeType":"YulFunctionCall","src":"15830:47:23"},"nodeType":"YulExpressionStatement","src":"15830:47:23"},{"nodeType":"YulAssignment","src":"15886:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16020:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15894:124:23"},"nodeType":"YulFunctionCall","src":"15894:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15886:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15764:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15779:4:23","type":""}],"src":"15613:419:23"},{"body":{"nodeType":"YulBlock","src":"16144:115:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16166:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"16174:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16162:3:23"},"nodeType":"YulFunctionCall","src":"16162:14:23"},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e","kind":"string","nodeType":"YulLiteral","src":"16178:34:23","type":"","value":"ERC20: burn amount exceeds balan"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16155:6:23"},"nodeType":"YulFunctionCall","src":"16155:58:23"},"nodeType":"YulExpressionStatement","src":"16155:58:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16234:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"16242:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16230:3:23"},"nodeType":"YulFunctionCall","src":"16230:15:23"},{"hexValue":"6365","kind":"string","nodeType":"YulLiteral","src":"16247:4:23","type":"","value":"ce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16223:6:23"},"nodeType":"YulFunctionCall","src":"16223:29:23"},"nodeType":"YulExpressionStatement","src":"16223:29:23"}]},"name":"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16136:6:23","type":""}],"src":"16038:221:23"},{"body":{"nodeType":"YulBlock","src":"16411:220:23","statements":[{"nodeType":"YulAssignment","src":"16421:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16487:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"16492:2:23","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16428:58:23"},"nodeType":"YulFunctionCall","src":"16428:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16421:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16593:3:23"}],"functionName":{"name":"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","nodeType":"YulIdentifier","src":"16504:88:23"},"nodeType":"YulFunctionCall","src":"16504:93:23"},"nodeType":"YulExpressionStatement","src":"16504:93:23"},{"nodeType":"YulAssignment","src":"16606:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16617:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"16622:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16613:3:23"},"nodeType":"YulFunctionCall","src":"16613:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16606:3:23"}]}]},"name":"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16399:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16407:3:23","type":""}],"src":"16265:366:23"},{"body":{"nodeType":"YulBlock","src":"16808:248:23","statements":[{"nodeType":"YulAssignment","src":"16818:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16830:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16841:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16826:3:23"},"nodeType":"YulFunctionCall","src":"16826:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16818:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16865:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16876:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16861:3:23"},"nodeType":"YulFunctionCall","src":"16861:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16884:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"16890:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16880:3:23"},"nodeType":"YulFunctionCall","src":"16880:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16854:6:23"},"nodeType":"YulFunctionCall","src":"16854:47:23"},"nodeType":"YulExpressionStatement","src":"16854:47:23"},{"nodeType":"YulAssignment","src":"16910:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17044:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16918:124:23"},"nodeType":"YulFunctionCall","src":"16918:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16910:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16788:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16803:4:23","type":""}],"src":"16637:419:23"},{"body":{"nodeType":"YulBlock","src":"17168:75:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17190:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"17198:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17186:3:23"},"nodeType":"YulFunctionCall","src":"17186:14:23"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"17202:33:23","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17179:6:23"},"nodeType":"YulFunctionCall","src":"17179:57:23"},"nodeType":"YulExpressionStatement","src":"17179:57:23"}]},"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17160:6:23","type":""}],"src":"17062:181:23"},{"body":{"nodeType":"YulBlock","src":"17395:220:23","statements":[{"nodeType":"YulAssignment","src":"17405:74:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17471:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"17476:2:23","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17412:58:23"},"nodeType":"YulFunctionCall","src":"17412:67:23"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17405:3:23"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17577:3:23"}],"functionName":{"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulIdentifier","src":"17488:88:23"},"nodeType":"YulFunctionCall","src":"17488:93:23"},"nodeType":"YulExpressionStatement","src":"17488:93:23"},{"nodeType":"YulAssignment","src":"17590:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17601:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"17606:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17597:3:23"},"nodeType":"YulFunctionCall","src":"17597:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17590:3:23"}]}]},"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17383:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17391:3:23","type":""}],"src":"17249:366:23"},{"body":{"nodeType":"YulBlock","src":"17792:248:23","statements":[{"nodeType":"YulAssignment","src":"17802:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17814:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17825:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17810:3:23"},"nodeType":"YulFunctionCall","src":"17810:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17802:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17849:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17860:1:23","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17845:3:23"},"nodeType":"YulFunctionCall","src":"17845:17:23"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17868:4:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"17874:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17864:3:23"},"nodeType":"YulFunctionCall","src":"17864:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17838:6:23"},"nodeType":"YulFunctionCall","src":"17838:47:23"},"nodeType":"YulExpressionStatement","src":"17838:47:23"},{"nodeType":"YulAssignment","src":"17894:139:23","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18028:4:23"}],"functionName":{"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17902:124:23"},"nodeType":"YulFunctionCall","src":"17902:131:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17894:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17772:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17787:4:23","type":""}],"src":"17621:419:23"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98(memPtr) {\n\n        mstore(add(memPtr, 0), \"MockUSDC: Nothing to burn\")\n\n    }\n\n    function abi_encode_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc663b9e0879ab22f8901d8d43f566534e4b7ad1202b59b98b6d09e232057d98_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: burn from the zero addres\")\n\n        mstore(add(memPtr, 32), \"s\")\n\n    }\n\n    function abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: burn amount exceeds balan\")\n\n        mstore(add(memPtr, 32), \"ce\")\n\n    }\n\n    function abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":23,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a0712d6811610066578063a0712d681461024d578063a457c2d714610269578063a9059cbb14610299578063dd62ed3e146102c9576100ea565b806370a08231146101f557806395d89b41146102255780639975038c14610243576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806339509351146101a957806342966c68146101d9576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f76102f9565b6040516101049190610f29565b60405180910390f35b61012760048036038101906101229190610fe4565b61038b565b604051610134919061103f565b60405180910390f35b6101456103ae565b6040516101529190611069565b60405180910390f35b61017560048036038101906101709190611084565b6103b8565b604051610182919061103f565b60405180910390f35b6101936103e7565b6040516101a091906110f3565b60405180910390f35b6101c360048036038101906101be9190610fe4565b6103f0565b6040516101d0919061103f565b60405180910390f35b6101f360048036038101906101ee919061110e565b610427565b005b61020f600480360381019061020a919061113b565b610434565b60405161021c9190611069565b60405180910390f35b61022d61047c565b60405161023a9190610f29565b60405180910390f35b61024b61050e565b005b6102676004803603810190610262919061110e565b61056b565b005b610283600480360381019061027e9190610fe4565b610578565b604051610290919061103f565b60405180910390f35b6102b360048036038101906102ae9190610fe4565b6105ef565b6040516102c0919061103f565b60405180910390f35b6102e360048036038101906102de9190611168565b610612565b6040516102f09190611069565b60405180910390f35b606060038054610308906111d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610334906111d7565b80156103815780601f1061035657610100808354040283529160200191610381565b820191906000526020600020905b81548152906001019060200180831161036457829003601f168201915b5050505050905090565b600080610396610699565b90506103a38185856106a1565b600191505092915050565b6000600254905090565b6000806103c3610699565b90506103d085828561086a565b6103db8585856108f6565b60019150509392505050565b60006006905090565b6000806103fb610699565b905061041c81858561040d8589610612565b6104179190611237565b6106a1565b600191505092915050565b6104313382610b6c565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461048b906111d7565b80601f01602080910402602001604051908101604052809291908181526020018280546104b7906111d7565b80156105045780601f106104d957610100808354040283529160200191610504565b820191906000526020600020905b8154815290600101906020018083116104e757829003601f168201915b5050505050905090565b600061051933610434565b90506000811161055e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610555906112b7565b60405180910390fd5b6105683382610b6c565b50565b6105753382610d39565b50565b600080610583610699565b905060006105918286610612565b9050838110156105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90611349565b60405180910390fd5b6105e382868684036106a1565b60019250505092915050565b6000806105fa610699565b90506106078185856108f6565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610710576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610707906113db565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361077f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107769061146d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161085d9190611069565b60405180910390a3505050565b60006108768484610612565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108f057818110156108e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d9906114d9565b60405180910390fd5b6108ef84848484036106a1565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095c9061156b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cb906115fd565b60405180910390fd5b6109df838383610e8f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c9061168f565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b539190611069565b60405180910390a3610b66848484610e94565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd290611721565b60405180910390fd5b610be782600083610e8f565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c64906117b3565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d209190611069565b60405180910390a3610d3483600084610e94565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610da8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9f9061181f565b60405180910390fd5b610db460008383610e8f565b8060026000828254610dc69190611237565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e779190611069565b60405180910390a3610e8b60008383610e94565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ed3578082015181840152602081019050610eb8565b60008484015250505050565b6000601f19601f8301169050919050565b6000610efb82610e99565b610f058185610ea4565b9350610f15818560208601610eb5565b610f1e81610edf565b840191505092915050565b60006020820190508181036000830152610f438184610ef0565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f7b82610f50565b9050919050565b610f8b81610f70565b8114610f9657600080fd5b50565b600081359050610fa881610f82565b92915050565b6000819050919050565b610fc181610fae565b8114610fcc57600080fd5b50565b600081359050610fde81610fb8565b92915050565b60008060408385031215610ffb57610ffa610f4b565b5b600061100985828601610f99565b925050602061101a85828601610fcf565b9150509250929050565b60008115159050919050565b61103981611024565b82525050565b60006020820190506110546000830184611030565b92915050565b61106381610fae565b82525050565b600060208201905061107e600083018461105a565b92915050565b60008060006060848603121561109d5761109c610f4b565b5b60006110ab86828701610f99565b93505060206110bc86828701610f99565b92505060406110cd86828701610fcf565b9150509250925092565b600060ff82169050919050565b6110ed816110d7565b82525050565b600060208201905061110860008301846110e4565b92915050565b60006020828403121561112457611123610f4b565b5b600061113284828501610fcf565b91505092915050565b60006020828403121561115157611150610f4b565b5b600061115f84828501610f99565b91505092915050565b6000806040838503121561117f5761117e610f4b565b5b600061118d85828601610f99565b925050602061119e85828601610f99565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806111ef57607f821691505b602082108103611202576112016111a8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061124282610fae565b915061124d83610fae565b925082820190508082111561126557611264611208565b5b92915050565b7f4d6f636b555344433a204e6f7468696e6720746f206275726e00000000000000600082015250565b60006112a1601983610ea4565b91506112ac8261126b565b602082019050919050565b600060208201905081810360008301526112d081611294565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611333602583610ea4565b915061133e826112d7565b604082019050919050565b6000602082019050818103600083015261136281611326565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006113c5602483610ea4565b91506113d082611369565b604082019050919050565b600060208201905081810360008301526113f4816113b8565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611457602283610ea4565b9150611462826113fb565b604082019050919050565b600060208201905081810360008301526114868161144a565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006114c3601d83610ea4565b91506114ce8261148d565b602082019050919050565b600060208201905081810360008301526114f2816114b6565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611555602583610ea4565b9150611560826114f9565b604082019050919050565b6000602082019050818103600083015261158481611548565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006115e7602383610ea4565b91506115f28261158b565b604082019050919050565b60006020820190508181036000830152611616816115da565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611679602683610ea4565b91506116848261161d565b604082019050919050565b600060208201905081810360008301526116a88161166c565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061170b602183610ea4565b9150611716826116af565b604082019050919050565b6000602082019050818103600083015261173a816116fe565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061179d602283610ea4565b91506117a882611741565b604082019050919050565b600060208201905081810360008301526117cc81611790565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611809601f83610ea4565b9150611814826117d3565b602082019050919050565b60006020820190508181036000830152611838816117fc565b905091905056fea2646970667358221220d53356e0ebed2b51ba001fb0a2a2e9481467cc5985089c6f37d7346f346f8ecb64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA0712D68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2C9 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0x9975038C EQ PUSH2 0x243 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1D9 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x13D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x127 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x122 SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x38B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x145 PUSH2 0x3AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x175 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x3B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x193 PUSH2 0x3E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0x10F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x3F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EE SWAP2 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH2 0x427 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x20F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20A SWAP2 SWAP1 PUSH2 0x113B JUMP JUMPDEST PUSH2 0x434 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21C SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22D PUSH2 0x47C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23A SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24B PUSH2 0x50E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x267 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x262 SWAP2 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH2 0x56B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x283 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27E SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x578 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x290 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AE SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C0 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DE SWAP2 SWAP1 PUSH2 0x1168 JUMP JUMPDEST PUSH2 0x612 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F0 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x308 SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x334 SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x381 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x356 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x381 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x364 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x396 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A3 DUP2 DUP6 DUP6 PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C3 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x3D0 DUP6 DUP3 DUP6 PUSH2 0x86A JUMP JUMPDEST PUSH2 0x3DB DUP6 DUP6 DUP6 PUSH2 0x8F6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3FB PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x41C DUP2 DUP6 DUP6 PUSH2 0x40D DUP6 DUP10 PUSH2 0x612 JUMP JUMPDEST PUSH2 0x417 SWAP2 SWAP1 PUSH2 0x1237 JUMP JUMPDEST PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x431 CALLER DUP3 PUSH2 0xB6C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x48B SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4B7 SWAP1 PUSH2 0x11D7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x504 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x504 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4E7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 CALLER PUSH2 0x434 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x555 SWAP1 PUSH2 0x12B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x568 CALLER DUP3 PUSH2 0xB6C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x575 CALLER DUP3 PUSH2 0xD39 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x583 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x591 DUP3 DUP7 PUSH2 0x612 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CD SWAP1 PUSH2 0x1349 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E3 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5FA PUSH2 0x699 JUMP JUMPDEST SWAP1 POP PUSH2 0x607 DUP2 DUP6 DUP6 PUSH2 0x8F6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x710 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x707 SWAP1 PUSH2 0x13DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x77F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x776 SWAP1 PUSH2 0x146D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x85D SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x876 DUP5 DUP5 PUSH2 0x612 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x8F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x8E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D9 SWAP1 PUSH2 0x14D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8EF DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x6A1 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x965 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x95C SWAP1 PUSH2 0x156B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9CB SWAP1 PUSH2 0x15FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9DF DUP4 DUP4 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xA65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA5C SWAP1 PUSH2 0x168F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xB53 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xB66 DUP5 DUP5 DUP5 PUSH2 0xE94 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBDB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD2 SWAP1 PUSH2 0x1721 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBE7 DUP3 PUSH1 0x0 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xC6D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC64 SWAP1 PUSH2 0x17B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xD20 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xD34 DUP4 PUSH1 0x0 DUP5 PUSH2 0xE94 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD9F SWAP1 PUSH2 0x181F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDB4 PUSH1 0x0 DUP4 DUP4 PUSH2 0xE8F JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xDC6 SWAP2 SWAP1 PUSH2 0x1237 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xE77 SWAP2 SWAP1 PUSH2 0x1069 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xE8B PUSH1 0x0 DUP4 DUP4 PUSH2 0xE94 JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xED3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFB DUP3 PUSH2 0xE99 JUMP JUMPDEST PUSH2 0xF05 DUP2 DUP6 PUSH2 0xEA4 JUMP JUMPDEST SWAP4 POP PUSH2 0xF15 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xEB5 JUMP JUMPDEST PUSH2 0xF1E DUP2 PUSH2 0xEDF JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF43 DUP2 DUP5 PUSH2 0xEF0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF7B DUP3 PUSH2 0xF50 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF8B DUP2 PUSH2 0xF70 JUMP JUMPDEST DUP2 EQ PUSH2 0xF96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFA8 DUP2 PUSH2 0xF82 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFC1 DUP2 PUSH2 0xFAE JUMP JUMPDEST DUP2 EQ PUSH2 0xFCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFDE DUP2 PUSH2 0xFB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFFB JUMPI PUSH2 0xFFA PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1009 DUP6 DUP3 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x101A DUP6 DUP3 DUP7 ADD PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1039 DUP2 PUSH2 0x1024 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1054 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1030 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1063 DUP2 PUSH2 0xFAE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x107E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x105A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x109D JUMPI PUSH2 0x109C PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10AB DUP7 DUP3 DUP8 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x10BC DUP7 DUP3 DUP8 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x10CD DUP7 DUP3 DUP8 ADD PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10ED DUP2 PUSH2 0x10D7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1108 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x10E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1124 JUMPI PUSH2 0x1123 PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP5 DUP3 DUP6 ADD PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1151 JUMPI PUSH2 0x1150 PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x115F DUP5 DUP3 DUP6 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x117F JUMPI PUSH2 0x117E PUSH2 0xF4B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x118D DUP6 DUP3 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x119E DUP6 DUP3 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x11EF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1202 JUMPI PUSH2 0x1201 PUSH2 0x11A8 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1242 DUP3 PUSH2 0xFAE JUMP JUMPDEST SWAP2 POP PUSH2 0x124D DUP4 PUSH2 0xFAE JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1265 JUMPI PUSH2 0x1264 PUSH2 0x1208 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D6F636B555344433A204E6F7468696E6720746F206275726E00000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12A1 PUSH1 0x19 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x12AC DUP3 PUSH2 0x126B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12D0 DUP2 PUSH2 0x1294 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1333 PUSH1 0x25 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x133E DUP3 PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1362 DUP2 PUSH2 0x1326 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13C5 PUSH1 0x24 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x13D0 DUP3 PUSH2 0x1369 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x13F4 DUP2 PUSH2 0x13B8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1457 PUSH1 0x22 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1462 DUP3 PUSH2 0x13FB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1486 DUP2 PUSH2 0x144A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14C3 PUSH1 0x1D DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x14CE DUP3 PUSH2 0x148D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14F2 DUP2 PUSH2 0x14B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1555 PUSH1 0x25 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1560 DUP3 PUSH2 0x14F9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1584 DUP2 PUSH2 0x1548 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E7 PUSH1 0x23 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x15F2 DUP3 PUSH2 0x158B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1616 DUP2 PUSH2 0x15DA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1679 PUSH1 0x26 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1684 DUP3 PUSH2 0x161D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16A8 DUP2 PUSH2 0x166C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170B PUSH1 0x21 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1716 DUP3 PUSH2 0x16AF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x173A DUP2 PUSH2 0x16FE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x179D PUSH1 0x22 DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x17A8 DUP3 PUSH2 0x1741 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17CC DUP2 PUSH2 0x1790 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1809 PUSH1 0x1F DUP4 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1814 DUP3 PUSH2 0x17D3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1838 DUP2 PUSH2 0x17FC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 CALLER JUMP 0xE0 0xEB 0xED 0x2B MLOAD 0xBA STOP 0x1F 0xB0 LOG2 LOG2 0xE9 BASEFEE EQ PUSH8 0xCC5985089C6F37D7 CALLVALUE PUSH16 0x346F8ECB64736F6C6343000812003300 ","sourceMap":"161:546:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3242:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5190:286;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;243:90:22;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5871:234:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;428:83:22;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3406:125:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2365:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;517:188:22;;;:::i;:::-;;339:83;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6592:427:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3727:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3974:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2154:98;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;4530:13;4546:12;:10;:12::i;:::-;4530:28;;4568:32;4577:5;4584:7;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;:::o;3242:106::-;3303:7;3329:12;;3322:19;;3242:106;:::o;5190:286::-;5317:4;5333:15;5351:12;:10;:12::i;:::-;5333:30;;5373:38;5389:4;5395:7;5404:6;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;5465:4;5458:11;;;5190:286;;;;;:::o;243:90:22:-;301:5;325:1;318:8;;243:90;:::o;5871:234:12:-;5959:4;5975:13;5991:12;:10;:12::i;:::-;5975:28;;6013:64;6022:5;6029:7;6066:10;6038:25;6048:5;6055:7;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;:::-;6094:4;6087:11;;;5871:234;;;;:::o;428:83:22:-;478:26;484:10;496:7;478:5;:26::i;:::-;428:83;:::o;3406:125:12:-;3480:7;3506:9;:18;3516:7;3506:18;;;;;;;;;;;;;;;;3499:25;;3406:125;;;:::o;2365:102::-;2421:13;2453:7;2446:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:102;:::o;517:188:22:-;555:18;576:21;586:10;576:9;:21::i;:::-;555:42;;628:1;615:10;:14;607:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;669:29;675:10;687;669:5;:29::i;:::-;545:160;517:188::o;339:83::-;389:26;395:10;407:7;389:5;:26::i;:::-;339:83;:::o;6592:427:12:-;6685:4;6701:13;6717:12;:10;:12::i;:::-;6701:28;;6739:24;6766:25;6776:5;6783:7;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;:::-;7008:4;7001:11;;;;6592:427;;;;:::o;3727:189::-;3806:4;3822:13;3838:12;:10;:12::i;:::-;3822:28;;3860;3870:5;3877:2;3881:6;3860:9;:28::i;:::-;3905:4;3898:11;;;3727:189;;;;:::o;3974:149::-;4063:7;4089:11;:18;4101:5;4089:18;;;;;;;;;;;;;;;:27;4108:7;4089:27;;;;;;;;;;;;;;;;4082:34;;3974:149;;;;:::o;640:96:15:-;693:7;719:10;712:17;;640:96;:::o;10504:370:12:-;10652:1;10635:19;;:5;:19;;;10627:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10732:1;10713:21;;:7;:21;;;10705:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10814:6;10784:11;:18;10796:5;10784:18;;;;;;;;;;;;;;;:27;10803:7;10784:27;;;;;;;;;;;;;;;:36;;;;10851:7;10835:32;;10844:5;10835:32;;;10860:6;10835:32;;;;;;:::i;:::-;;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;11371:17;11351:16;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11347:243;11275:321;11155:441;;;:::o;7473:818::-;7615:1;7599:18;;:4;:18;;;7591:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;7691:1;7677:16;;:2;:16;;;7669:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;7744:38;7765:4;7771:2;7775:6;7744:20;:38::i;:::-;7793:19;7815:9;:15;7825:4;7815:15;;;;;;;;;;;;;;;;7793:37;;7863:6;7848:11;:21;;7840:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;7978:6;7964:11;:20;7946:9;:15;7956:4;7946:15;;;;;;;;;;;;;;;:38;;;;8178:6;8161:9;:13;8171:2;8161:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8225:2;8210:26;;8219:4;8210:26;;;8229:6;8210:26;;;;;;:::i;:::-;;;;;;;;8247:37;8267:4;8273:2;8277:6;8247:19;:37::i;:::-;7581:710;7473:818;;;:::o;9422:659::-;9524:1;9505:21;;:7;:21;;;9497:67;;;;;;;;;;;;:::i;:::-;;;;;;;;;9575:49;9596:7;9613:1;9617:6;9575:20;:49::i;:::-;9635:22;9660:9;:18;9670:7;9660:18;;;;;;;;;;;;;;;;9635:43;;9714:6;9696:14;:24;;9688:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;9831:6;9814:14;:23;9793:9;:18;9803:7;9793:18;;;;;;;;;;;;;;;:44;;;;9946:6;9930:12;;:22;;;;;;;;;;;10004:1;9978:37;;9987:7;9978:37;;;10008:6;9978:37;;;;;;:::i;:::-;;;;;;;;10026:48;10046:7;10063:1;10067:6;10026:19;:48::i;:::-;9487:594;9422:659;;:::o;8567:535::-;8669:1;8650:21;;:7;:21;;;8642:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;8718:49;8747:1;8751:7;8760:6;8718:20;:49::i;:::-;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;;;;;8968:6;8946:9;:18;8956:7;8946:18;;;;;;;;;;;;;;;;:28;;;;;;;;;;;9020:7;8999:37;;9016:1;8999:37;;;9029:6;8999:37;;;;;;:::i;:::-;;;;;;;;9047:48;9075:1;9079:7;9088:6;9047:19;:48::i;:::-;8567:535;;:::o;12180:121::-;;;;:::o;12889:120::-;;;;:::o;7:99:23:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1430:117::-;1539:1;1536;1529:12;1676:126;1713:7;1753:42;1746:5;1742:54;1731:65;;1676:126;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:122::-;1983:24;2001:5;1983:24;:::i;:::-;1976:5;1973:35;1963:63;;2022:1;2019;2012:12;1963:63;1910:122;:::o;2038:139::-;2084:5;2122:6;2109:20;2100:29;;2138:33;2165:5;2138:33;:::i;:::-;2038:139;;;;:::o;2183:77::-;2220:7;2249:5;2238:16;;2183:77;;;:::o;2266:122::-;2339:24;2357:5;2339:24;:::i;:::-;2332:5;2329:35;2319:63;;2378:1;2375;2368:12;2319:63;2266:122;:::o;2394:139::-;2440:5;2478:6;2465:20;2456:29;;2494:33;2521:5;2494:33;:::i;:::-;2394:139;;;;:::o;2539:474::-;2607:6;2615;2664:2;2652:9;2643:7;2639:23;2635:32;2632:119;;;2670:79;;:::i;:::-;2632:119;2790:1;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2761:117;2917:2;2943:53;2988:7;2979:6;2968:9;2964:22;2943:53;:::i;:::-;2933:63;;2888:118;2539:474;;;;;:::o;3019:90::-;3053:7;3096:5;3089:13;3082:21;3071:32;;3019:90;;;:::o;3115:109::-;3196:21;3211:5;3196:21;:::i;:::-;3191:3;3184:34;3115:109;;:::o;3230:210::-;3317:4;3355:2;3344:9;3340:18;3332:26;;3368:65;3430:1;3419:9;3415:17;3406:6;3368:65;:::i;:::-;3230:210;;;;:::o;3446:118::-;3533:24;3551:5;3533:24;:::i;:::-;3528:3;3521:37;3446:118;;:::o;3570:222::-;3663:4;3701:2;3690:9;3686:18;3678:26;;3714:71;3782:1;3771:9;3767:17;3758:6;3714:71;:::i;:::-;3570:222;;;;:::o;3798:619::-;3875:6;3883;3891;3940:2;3928:9;3919:7;3915:23;3911:32;3908:119;;;3946:79;;:::i;:::-;3908:119;4066:1;4091:53;4136:7;4127:6;4116:9;4112:22;4091:53;:::i;:::-;4081:63;;4037:117;4193:2;4219:53;4264:7;4255:6;4244:9;4240:22;4219:53;:::i;:::-;4209:63;;4164:118;4321:2;4347:53;4392:7;4383:6;4372:9;4368:22;4347:53;:::i;:::-;4337:63;;4292:118;3798:619;;;;;:::o;4423:86::-;4458:7;4498:4;4491:5;4487:16;4476:27;;4423:86;;;:::o;4515:112::-;4598:22;4614:5;4598:22;:::i;:::-;4593:3;4586:35;4515:112;;:::o;4633:214::-;4722:4;4760:2;4749:9;4745:18;4737:26;;4773:67;4837:1;4826:9;4822:17;4813:6;4773:67;:::i;:::-;4633:214;;;;:::o;4853:329::-;4912:6;4961:2;4949:9;4940:7;4936:23;4932:32;4929:119;;;4967:79;;:::i;:::-;4929:119;5087:1;5112:53;5157:7;5148:6;5137:9;5133:22;5112:53;:::i;:::-;5102:63;;5058:117;4853:329;;;;:::o;5188:::-;5247:6;5296:2;5284:9;5275:7;5271:23;5267:32;5264:119;;;5302:79;;:::i;:::-;5264:119;5422:1;5447:53;5492:7;5483:6;5472:9;5468:22;5447:53;:::i;:::-;5437:63;;5393:117;5188:329;;;;:::o;5523:474::-;5591:6;5599;5648:2;5636:9;5627:7;5623:23;5619:32;5616:119;;;5654:79;;:::i;:::-;5616:119;5774:1;5799:53;5844:7;5835:6;5824:9;5820:22;5799:53;:::i;:::-;5789:63;;5745:117;5901:2;5927:53;5972:7;5963:6;5952:9;5948:22;5927:53;:::i;:::-;5917:63;;5872:118;5523:474;;;;;:::o;6003:180::-;6051:77;6048:1;6041:88;6148:4;6145:1;6138:15;6172:4;6169:1;6162:15;6189:320;6233:6;6270:1;6264:4;6260:12;6250:22;;6317:1;6311:4;6307:12;6338:18;6328:81;;6394:4;6386:6;6382:17;6372:27;;6328:81;6456:2;6448:6;6445:14;6425:18;6422:38;6419:84;;6475:18;;:::i;:::-;6419:84;6240:269;6189:320;;;:::o;6515:180::-;6563:77;6560:1;6553:88;6660:4;6657:1;6650:15;6684:4;6681:1;6674:15;6701:191;6741:3;6760:20;6778:1;6760:20;:::i;:::-;6755:25;;6794:20;6812:1;6794:20;:::i;:::-;6789:25;;6837:1;6834;6830:9;6823:16;;6858:3;6855:1;6852:10;6849:36;;;6865:18;;:::i;:::-;6849:36;6701:191;;;;:::o;6898:175::-;7038:27;7034:1;7026:6;7022:14;7015:51;6898:175;:::o;7079:366::-;7221:3;7242:67;7306:2;7301:3;7242:67;:::i;:::-;7235:74;;7318:93;7407:3;7318:93;:::i;:::-;7436:2;7431:3;7427:12;7420:19;;7079:366;;;:::o;7451:419::-;7617:4;7655:2;7644:9;7640:18;7632:26;;7704:9;7698:4;7694:20;7690:1;7679:9;7675:17;7668:47;7732:131;7858:4;7732:131;:::i;:::-;7724:139;;7451:419;;;:::o;7876:224::-;8016:34;8012:1;8004:6;8000:14;7993:58;8085:7;8080:2;8072:6;8068:15;8061:32;7876:224;:::o;8106:366::-;8248:3;8269:67;8333:2;8328:3;8269:67;:::i;:::-;8262:74;;8345:93;8434:3;8345:93;:::i;:::-;8463:2;8458:3;8454:12;8447:19;;8106:366;;;:::o;8478:419::-;8644:4;8682:2;8671:9;8667:18;8659:26;;8731:9;8725:4;8721:20;8717:1;8706:9;8702:17;8695:47;8759:131;8885:4;8759:131;:::i;:::-;8751:139;;8478:419;;;:::o;8903:223::-;9043:34;9039:1;9031:6;9027:14;9020:58;9112:6;9107:2;9099:6;9095:15;9088:31;8903:223;:::o;9132:366::-;9274:3;9295:67;9359:2;9354:3;9295:67;:::i;:::-;9288:74;;9371:93;9460:3;9371:93;:::i;:::-;9489:2;9484:3;9480:12;9473:19;;9132:366;;;:::o;9504:419::-;9670:4;9708:2;9697:9;9693:18;9685:26;;9757:9;9751:4;9747:20;9743:1;9732:9;9728:17;9721:47;9785:131;9911:4;9785:131;:::i;:::-;9777:139;;9504:419;;;:::o;9929:221::-;10069:34;10065:1;10057:6;10053:14;10046:58;10138:4;10133:2;10125:6;10121:15;10114:29;9929:221;:::o;10156:366::-;10298:3;10319:67;10383:2;10378:3;10319:67;:::i;:::-;10312:74;;10395:93;10484:3;10395:93;:::i;:::-;10513:2;10508:3;10504:12;10497:19;;10156:366;;;:::o;10528:419::-;10694:4;10732:2;10721:9;10717:18;10709:26;;10781:9;10775:4;10771:20;10767:1;10756:9;10752:17;10745:47;10809:131;10935:4;10809:131;:::i;:::-;10801:139;;10528:419;;;:::o;10953:179::-;11093:31;11089:1;11081:6;11077:14;11070:55;10953:179;:::o;11138:366::-;11280:3;11301:67;11365:2;11360:3;11301:67;:::i;:::-;11294:74;;11377:93;11466:3;11377:93;:::i;:::-;11495:2;11490:3;11486:12;11479:19;;11138:366;;;:::o;11510:419::-;11676:4;11714:2;11703:9;11699:18;11691:26;;11763:9;11757:4;11753:20;11749:1;11738:9;11734:17;11727:47;11791:131;11917:4;11791:131;:::i;:::-;11783:139;;11510:419;;;:::o;11935:224::-;12075:34;12071:1;12063:6;12059:14;12052:58;12144:7;12139:2;12131:6;12127:15;12120:32;11935:224;:::o;12165:366::-;12307:3;12328:67;12392:2;12387:3;12328:67;:::i;:::-;12321:74;;12404:93;12493:3;12404:93;:::i;:::-;12522:2;12517:3;12513:12;12506:19;;12165:366;;;:::o;12537:419::-;12703:4;12741:2;12730:9;12726:18;12718:26;;12790:9;12784:4;12780:20;12776:1;12765:9;12761:17;12754:47;12818:131;12944:4;12818:131;:::i;:::-;12810:139;;12537:419;;;:::o;12962:222::-;13102:34;13098:1;13090:6;13086:14;13079:58;13171:5;13166:2;13158:6;13154:15;13147:30;12962:222;:::o;13190:366::-;13332:3;13353:67;13417:2;13412:3;13353:67;:::i;:::-;13346:74;;13429:93;13518:3;13429:93;:::i;:::-;13547:2;13542:3;13538:12;13531:19;;13190:366;;;:::o;13562:419::-;13728:4;13766:2;13755:9;13751:18;13743:26;;13815:9;13809:4;13805:20;13801:1;13790:9;13786:17;13779:47;13843:131;13969:4;13843:131;:::i;:::-;13835:139;;13562:419;;;:::o;13987:225::-;14127:34;14123:1;14115:6;14111:14;14104:58;14196:8;14191:2;14183:6;14179:15;14172:33;13987:225;:::o;14218:366::-;14360:3;14381:67;14445:2;14440:3;14381:67;:::i;:::-;14374:74;;14457:93;14546:3;14457:93;:::i;:::-;14575:2;14570:3;14566:12;14559:19;;14218:366;;;:::o;14590:419::-;14756:4;14794:2;14783:9;14779:18;14771:26;;14843:9;14837:4;14833:20;14829:1;14818:9;14814:17;14807:47;14871:131;14997:4;14871:131;:::i;:::-;14863:139;;14590:419;;;:::o;15015:220::-;15155:34;15151:1;15143:6;15139:14;15132:58;15224:3;15219:2;15211:6;15207:15;15200:28;15015:220;:::o;15241:366::-;15383:3;15404:67;15468:2;15463:3;15404:67;:::i;:::-;15397:74;;15480:93;15569:3;15480:93;:::i;:::-;15598:2;15593:3;15589:12;15582:19;;15241:366;;;:::o;15613:419::-;15779:4;15817:2;15806:9;15802:18;15794:26;;15866:9;15860:4;15856:20;15852:1;15841:9;15837:17;15830:47;15894:131;16020:4;15894:131;:::i;:::-;15886:139;;15613:419;;;:::o;16038:221::-;16178:34;16174:1;16166:6;16162:14;16155:58;16247:4;16242:2;16234:6;16230:15;16223:29;16038:221;:::o;16265:366::-;16407:3;16428:67;16492:2;16487:3;16428:67;:::i;:::-;16421:74;;16504:93;16593:3;16504:93;:::i;:::-;16622:2;16617:3;16613:12;16606:19;;16265:366;;;:::o;16637:419::-;16803:4;16841:2;16830:9;16826:18;16818:26;;16890:9;16884:4;16880:20;16876:1;16865:9;16861:17;16854:47;16918:131;17044:4;16918:131;:::i;:::-;16910:139;;16637:419;;;:::o;17062:181::-;17202:33;17198:1;17190:6;17186:14;17179:57;17062:181;:::o;17249:366::-;17391:3;17412:67;17476:2;17471:3;17412:67;:::i;:::-;17405:74;;17488:93;17577:3;17488:93;:::i;:::-;17606:2;17601:3;17597:12;17590:19;;17249:366;;;:::o;17621:419::-;17787:4;17825:2;17814:9;17810:18;17802:26;;17874:9;17868:4;17864:20;17860:1;17849:9;17845:17;17838:47;17902:131;18028:4;17902:131;:::i;:::-;17894:139;;17621:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1252200","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2864","burn(uint256)":"infinite","burnAll()":"36156","decimals()":"388","decreaseAllowance(address,uint256)":"infinite","increaseAllowance(address,uint256)":"infinite","mint(uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2505","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnAll()":"9975038c","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","mint(uint256)":"a0712d68","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Mock mintable USDC\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockUSDC.sol\":\"MockUSDC\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/mocks/MockUSDC.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @dev Mock mintable USDC\\ncontract MockUSDC is ERC20 {\\n    constructor() ERC20(\\\"MockUDSC\\\", \\\"MUSDC\\\") {}\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 6;\\n    }\\n\\n    function mint(uint256 _amount) external {\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    function burn(uint256 _amount) external {\\n        _burn(msg.sender, _amount);\\n    }\\n\\n    function burnAll() external {\\n        uint256 _balanceOf = balanceOf(msg.sender);\\n        require(_balanceOf > 0, \\\"MockUSDC: Nothing to burn\\\");\\n        _burn(msg.sender, _balanceOf);\\n    }\\n}\\n\",\"keccak256\":\"0xd2bac289fadc42d6f188759f47c5debd8fec7fbe648b853feaf950a4ec0ada24\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2828,"contract":"contracts/mocks/MockUSDC.sol:MockUSDC","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":2834,"contract":"contracts/mocks/MockUSDC.sol:MockUSDC","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":2836,"contract":"contracts/mocks/MockUSDC.sol:MockUSDC","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":2838,"contract":"contracts/mocks/MockUSDC.sol:MockUSDC","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":2840,"contract":"contracts/mocks/MockUSDC.sol:MockUSDC","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}